
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000441c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080045b4  080045b4  000145b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004664  08004664  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004664  08004664  00014664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800466c  0800466c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800466c  0800466c  0001466c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004670  08004670  00014670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000074  080046e8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080046e8  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00013325  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00023d41  00000000  00000000  000333c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fe4  00000000  00000000  0005710a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000eb0  00000000  00000000  0005c0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a9451  00000000  00000000  0005cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000d98  00000000  00000000  001063f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001dad3  00000000  00000000  00107190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124c63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d0  00000000  00000000  00124cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800459c 	.word	0x0800459c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	0800459c 	.word	0x0800459c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004f2:	490e      	ldr	r1, [pc, #56]	; (800052c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000508:	4c0b      	ldr	r4, [pc, #44]	; (8000538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000516:	f000 fe29 	bl	800116c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051a:	f003 ff07 	bl	800432c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800051e:	f000 fa6f 	bl	8000a00 <main>
  bx  lr    
 8000522:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000530:	08004674 	.word	0x08004674
  ldr r2, =_sbss
 8000534:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000538:	200002a0 	.word	0x200002a0

0800053c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800053c:	e7fe      	b.n	800053c <DMA1_Stream0_IRQHandler>
	...

08000540 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b098      	sub	sp, #96	; 0x60
 8000544:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000546:	4b6a      	ldr	r3, [pc, #424]	; (80006f0 <_Z16SystemInitializev+0x1b0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a69      	ldr	r2, [pc, #420]	; (80006f0 <_Z16SystemInitializev+0x1b0>)
 800054c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000550:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000552:	4b67      	ldr	r3, [pc, #412]	; (80006f0 <_Z16SystemInitializev+0x1b0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a66      	ldr	r2, [pc, #408]	; (80006f0 <_Z16SystemInitializev+0x1b0>)
 8000558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055c:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800055e:	4b64      	ldr	r3, [pc, #400]	; (80006f0 <_Z16SystemInitializev+0x1b0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a63      	ldr	r2, [pc, #396]	; (80006f0 <_Z16SystemInitializev+0x1b0>)
 8000564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000568:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056a:	2003      	movs	r0, #3
 800056c:	f001 fb2c 	bl	8001bc8 <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fe0d 	bl	8001190 <HAL_InitTick>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	bf14      	ite	ne
 800057c:	2301      	movne	r3, #1
 800057e:	2300      	moveq	r3, #0
 8000580:	b2db      	uxtb	r3, r3
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 8000586:	2301      	movs	r3, #1
 8000588:	e0ad      	b.n	80006e6 <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	61bb      	str	r3, [r7, #24]
 800058e:	4b59      	ldr	r3, [pc, #356]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	4a58      	ldr	r2, [pc, #352]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 8000594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000598:	6413      	str	r3, [r2, #64]	; 0x40
 800059a:	4b56      	ldr	r3, [pc, #344]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 800059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a2:	61bb      	str	r3, [r7, #24]
 80005a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	4b53      	ldr	r3, [pc, #332]	; (80006f8 <_Z16SystemInitializev+0x1b8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a52      	ldr	r2, [pc, #328]	; (80006f8 <_Z16SystemInitializev+0x1b8>)
 80005b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b4:	6013      	str	r3, [r2, #0]
 80005b6:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <_Z16SystemInitializev+0x1b8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005be:	617b      	str	r3, [r7, #20]
 80005c0:	697b      	ldr	r3, [r7, #20]
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 100MHz clock
  //NOTE: HSE Oscillator provided on STM32F411RE Nucleo 64 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80005c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fee8 	bl	80043a0 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80005d0:	2301      	movs	r3, #1
 80005d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 80005d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80005da:	2302      	movs	r3, #2
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 80005de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 80005e8:	2332      	movs	r3, #50	; 0x32
 80005ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 80005f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fdf5 	bl	80021e8 <HAL_RCC_OscConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2db      	uxtb	r3, r3
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 800060e:	2301      	movs	r3, #1
 8000610:	e069      	b.n	80006e6 <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
 8000616:	4b37      	ldr	r3, [pc, #220]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	4a36      	ldr	r2, [pc, #216]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 800061c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000620:	6453      	str	r3, [r2, #68]	; 0x44
 8000622:	4b34      	ldr	r3, [pc, #208]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 800063e:	230f      	movs	r3, #15
 8000640:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 8000642:	2302      	movs	r3, #2
 8000644:	623b      	str	r3, [r7, #32]

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 8000646:	2300      	movs	r3, #0
 8000648:	627b      	str	r3, [r7, #36]	; 0x24

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	62bb      	str	r3, [r7, #40]	; 0x28
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 100MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 8000650:	2300      	movs	r3, #0
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	2104      	movs	r1, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f002 f83c 	bl	80026d8 <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 8000670:	2301      	movs	r3, #1
 8000672:	e038      	b.n	80006e6 <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	4a1d      	ldr	r2, [pc, #116]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 800067e:	f043 0301 	orr.w	r3, r3, #1
 8000682:	6313      	str	r3, [r2, #48]	; 0x30
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	f003 0301 	and.w	r3, r3, #1
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 0302 	and.w	r3, r3, #2
 80006a8:	60bb      	str	r3, [r7, #8]
 80006aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	6313      	str	r3, [r2, #48]	; 0x30
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 80006d2:	f043 0308 	orr.w	r3, r3, #8
 80006d6:	6313      	str	r3, [r2, #48]	; 0x30
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <_Z16SystemInitializev+0x1b4>)
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	f003 0308 	and.w	r3, r3, #8
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3760      	adds	r7, #96	; 0x60
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40023c00 	.word	0x40023c00
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <_ZN7QAD_ADCC1Ev>:
	uint8_t                 m_uDataIdx;


	//-----------
	//Constructor
	QAD_ADC() :
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_sTIMHandle({0}),
		m_sADCHandle({0}),
		m_uChannelCount(0) {}
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2200      	movs	r2, #0
 800070e:	705a      	strb	r2, [r3, #1]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	330c      	adds	r3, #12
 8000714:	2248      	movs	r2, #72	; 0x48
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fe41 	bl	80043a0 <memset>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	3354      	adds	r3, #84	; 0x54
 8000722:	2248      	movs	r2, #72	; 0x48
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fe3a 	bl	80043a0 <memset>
 800072c:	230f      	movs	r3, #15
 800072e:	2b00      	cmp	r3, #0
 8000730:	db01      	blt.n	8000736 <_ZN7QAD_ADCC1Ev+0x3a>
 8000732:	3b01      	subs	r3, #1
 8000734:	e7fb      	b.n	800072e <_ZN7QAD_ADCC1Ev+0x32>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2200      	movs	r2, #0
 800073a:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <_ZN7QAD_ADC3getEv>:


	  //-----------------
	  //Singleton Methods

	static QAD_ADC& get(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
		static QAD_ADC instance;
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_ZN7QAD_ADC3getEv+0x48>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	f3bf 8f5b 	dmb	ish
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	2b00      	cmp	r3, #0
 800075c:	bf0c      	ite	eq
 800075e:	2301      	moveq	r3, #1
 8000760:	2300      	movne	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d010      	beq.n	800078a <_ZN7QAD_ADC3getEv+0x42>
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <_ZN7QAD_ADC3getEv+0x48>)
 800076a:	f003 fd91 	bl	8004290 <__cxa_guard_acquire>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	bf14      	ite	ne
 8000774:	2301      	movne	r3, #1
 8000776:	2300      	moveq	r3, #0
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d005      	beq.n	800078a <_ZN7QAD_ADC3getEv+0x42>
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <_ZN7QAD_ADC3getEv+0x4c>)
 8000780:	f7ff ffbc 	bl	80006fc <_ZN7QAD_ADCC1Ev>
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <_ZN7QAD_ADC3getEv+0x48>)
 8000786:	f003 fd8f 	bl	80042a8 <__cxa_guard_release>
		return instance;
 800078a:	4b02      	ldr	r3, [pc, #8]	; (8000794 <_ZN7QAD_ADC3getEv+0x4c>)
	}
 800078c:	4618      	mov	r0, r3
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000250 	.word	0x20000250
 8000794:	20000090 	.word	0x20000090

08000798 <_ZN7QAD_ADC7handlerEv>:


	  //--------------
	  //Handler Method

	static void handler(void) {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
		get().imp_handler();
 800079c:	f7ff ffd4 	bl	8000748 <_ZN7QAD_ADC3getEv>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f002 fcbc 	bl	8003120 <_ZN7QAD_ADC11imp_handlerEv>
	}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0

}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr
	...

080007bc <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <HardFault_Handler+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fe9f 	bl	8003508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007ca:	e7fe      	b.n	80007ca <HardFault_Handler+0xe>
 80007cc:	20000254 	.word	0x20000254

080007d0 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007d4:	4b02      	ldr	r3, [pc, #8]	; (80007e0 <MemManage_Handler+0x10>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f002 fe95 	bl	8003508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007de:	e7fe      	b.n	80007de <MemManage_Handler+0xe>
 80007e0:	20000254 	.word	0x20000254

080007e4 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <BusFault_Handler+0x10>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f002 fe8b 	bl	8003508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007f2:	e7fe      	b.n	80007f2 <BusFault_Handler+0xe>
 80007f4:	20000254 	.word	0x20000254

080007f8 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007fc:	4b02      	ldr	r3, [pc, #8]	; (8000808 <UsageFault_Handler+0x10>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f002 fe81 	bl	8003508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 8000806:	e7fe      	b.n	8000806 <UsageFault_Handler+0xe>
 8000808:	20000254 	.word	0x20000254

0800080c <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0

}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0

}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800083a:	f000 fcd9 	bl	80011f0 <HAL_IncTick>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Function
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 8000848:	4b03      	ldr	r3, [pc, #12]	; (8000858 <USART2_IRQHandler+0x14>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f003 fa62 	bl	8003d18 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000258 	.word	0x20000258

0800085c <ADC_IRQHandler>:


//ADC_IRQHandler
//Interrupt Handler Function
void ADC_IRQHandler(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  QAD_ADC::handler();
 8000860:	f7ff ff9a 	bl	8000798 <_ZN7QAD_ADC7handlerEv>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <EXTI15_10_IRQHandler>:


//EXTI15_10_IRQHandler
//Interrupt Handler Function
void EXTI15_10_IRQHandler(void) {
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0

	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET) {
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <EXTI15_10_IRQHandler+0x2c>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf14      	ite	ne
 8000878:	2301      	movne	r3, #1
 800087a:	2300      	moveq	r3, #0
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d003      	beq.n	800088a <EXTI15_10_IRQHandler+0x22>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <EXTI15_10_IRQHandler+0x2c>)
 8000884:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000888:	615a      	str	r2, [r3, #20]
	}
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	40013c00 	.word	0x40013c00

08000898 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	460b      	mov	r3, r1
 80008a2:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 80008a4:	887a      	ldrh	r2, [r7, #2]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f986 	bl	8000bbc <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	887a      	ldrh	r2, [r7, #2]
 80008b4:	809a      	strh	r2, [r3, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	80da      	strh	r2, [r3, #6]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	811a      	strh	r2, [r3, #8]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4603      	mov	r3, r0
 80008dc:	817b      	strh	r3, [r7, #10]
 80008de:	460b      	mov	r3, r1
 80008e0:	813b      	strh	r3, [r7, #8]
 80008e2:	4613      	mov	r3, r2
 80008e4:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 80008e6:	4a12      	ldr	r2, [pc, #72]	; (8000930 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	3304      	adds	r3, #4
 80008f0:	f107 020a 	add.w	r2, r7, #10
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f97c 	bl	8000bf4 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3308      	adds	r3, #8
 8000900:	f107 0208 	add.w	r2, r7, #8
 8000904:	4611      	mov	r1, r2
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f974 	bl	8000bf4 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2200      	movs	r2, #0
 8000910:	731a      	strb	r2, [r3, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2200      	movs	r2, #0
 8000916:	735a      	strb	r2, [r3, #13]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2200      	movs	r2, #0
 800091c:	739a      	strb	r2, [r3, #14]
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	79fa      	ldrb	r2, [r7, #7]
 8000922:	73da      	strb	r2, [r3, #15]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	0800460c 	.word	0x0800460c

08000934 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	769a      	strb	r2, [r3, #26]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2225      	movs	r2, #37	; 0x25
 8000990:	76da      	strb	r2, [r3, #27]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	331c      	adds	r3, #28
 8000996:	2244      	movs	r2, #68	; 0x44
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f003 fd00 	bl	80043a0 <memset>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2200      	movs	r2, #0
 80009a4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	8b99      	ldrh	r1, [r3, #28]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	8bda      	ldrh	r2, [r3, #30]
 80009d0:	2300      	movs	r3, #0
 80009d2:	f7ff ff7b 	bl	80008cc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	741a      	strb	r2, [r3, #16]
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	3314      	adds	r3, #20
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f000 f91c 	bl	8000c2a <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	08004648 	.word	0x08004648

08000a00 <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b08f      	sub	sp, #60	; 0x3c
 8000a04:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000a06:	f7ff fd9b 	bl	8000540 <_Z16SystemInitializev>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf14      	ite	ne
 8000a10:	2301      	movne	r3, #1
 8000a12:	2300      	moveq	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d000      	beq.n	8000a1c <main+0x1c>
		while (1) {}
 8000a1a:	e7fe      	b.n	8000a1a <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000a1c:	2014      	movs	r0, #20
 8000a1e:	f003 fc46 	bl	80042ae <_Znwj>
 8000a22:	4603      	mov	r3, r0
 8000a24:	461c      	mov	r4, r3
 8000a26:	2220      	movs	r2, #32
 8000a28:	495c      	ldr	r1, [pc, #368]	; (8000b9c <main+0x19c>)
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	f002 fd4b 	bl	80034c6 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000a30:	4b5b      	ldr	r3, [pc, #364]	; (8000ba0 <main+0x1a0>)
 8000a32:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000a34:	2301      	movs	r3, #1
 8000a36:	713b      	strb	r3, [r7, #4]
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000a38:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000a3c:	60bb      	str	r3, [r7, #8]
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000a3e:	2308      	movs	r3, #8
 8000a40:	733b      	strb	r3, [r7, #12]
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000a42:	4b56      	ldr	r3, [pc, #344]	; (8000b9c <main+0x19c>)
 8000a44:	613b      	str	r3, [r7, #16]
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000a46:	2304      	movs	r3, #4
 8000a48:	82bb      	strh	r3, [r7, #20]
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000a4a:	2307      	movs	r3, #7
 8000a4c:	75bb      	strb	r3, [r7, #22]
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000a4e:	4b53      	ldr	r3, [pc, #332]	; (8000b9c <main+0x19c>)
 8000a50:	61bb      	str	r3, [r7, #24]
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000a52:	2308      	movs	r3, #8
 8000a54:	83bb      	strh	r3, [r7, #28]
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000a56:	2307      	movs	r3, #7
 8000a58:	77bb      	strb	r3, [r7, #30]
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000a5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a5e:	843b      	strh	r3, [r7, #32]
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a64:	847b      	strh	r3, [r7, #34]	; 0x22

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000a66:	2018      	movs	r0, #24
 8000a68:	f003 fc21 	bl	80042ae <_Znwj>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461c      	mov	r4, r3
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f7ff ffa1 	bl	80009bc <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000a7a:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <main+0x1a4>)
 8000a7c:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000a7e:	4b49      	ldr	r3, [pc, #292]	; (8000ba4 <main+0x1a4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f003 f927 	bl	8003cd8 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	2301      	moveq	r3, #1
 8000a92:	2300      	movne	r3, #0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d005      	beq.n	8000aa6 <main+0xa6>
  	GPIO_UserLED->on();
 8000a9a:	4b41      	ldr	r3, [pc, #260]	; (8000ba0 <main+0x1a0>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f002 fd32 	bl	8003508 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000aa4:	e7fe      	b.n	8000aa4 <main+0xa4>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <main+0x1a4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f003 f978 	bl	8003da0 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000ab0:	4b3c      	ldr	r3, [pc, #240]	; (8000ba4 <main+0x1a4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	493c      	ldr	r1, [pc, #240]	; (8000ba8 <main+0x1a8>)
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f003 f93e 	bl	8003d38 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  UART_STLink->txCR();
 8000abc:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <main+0x1a4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f003 f96d 	bl	8003da0 <_ZN19QAS_Serial_Dev_Base4txCREv>
  //-------
  //Standby
  //
  //Wake up using Wakeup pin 1 (Pin A0)
  //
  if (!__HAL_PWR_GET_FLAG(PWR_FLAG_WU)) {
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <main+0x1ac>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d020      	beq.n	8000b1e <main+0x11e>

    UART_STLink->txStringCR("Standby Test");
 8000adc:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <main+0x1a4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4933      	ldr	r1, [pc, #204]	; (8000bb0 <main+0x1b0>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f003 f928 	bl	8003d38 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
		UART_STLink->txStringCR("Going into standby...");
 8000ae8:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <main+0x1a4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4931      	ldr	r1, [pc, #196]	; (8000bb4 <main+0x1b4>)
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 f922 	bl	8003d38 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
		HAL_Delay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f000 fb9a 	bl	8001230 <HAL_Delay>

		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000afc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b00:	f001 fb46 	bl	8002190 <HAL_PWR_DisableWakeUpPin>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000b04:	4b29      	ldr	r3, [pc, #164]	; (8000bac <main+0x1ac>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a28      	ldr	r2, [pc, #160]	; (8000bac <main+0x1ac>)
 8000b0a:	f043 0304 	orr.w	r3, r3, #4
 8000b0e:	6013      	str	r3, [r2, #0]
		HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000b10:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b14:	f001 fb2a 	bl	800216c <HAL_PWR_EnableWakeUpPin>

		HAL_PWR_EnterSTANDBYMode();
 8000b18:	f001 fb4e 	bl	80021b8 <HAL_PWR_EnterSTANDBYMode>
 8000b1c:	e009      	b.n	8000b32 <main+0x132>

  } else {

		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);
 8000b1e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b22:	f001 fb35 	bl	8002190 <HAL_PWR_DisableWakeUpPin>
		UART_STLink->txStringCR("Wake up");
 8000b26:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <main+0x1a4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4923      	ldr	r1, [pc, #140]	; (8000bb8 <main+0x1b8>)
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 f903 	bl	8003d38 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000b32:	f000 fb71 	bl	8001218 <HAL_GetTick>
 8000b36:	6338      	str	r0, [r7, #48]	; 0x30
	uint32_t uOldTick = uNewTick;
 8000b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  //Create task timing variables
	uint32_t uHeartbeatTicks = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000b40:	f000 fb6a 	bl	8001218 <HAL_GetTick>
 8000b44:	6278      	str	r0, [r7, #36]	; 0x24
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b4a:	429a      	cmp	r2, r3
 8000b4c:	d012      	beq.n	8000b74 <main+0x174>
    	uOldTick = uNewTick;
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
    	uNewTick = uCurTick;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	633b      	str	r3, [r7, #48]	; 0x30
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d205      	bcs.n	8000b6a <main+0x16a>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	3b01      	subs	r3, #1
 8000b66:	637b      	str	r3, [r7, #52]	; 0x34
 8000b68:	e006      	b.n	8000b78 <main+0x178>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	637b      	str	r3, [r7, #52]	; 0x34
 8000b72:	e001      	b.n	8000b78 <main+0x178>
    	}

    } else {
    	uTicks = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	637b      	str	r3, [r7, #52]	; 0x34

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000b78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7c:	4413      	add	r3, r2
 8000b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000b86:	d3db      	bcc.n	8000b40 <main+0x140>
    	GPIO_UserLED->toggle();
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <main+0x1a0>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f002 fce1 	bl	8003554 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset heartbeat ticks
 8000b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b94:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    uCurTick = HAL_GetTick();
 8000b9a:	e7d1      	b.n	8000b40 <main+0x140>
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	20000254 	.word	0x20000254
 8000ba4:	20000258 	.word	0x20000258
 8000ba8:	080045b4 	.word	0x080045b4
 8000bac:	40007000 	.word	0x40007000
 8000bb0:	080045d4 	.word	0x080045d4
 8000bb4:	080045e4 	.word	0x080045e4
 8000bb8:	080045fc 	.word	0x080045fc

08000bbc <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000bc6:	683c      	ldr	r4, [r7, #0]
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f003 fb81 	bl	80042d0 <_Znaj>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	4602      	mov	r2, r0
 8000bd4:	1e63      	subs	r3, r4, #1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db04      	blt.n	8000be4 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000bda:	2100      	movs	r1, #0
 8000bdc:	7011      	strb	r1, [r2, #0]
 8000bde:	3201      	adds	r2, #1
 8000be0:	3b01      	subs	r3, #1
 8000be2:	e7f8      	b.n	8000bd6 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000be4:	4601      	mov	r1, r0
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f849 	bl	8000c7e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd90      	pop	{r4, r7, pc}

08000bf4 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000bf4:	b5b0      	push	{r4, r5, r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000bfe:	6838      	ldr	r0, [r7, #0]
 8000c00:	f000 f859 	bl	8000cb6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000c04:	4603      	mov	r3, r0
 8000c06:	881c      	ldrh	r4, [r3, #0]
 8000c08:	200c      	movs	r0, #12
 8000c0a:	f003 fb50 	bl	80042ae <_Znwj>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	461d      	mov	r5, r3
 8000c12:	4621      	mov	r1, r4
 8000c14:	4628      	mov	r0, r5
 8000c16:	f7ff fe3f 	bl	8000898 <_ZN14QAT_FIFOBufferC1Et>
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f000 f865 	bl	8000cec <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bdb0      	pop	{r4, r5, r7, pc}

08000c2a <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000c2a:	b5b0      	push	{r4, r5, r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000c34:	6838      	ldr	r0, [r7, #0]
 8000c36:	f000 f875 	bl	8000d24 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000c3a:	4605      	mov	r5, r0
 8000c3c:	2064      	movs	r0, #100	; 0x64
 8000c3e:	f003 fb36 	bl	80042ae <_Znwj>
 8000c42:	4603      	mov	r3, r0
 8000c44:	461c      	mov	r4, r3
 8000c46:	4629      	mov	r1, r5
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f7ff fe73 	bl	8000934 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000c4e:	4621      	mov	r1, r4
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 f882 	bl	8000d5a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bdb0      	pop	{r4, r5, r7, pc}

08000c5e <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
 8000c66:	6039      	str	r1, [r7, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	4611      	mov	r1, r2
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f88f 	bl	8000d92 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff ffe6 	bl	8000c5e <_ZNSt15__uniq_ptr_dataIhSt14default_deleteIA_hELb1ELb1EECI1St15__uniq_ptr_implIhS2_EEPh>
        { }
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4618      	mov	r0, r3
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f887 	bl	8000dba <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000cac:	4603      	mov	r3, r0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000cb6:	b480      	push	{r7}
 8000cb8:	b083      	sub	sp, #12
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <_ZNSt15__uniq_ptr_dataI14QAT_FIFOBufferSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f000 f886 	bl	8000dee <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6839      	ldr	r1, [r7, #0]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffe6 	bl	8000ccc <_ZNSt15__uniq_ptr_dataI14QAT_FIFOBufferSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f000 f87e 	bl	8000e16 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_ZNSt15__uniq_ptr_dataI8QAD_UARTSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 f87d 	bl	8000e4a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6839      	ldr	r1, [r7, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffe6 	bl	8000d3a <_ZNSt15__uniq_ptr_dataI8QAD_UARTSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4618      	mov	r0, r3
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 f875 	bl	8000e72 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b082      	sub	sp, #8
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
 8000d9a:	6039      	str	r1, [r7, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f881 	bl	8000ea6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f7ff ff79 	bl	8000c9c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000daa:	4602      	mov	r2, r0
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f87b 	bl	8000ec0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f87a 	bl	8000ed8 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8000de4:	4603      	mov	r3, r0
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 f877 	bl	8000eee <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff82 	bl	8000d0a <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8000e06:	4602      	mov	r2, r0
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 f871 	bl	8000f08 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 f870 	bl	8000f20 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8000e40:	4603      	mov	r3, r0
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f86d 	bl	8000f36 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff8b 	bl	8000d78 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8000e62:	4602      	mov	r2, r0
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f867 	bl	8000f50 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000e82:	4603      	mov	r3, r0
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f866 	bl	8000f68 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1ILb1ELb1EEEv>:
	tuple()
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 f864 	bl	8000f7e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3708      	adds	r7, #8
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff83 	bl	8000dd4 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f000 f850 	bl	8000f9e <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff8d 	bl	8000e30 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f000 f83c 	bl	8000fbe <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff97 	bl	8000e8c <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f000 f829 	bl	8000fde <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f831 	bl	8000ff6 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f833 	bl	8001012 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f83b 	bl	800102a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f83d 	bl	8001046 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f000 f845 	bl	800105e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 f847 	bl	800107a <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8000ff6:	b480      	push	{r7}
 8000ff8:	b083      	sub	sp, #12
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f838 	bl	8001090 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f829 	bl	80010a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	370c      	adds	r7, #12
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
	return 1;
 80010c0:	2301      	movs	r3, #1
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <_kill>:

int _kill(int pid, int sig)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80010d6:	f003 f923 	bl	8004320 <__errno>
 80010da:	4603      	mov	r3, r0
 80010dc:	2216      	movs	r2, #22
 80010de:	601a      	str	r2, [r3, #0]
	return -1;
 80010e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <_exit>:

void _exit (int status)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffe7 	bl	80010cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80010fe:	e7fe      	b.n	80010fe <_exit+0x12>

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001108:	4a14      	ldr	r2, [pc, #80]	; (800115c <_sbrk+0x5c>)
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <_sbrk+0x60>)
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <_sbrk+0x64>)
 800111e:	4a12      	ldr	r2, [pc, #72]	; (8001168 <_sbrk+0x68>)
 8001120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <_sbrk+0x64>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	429a      	cmp	r2, r3
 800112e:	d207      	bcs.n	8001140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001130:	f003 f8f6 	bl	8004320 <__errno>
 8001134:	4603      	mov	r3, r0
 8001136:	220c      	movs	r2, #12
 8001138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	e009      	b.n	8001154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <_sbrk+0x64>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <_sbrk+0x64>)
 8001150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20020000 	.word	0x20020000
 8001160:	00000400 	.word	0x00000400
 8001164:	2000025c 	.word	0x2000025c
 8001168:	200002a0 	.word	0x200002a0

0800116c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <SystemInit+0x20>)
 8001172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <SystemInit+0x20>)
 8001178:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800117c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x54>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_InitTick+0x58>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	4619      	mov	r1, r3
 80011a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fd4d 	bl	8001c4e <HAL_SYSTICK_Config>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00e      	b.n	80011dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b0f      	cmp	r3, #15
 80011c2:	d80a      	bhi.n	80011da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c4:	2200      	movs	r2, #0
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295
 80011cc:	f000 fd07 	bl	8001bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d0:	4a06      	ldr	r2, [pc, #24]	; (80011ec <HAL_InitTick+0x5c>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e000      	b.n	80011dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20000008 	.word	0x20000008
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x20>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <HAL_IncTick+0x24>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	4a04      	ldr	r2, [pc, #16]	; (8001214 <HAL_IncTick+0x24>)
 8001202:	6013      	str	r3, [r2, #0]
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	20000008 	.word	0x20000008
 8001214:	20000260 	.word	0x20000260

08001218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return uwTick;
 800121c:	4b03      	ldr	r3, [pc, #12]	; (800122c <HAL_GetTick+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000260 	.word	0x20000260

08001230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001238:	f7ff ffee 	bl	8001218 <HAL_GetTick>
 800123c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d005      	beq.n	8001256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_Delay+0x44>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	461a      	mov	r2, r3
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4413      	add	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001256:	bf00      	nop
 8001258:	f7ff ffde 	bl	8001218 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	429a      	cmp	r2, r3
 8001266:	d8f7      	bhi.n	8001258 <HAL_Delay+0x28>
  {
  }
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000008 	.word	0x20000008

08001278 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e033      	b.n	80012f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	2b00      	cmp	r3, #0
 8001294:	d109      	bne.n	80012aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f863 	bl	8001362 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 0310 	and.w	r3, r3, #16
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d118      	bne.n	80012e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80012be:	f023 0302 	bic.w	r3, r3, #2
 80012c2:	f043 0202 	orr.w	r2, r3, #2
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f000 fa8c 	bl	80017e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f023 0303 	bic.w	r3, r3, #3
 80012de:	f043 0201 	orr.w	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	641a      	str	r2, [r3, #64]	; 0x40
 80012e6:	e001      	b.n	80012ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e022      	b.n	800135a <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f043 0202 	orr.w	r2, r3, #2
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0201 	bic.w	r2, r2, #1
 800132e:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f000 f819 	bl	8001376 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001358:	7bfb      	ldrb	r3, [r7, #15]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <HAL_ADC_MspDeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Start_IT+0x1a>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e0a1      	b.n	80014ea <HAL_ADC_Start_IT+0x15e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d018      	beq.n	80013ee <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013cc:	4b4a      	ldr	r3, [pc, #296]	; (80014f8 <HAL_ADC_Start_IT+0x16c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_ADC_Start_IT+0x170>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9a      	lsrs	r2, r3, #18
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d169      	bne.n	80014d0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001426:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143a:	d106      	bne.n	800144a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f023 0206 	bic.w	r2, r3, #6
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
 8001448:	e002      	b.n	8001450 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_ADC_Start_IT+0x174>)
 800145a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001464:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10f      	bne.n	80014a6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d129      	bne.n	80014e8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	e020      	b.n	80014e8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <HAL_ADC_Start_IT+0x178>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d11b      	bne.n	80014e8 <HAL_ADC_Start_IT+0x15c>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d114      	bne.n	80014e8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	e00b      	b.n	80014e8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	f043 0210 	orr.w	r2, r3, #16
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e0:	f043 0201 	orr.w	r2, r3, #1
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3714      	adds	r7, #20
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	431bde83 	.word	0x431bde83
 8001500:	40012300 	.word	0x40012300
 8001504:	40012000 	.word	0x40012000

08001508 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_ADC_Stop_IT+0x16>
 800151a:	2302      	movs	r3, #2
 800151c:	e02b      	b.n	8001576 <HAL_ADC_Stop_IT+0x6e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0201 	bic.w	r2, r2, #1
 8001534:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b00      	cmp	r3, #0
 8001542:	d113      	bne.n	800156c <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001552:	f023 0320 	bic.w	r3, r3, #32
 8001556:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f043 0201 	orr.w	r2, r3, #1
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001598:	2b01      	cmp	r3, #1
 800159a:	d101      	bne.n	80015a0 <HAL_ADC_ConfigChannel+0x1c>
 800159c:	2302      	movs	r3, #2
 800159e:	e113      	b.n	80017c8 <HAL_ADC_ConfigChannel+0x244>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b09      	cmp	r3, #9
 80015ae:	d925      	bls.n	80015fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	68d9      	ldr	r1, [r3, #12]
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	461a      	mov	r2, r3
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	3b1e      	subs	r3, #30
 80015c6:	2207      	movs	r2, #7
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43da      	mvns	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	400a      	ands	r2, r1
 80015d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	4618      	mov	r0, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4403      	add	r3, r0
 80015ee:	3b1e      	subs	r3, #30
 80015f0:	409a      	lsls	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	e022      	b.n	8001642 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	b29b      	uxth	r3, r3
 8001608:	461a      	mov	r2, r3
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	2207      	movs	r2, #7
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	400a      	ands	r2, r1
 800161e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	4603      	mov	r3, r0
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4403      	add	r3, r0
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b06      	cmp	r3, #6
 8001648:	d824      	bhi.n	8001694 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	3b05      	subs	r3, #5
 800165c:	221f      	movs	r2, #31
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43da      	mvns	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	400a      	ands	r2, r1
 800166a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	3b05      	subs	r3, #5
 8001686:	fa00 f203 	lsl.w	r2, r0, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
 8001692:	e04c      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b0c      	cmp	r3, #12
 800169a:	d824      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b23      	subs	r3, #35	; 0x23
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b23      	subs	r3, #35	; 0x23
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	631a      	str	r2, [r3, #48]	; 0x30
 80016e4:	e023      	b.n	800172e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	3b41      	subs	r3, #65	; 0x41
 80016f8:	221f      	movs	r2, #31
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	400a      	ands	r2, r1
 8001706:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685a      	ldr	r2, [r3, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	3b41      	subs	r3, #65	; 0x41
 8001722:	fa00 f203 	lsl.w	r2, r0, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800172e:	4b29      	ldr	r3, [pc, #164]	; (80017d4 <HAL_ADC_ConfigChannel+0x250>)
 8001730:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a28      	ldr	r2, [pc, #160]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d10f      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2b12      	cmp	r3, #18
 8001742:	d10b      	bne.n	800175c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a1d      	ldr	r2, [pc, #116]	; (80017d8 <HAL_ADC_ConfigChannel+0x254>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d12b      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d003      	beq.n	8001778 <HAL_ADC_ConfigChannel+0x1f4>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b11      	cmp	r3, #17
 8001776:	d122      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a11      	ldr	r2, [pc, #68]	; (80017dc <HAL_ADC_ConfigChannel+0x258>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d111      	bne.n	80017be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <HAL_ADC_ConfigChannel+0x25c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <HAL_ADC_ConfigChannel+0x260>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	0c9a      	lsrs	r2, r3, #18
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f9      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40012300 	.word	0x40012300
 80017d8:	40012000 	.word	0x40012000
 80017dc:	10000012 	.word	0x10000012
 80017e0:	20000000 	.word	0x20000000
 80017e4:	431bde83 	.word	0x431bde83

080017e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f0:	4b79      	ldr	r3, [pc, #484]	; (80019d8 <ADC_Init+0x1f0>)
 80017f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	431a      	orrs	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685a      	ldr	r2, [r3, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800181c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6859      	ldr	r1, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	021a      	lsls	r2, r3, #8
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001862:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6899      	ldr	r1, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	430a      	orrs	r2, r1
 8001874:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	4a58      	ldr	r2, [pc, #352]	; (80019dc <ADC_Init+0x1f4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800188e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6899      	ldr	r1, [r3, #8]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6899      	ldr	r1, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	e00f      	b.n	80018e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 0202 	bic.w	r2, r2, #2
 80018f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6899      	ldr	r1, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	7e1b      	ldrb	r3, [r3, #24]
 8001900:	005a      	lsls	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d01b      	beq.n	800194c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001922:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001932:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193e:	3b01      	subs	r3, #1
 8001940:	035a      	lsls	r2, r3, #13
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	e007      	b.n	800195c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800195a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	3b01      	subs	r3, #1
 8001978:	051a      	lsls	r2, r3, #20
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	430a      	orrs	r2, r1
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001990:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6899      	ldr	r1, [r3, #8]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199e:	025a      	lsls	r2, r3, #9
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6899      	ldr	r1, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	029a      	lsls	r2, r3, #10
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	40012300 	.word	0x40012300
 80019dc:	0f000001 	.word	0x0f000001

080019e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019fc:	4013      	ands	r3, r2
 80019fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a12:	4a04      	ldr	r2, [pc, #16]	; (8001a24 <__NVIC_SetPriorityGrouping+0x44>)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	60d3      	str	r3, [r2, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a2c:	4b04      	ldr	r3, [pc, #16]	; (8001a40 <__NVIC_GetPriorityGrouping+0x18>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	f003 0307 	and.w	r3, r3, #7
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	db0b      	blt.n	8001a6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	f003 021f 	and.w	r2, r3, #31
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <__NVIC_EnableIRQ+0x38>)
 8001a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a62:	095b      	lsrs	r3, r3, #5
 8001a64:	2001      	movs	r0, #1
 8001a66:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000e100 	.word	0xe000e100

08001a80 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db12      	blt.n	8001ab8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	490a      	ldr	r1, [pc, #40]	; (8001ac4 <__NVIC_DisableIRQ+0x44>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	095b      	lsrs	r3, r3, #5
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa6:	3320      	adds	r3, #32
 8001aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001aac:	f3bf 8f4f 	dsb	sy
}
 8001ab0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ab2:	f3bf 8f6f 	isb	sy
}
 8001ab6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	6039      	str	r1, [r7, #0]
 8001ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	db0a      	blt.n	8001af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	490c      	ldr	r1, [pc, #48]	; (8001b14 <__NVIC_SetPriority+0x4c>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	0112      	lsls	r2, r2, #4
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	440b      	add	r3, r1
 8001aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af0:	e00a      	b.n	8001b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	4908      	ldr	r1, [pc, #32]	; (8001b18 <__NVIC_SetPriority+0x50>)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	3b04      	subs	r3, #4
 8001b00:	0112      	lsls	r2, r2, #4
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	440b      	add	r3, r1
 8001b06:	761a      	strb	r2, [r3, #24]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000e100 	.word	0xe000e100
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b089      	sub	sp, #36	; 0x24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f1c3 0307 	rsb	r3, r3, #7
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	bf28      	it	cs
 8001b3a:	2304      	movcs	r3, #4
 8001b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3304      	adds	r3, #4
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d902      	bls.n	8001b4c <NVIC_EncodePriority+0x30>
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3b03      	subs	r3, #3
 8001b4a:	e000      	b.n	8001b4e <NVIC_EncodePriority+0x32>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 32ff 	mov.w	r2, #4294967295
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	401a      	ands	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6e:	43d9      	mvns	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	4313      	orrs	r3, r2
         );
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3724      	adds	r7, #36	; 0x24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b94:	d301      	bcc.n	8001b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00f      	b.n	8001bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <SysTick_Config+0x40>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ba2:	210f      	movs	r1, #15
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f7ff ff8e 	bl	8001ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <SysTick_Config+0x40>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <SysTick_Config+0x40>)
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	e000e010 	.word	0xe000e010

08001bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff ff05 	bl	80019e0 <__NVIC_SetPriorityGrouping>
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	4603      	mov	r3, r0
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	607a      	str	r2, [r7, #4]
 8001bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf0:	f7ff ff1a 	bl	8001a28 <__NVIC_GetPriorityGrouping>
 8001bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	68b9      	ldr	r1, [r7, #8]
 8001bfa:	6978      	ldr	r0, [r7, #20]
 8001bfc:	f7ff ff8e 	bl	8001b1c <NVIC_EncodePriority>
 8001c00:	4602      	mov	r2, r0
 8001c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c06:	4611      	mov	r1, r2
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff ff5d 	bl	8001ac8 <__NVIC_SetPriority>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ff0d 	bl	8001a44 <__NVIC_EnableIRQ>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	4603      	mov	r3, r0
 8001c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ff1d 	bl	8001a80 <__NVIC_DisableIRQ>
}
 8001c46:	bf00      	nop
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff ff94 	bl	8001b84 <SysTick_Config>
 8001c5c:	4603      	mov	r3, r0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
 8001c82:	e159      	b.n	8001f38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	f040 8148 	bne.w	8001f32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d005      	beq.n	8001cba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d130      	bne.n	8001d1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 0201 	and.w	r2, r3, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d017      	beq.n	8001d58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d123      	bne.n	8001dac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	220f      	movs	r2, #15
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691a      	ldr	r2, [r3, #16]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	08da      	lsrs	r2, r3, #3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3208      	adds	r2, #8
 8001da6:	69b9      	ldr	r1, [r7, #24]
 8001da8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f003 0203 	and.w	r2, r3, #3
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a2 	beq.w	8001f32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b57      	ldr	r3, [pc, #348]	; (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a56      	ldr	r2, [pc, #344]	; (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b54      	ldr	r3, [pc, #336]	; (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e0a:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_GPIO_Init+0x2ec>)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a49      	ldr	r2, [pc, #292]	; (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d019      	beq.n	8001e6a <HAL_GPIO_Init+0x202>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a48      	ldr	r2, [pc, #288]	; (8001f5c <HAL_GPIO_Init+0x2f4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d013      	beq.n	8001e66 <HAL_GPIO_Init+0x1fe>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a47      	ldr	r2, [pc, #284]	; (8001f60 <HAL_GPIO_Init+0x2f8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d00d      	beq.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <HAL_GPIO_Init+0x2fc>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d007      	beq.n	8001e5e <HAL_GPIO_Init+0x1f6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a45      	ldr	r2, [pc, #276]	; (8001f68 <HAL_GPIO_Init+0x300>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d101      	bne.n	8001e5a <HAL_GPIO_Init+0x1f2>
 8001e56:	2304      	movs	r3, #4
 8001e58:	e008      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e004      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e002      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e66:	2301      	movs	r3, #1
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x204>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	69fa      	ldr	r2, [r7, #28]
 8001e6e:	f002 0203 	and.w	r2, r2, #3
 8001e72:	0092      	lsls	r2, r2, #2
 8001e74:	4093      	lsls	r3, r2
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7c:	4935      	ldr	r1, [pc, #212]	; (8001f54 <HAL_GPIO_Init+0x2ec>)
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eae:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed8:	4a24      	ldr	r2, [pc, #144]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ede:	4b23      	ldr	r3, [pc, #140]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f02:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d003      	beq.n	8001f2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f2c:	4a0f      	ldr	r2, [pc, #60]	; (8001f6c <HAL_GPIO_Init+0x304>)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3301      	adds	r3, #1
 8001f36:	61fb      	str	r3, [r7, #28]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	f67f aea2 	bls.w	8001c84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f40:	bf00      	nop
 8001f42:	bf00      	nop
 8001f44:	3724      	adds	r7, #36	; 0x24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40013800 	.word	0x40013800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020400 	.word	0x40020400
 8001f60:	40020800 	.word	0x40020800
 8001f64:	40020c00 	.word	0x40020c00
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40013c00 	.word	0x40013c00

08001f70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e0bb      	b.n	8002104 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	f040 80ab 	bne.w	80020fe <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001fa8:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_GPIO_DeInit+0x1ac>)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	089b      	lsrs	r3, r3, #2
 8001fae:	3302      	adds	r3, #2
 8001fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fb4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_GPIO_DeInit+0x1b0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d019      	beq.n	8002006 <HAL_GPIO_DeInit+0x96>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a53      	ldr	r2, [pc, #332]	; (8002124 <HAL_GPIO_DeInit+0x1b4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d013      	beq.n	8002002 <HAL_GPIO_DeInit+0x92>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_GPIO_DeInit+0x1b8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d00d      	beq.n	8001ffe <HAL_GPIO_DeInit+0x8e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_GPIO_DeInit+0x1bc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d007      	beq.n	8001ffa <HAL_GPIO_DeInit+0x8a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a50      	ldr	r2, [pc, #320]	; (8002130 <HAL_GPIO_DeInit+0x1c0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d101      	bne.n	8001ff6 <HAL_GPIO_DeInit+0x86>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e008      	b.n	8002008 <HAL_GPIO_DeInit+0x98>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e006      	b.n	8002008 <HAL_GPIO_DeInit+0x98>
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e004      	b.n	8002008 <HAL_GPIO_DeInit+0x98>
 8001ffe:	2302      	movs	r3, #2
 8002000:	e002      	b.n	8002008 <HAL_GPIO_DeInit+0x98>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <HAL_GPIO_DeInit+0x98>
 8002006:	2300      	movs	r3, #0
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	f002 0203 	and.w	r2, r2, #3
 800200e:	0092      	lsls	r2, r2, #2
 8002010:	4093      	lsls	r3, r2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	429a      	cmp	r2, r3
 8002016:	d132      	bne.n	800207e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002018:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	4944      	ldr	r1, [pc, #272]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002026:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 8002028:	685a      	ldr	r2, [r3, #4]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	4941      	ldr	r1, [pc, #260]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 8002030:	4013      	ands	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	43db      	mvns	r3, r3
 800203c:	493d      	ldr	r1, [pc, #244]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 800203e:	4013      	ands	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	43db      	mvns	r3, r3
 800204a:	493a      	ldr	r1, [pc, #232]	; (8002134 <HAL_GPIO_DeInit+0x1c4>)
 800204c:	4013      	ands	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002060:	4a2e      	ldr	r2, [pc, #184]	; (800211c <HAL_GPIO_DeInit+0x1ac>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	089b      	lsrs	r3, r3, #2
 8002066:	3302      	adds	r3, #2
 8002068:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	43da      	mvns	r2, r3
 8002070:	482a      	ldr	r0, [pc, #168]	; (800211c <HAL_GPIO_DeInit+0x1ac>)
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	400a      	ands	r2, r1
 8002078:	3302      	adds	r3, #2
 800207a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	2103      	movs	r1, #3
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	08d2      	lsrs	r2, r2, #3
 80020b4:	4019      	ands	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2103      	movs	r1, #3
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	2101      	movs	r1, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2103      	movs	r1, #3
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f af40 	bls.w	8001f8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	371c      	adds	r7, #28
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40013800 	.word	0x40013800
 8002120:	40020000 	.word	0x40020000
 8002124:	40020400 	.word	0x40020400
 8002128:	40020800 	.word	0x40020800
 800212c:	40020c00 	.word	0x40020c00
 8002130:	40021000 	.word	0x40021000
 8002134:	40013c00 	.word	0x40013c00

08002138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	807b      	strh	r3, [r7, #2]
 8002144:	4613      	mov	r3, r2
 8002146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002148:	787b      	ldrb	r3, [r7, #1]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002154:	e003      	b.n	800215e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	041a      	lsls	r2, r3, #16
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	619a      	str	r2, [r3, #24]
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <HAL_PWR_EnableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  /* Enable the wake up pin */
  SET_BIT(PWR->CSR, WakeUpPinx);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PWR_EnableWakeUpPin+0x20>)
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4904      	ldr	r1, [pc, #16]	; (800218c <HAL_PWR_EnableWakeUpPin+0x20>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	604b      	str	r3, [r1, #4]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40007000 	.word	0x40007000

08002190 <HAL_PWR_DisableWakeUpPin>:
  *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  

  /* Disable the wake up pin */
  CLEAR_BIT(PWR->CSR, WakeUpPinx);
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_PWR_DisableWakeUpPin+0x24>)
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	43db      	mvns	r3, r3
 80021a0:	4904      	ldr	r1, [pc, #16]	; (80021b4 <HAL_PWR_DisableWakeUpPin+0x24>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40007000 	.word	0x40007000

080021b8 <HAL_PWR_EnterSTANDBYMode>:
  *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
  *          - WKUP pin 1 (PA0) if enabled.       
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_PWR_EnterSTANDBYMode+0x28>)
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80021d4:	bf30      	wfi
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	40007000 	.word	0x40007000
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e267      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d075      	beq.n	80022f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002206:	4b88      	ldr	r3, [pc, #544]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b04      	cmp	r3, #4
 8002210:	d00c      	beq.n	800222c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002212:	4b85      	ldr	r3, [pc, #532]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800221a:	2b08      	cmp	r3, #8
 800221c:	d112      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221e:	4b82      	ldr	r3, [pc, #520]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002226:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800222a:	d10b      	bne.n	8002244 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222c:	4b7e      	ldr	r3, [pc, #504]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05b      	beq.n	80022f0 <HAL_RCC_OscConfig+0x108>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d157      	bne.n	80022f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e242      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224c:	d106      	bne.n	800225c <HAL_RCC_OscConfig+0x74>
 800224e:	4b76      	ldr	r3, [pc, #472]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a75      	ldr	r2, [pc, #468]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x98>
 8002266:	4b70      	ldr	r3, [pc, #448]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6f      	ldr	r2, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b6d      	ldr	r3, [pc, #436]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6c      	ldr	r2, [pc, #432]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xb0>
 8002280:	4b69      	ldr	r3, [pc, #420]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a68      	ldr	r2, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b66      	ldr	r3, [pc, #408]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a65      	ldr	r2, [pc, #404]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7fe ffba 	bl	8001218 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe ffb6 	bl	8001218 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e207      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xc0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe ffa6 	bl	8001218 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe ffa2 	bl	8001218 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e1f3      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b51      	ldr	r3, [pc, #324]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0xe8>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d063      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022fe:	4b4a      	ldr	r3, [pc, #296]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b47      	ldr	r3, [pc, #284]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b44      	ldr	r3, [pc, #272]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1c7      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4937      	ldr	r1, [pc, #220]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e03a      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCC_OscConfig+0x244>)
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe ff5b 	bl	8001218 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe ff57 	bl	8001218 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e1a8      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f0      	beq.n	8002366 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002384:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4925      	ldr	r1, [pc, #148]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 8002394:	4313      	orrs	r3, r2
 8002396:	600b      	str	r3, [r1, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239a:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_RCC_OscConfig+0x244>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe ff3a 	bl	8001218 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a8:	f7fe ff36 	bl	8001218 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e187      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ba:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d036      	beq.n	8002440 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d016      	beq.n	8002408 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023da:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_RCC_OscConfig+0x248>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e0:	f7fe ff1a 	bl	8001218 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e8:	f7fe ff16 	bl	8001218 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e167      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <HAL_RCC_OscConfig+0x240>)
 80023fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0f0      	beq.n	80023e8 <HAL_RCC_OscConfig+0x200>
 8002406:	e01b      	b.n	8002440 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_OscConfig+0x248>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7fe ff03 	bl	8001218 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	e00e      	b.n	8002434 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002416:	f7fe feff 	bl	8001218 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d907      	bls.n	8002434 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e150      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
 8002428:	40023800 	.word	0x40023800
 800242c:	42470000 	.word	0x42470000
 8002430:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b88      	ldr	r3, [pc, #544]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002436:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ea      	bne.n	8002416 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 8097 	beq.w	800257c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b81      	ldr	r3, [pc, #516]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10f      	bne.n	800247e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	4b7d      	ldr	r3, [pc, #500]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002466:	4a7c      	ldr	r2, [pc, #496]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800246c:	6413      	str	r3, [r2, #64]	; 0x40
 800246e:	4b7a      	ldr	r3, [pc, #488]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247a:	2301      	movs	r3, #1
 800247c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	4b77      	ldr	r3, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x474>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d118      	bne.n	80024bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800248a:	4b74      	ldr	r3, [pc, #464]	; (800265c <HAL_RCC_OscConfig+0x474>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a73      	ldr	r2, [pc, #460]	; (800265c <HAL_RCC_OscConfig+0x474>)
 8002490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002494:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002496:	f7fe febf 	bl	8001218 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249e:	f7fe febb 	bl	8001218 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e10c      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <HAL_RCC_OscConfig+0x474>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f0      	beq.n	800249e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d106      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2ea>
 80024c4:	4b64      	ldr	r3, [pc, #400]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c8:	4a63      	ldr	r2, [pc, #396]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024ca:	f043 0301 	orr.w	r3, r3, #1
 80024ce:	6713      	str	r3, [r2, #112]	; 0x70
 80024d0:	e01c      	b.n	800250c <HAL_RCC_OscConfig+0x324>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d10c      	bne.n	80024f4 <HAL_RCC_OscConfig+0x30c>
 80024da:	4b5f      	ldr	r3, [pc, #380]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a5e      	ldr	r2, [pc, #376]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
 80024e6:	4b5c      	ldr	r3, [pc, #368]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a5b      	ldr	r2, [pc, #364]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	e00b      	b.n	800250c <HAL_RCC_OscConfig+0x324>
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002500:	4b55      	ldr	r3, [pc, #340]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a54      	ldr	r2, [pc, #336]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002506:	f023 0304 	bic.w	r3, r3, #4
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002514:	f7fe fe80 	bl	8001218 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7fe fe7c 	bl	8001218 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	; 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0cb      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	4b49      	ldr	r3, [pc, #292]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ee      	beq.n	800251c <HAL_RCC_OscConfig+0x334>
 800253e:	e014      	b.n	800256a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002540:	f7fe fe6a 	bl	8001218 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002546:	e00a      	b.n	800255e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002548:	f7fe fe66 	bl	8001218 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e0b5      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255e:	4b3e      	ldr	r3, [pc, #248]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002562:	f003 0302 	and.w	r3, r3, #2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1ee      	bne.n	8002548 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800256a:	7dfb      	ldrb	r3, [r7, #23]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d105      	bne.n	800257c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002570:	4b39      	ldr	r3, [pc, #228]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	4a38      	ldr	r2, [pc, #224]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80a1 	beq.w	80026c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002586:	4b34      	ldr	r3, [pc, #208]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d05c      	beq.n	800264c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b02      	cmp	r3, #2
 8002598:	d141      	bne.n	800261e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800259a:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_RCC_OscConfig+0x478>)
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7fe fe3a 	bl	8001218 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a8:	f7fe fe36 	bl	8001218 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e087      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ba:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69da      	ldr	r2, [r3, #28]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	019b      	lsls	r3, r3, #6
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	061b      	lsls	r3, r3, #24
 80025ea:	491b      	ldr	r1, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f0:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x478>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fe0f 	bl	8001218 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fe0b 	bl	8001218 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e05c      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f0      	beq.n	80025fe <HAL_RCC_OscConfig+0x416>
 800261c:	e054      	b.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261e:	4b10      	ldr	r3, [pc, #64]	; (8002660 <HAL_RCC_OscConfig+0x478>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7fe fdf8 	bl	8001218 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fdf4 	bl	8001218 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e045      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_RCC_OscConfig+0x470>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x444>
 800264a:	e03d      	b.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d107      	bne.n	8002664 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e038      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000
 8002660:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002664:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <HAL_RCC_OscConfig+0x4ec>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d028      	beq.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d121      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d11a      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002694:	4013      	ands	r3, r2
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800269a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800269c:	4293      	cmp	r3, r2
 800269e:	d111      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	3b01      	subs	r3, #1
 80026ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0cc      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b68      	ldr	r3, [pc, #416]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0307 	and.w	r3, r3, #7
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d90c      	bls.n	8002714 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b8      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002736:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494d      	ldr	r1, [pc, #308]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d044      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d119      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d003      	beq.n	8002796 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	2b03      	cmp	r3, #3
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b3f      	ldr	r3, [pc, #252]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e06f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e067      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4934      	ldr	r1, [pc, #208]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fd26 	bl	8001218 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7fe fd22 	bl	8001218 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	; 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e04f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d20c      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_ClockConfig+0x1b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4916      	ldr	r1, [pc, #88]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f821 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002862:	4602      	mov	r2, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	490a      	ldr	r1, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fc86 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	08004628 	.word	0x08004628
 800289c:	20000000 	.word	0x20000000
 80028a0:	20000004 	.word	0x20000004

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b094      	sub	sp, #80	; 0x50
 80028aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	647b      	str	r3, [r7, #68]	; 0x44
 80028b0:	2300      	movs	r3, #0
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028b4:	2300      	movs	r3, #0
 80028b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028bc:	4b79      	ldr	r3, [pc, #484]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x40>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	f200 80e1 	bhi.w	8002a90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x34>
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x3a>
 80028d6:	e0db      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b73      	ldr	r3, [pc, #460]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80028dc:	e0db      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028de:	4b73      	ldr	r3, [pc, #460]	; (8002aac <HAL_RCC_GetSysClockFreq+0x208>)
 80028e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80028e2:	e0d8      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e4:	4b6f      	ldr	r3, [pc, #444]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ee:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d063      	beq.n	80029c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fa:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	2200      	movs	r2, #0
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38
 8002904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290c:	633b      	str	r3, [r7, #48]	; 0x30
 800290e:	2300      	movs	r3, #0
 8002910:	637b      	str	r3, [r7, #52]	; 0x34
 8002912:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002916:	4622      	mov	r2, r4
 8002918:	462b      	mov	r3, r5
 800291a:	f04f 0000 	mov.w	r0, #0
 800291e:	f04f 0100 	mov.w	r1, #0
 8002922:	0159      	lsls	r1, r3, #5
 8002924:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002928:	0150      	lsls	r0, r2, #5
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4621      	mov	r1, r4
 8002930:	1a51      	subs	r1, r2, r1
 8002932:	6139      	str	r1, [r7, #16]
 8002934:	4629      	mov	r1, r5
 8002936:	eb63 0301 	sbc.w	r3, r3, r1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002948:	4659      	mov	r1, fp
 800294a:	018b      	lsls	r3, r1, #6
 800294c:	4651      	mov	r1, sl
 800294e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002952:	4651      	mov	r1, sl
 8002954:	018a      	lsls	r2, r1, #6
 8002956:	4651      	mov	r1, sl
 8002958:	ebb2 0801 	subs.w	r8, r2, r1
 800295c:	4659      	mov	r1, fp
 800295e:	eb63 0901 	sbc.w	r9, r3, r1
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800296e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002972:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002976:	4690      	mov	r8, r2
 8002978:	4699      	mov	r9, r3
 800297a:	4623      	mov	r3, r4
 800297c:	eb18 0303 	adds.w	r3, r8, r3
 8002980:	60bb      	str	r3, [r7, #8]
 8002982:	462b      	mov	r3, r5
 8002984:	eb49 0303 	adc.w	r3, r9, r3
 8002988:	60fb      	str	r3, [r7, #12]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002996:	4629      	mov	r1, r5
 8002998:	024b      	lsls	r3, r1, #9
 800299a:	4621      	mov	r1, r4
 800299c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029a0:	4621      	mov	r1, r4
 80029a2:	024a      	lsls	r2, r1, #9
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029aa:	2200      	movs	r2, #0
 80029ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80029ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80029b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029b4:	f7fd fc18 	bl	80001e8 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4613      	mov	r3, r2
 80029be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029c0:	e058      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	2200      	movs	r2, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	4611      	mov	r1, r2
 80029ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
 80029d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029dc:	4642      	mov	r2, r8
 80029de:	464b      	mov	r3, r9
 80029e0:	f04f 0000 	mov.w	r0, #0
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	0159      	lsls	r1, r3, #5
 80029ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029ee:	0150      	lsls	r0, r2, #5
 80029f0:	4602      	mov	r2, r0
 80029f2:	460b      	mov	r3, r1
 80029f4:	4641      	mov	r1, r8
 80029f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80029fa:	4649      	mov	r1, r9
 80029fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a00:	f04f 0200 	mov.w	r2, #0
 8002a04:	f04f 0300 	mov.w	r3, #0
 8002a08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a14:	ebb2 040a 	subs.w	r4, r2, sl
 8002a18:	eb63 050b 	sbc.w	r5, r3, fp
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	00eb      	lsls	r3, r5, #3
 8002a26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a2a:	00e2      	lsls	r2, r4, #3
 8002a2c:	4614      	mov	r4, r2
 8002a2e:	461d      	mov	r5, r3
 8002a30:	4643      	mov	r3, r8
 8002a32:	18e3      	adds	r3, r4, r3
 8002a34:	603b      	str	r3, [r7, #0]
 8002a36:	464b      	mov	r3, r9
 8002a38:	eb45 0303 	adc.w	r3, r5, r3
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	028b      	lsls	r3, r1, #10
 8002a4e:	4621      	mov	r1, r4
 8002a50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a54:	4621      	mov	r1, r4
 8002a56:	028a      	lsls	r2, r1, #10
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a5e:	2200      	movs	r2, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	61fa      	str	r2, [r7, #28]
 8002a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a68:	f7fd fbbe 	bl	80001e8 <__aeabi_uldivmod>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4613      	mov	r3, r2
 8002a72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	0c1b      	lsrs	r3, r3, #16
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002a84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a8e:	e002      	b.n	8002a96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3750      	adds	r7, #80	; 0x50
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	00f42400 	.word	0x00f42400
 8002aac:	007a1200 	.word	0x007a1200

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000000 	.word	0x20000000

08002ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002acc:	f7ff fff0 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a9b      	lsrs	r3, r3, #10
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	4903      	ldr	r1, [pc, #12]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ade:	5ccb      	ldrb	r3, [r1, r3]
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	08004638 	.word	0x08004638

08002af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002af4:	f7ff ffdc 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	0b5b      	lsrs	r3, r3, #13
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	08004638 	.word	0x08004638

08002b18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e03f      	b.n	8002baa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f866 	bl	8002c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2224      	movs	r2, #36	; 0x24
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f86b 	bl	8002c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695a      	ldr	r2, [r3, #20]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b082      	sub	sp, #8
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e021      	b.n	8002c08 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2224      	movs	r2, #36	; 0x24
 8002bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bda:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f821 	bl	8002c24 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c3c:	b0c0      	sub	sp, #256	; 0x100
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691b      	ldr	r3, [r3, #16]
 8002c4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c54:	68d9      	ldr	r1, [r3, #12]
 8002c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	ea40 0301 	orr.w	r3, r0, r1
 8002c60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	431a      	orrs	r2, r3
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c90:	f021 010c 	bic.w	r1, r1, #12
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb2:	6999      	ldr	r1, [r3, #24]
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	ea40 0301 	orr.w	r3, r0, r1
 8002cbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	4b8f      	ldr	r3, [pc, #572]	; (8002f04 <UART_SetConfig+0x2cc>)
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d005      	beq.n	8002cd8 <UART_SetConfig+0xa0>
 8002ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <UART_SetConfig+0x2d0>)
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d104      	bne.n	8002ce2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd8:	f7ff ff0a 	bl	8002af0 <HAL_RCC_GetPCLK2Freq>
 8002cdc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ce0:	e003      	b.n	8002cea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ce2:	f7ff fef1 	bl	8002ac8 <HAL_RCC_GetPCLK1Freq>
 8002ce6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf4:	f040 810c 	bne.w	8002f10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d0a:	4622      	mov	r2, r4
 8002d0c:	462b      	mov	r3, r5
 8002d0e:	1891      	adds	r1, r2, r2
 8002d10:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d12:	415b      	adcs	r3, r3
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	eb12 0801 	adds.w	r8, r2, r1
 8002d20:	4629      	mov	r1, r5
 8002d22:	eb43 0901 	adc.w	r9, r3, r1
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d3a:	4690      	mov	r8, r2
 8002d3c:	4699      	mov	r9, r3
 8002d3e:	4623      	mov	r3, r4
 8002d40:	eb18 0303 	adds.w	r3, r8, r3
 8002d44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d48:	462b      	mov	r3, r5
 8002d4a:	eb49 0303 	adc.w	r3, r9, r3
 8002d4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d66:	460b      	mov	r3, r1
 8002d68:	18db      	adds	r3, r3, r3
 8002d6a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	eb42 0303 	adc.w	r3, r2, r3
 8002d72:	657b      	str	r3, [r7, #84]	; 0x54
 8002d74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d7c:	f7fd fa34 	bl	80001e8 <__aeabi_uldivmod>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002d86:	fba3 2302 	umull	r2, r3, r3, r2
 8002d8a:	095b      	lsrs	r3, r3, #5
 8002d8c:	011c      	lsls	r4, r3, #4
 8002d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002da0:	4642      	mov	r2, r8
 8002da2:	464b      	mov	r3, r9
 8002da4:	1891      	adds	r1, r2, r2
 8002da6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da8:	415b      	adcs	r3, r3
 8002daa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002db0:	4641      	mov	r1, r8
 8002db2:	eb12 0a01 	adds.w	sl, r2, r1
 8002db6:	4649      	mov	r1, r9
 8002db8:	eb43 0b01 	adc.w	fp, r3, r1
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dd0:	4692      	mov	sl, r2
 8002dd2:	469b      	mov	fp, r3
 8002dd4:	4643      	mov	r3, r8
 8002dd6:	eb1a 0303 	adds.w	r3, sl, r3
 8002dda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dde:	464b      	mov	r3, r9
 8002de0:	eb4b 0303 	adc.w	r3, fp, r3
 8002de4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002df4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	18db      	adds	r3, r3, r3
 8002e00:	643b      	str	r3, [r7, #64]	; 0x40
 8002e02:	4613      	mov	r3, r2
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
 8002e0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e12:	f7fd f9e9 	bl	80001e8 <__aeabi_uldivmod>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002e1e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e22:	095b      	lsrs	r3, r3, #5
 8002e24:	2264      	movs	r2, #100	; 0x64
 8002e26:	fb02 f303 	mul.w	r3, r2, r3
 8002e2a:	1acb      	subs	r3, r1, r3
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e32:	4b36      	ldr	r3, [pc, #216]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002e34:	fba3 2302 	umull	r2, r3, r3, r2
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e40:	441c      	add	r4, r3
 8002e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e46:	2200      	movs	r2, #0
 8002e48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e64:	4641      	mov	r1, r8
 8002e66:	1851      	adds	r1, r2, r1
 8002e68:	6339      	str	r1, [r7, #48]	; 0x30
 8002e6a:	4649      	mov	r1, r9
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e7c:	4659      	mov	r1, fp
 8002e7e:	00cb      	lsls	r3, r1, #3
 8002e80:	4651      	mov	r1, sl
 8002e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e86:	4651      	mov	r1, sl
 8002e88:	00ca      	lsls	r2, r1, #3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4642      	mov	r2, r8
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e98:	464b      	mov	r3, r9
 8002e9a:	460a      	mov	r2, r1
 8002e9c:	eb42 0303 	adc.w	r3, r2, r3
 8002ea0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002eb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb8:	460b      	mov	r3, r1
 8002eba:	18db      	adds	r3, r3, r3
 8002ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	eb42 0303 	adc.w	r3, r2, r3
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ec6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ece:	f7fd f98b 	bl	80001e8 <__aeabi_uldivmod>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	4b0d      	ldr	r3, [pc, #52]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002ed8:	fba3 1302 	umull	r1, r3, r3, r2
 8002edc:	095b      	lsrs	r3, r3, #5
 8002ede:	2164      	movs	r1, #100	; 0x64
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	3332      	adds	r3, #50	; 0x32
 8002eea:	4a08      	ldr	r2, [pc, #32]	; (8002f0c <UART_SetConfig+0x2d4>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	095b      	lsrs	r3, r3, #5
 8002ef2:	f003 0207 	and.w	r2, r3, #7
 8002ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4422      	add	r2, r4
 8002efe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f00:	e105      	b.n	800310e <UART_SetConfig+0x4d6>
 8002f02:	bf00      	nop
 8002f04:	40011000 	.word	0x40011000
 8002f08:	40011400 	.word	0x40011400
 8002f0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f14:	2200      	movs	r2, #0
 8002f16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f22:	4642      	mov	r2, r8
 8002f24:	464b      	mov	r3, r9
 8002f26:	1891      	adds	r1, r2, r2
 8002f28:	6239      	str	r1, [r7, #32]
 8002f2a:	415b      	adcs	r3, r3
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f32:	4641      	mov	r1, r8
 8002f34:	1854      	adds	r4, r2, r1
 8002f36:	4649      	mov	r1, r9
 8002f38:	eb43 0501 	adc.w	r5, r3, r1
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	00eb      	lsls	r3, r5, #3
 8002f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f4a:	00e2      	lsls	r2, r4, #3
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	461d      	mov	r5, r3
 8002f50:	4643      	mov	r3, r8
 8002f52:	18e3      	adds	r3, r4, r3
 8002f54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f58:	464b      	mov	r3, r9
 8002f5a:	eb45 0303 	adc.w	r3, r5, r3
 8002f5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f7e:	4629      	mov	r1, r5
 8002f80:	008b      	lsls	r3, r1, #2
 8002f82:	4621      	mov	r1, r4
 8002f84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f88:	4621      	mov	r1, r4
 8002f8a:	008a      	lsls	r2, r1, #2
 8002f8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f90:	f7fd f92a 	bl	80001e8 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4b60      	ldr	r3, [pc, #384]	; (800311c <UART_SetConfig+0x4e4>)
 8002f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	011c      	lsls	r4, r3, #4
 8002fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fb4:	4642      	mov	r2, r8
 8002fb6:	464b      	mov	r3, r9
 8002fb8:	1891      	adds	r1, r2, r2
 8002fba:	61b9      	str	r1, [r7, #24]
 8002fbc:	415b      	adcs	r3, r3
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	1851      	adds	r1, r2, r1
 8002fc8:	6139      	str	r1, [r7, #16]
 8002fca:	4649      	mov	r1, r9
 8002fcc:	414b      	adcs	r3, r1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fdc:	4659      	mov	r1, fp
 8002fde:	00cb      	lsls	r3, r1, #3
 8002fe0:	4651      	mov	r1, sl
 8002fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fe6:	4651      	mov	r1, sl
 8002fe8:	00ca      	lsls	r2, r1, #3
 8002fea:	4610      	mov	r0, r2
 8002fec:	4619      	mov	r1, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	4642      	mov	r2, r8
 8002ff2:	189b      	adds	r3, r3, r2
 8002ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff8:	464b      	mov	r3, r9
 8002ffa:	460a      	mov	r2, r1
 8002ffc:	eb42 0303 	adc.w	r3, r2, r3
 8003000:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	67bb      	str	r3, [r7, #120]	; 0x78
 800300e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800301c:	4649      	mov	r1, r9
 800301e:	008b      	lsls	r3, r1, #2
 8003020:	4641      	mov	r1, r8
 8003022:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003026:	4641      	mov	r1, r8
 8003028:	008a      	lsls	r2, r1, #2
 800302a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800302e:	f7fd f8db 	bl	80001e8 <__aeabi_uldivmod>
 8003032:	4602      	mov	r2, r0
 8003034:	460b      	mov	r3, r1
 8003036:	4b39      	ldr	r3, [pc, #228]	; (800311c <UART_SetConfig+0x4e4>)
 8003038:	fba3 1302 	umull	r1, r3, r3, r2
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	2164      	movs	r1, #100	; 0x64
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	3332      	adds	r3, #50	; 0x32
 800304a:	4a34      	ldr	r2, [pc, #208]	; (800311c <UART_SetConfig+0x4e4>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003056:	441c      	add	r4, r3
 8003058:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800305c:	2200      	movs	r2, #0
 800305e:	673b      	str	r3, [r7, #112]	; 0x70
 8003060:	677a      	str	r2, [r7, #116]	; 0x74
 8003062:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003066:	4642      	mov	r2, r8
 8003068:	464b      	mov	r3, r9
 800306a:	1891      	adds	r1, r2, r2
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	415b      	adcs	r3, r3
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003076:	4641      	mov	r1, r8
 8003078:	1851      	adds	r1, r2, r1
 800307a:	6039      	str	r1, [r7, #0]
 800307c:	4649      	mov	r1, r9
 800307e:	414b      	adcs	r3, r1
 8003080:	607b      	str	r3, [r7, #4]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800308e:	4659      	mov	r1, fp
 8003090:	00cb      	lsls	r3, r1, #3
 8003092:	4651      	mov	r1, sl
 8003094:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003098:	4651      	mov	r1, sl
 800309a:	00ca      	lsls	r2, r1, #3
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	4603      	mov	r3, r0
 80030a2:	4642      	mov	r2, r8
 80030a4:	189b      	adds	r3, r3, r2
 80030a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a8:	464b      	mov	r3, r9
 80030aa:	460a      	mov	r2, r1
 80030ac:	eb42 0303 	adc.w	r3, r2, r3
 80030b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	663b      	str	r3, [r7, #96]	; 0x60
 80030bc:	667a      	str	r2, [r7, #100]	; 0x64
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030ca:	4649      	mov	r1, r9
 80030cc:	008b      	lsls	r3, r1, #2
 80030ce:	4641      	mov	r1, r8
 80030d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030d4:	4641      	mov	r1, r8
 80030d6:	008a      	lsls	r2, r1, #2
 80030d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030dc:	f7fd f884 	bl	80001e8 <__aeabi_uldivmod>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4b0d      	ldr	r3, [pc, #52]	; (800311c <UART_SetConfig+0x4e4>)
 80030e6:	fba3 1302 	umull	r1, r3, r3, r2
 80030ea:	095b      	lsrs	r3, r3, #5
 80030ec:	2164      	movs	r1, #100	; 0x64
 80030ee:	fb01 f303 	mul.w	r3, r1, r3
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	3332      	adds	r3, #50	; 0x32
 80030f8:	4a08      	ldr	r2, [pc, #32]	; (800311c <UART_SetConfig+0x4e4>)
 80030fa:	fba2 2303 	umull	r2, r3, r2, r3
 80030fe:	095b      	lsrs	r3, r3, #5
 8003100:	f003 020f 	and.w	r2, r3, #15
 8003104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4422      	add	r2, r4
 800310c:	609a      	str	r2, [r3, #8]
}
 800310e:	bf00      	nop
 8003110:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003114:	46bd      	mov	sp, r7
 8003116:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800311a:	bf00      	nop
 800311c:	51eb851f 	.word	0x51eb851f

08003120 <_ZN7QAD_ADC11imp_handlerEv>:
	//-----------------------
	//QAD_ADC Handler Methods

//QAD_ADC::imp_handler
//QAD_ADC Handler Method
void QAD_ADC::imp_handler(void) {
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

	//Check for overrun error
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_OVR)) {
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b20      	cmp	r3, #32
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00a      	beq.n	8003156 <_ZN7QAD_ADC11imp_handlerEv+0x36>
		imp_stop();
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f951 	bl	80033e8 <_ZN7QAD_ADC8imp_stopEv>
		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_OVR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	f06f 0220 	mvn.w	r2, #32
 800314e:	601a      	str	r2, [r3, #0]
		imp_start();
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f839 	bl	80031c8 <_ZN7QAD_ADC9imp_startEv>
	}

	//Check for end of conversion
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_EOC)) {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b02      	cmp	r3, #2
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d028      	beq.n	80031c0 <_ZN7QAD_ADC11imp_handlerEv+0xa0>

		m_uData[m_uDataIdx] = m_sADCHandle.Instance->DR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800317a:	b291      	uxth	r1, r2
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	33cc      	adds	r3, #204	; 0xcc
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	460a      	mov	r2, r1
 8003186:	80da      	strh	r2, [r3, #6]
		if (m_uDataIdx >= (m_uChannelCount-1))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800318e:	461a      	mov	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003196:	3b01      	subs	r3, #1
 8003198:	429a      	cmp	r2, r3
 800319a:	db04      	blt.n	80031a6 <_ZN7QAD_ADC11imp_handlerEv+0x86>
			m_uDataIdx = 0; else
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 80031a4:	e007      	b.n	80031b6 <_ZN7QAD_ADC11imp_handlerEv+0x96>
			m_uDataIdx++;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 80031ac:	3301      	adds	r3, #1
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_EOC);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f06f 0202 	mvn.w	r2, #2
 80031be:	601a      	str	r2, [r3, #0]
	}
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <_ZN7QAD_ADC9imp_startEv>:
	//-----------------------
	//QAD_ADC Control Methods

//QAD_ADC::imp_start
//QAD_ADC Control Method
QA_Result QAD_ADC::imp_start(void) {
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08c      	sub	sp, #48	; 0x30
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	if ((m_eState) || (!m_uChannelCount))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	785b      	ldrb	r3, [r3, #1]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <_ZN7QAD_ADC9imp_startEv+0x1a>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <_ZN7QAD_ADC9imp_startEv+0x1e>
		return QA_Fail;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0f9      	b.n	80033da <_ZN7QAD_ADC9imp_startEv+0x212>

	//Initialize ADC
	m_sADCHandle.Instance                   = ADC1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a7e      	ldr	r2, [pc, #504]	; (80033e4 <_ZN7QAD_ADC9imp_startEv+0x21c>)
 80031ea:	655a      	str	r2, [r3, #84]	; 0x54
	m_sADCHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031f2:	659a      	str	r2, [r3, #88]	; 0x58
	m_sADCHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sADCHandle.Init.ScanConvMode          = ENABLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	665a      	str	r2, [r3, #100]	; 0x64
	m_sADCHandle.Init.ContinuousConvMode    = DISABLE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sADCHandle.Init.DiscontinuousConvMode = DISABLE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sADCHandle.Init.NbrOfDiscConversion   = 0;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	679a      	str	r2, [r3, #120]	; 0x78
	m_sADCHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800321c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sADCHandle.Init.ExternalTrigConv      = imp_getTrigger();
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f933 	bl	800348c <_ZN7QAD_ADC14imp_getTriggerEv>
 8003226:	4602      	mov	r2, r0
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sADCHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	661a      	str	r2, [r3, #96]	; 0x60
	m_sADCHandle.Init.NbrOfConversion       = m_uChannelCount;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003238:	461a      	mov	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	671a      	str	r2, [r3, #112]	; 0x70
	m_sADCHandle.Init.DMAContinuousRequests = ENABLE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	m_sADCHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_ADC_Init(&m_sADCHandle) != HAL_OK) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3354      	adds	r3, #84	; 0x54
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe f811 	bl	8001278 <HAL_ADC_Init>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d004      	beq.n	8003270 <_ZN7QAD_ADC9imp_startEv+0xa8>
		imp_stop();
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8be 	bl	80033e8 <_ZN7QAD_ADC8imp_stopEv>
		return QA_Fail;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b4      	b.n	80033da <_ZN7QAD_ADC9imp_startEv+0x212>
	}

	//Channel GPIO Configuration
	GPIO_InitTypeDef GPIO_Init = {0};
 8003270:	f107 0318 	add.w	r3, r7, #24
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	609a      	str	r2, [r3, #8]
 800327c:	60da      	str	r2, [r3, #12]
 800327e:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode  = GPIO_MODE_ANALOG;
 8003280:	2303      	movs	r3, #3
 8003282:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Pull  = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	623b      	str	r3, [r7, #32]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800328c:	2300      	movs	r3, #0
 800328e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003298:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800329c:	429a      	cmp	r2, r3
 800329e:	d22e      	bcs.n	80032fe <_ZN7QAD_ADC9imp_startEv+0x136>
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 80032a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	330a      	adds	r3, #10
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b11      	cmp	r3, #17
 80032b2:	d109      	bne.n	80032c8 <_ZN7QAD_ADC9imp_startEv+0x100>
				(m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVBat)) {
 80032b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	330a      	adds	r3, #10
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 80032c4:	2b12      	cmp	r3, #18
 80032c6:	d014      	beq.n	80032f2 <_ZN7QAD_ADC9imp_startEv+0x12a>
			GPIO_Init.Pin       = m_sChannels[i].uPin;
 80032c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	4413      	add	r3, r2
 80032d2:	33a0      	adds	r3, #160	; 0xa0
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 80032d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	4413      	add	r3, r2
 80032e2:	339c      	adds	r3, #156	; 0x9c
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f107 0218 	add.w	r2, r7, #24
 80032ea:	4611      	mov	r1, r2
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe fcbb 	bl	8001c68 <HAL_GPIO_Init>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80032f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032f6:	3301      	adds	r3, #1
 80032f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032fc:	e7c9      	b.n	8003292 <_ZN7QAD_ADC9imp_startEv+0xca>
		}
	}


	//Channel Configuration
	ADC_ChannelConfTypeDef  ADCChannel_Init = {0};
 80032fe:	f107 0308 	add.w	r3, r7, #8
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	605a      	str	r2, [r3, #4]
 8003308:	609a      	str	r2, [r3, #8]
 800330a:	60da      	str	r2, [r3, #12]
	ADCChannel_Init.Offset        = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003310:	2300      	movs	r3, #0
 8003312:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800331c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003320:	429a      	cmp	r2, r3
 8003322:	d230      	bcs.n	8003386 <_ZN7QAD_ADC9imp_startEv+0x1be>
		ADCChannel_Init.Channel       = m_sChannels[i].eChannel;
 8003324:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	330a      	adds	r3, #10
 800332c:	011b      	lsls	r3, r3, #4
 800332e:	4413      	add	r3, r2
 8003330:	3304      	adds	r3, #4
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60bb      	str	r3, [r7, #8]
		ADCChannel_Init.Rank          = i+1;
 8003336:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800333a:	3301      	adds	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
		ADCChannel_Init.SamplingTime = m_sChannels[i].eSamplingTime;
 800333e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	330a      	adds	r3, #10
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	4413      	add	r3, r2
 800334a:	3308      	adds	r3, #8
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&m_sADCHandle, &ADCChannel_Init) != HAL_OK) {
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3354      	adds	r3, #84	; 0x54
 8003354:	f107 0208 	add.w	r2, r7, #8
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7fe f912 	bl	8001584 <HAL_ADC_ConfigChannel>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	bf14      	ite	ne
 8003366:	2301      	movne	r3, #1
 8003368:	2300      	moveq	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	2b00      	cmp	r3, #0
 800336e:	d004      	beq.n	800337a <_ZN7QAD_ADC9imp_startEv+0x1b2>
			imp_stop();
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f839 	bl	80033e8 <_ZN7QAD_ADC8imp_stopEv>
			return QA_Fail;
 8003376:	2301      	movs	r3, #1
 8003378:	e02f      	b.n	80033da <_ZN7QAD_ADC9imp_startEv+0x212>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800337a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800337e:	3301      	adds	r3, #1
 8003380:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003384:	e7c7      	b.n	8003316 <_ZN7QAD_ADC9imp_startEv+0x14e>
		}

	}

	//Clear Data
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003386:	2300      	movs	r3, #0
 8003388:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800338c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003390:	2b0f      	cmp	r3, #15
 8003392:	d80d      	bhi.n	80033b0 <_ZN7QAD_ADC9imp_startEv+0x1e8>
		m_uData[i] = 0;
 8003394:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	33cc      	adds	r3, #204	; 0xcc
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4413      	add	r3, r2
 80033a0:	2200      	movs	r2, #0
 80033a2:	80da      	strh	r2, [r3, #6]
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 80033a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80033a8:	3301      	adds	r3, #1
 80033aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80033ae:	e7ed      	b.n	800338c <_ZN7QAD_ADC9imp_startEv+0x1c4>
	m_uDataIdx = 0;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

	//Enable ADC IRQ
	HAL_ADC_Start_IT(&m_sADCHandle);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3354      	adds	r3, #84	; 0x54
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd ffe5 	bl	800138c <HAL_ADC_Start_IT>
	__HAL_TIM_ENABLE(&m_sTIMHandle);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]

	//Set States
	m_eState = QA_Active;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3730      	adds	r7, #48	; 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40012000 	.word	0x40012000

080033e8 <_ZN7QAD_ADC8imp_stopEv>:


//QAD_ADC::imp_stop
//QAD_ADC Control Method
void QAD_ADC::imp_stop(void) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

	//Disable ADC IRQ
	__HAL_TIM_DISABLE(&m_sTIMHandle);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	6a1a      	ldr	r2, [r3, #32]
 80033f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d014      	beq.n	8003434 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	6a1a      	ldr	r2, [r3, #32]
 8003410:	f240 4344 	movw	r3, #1092	; 0x444
 8003414:	4013      	ands	r3, r2
 8003416:	2b00      	cmp	r3, #0
 8003418:	bf0c      	ite	eq
 800341a:	2301      	moveq	r3, #1
 800341c:	2300      	movne	r3, #0
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d007      	beq.n	8003434 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&m_sADCHandle);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3354      	adds	r3, #84	; 0x54
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe f865 	bl	8001508 <HAL_ADC_Stop_IT>

	//GPIO Deinitialization
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800343e:	2300      	movs	r3, #0
 8003440:	73fb      	strb	r3, [r7, #15]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	429a      	cmp	r2, r3
 800344c:	d212      	bcs.n	8003474 <_ZN7QAD_ADC8imp_stopEv+0x8c>
		HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 800344e:	7bfb      	ldrb	r3, [r7, #15]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	011b      	lsls	r3, r3, #4
 8003454:	4413      	add	r3, r2
 8003456:	339c      	adds	r3, #156	; 0x9c
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	7bfb      	ldrb	r3, [r7, #15]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	011b      	lsls	r3, r3, #4
 8003460:	4413      	add	r3, r2
 8003462:	33a0      	adds	r3, #160	; 0xa0
 8003464:	881b      	ldrh	r3, [r3, #0]
 8003466:	4619      	mov	r1, r3
 8003468:	f7fe fd82 	bl	8001f70 <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	3301      	adds	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e7e6      	b.n	8003442 <_ZN7QAD_ADC8imp_stopEv+0x5a>
	}

	//Deinitialize ADC
	HAL_ADC_DeInit(&m_sADCHandle);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3354      	adds	r3, #84	; 0x54
 8003478:	4618      	mov	r0, r3
 800347a:	f7fd ff40 	bl	80012fe <HAL_ADC_DeInit>

	//Set States
	m_eState = QA_Inactive;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	705a      	strb	r2, [r3, #1]
}
 8003484:	bf00      	nop
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <_ZN7QAD_ADC14imp_getTriggerEv>:
	//--------------------
	//QAD_ADC Tool Methods

//QAD_ADC::imp_getTrigger
//QAD_ADC Tool Method
uint32_t QAD_ADC::imp_getTrigger(void) {
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
	uint32_t uTrigger;
	switch (m_eTimer) {
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	789b      	ldrb	r3, [r3, #2]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d002      	beq.n	80034a2 <_ZN7QAD_ADC14imp_getTriggerEv+0x16>
 800349c:	2b02      	cmp	r3, #2
 800349e:	d004      	beq.n	80034aa <_ZN7QAD_ADC14imp_getTriggerEv+0x1e>
 80034a0:	e007      	b.n	80034b2 <_ZN7QAD_ADC14imp_getTriggerEv+0x26>
		case QAD_Timer2:
			uTrigger = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80034a2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80034a6:	60fb      	str	r3, [r7, #12]
			break;
 80034a8:	e006      	b.n	80034b8 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		case QAD_Timer3:
			uTrigger = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80034aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034ae:	60fb      	str	r3, [r7, #12]
			break;
 80034b0:	e002      	b.n	80034b8 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		default:
			uTrigger = 0xFFFFFFFF;
 80034b2:	f04f 33ff 	mov.w	r3, #4294967295
 80034b6:	60fb      	str	r3, [r7, #12]
	}
	return uTrigger;
 80034b8:	68fb      	ldr	r3, [r7, #12]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b084      	sub	sp, #16
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	60f8      	str	r0, [r7, #12]
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	4613      	mov	r3, r2
 80034d2:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	88fa      	ldrh	r2, [r7, #6]
 80034de:	809a      	strh	r2, [r3, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	719a      	strb	r2, [r3, #6]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f000 f841 	bl	8003580 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	889b      	ldrh	r3, [r3, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	4619      	mov	r1, r3
 800351c:	f7fe fe0c 	bl	8002138 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	741a      	strb	r2, [r3, #16]
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 800352e:	b580      	push	{r7, lr}
 8003530:	b082      	sub	sp, #8
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	889b      	ldrh	r3, [r3, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	4619      	mov	r1, r3
 8003542:	f7fe fdf9 	bl	8002138 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	741a      	strb	r2, [r3, #16]
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	7c1b      	ldrb	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8003564:	2b01      	cmp	r3, #1
 8003566:	d107      	bne.n	8003578 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ffe0 	bl	800352e <_ZN15QAD_GPIO_Output3offEv>
	    break;
 800356e:	e003      	b.n	8003578 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff ffc9 	bl	8003508 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8003576:	bf00      	nop
	}
}
 8003578:	bf00      	nop
 800357a:	3708      	adds	r7, #8
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	799b      	ldrb	r3, [r3, #6]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 80035a6:	2311      	movs	r3, #17
 80035a8:	e000      	b.n	80035ac <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 80035aa:	2301      	movs	r3, #1
 80035ac:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f107 020c 	add.w	r2, r7, #12
 80035c2:	4611      	mov	r1, r2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fb4f 	bl	8001c68 <HAL_GPIO_Init>
}
 80035ca:	bf00      	nop
 80035cc:	3720      	adds	r7, #32
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
	...

080035d4 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 80035d8:	4b10      	ldr	r3, [pc, #64]	; (800361c <_ZN11QAD_UARTMgr3getEv+0x48>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	f3bf 8f5b 	dmb	ish
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d010      	beq.n	8003616 <_ZN11QAD_UARTMgr3getEv+0x42>
 80035f4:	4809      	ldr	r0, [pc, #36]	; (800361c <_ZN11QAD_UARTMgr3getEv+0x48>)
 80035f6:	f000 fe4b 	bl	8004290 <__cxa_guard_acquire>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	d005      	beq.n	8003616 <_ZN11QAD_UARTMgr3getEv+0x42>
 800360a:	4805      	ldr	r0, [pc, #20]	; (8003620 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 800360c:	f000 fa40 	bl	8003a90 <_ZN11QAD_UARTMgrC1Ev>
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <_ZN11QAD_UARTMgr3getEv+0x48>)
 8003612:	f000 fe49 	bl	80042a8 <__cxa_guard_release>
		return instance;
 8003616:	4b02      	ldr	r3, [pc, #8]	; (8003620 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000288 	.word	0x20000288
 8003620:	20000264 	.word	0x20000264

08003624 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8003634:	2302      	movs	r3, #2
 8003636:	e00a      	b.n	800364e <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8003638:	f7ff ffcc 	bl	80035d4 <_ZN11QAD_UARTMgr3getEv>
 800363c:	4601      	mov	r1, r0
 800363e:	79fa      	ldrb	r2, [r7, #7]
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	440b      	add	r3, r1
 800364a:	3301      	adds	r3, #1
 800364c:	781b      	ldrb	r3, [r3, #0]
	}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}

08003656 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8003656:	b580      	push	{r7, lr}
 8003658:	b082      	sub	sp, #8
 800365a:	af00      	add	r7, sp, #0
 800365c:	4603      	mov	r3, r0
 800365e:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8003666:	2300      	movs	r3, #0
 8003668:	e00a      	b.n	8003680 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 800366a:	f7ff ffb3 	bl	80035d4 <_ZN11QAD_UARTMgr3getEv>
 800366e:	4601      	mov	r1, r0
 8003670:	79fa      	ldrb	r2, [r7, #7]
 8003672:	4613      	mov	r3, r2
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	4413      	add	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	3304      	adds	r3, #4
 800367e:	681b      	ldr	r3, [r3, #0]
	}
 8003680:	4618      	mov	r0, r3
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003692:	79fb      	ldrb	r3, [r7, #7]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d902      	bls.n	800369e <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8003698:	f06f 0309 	mvn.w	r3, #9
 800369c:	e00b      	b.n	80036b6 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 800369e:	f7ff ff99 	bl	80035d4 <_ZN11QAD_UARTMgr3getEv>
 80036a2:	4601      	mov	r1, r0
 80036a4:	79fa      	ldrb	r2, [r7, #7]
 80036a6:	4613      	mov	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	4413      	add	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3308      	adds	r3, #8
 80036b2:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 80036c8:	f7ff ff84 	bl	80035d4 <_ZN11QAD_UARTMgr3getEv>
 80036cc:	4602      	mov	r2, r0
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	4619      	mov	r1, r3
 80036d2:	4610      	mov	r0, r2
 80036d4:	f000 fa1c 	bl	8003b10 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 80036d8:	4603      	mov	r3, r0
	}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	4603      	mov	r3, r0
 80036ea:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 80036ec:	f7ff ff72 	bl	80035d4 <_ZN11QAD_UARTMgr3getEv>
 80036f0:	4602      	mov	r2, r0
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	4619      	mov	r1, r3
 80036f6:	4610      	mov	r0, r2
 80036f8:	f000 fa33 	bl	8003b62 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	4603      	mov	r3, r0
 800370c:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 800370e:	f7ff ff61 	bl	80035d4 <_ZN11QAD_UARTMgr3getEv>
 8003712:	4602      	mov	r2, r0
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 fa3d 	bl	8003b98 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 800371e:	bf00      	nop
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	4603      	mov	r3, r0
 800372e:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8003730:	f7ff ff50 	bl	80035d4 <_ZN11QAD_UARTMgr3getEv>
 8003734:	4602      	mov	r2, r0
 8003736:	79fb      	ldrb	r3, [r7, #7]
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f000 fa9a 	bl	8003c74 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff ff65 	bl	8003624 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 800376a:	2302      	movs	r3, #2
 800376c:	e012      	b.n	8003794 <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	785b      	ldrb	r3, [r3, #1]
 8003772:	4618      	mov	r0, r3
 8003774:	f7ff ffa3 	bl	80036be <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8a7 	bl	80038cc <_ZN8QAD_UART10periphInitEv>
 800377e:	4603      	mov	r3, r0
 8003780:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d004      	beq.n	8003792 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ffa8 	bl	80036e2 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
}
 8003794:	4618      	mov	r0, r3
 8003796:	3710      	adds	r7, #16
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d009      	beq.n	80037c0 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 80037ac:	2101      	movs	r1, #1
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f924 	bl	80039fc <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	785b      	ldrb	r3, [r3, #1]
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff ff92 	bl	80036e2 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 80037be:	e000      	b.n	80037c2 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 80037c0:	bf00      	nop
}
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	331c      	adds	r3, #28
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80037f6:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003822:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f042 0220 	orr.w	r2, r2, #32
 800384e:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f022 0220 	bic.w	r2, r2, #32
 800387a:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	605a      	str	r2, [r3, #4]
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b2db      	uxtb	r3, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b088      	sub	sp, #32
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80038d4:	f107 030c 	add.w	r3, r7, #12
 80038d8:	2200      	movs	r2, #0
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	605a      	str	r2, [r3, #4]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	60da      	str	r2, [r3, #12]
 80038e2:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	8a1b      	ldrh	r3, [r3, #16]
 80038e8:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 80038ea:	2302      	movs	r3, #2
 80038ec:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 80038ee:	2300      	movs	r3, #0
 80038f0:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 80038f2:	2303      	movs	r3, #3
 80038f4:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	7c9b      	ldrb	r3, [r3, #18]
 80038fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f107 020c 	add.w	r2, r7, #12
 8003904:	4611      	mov	r1, r2
 8003906:	4618      	mov	r0, r3
 8003908:	f7fe f9ae 	bl	8001c68 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	8b1b      	ldrh	r3, [r3, #24]
 8003910:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8003912:	2302      	movs	r3, #2
 8003914:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8003916:	2301      	movs	r3, #1
 8003918:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800391a:	2303      	movs	r3, #3
 800391c:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	7e9b      	ldrb	r3, [r3, #26]
 8003922:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f107 020c 	add.w	r2, r7, #12
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f99a 	bl	8001c68 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff fee3 	bl	8003704 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	785b      	ldrb	r3, [r3, #1]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff fe87 	bl	8003656 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8003948:	4602      	mov	r2, r0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	220c      	movs	r2, #12
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	331c      	adds	r3, #28
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff f8ca 	bl	8002b18 <HAL_UART_Init>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	bf14      	ite	ne
 800398a:	2301      	movne	r3, #1
 800398c:	2300      	moveq	r3, #0
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8003994:	2100      	movs	r1, #0
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 f830 	bl	80039fc <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800399c:	2301      	movs	r3, #1
 800399e:	e029      	b.n	80039f4 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039ae:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	785b      	ldrb	r3, [r3, #1]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff fe67 	bl	8003688 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4618      	mov	r0, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	7a1b      	ldrb	r3, [r3, #8]
 80039c2:	2200      	movs	r2, #0
 80039c4:	4619      	mov	r1, r3
 80039c6:	f7fe f90a 	bl	8001bde <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff fe5a 	bl	8003688 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fe f91d 	bl	8001c16 <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	460b      	mov	r3, r1
 8003a06:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8003a08:	78fb      	ldrb	r3, [r7, #3]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01b      	beq.n	8003a46 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff fefc 	bl	800380c <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f7ff ff25 	bl	8003864 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	785b      	ldrb	r3, [r3, #1]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff fe32 	bl	8003688 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8003a24:	4603      	mov	r3, r0
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fe f903 	bl	8001c32 <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a3a:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	331c      	adds	r3, #28
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7ff f8b6 	bl	8002bb2 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	785b      	ldrb	r3, [r3, #1]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fe6b 	bl	8003726 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	695a      	ldr	r2, [r3, #20]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8b1b      	ldrh	r3, [r3, #24]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7fe fa88 	bl	8001f70 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8a1b      	ldrh	r3, [r3, #16]
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f7fe fa80 	bl	8001f70 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8003a90:	b480      	push	{r7}
 8003a92:	b085      	sub	sp, #20
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8003a98:	2300      	movs	r3, #0
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d80d      	bhi.n	8003abe <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4413      	add	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	73fb      	strb	r3, [r7, #15]
 8003abc:	e7ee      	b.n	8003a9c <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2202      	movs	r2, #2
 8003ace:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <_ZN11QAD_UARTMgrC1Ev+0x74>)
 8003ad4:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <_ZN11QAD_UARTMgrC1Ev+0x78>)
 8003ada:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a0b      	ldr	r2, [pc, #44]	; (8003b0c <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 8003ae0:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2225      	movs	r2, #37	; 0x25
 8003ae6:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2226      	movs	r2, #38	; 0x26
 8003aec:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2247      	movs	r2, #71	; 0x47
 8003af2:	f883 2020 	strb.w	r2, [r3, #32]

}
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40011000 	.word	0x40011000
 8003b08:	40004400 	.word	0x40004400
 8003b0c:	40011400 	.word	0x40011400

08003b10 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e017      	b.n	8003b56 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3301      	adds	r3, #1
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	e00a      	b.n	8003b56 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3301      	adds	r3, #1
 8003b50:	2201      	movs	r2, #1
 8003b52:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8003b6e:	78fb      	ldrb	r3, [r7, #3]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d80a      	bhi.n	8003b8a <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	3301      	adds	r3, #1
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e000      	b.n	8003b8c <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8003b8a:	bf00      	nop
}
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8003ba4:	78fb      	ldrb	r3, [r7, #3]
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d85c      	bhi.n	8003c64 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bf7 	.word	0x08003bf7
 8003bb8:	08003c2d 	.word	0x08003c2d
 8003bbc:	08003c63 	.word	0x08003c63
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003bca:	f043 0310 	orr.w	r3, r3, #16
 8003bce:	6453      	str	r3, [r2, #68]	; 0x44
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 8003bdc:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	4a23      	ldr	r2, [pc, #140]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003be2:	f043 0310 	orr.w	r3, r3, #16
 8003be6:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8003be8:	4b21      	ldr	r3, [pc, #132]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003bee:	f023 0310 	bic.w	r3, r3, #16
 8003bf2:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8003bf4:	e036      	b.n	8003c64 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a1c      	ldr	r2, [pc, #112]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	613b      	str	r3, [r7, #16]
 8003c10:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 8003c12:	4b17      	ldr	r3, [pc, #92]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8003c1e:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c28:	6213      	str	r3, [r2, #32]
      break;
 8003c2a:	e01b      	b.n	8003c64 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c34:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c36:	f043 0320 	orr.w	r3, r3, #32
 8003c3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c4e:	f043 0320 	orr.w	r3, r3, #32
 8003c52:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8003c5a:	f023 0320 	bic.w	r3, r3, #32
 8003c5e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8003c60:	e000      	b.n	8003c64 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 8003c62:	bf00      	nop
  }
}
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40023800 	.word	0x40023800

08003c74 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d820      	bhi.n	8003cc8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 8003c86:	a201      	add	r2, pc, #4	; (adr r2, 8003c8c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003c9d 	.word	0x08003c9d
 8003c90:	08003cab 	.word	0x08003cab
 8003c94:	08003cb9 	.word	0x08003cb9
 8003c98:	08003cc7 	.word	0x08003cc7
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8003c9c:	4b0d      	ldr	r3, [pc, #52]	; (8003cd4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca0:	4a0c      	ldr	r2, [pc, #48]	; (8003cd4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8003ca2:	f023 0310 	bic.w	r3, r3, #16
 8003ca6:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8003ca8:	e00e      	b.n	8003cc8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8003caa:	4b0a      	ldr	r3, [pc, #40]	; (8003cd4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	4a09      	ldr	r2, [pc, #36]	; (8003cd4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8003cb0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003cb4:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8003cb6:	e007      	b.n	8003cc8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8003cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cbc:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8003cbe:	f023 0320 	bic.w	r3, r3, #32
 8003cc2:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8003cc4:	e000      	b.n	8003cc8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 8003cc6:	bf00      	nop
  }
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40023800 	.word	0x40023800

08003cd8 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7b1b      	ldrb	r3, [r3, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e010      	b.n	8003d10 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6839      	ldr	r1, [r7, #0]
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	e003      	b.n	8003d10 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3308      	adds	r3, #8
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	4798      	blx	r3
}
 8003d30:	bf00      	nop
 8003d32:	3708      	adds	r7, #8
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8003d42:	6838      	ldr	r0, [r7, #0]
 8003d44:	f7fc fa48 	bl	80001d8 <strlen>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	81fb      	strh	r3, [r7, #14]
 8003d50:	89fa      	ldrh	r2, [r7, #14]
 8003d52:	89bb      	ldrh	r3, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d20f      	bcs.n	8003d78 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f837 	bl	8003dd0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003d62:	89fb      	ldrh	r3, [r7, #14]
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	4413      	add	r3, r2
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f000 f9e1 	bl	8004132 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8003d70:	89fb      	ldrh	r3, [r7, #14]
 8003d72:	3301      	adds	r3, #1
 8003d74:	81fb      	strh	r3, [r7, #14]
 8003d76:	e7eb      	b.n	8003d50 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3304      	adds	r3, #4
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 f827 	bl	8003dd0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003d82:	4603      	mov	r3, r0
 8003d84:	210d      	movs	r1, #13
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 f9d3 	bl	8004132 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	4798      	blx	r3
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f80f 	bl	8003dd0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003db2:	4603      	mov	r3, r0
 8003db4:	210d      	movs	r1, #13
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 f9bb 	bl	8004132 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	4798      	blx	r3
}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	return get();
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f805 	bl	8003de8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 8003dde:	4603      	mov	r3, r0
      }
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 f805 	bl	8003e02 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b082      	sub	sp, #8
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 f806 	bl	8003e1e <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8003e12:	4603      	mov	r3, r0
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f805 	bl	8003e38 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4618      	mov	r0, r3
 8003e32:	3708      	adds	r7, #8
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f805 	bl	8003e50 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8003e46:	4603      	mov	r3, r0
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 f805 	bl	8003e6a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	3314      	adds	r3, #20
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 f8e4 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fc56 	bl	8003748 <_ZN8QAD_UART4initEv>
 8003e9c:	4603      	mov	r3, r0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b082      	sub	sp, #8
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	3314      	adds	r3, #20
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f8d2 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fc6e 	bl	800379c <_ZN8QAD_UART6deinitEv>
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 8003ec8:	b590      	push	{r4, r7, lr}
 8003eca:	b095      	sub	sp, #84	; 0x54
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3314      	adds	r3, #20
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f8c0 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003edc:	4603      	mov	r3, r0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff fc72 	bl	80037c8 <_ZN8QAD_UART9getHandleEv>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f107 0308 	add.w	r3, r7, #8
 8003eea:	4611      	mov	r1, r2
 8003eec:	2244      	movs	r2, #68	; 0x44
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa48 	bl	8004384 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0320 	and.w	r3, r3, #32
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d01f      	beq.n	8003f4a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	3314      	adds	r3, #20
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 f8a4 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003f14:	4603      	mov	r3, r0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff fcca 	bl	80038b0 <_ZN8QAD_UART6dataRXEv>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7b9b      	ldrb	r3, [r3, #14]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff ff4e 	bl	8003dd0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003f34:	4602      	mov	r2, r0
 8003f36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f000 f8f8 	bl	8004132 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f06f 0220 	mvn.w	r2, #32
 8003f48:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f52:	2b80      	cmp	r3, #128	; 0x80
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d035      	beq.n	8003fcc <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff33 	bl	8003dd0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 f8cd 	bl	800410c <_ZN14QAT_FIFOBuffer5emptyEv>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf0c      	ite	eq
 8003f78:	2301      	moveq	r3, #1
 8003f7a:	2300      	movne	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d014      	beq.n	8003fac <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3314      	adds	r3, #20
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f868 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	3304      	adds	r3, #4
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7ff ff1c 	bl	8003dd0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f8ed 	bl	800417a <_ZN14QAT_FIFOBuffer3popEv>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f7ff fc73 	bl	8003890 <_ZN8QAD_UART6dataTXEh>
 8003faa:	e00b      	b.n	8003fc4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f853 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff fc27 	bl	800380c <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fca:	601a      	str	r2, [r3, #0]
  }
}
 8003fcc:	bf00      	nop
 8003fce:	3754      	adds	r7, #84	; 0x54
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd90      	pop	{r4, r7, pc}

08003fd4 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3314      	adds	r3, #20
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 f83b 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fbf9 	bl	80037e0 <_ZN8QAD_UART7startTXEv>
}
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3314      	adds	r3, #20
 8004002:	4618      	mov	r0, r3
 8004004:	f000 f82a 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004008:	4603      	mov	r3, r0
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fbfe 	bl	800380c <_ZN8QAD_UART6stopTXEv>
}
 8004010:	bf00      	nop
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3314      	adds	r3, #20
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f819 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800402a:	4603      	mov	r3, r0
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fc03 	bl	8003838 <_ZN8QAD_UART7startRXEv>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	3314      	adds	r3, #20
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f808 	bl	800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800404c:	4603      	mov	r3, r0
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fc08 	bl	8003864 <_ZN8QAD_UART6stopRXEv>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
	return get();
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f805 	bl	8004074 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 800406a:	4603      	mov	r3, r0
      }
 800406c:	4618      	mov	r0, r3
 800406e:	3708      	adds	r7, #8
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4618      	mov	r0, r3
 8004080:	f000 f805 	bl	800408e <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8004084:	4603      	mov	r3, r0
 8004086:	4618      	mov	r0, r3
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f806 	bl	80040aa <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800409e:	4603      	mov	r3, r0
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 f805 	bl	80040c4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f805 	bl	80040dc <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 80040d2:	4603      	mov	r3, r0
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f805 	bl	80040f6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 80040ec:	4603      	mov	r3, r0
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	88da      	ldrh	r2, [r3, #6]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	891b      	ldrh	r3, [r3, #8]
 800411c:	429a      	cmp	r2, r3
 800411e:	d101      	bne.n	8004124 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 8004132:	b580      	push	{r7, lr}
 8004134:	b082      	sub	sp, #8
 8004136:	af00      	add	r7, sp, #0
 8004138:	6078      	str	r0, [r7, #4]
 800413a:	460b      	mov	r3, r1
 800413c:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	891b      	ldrh	r3, [r3, #8]
 8004144:	4619      	mov	r1, r3
 8004146:	4610      	mov	r0, r2
 8004148:	f000 f847 	bl	80041da <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800414c:	4602      	mov	r2, r0
 800414e:	78fb      	ldrb	r3, [r7, #3]
 8004150:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	889a      	ldrh	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	891b      	ldrh	r3, [r3, #8]
 800415a:	429a      	cmp	r2, r3
 800415c:	d906      	bls.n	800416c <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	891b      	ldrh	r3, [r3, #8]
 8004162:	3301      	adds	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 800416a:	e002      	b.n	8004172 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	811a      	strh	r2, [r3, #8]
}
 8004172:	bf00      	nop
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7ff ffc2 	bl	800410c <_ZN14QAT_FIFOBuffer5emptyEv>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d01b      	beq.n	80041d0 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	88db      	ldrh	r3, [r3, #6]
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 f81a 	bl	80041da <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80041a6:	4603      	mov	r3, r0
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	889a      	ldrh	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	88db      	ldrh	r3, [r3, #6]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d906      	bls.n	80041c6 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	88db      	ldrh	r3, [r3, #6]
 80041bc:	3301      	adds	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	80da      	strh	r2, [r3, #6]
 80041c4:	e002      	b.n	80041cc <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	80da      	strh	r2, [r3, #6]
		return uData;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
 80041ce:	e000      	b.n	80041d2 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3710      	adds	r7, #16
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}

080041da <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 80041da:	b580      	push	{r7, lr}
 80041dc:	b082      	sub	sp, #8
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f807 	bl	80041f8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80041ea:	4602      	mov	r2, r0
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4413      	add	r3, r2
      }
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 f805 	bl	8004212 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8004208:	4603      	mov	r3, r0
 800420a:	4618      	mov	r0, r3
 800420c:	3708      	adds	r7, #8
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4618      	mov	r0, r3
 800421e:	f000 f806 	bl	800422e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800422e:	b580      	push	{r7, lr}
 8004230:	b082      	sub	sp, #8
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4618      	mov	r0, r3
 800423a:	f000 f805 	bl	8004248 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800423e:	4603      	mov	r3, r0
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 f805 	bl	8004260 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8004256:	4603      	mov	r3, r0
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004260:	b580      	push	{r7, lr}
 8004262:	b082      	sub	sp, #8
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4618      	mov	r0, r3
 800426c:	f000 f805 	bl	800427a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8004270:	4603      	mov	r3, r0
 8004272:	4618      	mov	r0, r3
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <__cxa_guard_acquire>:
 8004290:	6803      	ldr	r3, [r0, #0]
 8004292:	07db      	lsls	r3, r3, #31
 8004294:	d406      	bmi.n	80042a4 <__cxa_guard_acquire+0x14>
 8004296:	7843      	ldrb	r3, [r0, #1]
 8004298:	b103      	cbz	r3, 800429c <__cxa_guard_acquire+0xc>
 800429a:	deff      	udf	#255	; 0xff
 800429c:	2301      	movs	r3, #1
 800429e:	7043      	strb	r3, [r0, #1]
 80042a0:	4618      	mov	r0, r3
 80042a2:	4770      	bx	lr
 80042a4:	2000      	movs	r0, #0
 80042a6:	4770      	bx	lr

080042a8 <__cxa_guard_release>:
 80042a8:	2301      	movs	r3, #1
 80042aa:	6003      	str	r3, [r0, #0]
 80042ac:	4770      	bx	lr

080042ae <_Znwj>:
 80042ae:	2801      	cmp	r0, #1
 80042b0:	bf38      	it	cc
 80042b2:	2001      	movcc	r0, #1
 80042b4:	b510      	push	{r4, lr}
 80042b6:	4604      	mov	r4, r0
 80042b8:	4620      	mov	r0, r4
 80042ba:	f000 f85b 	bl	8004374 <malloc>
 80042be:	b930      	cbnz	r0, 80042ce <_Znwj+0x20>
 80042c0:	f000 f81e 	bl	8004300 <_ZSt15get_new_handlerv>
 80042c4:	b908      	cbnz	r0, 80042ca <_Znwj+0x1c>
 80042c6:	f000 f823 	bl	8004310 <abort>
 80042ca:	4780      	blx	r0
 80042cc:	e7f4      	b.n	80042b8 <_Znwj+0xa>
 80042ce:	bd10      	pop	{r4, pc}

080042d0 <_Znaj>:
 80042d0:	f7ff bfed 	b.w	80042ae <_Znwj>

080042d4 <__cxa_pure_virtual>:
 80042d4:	b508      	push	{r3, lr}
 80042d6:	f000 f80d 	bl	80042f4 <_ZSt9terminatev>

080042da <_ZN10__cxxabiv111__terminateEPFvvE>:
 80042da:	b508      	push	{r3, lr}
 80042dc:	4780      	blx	r0
 80042de:	f000 f817 	bl	8004310 <abort>
	...

080042e4 <_ZSt13get_terminatev>:
 80042e4:	4b02      	ldr	r3, [pc, #8]	; (80042f0 <_ZSt13get_terminatev+0xc>)
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	f3bf 8f5b 	dmb	ish
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	2000000c 	.word	0x2000000c

080042f4 <_ZSt9terminatev>:
 80042f4:	b508      	push	{r3, lr}
 80042f6:	f7ff fff5 	bl	80042e4 <_ZSt13get_terminatev>
 80042fa:	f7ff ffee 	bl	80042da <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004300 <_ZSt15get_new_handlerv>:
 8004300:	4b02      	ldr	r3, [pc, #8]	; (800430c <_ZSt15get_new_handlerv+0xc>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	f3bf 8f5b 	dmb	ish
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	2000028c 	.word	0x2000028c

08004310 <abort>:
 8004310:	b508      	push	{r3, lr}
 8004312:	2006      	movs	r0, #6
 8004314:	f000 f918 	bl	8004548 <raise>
 8004318:	2001      	movs	r0, #1
 800431a:	f7fc fee7 	bl	80010ec <_exit>
	...

08004320 <__errno>:
 8004320:	4b01      	ldr	r3, [pc, #4]	; (8004328 <__errno+0x8>)
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	20000010 	.word	0x20000010

0800432c <__libc_init_array>:
 800432c:	b570      	push	{r4, r5, r6, lr}
 800432e:	4d0d      	ldr	r5, [pc, #52]	; (8004364 <__libc_init_array+0x38>)
 8004330:	4c0d      	ldr	r4, [pc, #52]	; (8004368 <__libc_init_array+0x3c>)
 8004332:	1b64      	subs	r4, r4, r5
 8004334:	10a4      	asrs	r4, r4, #2
 8004336:	2600      	movs	r6, #0
 8004338:	42a6      	cmp	r6, r4
 800433a:	d109      	bne.n	8004350 <__libc_init_array+0x24>
 800433c:	4d0b      	ldr	r5, [pc, #44]	; (800436c <__libc_init_array+0x40>)
 800433e:	4c0c      	ldr	r4, [pc, #48]	; (8004370 <__libc_init_array+0x44>)
 8004340:	f000 f92c 	bl	800459c <_init>
 8004344:	1b64      	subs	r4, r4, r5
 8004346:	10a4      	asrs	r4, r4, #2
 8004348:	2600      	movs	r6, #0
 800434a:	42a6      	cmp	r6, r4
 800434c:	d105      	bne.n	800435a <__libc_init_array+0x2e>
 800434e:	bd70      	pop	{r4, r5, r6, pc}
 8004350:	f855 3b04 	ldr.w	r3, [r5], #4
 8004354:	4798      	blx	r3
 8004356:	3601      	adds	r6, #1
 8004358:	e7ee      	b.n	8004338 <__libc_init_array+0xc>
 800435a:	f855 3b04 	ldr.w	r3, [r5], #4
 800435e:	4798      	blx	r3
 8004360:	3601      	adds	r6, #1
 8004362:	e7f2      	b.n	800434a <__libc_init_array+0x1e>
 8004364:	0800466c 	.word	0x0800466c
 8004368:	0800466c 	.word	0x0800466c
 800436c:	0800466c 	.word	0x0800466c
 8004370:	08004670 	.word	0x08004670

08004374 <malloc>:
 8004374:	4b02      	ldr	r3, [pc, #8]	; (8004380 <malloc+0xc>)
 8004376:	4601      	mov	r1, r0
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	f000 b839 	b.w	80043f0 <_malloc_r>
 800437e:	bf00      	nop
 8004380:	20000010 	.word	0x20000010

08004384 <memcpy>:
 8004384:	440a      	add	r2, r1
 8004386:	4291      	cmp	r1, r2
 8004388:	f100 33ff 	add.w	r3, r0, #4294967295
 800438c:	d100      	bne.n	8004390 <memcpy+0xc>
 800438e:	4770      	bx	lr
 8004390:	b510      	push	{r4, lr}
 8004392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800439a:	4291      	cmp	r1, r2
 800439c:	d1f9      	bne.n	8004392 <memcpy+0xe>
 800439e:	bd10      	pop	{r4, pc}

080043a0 <memset>:
 80043a0:	4402      	add	r2, r0
 80043a2:	4603      	mov	r3, r0
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d100      	bne.n	80043aa <memset+0xa>
 80043a8:	4770      	bx	lr
 80043aa:	f803 1b01 	strb.w	r1, [r3], #1
 80043ae:	e7f9      	b.n	80043a4 <memset+0x4>

080043b0 <sbrk_aligned>:
 80043b0:	b570      	push	{r4, r5, r6, lr}
 80043b2:	4e0e      	ldr	r6, [pc, #56]	; (80043ec <sbrk_aligned+0x3c>)
 80043b4:	460c      	mov	r4, r1
 80043b6:	6831      	ldr	r1, [r6, #0]
 80043b8:	4605      	mov	r5, r0
 80043ba:	b911      	cbnz	r1, 80043c2 <sbrk_aligned+0x12>
 80043bc:	f000 f88c 	bl	80044d8 <_sbrk_r>
 80043c0:	6030      	str	r0, [r6, #0]
 80043c2:	4621      	mov	r1, r4
 80043c4:	4628      	mov	r0, r5
 80043c6:	f000 f887 	bl	80044d8 <_sbrk_r>
 80043ca:	1c43      	adds	r3, r0, #1
 80043cc:	d00a      	beq.n	80043e4 <sbrk_aligned+0x34>
 80043ce:	1cc4      	adds	r4, r0, #3
 80043d0:	f024 0403 	bic.w	r4, r4, #3
 80043d4:	42a0      	cmp	r0, r4
 80043d6:	d007      	beq.n	80043e8 <sbrk_aligned+0x38>
 80043d8:	1a21      	subs	r1, r4, r0
 80043da:	4628      	mov	r0, r5
 80043dc:	f000 f87c 	bl	80044d8 <_sbrk_r>
 80043e0:	3001      	adds	r0, #1
 80043e2:	d101      	bne.n	80043e8 <sbrk_aligned+0x38>
 80043e4:	f04f 34ff 	mov.w	r4, #4294967295
 80043e8:	4620      	mov	r0, r4
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	20000294 	.word	0x20000294

080043f0 <_malloc_r>:
 80043f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f4:	1ccd      	adds	r5, r1, #3
 80043f6:	f025 0503 	bic.w	r5, r5, #3
 80043fa:	3508      	adds	r5, #8
 80043fc:	2d0c      	cmp	r5, #12
 80043fe:	bf38      	it	cc
 8004400:	250c      	movcc	r5, #12
 8004402:	2d00      	cmp	r5, #0
 8004404:	4607      	mov	r7, r0
 8004406:	db01      	blt.n	800440c <_malloc_r+0x1c>
 8004408:	42a9      	cmp	r1, r5
 800440a:	d905      	bls.n	8004418 <_malloc_r+0x28>
 800440c:	230c      	movs	r3, #12
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	2600      	movs	r6, #0
 8004412:	4630      	mov	r0, r6
 8004414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004418:	4e2e      	ldr	r6, [pc, #184]	; (80044d4 <_malloc_r+0xe4>)
 800441a:	f000 f8b1 	bl	8004580 <__malloc_lock>
 800441e:	6833      	ldr	r3, [r6, #0]
 8004420:	461c      	mov	r4, r3
 8004422:	bb34      	cbnz	r4, 8004472 <_malloc_r+0x82>
 8004424:	4629      	mov	r1, r5
 8004426:	4638      	mov	r0, r7
 8004428:	f7ff ffc2 	bl	80043b0 <sbrk_aligned>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	4604      	mov	r4, r0
 8004430:	d14d      	bne.n	80044ce <_malloc_r+0xde>
 8004432:	6834      	ldr	r4, [r6, #0]
 8004434:	4626      	mov	r6, r4
 8004436:	2e00      	cmp	r6, #0
 8004438:	d140      	bne.n	80044bc <_malloc_r+0xcc>
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	4631      	mov	r1, r6
 800443e:	4638      	mov	r0, r7
 8004440:	eb04 0803 	add.w	r8, r4, r3
 8004444:	f000 f848 	bl	80044d8 <_sbrk_r>
 8004448:	4580      	cmp	r8, r0
 800444a:	d13a      	bne.n	80044c2 <_malloc_r+0xd2>
 800444c:	6821      	ldr	r1, [r4, #0]
 800444e:	3503      	adds	r5, #3
 8004450:	1a6d      	subs	r5, r5, r1
 8004452:	f025 0503 	bic.w	r5, r5, #3
 8004456:	3508      	adds	r5, #8
 8004458:	2d0c      	cmp	r5, #12
 800445a:	bf38      	it	cc
 800445c:	250c      	movcc	r5, #12
 800445e:	4629      	mov	r1, r5
 8004460:	4638      	mov	r0, r7
 8004462:	f7ff ffa5 	bl	80043b0 <sbrk_aligned>
 8004466:	3001      	adds	r0, #1
 8004468:	d02b      	beq.n	80044c2 <_malloc_r+0xd2>
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	442b      	add	r3, r5
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	e00e      	b.n	8004490 <_malloc_r+0xa0>
 8004472:	6822      	ldr	r2, [r4, #0]
 8004474:	1b52      	subs	r2, r2, r5
 8004476:	d41e      	bmi.n	80044b6 <_malloc_r+0xc6>
 8004478:	2a0b      	cmp	r2, #11
 800447a:	d916      	bls.n	80044aa <_malloc_r+0xba>
 800447c:	1961      	adds	r1, r4, r5
 800447e:	42a3      	cmp	r3, r4
 8004480:	6025      	str	r5, [r4, #0]
 8004482:	bf18      	it	ne
 8004484:	6059      	strne	r1, [r3, #4]
 8004486:	6863      	ldr	r3, [r4, #4]
 8004488:	bf08      	it	eq
 800448a:	6031      	streq	r1, [r6, #0]
 800448c:	5162      	str	r2, [r4, r5]
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	4638      	mov	r0, r7
 8004492:	f104 060b 	add.w	r6, r4, #11
 8004496:	f000 f879 	bl	800458c <__malloc_unlock>
 800449a:	f026 0607 	bic.w	r6, r6, #7
 800449e:	1d23      	adds	r3, r4, #4
 80044a0:	1af2      	subs	r2, r6, r3
 80044a2:	d0b6      	beq.n	8004412 <_malloc_r+0x22>
 80044a4:	1b9b      	subs	r3, r3, r6
 80044a6:	50a3      	str	r3, [r4, r2]
 80044a8:	e7b3      	b.n	8004412 <_malloc_r+0x22>
 80044aa:	6862      	ldr	r2, [r4, #4]
 80044ac:	42a3      	cmp	r3, r4
 80044ae:	bf0c      	ite	eq
 80044b0:	6032      	streq	r2, [r6, #0]
 80044b2:	605a      	strne	r2, [r3, #4]
 80044b4:	e7ec      	b.n	8004490 <_malloc_r+0xa0>
 80044b6:	4623      	mov	r3, r4
 80044b8:	6864      	ldr	r4, [r4, #4]
 80044ba:	e7b2      	b.n	8004422 <_malloc_r+0x32>
 80044bc:	4634      	mov	r4, r6
 80044be:	6876      	ldr	r6, [r6, #4]
 80044c0:	e7b9      	b.n	8004436 <_malloc_r+0x46>
 80044c2:	230c      	movs	r3, #12
 80044c4:	603b      	str	r3, [r7, #0]
 80044c6:	4638      	mov	r0, r7
 80044c8:	f000 f860 	bl	800458c <__malloc_unlock>
 80044cc:	e7a1      	b.n	8004412 <_malloc_r+0x22>
 80044ce:	6025      	str	r5, [r4, #0]
 80044d0:	e7de      	b.n	8004490 <_malloc_r+0xa0>
 80044d2:	bf00      	nop
 80044d4:	20000290 	.word	0x20000290

080044d8 <_sbrk_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4d06      	ldr	r5, [pc, #24]	; (80044f4 <_sbrk_r+0x1c>)
 80044dc:	2300      	movs	r3, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fc fe0c 	bl	8001100 <_sbrk>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_sbrk_r+0x1a>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_sbrk_r+0x1a>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	20000298 	.word	0x20000298

080044f8 <_raise_r>:
 80044f8:	291f      	cmp	r1, #31
 80044fa:	b538      	push	{r3, r4, r5, lr}
 80044fc:	4604      	mov	r4, r0
 80044fe:	460d      	mov	r5, r1
 8004500:	d904      	bls.n	800450c <_raise_r+0x14>
 8004502:	2316      	movs	r3, #22
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	f04f 30ff 	mov.w	r0, #4294967295
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800450e:	b112      	cbz	r2, 8004516 <_raise_r+0x1e>
 8004510:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004514:	b94b      	cbnz	r3, 800452a <_raise_r+0x32>
 8004516:	4620      	mov	r0, r4
 8004518:	f000 f830 	bl	800457c <_getpid_r>
 800451c:	462a      	mov	r2, r5
 800451e:	4601      	mov	r1, r0
 8004520:	4620      	mov	r0, r4
 8004522:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004526:	f000 b817 	b.w	8004558 <_kill_r>
 800452a:	2b01      	cmp	r3, #1
 800452c:	d00a      	beq.n	8004544 <_raise_r+0x4c>
 800452e:	1c59      	adds	r1, r3, #1
 8004530:	d103      	bne.n	800453a <_raise_r+0x42>
 8004532:	2316      	movs	r3, #22
 8004534:	6003      	str	r3, [r0, #0]
 8004536:	2001      	movs	r0, #1
 8004538:	e7e7      	b.n	800450a <_raise_r+0x12>
 800453a:	2400      	movs	r4, #0
 800453c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004540:	4628      	mov	r0, r5
 8004542:	4798      	blx	r3
 8004544:	2000      	movs	r0, #0
 8004546:	e7e0      	b.n	800450a <_raise_r+0x12>

08004548 <raise>:
 8004548:	4b02      	ldr	r3, [pc, #8]	; (8004554 <raise+0xc>)
 800454a:	4601      	mov	r1, r0
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	f7ff bfd3 	b.w	80044f8 <_raise_r>
 8004552:	bf00      	nop
 8004554:	20000010 	.word	0x20000010

08004558 <_kill_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	4d07      	ldr	r5, [pc, #28]	; (8004578 <_kill_r+0x20>)
 800455c:	2300      	movs	r3, #0
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	4611      	mov	r1, r2
 8004564:	602b      	str	r3, [r5, #0]
 8004566:	f7fc fdb1 	bl	80010cc <_kill>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	d102      	bne.n	8004574 <_kill_r+0x1c>
 800456e:	682b      	ldr	r3, [r5, #0]
 8004570:	b103      	cbz	r3, 8004574 <_kill_r+0x1c>
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	bd38      	pop	{r3, r4, r5, pc}
 8004576:	bf00      	nop
 8004578:	20000298 	.word	0x20000298

0800457c <_getpid_r>:
 800457c:	f7fc bd9e 	b.w	80010bc <_getpid>

08004580 <__malloc_lock>:
 8004580:	4801      	ldr	r0, [pc, #4]	; (8004588 <__malloc_lock+0x8>)
 8004582:	f000 b809 	b.w	8004598 <__retarget_lock_acquire_recursive>
 8004586:	bf00      	nop
 8004588:	2000029c 	.word	0x2000029c

0800458c <__malloc_unlock>:
 800458c:	4801      	ldr	r0, [pc, #4]	; (8004594 <__malloc_unlock+0x8>)
 800458e:	f000 b804 	b.w	800459a <__retarget_lock_release_recursive>
 8004592:	bf00      	nop
 8004594:	2000029c 	.word	0x2000029c

08004598 <__retarget_lock_acquire_recursive>:
 8004598:	4770      	bx	lr

0800459a <__retarget_lock_release_recursive>:
 800459a:	4770      	bx	lr

0800459c <_init>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr

080045a8 <_fini>:
 80045a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045aa:	bf00      	nop
 80045ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ae:	bc08      	pop	{r3}
 80045b0:	469e      	mov	lr, r3
 80045b2:	4770      	bx	lr
