
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e88  08005e88  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e90  08005e90  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e94  08005e94  00015e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000074  08005f0c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08005f0c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00016701  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002d14b  00000000  00000000  000367a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d65  00000000  00000000  000638f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00069658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aa610  00000000  00000000  0006a728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f98  00000000  00000000  00114d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001eb85  00000000  00000000  00115cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c3c  00000000  00000000  001348a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d40 	.word	0x08005d40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005d40 	.word	0x08005d40

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800058e:	490e      	ldr	r1, [pc, #56]	; (80005c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005a4:	4c0b      	ldr	r4, [pc, #44]	; (80005d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005b2:	f000 ff1d 	bl	80013f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b6:	f004 ff1d 	bl	80053f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ba:	f000 faef 	bl	8000b9c <main>
  bx  lr    
 80005be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005cc:	08005e98 	.word	0x08005e98
  ldr r2, =_sbss
 80005d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005d4:	200002ec 	.word	0x200002ec

080005d8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <DMA1_Stream0_IRQHandler>
	...

080005dc <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	; 0x60
 80005e0:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005e2:	4b6a      	ldr	r3, [pc, #424]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a69      	ldr	r2, [pc, #420]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ec:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80005ee:	4b67      	ldr	r3, [pc, #412]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a66      	ldr	r2, [pc, #408]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f8:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fa:	4b64      	ldr	r3, [pc, #400]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a63      	ldr	r2, [pc, #396]	; (800078c <_Z16SystemInitializev+0x1b0>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000604:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000606:	2003      	movs	r0, #3
 8000608:	f001 fbfc 	bl	8001e04 <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 ff01 	bl	8001414 <HAL_InitTick>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 8000622:	2301      	movs	r3, #1
 8000624:	e0ad      	b.n	8000782 <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	4b59      	ldr	r3, [pc, #356]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a58      	ldr	r2, [pc, #352]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
 8000636:	4b56      	ldr	r3, [pc, #344]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	4b53      	ldr	r3, [pc, #332]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a52      	ldr	r2, [pc, #328]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 800064c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 100MHz clock
  //NOTE: HSE Oscillator provided on STM32F411RE Nucleo 64 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800065e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fefe 	bl	8005468 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 800066c:	2301      	movs	r3, #1
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 8000690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fe87 	bl	80023a8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e069      	b.n	8000782 <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 80006da:	230f      	movs	r3, #15
 80006dc:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 100MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f8ce 	bl	8002898 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf14      	ite	ne
 8000702:	2301      	movne	r3, #1
 8000704:	2300      	moveq	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 800070c:	2301      	movs	r3, #1
 800070e:	e038      	b.n	8000782 <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6313      	str	r3, [r2, #48]	; 0x30
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0308 	and.w	r3, r3, #8
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3760      	adds	r7, #96	; 0x60
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023c00 	.word	0x40023c00
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <_ZN7QAD_ADCC1Ev>:
	uint8_t                 m_uDataIdx;


	//-----------
	//Constructor
	QAD_ADC() :
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_sTIMHandle({0}),
		m_sADCHandle({0}),
		m_uChannelCount(0) {}
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	330c      	adds	r3, #12
 80007b0:	2248      	movs	r2, #72	; 0x48
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fe57 	bl	8005468 <memset>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3354      	adds	r3, #84	; 0x54
 80007be:	2248      	movs	r2, #72	; 0x48
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fe50 	bl	8005468 <memset>
 80007c8:	230f      	movs	r3, #15
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db01      	blt.n	80007d2 <_ZN7QAD_ADCC1Ev+0x3a>
 80007ce:	3b01      	subs	r3, #1
 80007d0:	e7fb      	b.n	80007ca <_ZN7QAD_ADCC1Ev+0x32>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN7QAD_ADC3getEv>:


	  //-----------------
	  //Singleton Methods

	static QAD_ADC& get(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
		static QAD_ADC instance;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f3bf 8f5b 	dmb	ish
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d010      	beq.n	8000826 <_ZN7QAD_ADC3getEv+0x42>
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 8000806:	f004 fda7 	bl	8005358 <__cxa_guard_acquire>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d005      	beq.n	8000826 <_ZN7QAD_ADC3getEv+0x42>
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <_ZN7QAD_ADC3getEv+0x4c>)
 800081c:	f7ff ffbc 	bl	8000798 <_ZN7QAD_ADCC1Ev>
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 8000822:	f004 fda5 	bl	8005370 <__cxa_guard_release>
		return instance;
 8000826:	4b02      	ldr	r3, [pc, #8]	; (8000830 <_ZN7QAD_ADC3getEv+0x4c>)
	}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000250 	.word	0x20000250
 8000830:	20000090 	.word	0x20000090

08000834 <_ZN7QAD_ADC7handlerEv>:


	  //--------------
	  //Handler Method

	static void handler(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
		get().imp_handler();
 8000838:	f7ff ffd4 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 800083c:	4603      	mov	r3, r0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 ffb0 	bl	80037a4 <_ZN7QAD_ADC11imp_handlerEv>
	}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <HardFault_Handler+0x10>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f003 f993 	bl	8003b8c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0xe>
 8000868:	20000254 	.word	0x20000254

0800086c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <MemManage_Handler+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f003 f989 	bl	8003b8c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 800087a:	e7fe      	b.n	800087a <MemManage_Handler+0xe>
 800087c:	20000254 	.word	0x20000254

08000880 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <BusFault_Handler+0x10>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f003 f97f 	bl	8003b8c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0xe>
 8000890:	20000254 	.word	0x20000254

08000894 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <UsageFault_Handler+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f003 f975 	bl	8003b8c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80008a2:	e7fe      	b.n	80008a2 <UsageFault_Handler+0xe>
 80008a4:	20000254 	.word	0x20000254

080008a8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80008d6:	f000 fdcd 	bl	8001474 <HAL_IncTick>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Function
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <USART2_IRQHandler+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fa78 	bl	8004de0 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000258 	.word	0x20000258

080008f8 <ADC_IRQHandler>:


//ADC_IRQHandler
//Interrupt Handler Function
void ADC_IRQHandler(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  QAD_ADC::handler();
 80008fc:	f7ff ff9a 	bl	8000834 <_ZN7QAD_ADC7handlerEv>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN7QAD_SPIC1ER18QAD_SPI_InitStruct>:
		//-------------------------
		//Contructors / Desutrctors

	QAD_SPI() = delete;

	QAD_SPI(QAD_SPI_InitStruct& sInit) :
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
		m_pCS_GPIO(sInit.pCS_GPIO),
		m_uCS_Pin(sInit.uCS_Pin),
		m_uCS_AF(sInit.uCS_AF),
		m_bCS_Soft(false),
		m_eIRQ(SPI1_IRQn),
		m_sHandle({0}) {}
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	801a      	strh	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	709a      	strb	r2, [r3, #2]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	70da      	strb	r2, [r3, #3]
		m_eSPI(sInit.eSPI),
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	781a      	ldrb	r2, [r3, #0]
		m_sHandle({0}) {}
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	711a      	strb	r2, [r3, #4]
		m_uIRQPriority(sInit.uIRQPriority),
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	785a      	ldrb	r2, [r3, #1]
		m_sHandle({0}) {}
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	715a      	strb	r2, [r3, #5]
		m_eSPIMode(sInit.eSPIMode),
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685a      	ldr	r2, [r3, #4]
		m_sHandle({0}) {}
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	609a      	str	r2, [r3, #8]
		m_eSPIBiDir(sInit.eSPIBiDir),
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	7a1a      	ldrb	r2, [r3, #8]
		m_sHandle({0}) {}
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	731a      	strb	r2, [r3, #12]
		m_eSPILines(sInit.eSPILines),
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	7a5a      	ldrb	r2, [r3, #9]
		m_sHandle({0}) {}
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	735a      	strb	r2, [r3, #13]
		m_eSPIDataSize(sInit.eSPIDataSize),
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	68da      	ldr	r2, [r3, #12]
		m_sHandle({0}) {}
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	611a      	str	r2, [r3, #16]
		m_eSPIClkPolarity(sInit.eSPIClkPolarity),
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	691a      	ldr	r2, [r3, #16]
		m_sHandle({0}) {}
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	615a      	str	r2, [r3, #20]
		m_eSPIClkPhase(sInit.eSPIClkPhase),
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	695a      	ldr	r2, [r3, #20]
		m_sHandle({0}) {}
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	619a      	str	r2, [r3, #24]
		m_eSPICS(sInit.eSPICS),
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	699a      	ldr	r2, [r3, #24]
		m_sHandle({0}) {}
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	61da      	str	r2, [r3, #28]
		m_eSPIPrescaler(sInit.eSPIPrescaler),
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	69da      	ldr	r2, [r3, #28]
		m_sHandle({0}) {}
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	621a      	str	r2, [r3, #32]
		m_eSPIFirstBit(sInit.eSPIFirstBit),
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	6a1a      	ldr	r2, [r3, #32]
		m_sHandle({0}) {}
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
		m_eSPITIMode(sInit.eSPITIMode),
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		m_sHandle({0}) {}
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	629a      	str	r2, [r3, #40]	; 0x28
		m_eSPICRC(sInit.eSPICRC),
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		m_sHandle({0}) {}
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	62da      	str	r2, [r3, #44]	; 0x2c
		m_uSPICRCPolynomial(sInit.uSPICRCPolynomial),
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		m_sHandle({0}) {}
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
		m_pClk_GPIO(sInit.pClk_GPIO),
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		m_sHandle({0}) {}
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
		m_uClk_Pin(sInit.uClk_Pin),
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
		m_sHandle({0}) {}
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	871a      	strh	r2, [r3, #56]	; 0x38
		m_uClk_AF(sInit.uClk_AF),
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
		m_sHandle({0}) {}
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		m_pMOSI_GPIO(sInit.pMOSI_GPIO),
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		m_sHandle({0}) {}
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
		m_uMOSI_Pin(sInit.uMOSI_Pin),
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
		m_sHandle({0}) {}
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		m_uMOSI_AF(sInit.uMOSI_AF),
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
		m_sHandle({0}) {}
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		m_pMISO_GPIO(sInit.pMISO_GPIO),
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		m_sHandle({0}) {}
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	645a      	str	r2, [r3, #68]	; 0x44
		m_uMISO_Pin(sInit.uMISO_Pin),
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
		m_sHandle({0}) {}
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
		m_uMISO_AF(sInit.uMISO_AF),
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
		m_sHandle({0}) {}
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
		m_pCS_GPIO(sInit.pCS_GPIO),
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
		m_sHandle({0}) {}
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	64da      	str	r2, [r3, #76]	; 0x4c
		m_uCS_Pin(sInit.uCS_Pin),
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
		m_sHandle({0}) {}
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		m_uCS_AF(sInit.uCS_AF),
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
		m_sHandle({0}) {}
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2223      	movs	r2, #35	; 0x23
 8000a18:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3358      	adds	r3, #88	; 0x58
 8000a20:	2258      	movs	r2, #88	; 0x58
 8000a22:	2100      	movs	r1, #0
 8000a24:	4618      	mov	r0, r3
 8000a26:	f004 fd1f 	bl	8005468 <memset>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 8000a40:	887a      	ldrh	r2, [r7, #2]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fa2a 	bl	8000ea0 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	887a      	ldrh	r2, [r7, #2]
 8000a50:	809a      	strh	r2, [r3, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2200      	movs	r2, #0
 8000a56:	80da      	strh	r2, [r3, #6]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	811a      	strh	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	4608      	mov	r0, r1
 8000a72:	4611      	mov	r1, r2
 8000a74:	461a      	mov	r2, r3
 8000a76:	4603      	mov	r3, r0
 8000a78:	817b      	strh	r3, [r7, #10]
 8000a7a:	460b      	mov	r3, r1
 8000a7c:	813b      	strh	r3, [r7, #8]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 8000a82:	4a12      	ldr	r2, [pc, #72]	; (8000acc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	f107 020a 	add.w	r2, r7, #10
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fa20 	bl	8000ed8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3308      	adds	r3, #8
 8000a9c:	f107 0208 	add.w	r2, r7, #8
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fa18 	bl	8000ed8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	731a      	strb	r2, [r3, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	735a      	strb	r2, [r3, #13]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	739a      	strb	r2, [r3, #14]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	79fa      	ldrb	r2, [r7, #7]
 8000abe:	73da      	strb	r2, [r3, #15]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08005dfc 	.word	0x08005dfc

08000ad0 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	769a      	strb	r2, [r3, #26]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2225      	movs	r2, #37	; 0x25
 8000b2c:	76da      	strb	r2, [r3, #27]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	331c      	adds	r3, #28
 8000b32:	2244      	movs	r2, #68	; 0x44
 8000b34:	2100      	movs	r1, #0
 8000b36:	4618      	mov	r0, r3
 8000b38:	f004 fc96 	bl	8005468 <memset>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2200      	movs	r2, #0
 8000b48:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	8b99      	ldrh	r1, [r3, #28]
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	8bda      	ldrh	r2, [r3, #30]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f7ff ff7b 	bl	8000a68 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000b72:	4a09      	ldr	r2, [pc, #36]	; (8000b98 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	741a      	strb	r2, [r3, #16]
 8000b80:	683a      	ldr	r2, [r7, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3314      	adds	r3, #20
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f9c0 	bl	8000f0e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4618      	mov	r0, r3
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	08005e38 	.word	0x08005e38

08000b9c <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b0e7      	sub	sp, #412	; 0x19c
 8000ba0:	af02      	add	r7, sp, #8


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000ba2:	f7ff fd1b 	bl	80005dc <_Z16SystemInitializev>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	bf14      	ite	ne
 8000bac:	2301      	movne	r3, #1
 8000bae:	2300      	moveq	r3, #0
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d000      	beq.n	8000bb8 <main+0x1c>
		while (1) {}
 8000bb6:	e7fe      	b.n	8000bb6 <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000bb8:	2014      	movs	r0, #20
 8000bba:	f004 fbdc 	bl	8005376 <_Znwj>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	461c      	mov	r4, r3
 8000bc2:	2220      	movs	r2, #32
 8000bc4:	49ae      	ldr	r1, [pc, #696]	; (8000e80 <main+0x2e4>)
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	f002 ffbf 	bl	8003b4a <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000bcc:	4bad      	ldr	r3, [pc, #692]	; (8000e84 <main+0x2e8>)
 8000bce:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3158 	strb.w	r3, [r7, #344]	; 0x158
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000bd6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000bda:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000bde:	2308      	movs	r3, #8
 8000be0:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000be4:	4ba6      	ldr	r3, [pc, #664]	; (8000e80 <main+0x2e4>)
 8000be6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000bea:	2304      	movs	r3, #4
 8000bec:	f8a7 3168 	strh.w	r3, [r7, #360]	; 0x168
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000bf0:	2307      	movs	r3, #7
 8000bf2:	f887 316a 	strb.w	r3, [r7, #362]	; 0x16a
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000bf6:	4ba2      	ldr	r3, [pc, #648]	; (8000e80 <main+0x2e4>)
 8000bf8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	f8a7 3170 	strh.w	r3, [r7, #368]	; 0x170
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000c02:	2307      	movs	r3, #7
 8000c04:	f887 3172 	strb.w	r3, [r7, #370]	; 0x172
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0c:	f8a7 3174 	strh.w	r3, [r7, #372]	; 0x174
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000c10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c14:	f8a7 3176 	strh.w	r3, [r7, #374]	; 0x176

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000c18:	2018      	movs	r0, #24
 8000c1a:	f004 fbac 	bl	8005376 <_Znwj>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	461c      	mov	r4, r3
 8000c22:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000c26:	4619      	mov	r1, r3
 8000c28:	4620      	mov	r0, r4
 8000c2a:	f7ff ff95 	bl	8000b58 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000c2e:	4b96      	ldr	r3, [pc, #600]	; (8000e88 <main+0x2ec>)
 8000c30:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000c32:	4b95      	ldr	r3, [pc, #596]	; (8000e88 <main+0x2ec>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f8b1 	bl	8004da0 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	bf0c      	ite	eq
 8000c44:	2301      	moveq	r3, #1
 8000c46:	2300      	movne	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d005      	beq.n	8000c5a <main+0xbe>
  	GPIO_UserLED->on();
 8000c4e:	4b8d      	ldr	r3, [pc, #564]	; (8000e84 <main+0x2e8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 ff9a 	bl	8003b8c <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000c58:	e7fe      	b.n	8000c58 <main+0xbc>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000c5a:	4b8b      	ldr	r3, [pc, #556]	; (8000e88 <main+0x2ec>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f004 f902 	bl	8004e68 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000c64:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <main+0x2ec>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4988      	ldr	r1, [pc, #544]	; (8000e8c <main+0x2f0>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f004 f8c8 	bl	8004e00 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //--------------
  //--------------
  //Initialize SPI
  QAD_SPI_InitStruct SPI_Init;
  SPI_Init.eSPI              = QAD_SPI1;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
  SPI_Init.uIRQPriority      = 0xE;
 8000c76:	230e      	movs	r3, #14
 8000c78:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
  SPI_Init.eSPIMode          = QAD_SPI_Mode_Master;
 8000c7c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000c80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  SPI_Init.eSPIBiDir         = QAD_SPI_BiDir_Enabled;
 8000c84:	2302      	movs	r3, #2
 8000c86:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
  SPI_Init.eSPILines         = QAD_SPI_Lines_2Lines;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
  SPI_Init.eSPIDataSize      = QAD_SPI_DataSize_8bit;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  SPI_Init.eSPIClkPolarity   = QAD_SPI_ClkPolarity_Low;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  SPI_Init.eSPIClkPhase      = QAD_SPI_ClkPhase_1Edge;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  SPI_Init.eSPICS            = QAD_SPI_CS_Soft;
 8000ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  SPI_Init.eSPIPrescaler     = QAD_SPI_BaudPrescaler_128	;
 8000caa:	2330      	movs	r3, #48	; 0x30
 8000cac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  SPI_Init.eSPIFirstBit      = QAD_SPI_FirstBit_MSB;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  SPI_Init.eSPITIMode        = QAD_SPI_TIMode_Disable;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  SPI_Init.eSPICRC           = QAD_SPI_CRC_Disable;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  SPI_Init.uSPICRCPolynomial = 7;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

  SPI_Init.pClk_GPIO         = GPIOA;
 8000cc8:	4b6d      	ldr	r3, [pc, #436]	; (8000e80 <main+0x2e4>)
 8000cca:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  SPI_Init.uClk_Pin          = GPIO_PIN_5;
 8000cce:	2320      	movs	r3, #32
 8000cd0:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
  SPI_Init.uClk_AF           = GPIO_AF5_SPI1;
 8000cd4:	2305      	movs	r3, #5
 8000cd6:	f887 313e 	strb.w	r3, [r7, #318]	; 0x13e

	SPI_Init.pMOSI_GPIO        = GPIOA;
 8000cda:	4b69      	ldr	r3, [pc, #420]	; (8000e80 <main+0x2e4>)
 8000cdc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	SPI_Init.uMOSI_Pin         = GPIO_PIN_7;
 8000ce0:	2380      	movs	r3, #128	; 0x80
 8000ce2:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
	SPI_Init.uMOSI_AF          = GPIO_AF5_SPI1;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146

	SPI_Init.pMISO_GPIO        = GPIOA;
 8000cec:	4b64      	ldr	r3, [pc, #400]	; (8000e80 <main+0x2e4>)
 8000cee:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	SPI_Init.uMISO_Pin         = GPIO_PIN_6;
 8000cf2:	2340      	movs	r3, #64	; 0x40
 8000cf4:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
	SPI_Init.uMISO_AF          = GPIO_AF5_SPI1;
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e

	SPI_Init.pCS_GPIO          = GPIOA;
 8000cfe:	4b60      	ldr	r3, [pc, #384]	; (8000e80 <main+0x2e4>)
 8000d00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
	SPI_Init.uCS_Pin           = GPIO_PIN_4;
 8000d04:	2310      	movs	r3, #16
 8000d06:	f8a7 3154 	strh.w	r3, [r7, #340]	; 0x154
	SPI_Init.uCS_AF            = GPIO_AF5_SPI1;
 8000d0a:	2305      	movs	r3, #5
 8000d0c:	f887 3156 	strb.w	r3, [r7, #342]	; 0x156
	SPI_Flash = new QAD_SPI(SPI_Init);
 8000d10:	20b0      	movs	r0, #176	; 0xb0
 8000d12:	f004 fb30 	bl	8005376 <_Znwj>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461c      	mov	r4, r3
 8000d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4620      	mov	r0, r4
 8000d22:	f7ff fdef 	bl	8000904 <_ZN7QAD_SPIC1ER18QAD_SPI_InitStruct>
 8000d26:	4b5a      	ldr	r3, [pc, #360]	; (8000e90 <main+0x2f4>)
 8000d28:	601c      	str	r4, [r3, #0]

	if (SPI_Flash->init()) {
 8000d2a:	4b59      	ldr	r3, [pc, #356]	; (8000e90 <main+0x2f4>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f003 f84e 	bl	8003dd0 <_ZN7QAD_SPI4initEv>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	bf14      	ite	ne
 8000d3a:	2301      	movne	r3, #1
 8000d3c:	2300      	moveq	r3, #0
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00b      	beq.n	8000d5c <main+0x1c0>
		UART_STLink->txStringCR("SPI - Flash: Initialization Failed");
 8000d44:	4b50      	ldr	r3, [pc, #320]	; (8000e88 <main+0x2ec>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4952      	ldr	r1, [pc, #328]	; (8000e94 <main+0x2f8>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f004 f858 	bl	8004e00 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
		GPIO_UserLED->on();
 8000d50:	4b4c      	ldr	r3, [pc, #304]	; (8000e84 <main+0x2e8>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f002 ff19 	bl	8003b8c <_ZN15QAD_GPIO_Output2onEv>
		while(1) {}
 8000d5a:	e7fe      	b.n	8000d5a <main+0x1be>
	}
	SPI_Flash->start();
 8000d5c:	4b4c      	ldr	r3, [pc, #304]	; (8000e90 <main+0x2f4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 f860 	bl	8003e26 <_ZN7QAD_SPI5startEv>
	UART_STLink->txStringCR("SPI - Flash: Initialized and Started");
 8000d66:	4b48      	ldr	r3, [pc, #288]	; (8000e88 <main+0x2ec>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	494b      	ldr	r1, [pc, #300]	; (8000e98 <main+0x2fc>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 f847 	bl	8004e00 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

	//Read Flash ID
	uint8_t uDataTX[4];
	uint8_t uDataRX[4];

	uDataTX[0] = 0x9F;
 8000d72:	239f      	movs	r3, #159	; 0x9f
 8000d74:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
	for (uint8_t i=1; i<4; i++)
 8000d78:	2301      	movs	r3, #1
 8000d7a:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8000d7e:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80d      	bhi.n	8000da2 <main+0x206>
		uDataTX[i] = 0x00;
 8000d86:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000d8a:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8000d8e:	4413      	add	r3, r2
 8000d90:	2200      	movs	r2, #0
 8000d92:	f803 2c8c 	strb.w	r2, [r3, #-140]
	for (uint8_t i=1; i<4; i++)
 8000d96:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8000da0:	e7ed      	b.n	8000d7e <main+0x1e2>

	SPI_Flash->transceive(&uDataTX[0], &uDataRX[0], 4);
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <main+0x2f4>)
 8000da4:	6818      	ldr	r0, [r3, #0]
 8000da6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000daa:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000dae:	2304      	movs	r3, #4
 8000db0:	f003 f863 	bl	8003e7a <_ZN7QAD_SPI10transceiveEPhS0_t>

	char strID[256];
	sprintf(strID, "SPI - Flash: ID Register = %02X - %02X - %02X", uDataRX[1], uDataRX[2], uDataRX[3]);
 8000db4:	f897 3101 	ldrb.w	r3, [r7, #257]	; 0x101
 8000db8:	461a      	mov	r2, r3
 8000dba:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000dc4:	4638      	mov	r0, r7
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4934      	ldr	r1, [pc, #208]	; (8000e9c <main+0x300>)
 8000dcc:	f004 fc52 	bl	8005674 <siprintf>
	UART_STLink->txStringCR(strID);
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <main+0x2ec>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4610      	mov	r0, r2
 8000ddc:	f004 f810 	bl	8004e00 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000de0:	f000 fb5c 	bl	800149c <HAL_GetTick>
 8000de4:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	uint32_t uOldTick = uNewTick;
 8000de8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000dec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

  //Create task timing variables
	uint32_t uHeartbeatTicks = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000df6:	f000 fb51 	bl	800149c <HAL_GetTick>
 8000dfa:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000dfe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000e02:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d01e      	beq.n	8000e48 <main+0x2ac>
    	uOldTick = uNewTick;
 8000e0a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000e0e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    	uNewTick = uCurTick;
 8000e12:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8000e16:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000e1a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000e1e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d208      	bcs.n	8000e38 <main+0x29c>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000e26:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000e2a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	3b01      	subs	r3, #1
 8000e32:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e36:	e00a      	b.n	8000e4e <main+0x2b2>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000e38:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8000e3c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000e46:	e002      	b.n	8000e4e <main+0x2b2>
    	}

    } else {
    	uTicks = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000e4e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8000e52:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000e56:	4413      	add	r3, r2
 8000e58:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000e5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e64:	d3c7      	bcc.n	8000df6 <main+0x25a>
    	GPIO_UserLED->toggle();
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <main+0x2e8>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 feb4 	bl	8003bd8 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset heartbeat ticks
 8000e70:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000e74:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e78:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    uCurTick = HAL_GetTick();
 8000e7c:	e7bb      	b.n	8000df6 <main+0x25a>
 8000e7e:	bf00      	nop
 8000e80:	40020000 	.word	0x40020000
 8000e84:	20000254 	.word	0x20000254
 8000e88:	20000258 	.word	0x20000258
 8000e8c:	08005d58 	.word	0x08005d58
 8000e90:	2000025c 	.word	0x2000025c
 8000e94:	08005d78 	.word	0x08005d78
 8000e98:	08005d9c 	.word	0x08005d9c
 8000e9c:	08005dc4 	.word	0x08005dc4

08000ea0 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000eaa:	683c      	ldr	r4, [r7, #0]
 8000eac:	4620      	mov	r0, r4
 8000eae:	f004 fa73 	bl	8005398 <_Znaj>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1e63      	subs	r3, r4, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db04      	blt.n	8000ec8 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	7011      	strb	r1, [r2, #0]
 8000ec2:	3201      	adds	r2, #1
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	e7f8      	b.n	8000eba <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000ec8:	4601      	mov	r1, r0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f000 f839 	bl	8000f42 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000ee2:	6838      	ldr	r0, [r7, #0]
 8000ee4:	f000 f849 	bl	8000f7a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	881c      	ldrh	r4, [r3, #0]
 8000eec:	200c      	movs	r0, #12
 8000eee:	f004 fa42 	bl	8005376 <_Znwj>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	461d      	mov	r5, r3
 8000ef6:	4621      	mov	r1, r4
 8000ef8:	4628      	mov	r0, r5
 8000efa:	f7ff fd9b 	bl	8000a34 <_ZN14QAT_FIFOBufferC1Et>
 8000efe:	4629      	mov	r1, r5
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f845 	bl	8000f90 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bdb0      	pop	{r4, r5, r7, pc}

08000f0e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000f0e:	b5b0      	push	{r4, r5, r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000f18:	6838      	ldr	r0, [r7, #0]
 8000f1a:	f000 f855 	bl	8000fc8 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f1e:	4605      	mov	r5, r0
 8000f20:	2064      	movs	r0, #100	; 0x64
 8000f22:	f004 fa28 	bl	8005376 <_Znwj>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461c      	mov	r4, r3
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff fdcf 	bl	8000ad0 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000f32:	4621      	mov	r1, r4
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f852 	bl	8000fde <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bdb0      	pop	{r4, r5, r7, pc}

08000f42 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b082      	sub	sp, #8
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f860 	bl	8001016 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f867 	bl	800103e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f70:	4603      	mov	r3, r0
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6839      	ldr	r1, [r7, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f85a 	bl	8001058 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 f861 	bl	8001080 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
 8000fe6:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6839      	ldr	r1, [r7, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f854 	bl	800109a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f85b 	bl	80010c2 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800100c:	4603      	mov	r3, r0
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f85a 	bl	80010dc <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ff99 	bl	8000f60 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 800102e:	4602      	mov	r2, r0
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4618      	mov	r0, r3
 800104a:	f000 f854 	bl	80010f6 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800104e:	4603      	mov	r3, r0
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f852 	bl	800110e <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff9f 	bl	8000fae <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001070:	4602      	mov	r2, r0
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	6013      	str	r3, [r2, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 f84c 	bl	8001128 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001090:	4603      	mov	r3, r0
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
 80010a2:	6039      	str	r1, [r7, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f84a 	bl	8001140 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ffa5 	bl	8000ffc <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f844 	bl	800115a <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 f843 	bl	8001172 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f000 f847 	bl	8001192 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8001104:	4603      	mov	r3, r0
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f847 	bl	80011ac <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f84b 	bl	80011cc <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001136:	4603      	mov	r3, r0
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f84b 	bl	80011e6 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f000 f84f 	bl	8001206 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001168:	4603      	mov	r3, r0
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f000 f850 	bl	8001220 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f858 	bl	8001238 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f859 	bl	8001254 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f858 	bl	800126a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 f860 	bl	8001282 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f861 	bl	800129e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 80011dc:	4603      	mov	r3, r0
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f860 	bl	80012b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 f868 	bl	80012cc <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f869 	bl	80012e8 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001216:	4603      	mov	r3, r0
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f868 	bl	80012fe <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 f84e 	bl	8001314 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f834 	bl	800132a <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return 1;
 8001344:	2301      	movs	r3, #1
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <_kill>:

int _kill(int pid, int sig)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800135a:	f004 f845 	bl	80053e8 <__errno>
 800135e:	4603      	mov	r3, r0
 8001360:	2216      	movs	r2, #22
 8001362:	601a      	str	r2, [r3, #0]
	return -1;
 8001364:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_exit>:

void _exit (int status)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffe7 	bl	8001350 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001382:	e7fe      	b.n	8001382 <_exit+0x12>

08001384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800138c:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <_sbrk+0x5c>)
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <_sbrk+0x60>)
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <_sbrk+0x64>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013a0:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <_sbrk+0x64>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	; (80013ec <_sbrk+0x68>)
 80013a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a6:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <_sbrk+0x64>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4413      	add	r3, r2
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d207      	bcs.n	80013c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b4:	f004 f818 	bl	80053e8 <__errno>
 80013b8:	4603      	mov	r3, r0
 80013ba:	220c      	movs	r2, #12
 80013bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e009      	b.n	80013d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013ca:	4b07      	ldr	r3, [pc, #28]	; (80013e8 <_sbrk+0x64>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4413      	add	r3, r2
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <_sbrk+0x64>)
 80013d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d6:	68fb      	ldr	r3, [r7, #12]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3718      	adds	r7, #24
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20020000 	.word	0x20020000
 80013e4:	00000400 	.word	0x00000400
 80013e8:	20000260 	.word	0x20000260
 80013ec:	200002f0 	.word	0x200002f0

080013f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f4:	4b06      	ldr	r3, [pc, #24]	; (8001410 <SystemInit+0x20>)
 80013f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <SystemInit+0x20>)
 80013fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <HAL_InitTick+0x54>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x58>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142a:	fbb3 f3f1 	udiv	r3, r3, r1
 800142e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001432:	4618      	mov	r0, r3
 8001434:	f000 fd29 	bl	8001e8a <HAL_SYSTICK_Config>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00e      	b.n	8001460 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b0f      	cmp	r3, #15
 8001446:	d80a      	bhi.n	800145e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001448:	2200      	movs	r2, #0
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	f000 fce3 	bl	8001e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001454:	4a06      	ldr	r2, [pc, #24]	; (8001470 <HAL_InitTick+0x5c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
 800145c:	e000      	b.n	8001460 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
}
 8001460:	4618      	mov	r0, r3
 8001462:	3708      	adds	r7, #8
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000000 	.word	0x20000000
 800146c:	20000008 	.word	0x20000008
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_IncTick+0x20>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x24>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4413      	add	r3, r2
 8001484:	4a04      	ldr	r2, [pc, #16]	; (8001498 <HAL_IncTick+0x24>)
 8001486:	6013      	str	r3, [r2, #0]
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000008 	.word	0x20000008
 8001498:	200002d8 	.word	0x200002d8

0800149c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  return uwTick;
 80014a0:	4b03      	ldr	r3, [pc, #12]	; (80014b0 <HAL_GetTick+0x14>)
 80014a2:	681b      	ldr	r3, [r3, #0]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	200002d8 	.word	0x200002d8

080014b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d101      	bne.n	80014ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e033      	b.n	8001532 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f863 	bl	800159e <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 0310 	and.w	r3, r3, #16
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014fa:	f023 0302 	bic.w	r3, r3, #2
 80014fe:	f043 0202 	orr.w	r2, r3, #2
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fa8c 	bl	8001a24 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f023 0303 	bic.w	r3, r3, #3
 800151a:	f043 0201 	orr.w	r2, r3, #1
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	641a      	str	r2, [r3, #64]	; 0x40
 8001522:	e001      	b.n	8001528 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001530:	7bfb      	ldrb	r3, [r7, #15]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e022      	b.n	8001596 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001554:	f043 0202 	orr.w	r2, r3, #2
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f022 0201 	bic.w	r2, r2, #1
 800156a:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f819 	bl	80015b2 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800159e:	b480      	push	{r7}
 80015a0:	b083      	sub	sp, #12
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_ADC_MspDeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
	...

080015c8 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d101      	bne.n	80015e2 <HAL_ADC_Start_IT+0x1a>
 80015de:	2302      	movs	r3, #2
 80015e0:	e0a1      	b.n	8001726 <HAL_ADC_Start_IT+0x15e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d018      	beq.n	800162a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689a      	ldr	r2, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f042 0201 	orr.w	r2, r2, #1
 8001606:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001608:	4b4a      	ldr	r3, [pc, #296]	; (8001734 <HAL_ADC_Start_IT+0x16c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <HAL_ADC_Start_IT+0x170>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	0c9a      	lsrs	r2, r3, #18
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800161c:	e002      	b.n	8001624 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	3b01      	subs	r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f9      	bne.n	800161e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 0301 	and.w	r3, r3, #1
 8001634:	2b01      	cmp	r3, #1
 8001636:	d169      	bne.n	800170c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001662:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001676:	d106      	bne.n	8001686 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167c:	f023 0206 	bic.w	r2, r3, #6
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	645a      	str	r2, [r3, #68]	; 0x44
 8001684:	e002      	b.n	800168c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001694:	4b29      	ldr	r3, [pc, #164]	; (800173c <HAL_ADC_Start_IT+0x174>)
 8001696:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80016a0:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016b0:	f043 0320 	orr.w	r3, r3, #32
 80016b4:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 031f 	and.w	r3, r3, #31
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d129      	bne.n	8001724 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e020      	b.n	8001724 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a16      	ldr	r2, [pc, #88]	; (8001740 <HAL_ADC_Start_IT+0x178>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d11b      	bne.n	8001724 <HAL_ADC_Start_IT+0x15c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d114      	bne.n	8001724 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001708:	609a      	str	r2, [r3, #8]
 800170a:	e00b      	b.n	8001724 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 0210 	orr.w	r2, r3, #16
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000000 	.word	0x20000000
 8001738:	431bde83 	.word	0x431bde83
 800173c:	40012300 	.word	0x40012300
 8001740:	40012000 	.word	0x40012000

08001744 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001752:	2b01      	cmp	r3, #1
 8001754:	d101      	bne.n	800175a <HAL_ADC_Stop_IT+0x16>
 8001756:	2302      	movs	r3, #2
 8001758:	e02b      	b.n	80017b2 <HAL_ADC_Stop_IT+0x6e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d113      	bne.n	80017a8 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800178e:	f023 0320 	bic.w	r3, r3, #32
 8001792:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f043 0201 	orr.w	r2, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1c>
 80017d8:	2302      	movs	r3, #2
 80017da:	e113      	b.n	8001a04 <HAL_ADC_ConfigChannel+0x244>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d925      	bls.n	8001838 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68d9      	ldr	r1, [r3, #12]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	3b1e      	subs	r3, #30
 8001802:	2207      	movs	r2, #7
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43da      	mvns	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	400a      	ands	r2, r1
 8001810:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68d9      	ldr	r1, [r3, #12]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	4603      	mov	r3, r0
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	4403      	add	r3, r0
 800182a:	3b1e      	subs	r3, #30
 800182c:	409a      	lsls	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	e022      	b.n	800187e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6919      	ldr	r1, [r3, #16]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	461a      	mov	r2, r3
 8001846:	4613      	mov	r3, r2
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4413      	add	r3, r2
 800184c:	2207      	movs	r2, #7
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43da      	mvns	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	400a      	ands	r2, r1
 800185a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6919      	ldr	r1, [r3, #16]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	4603      	mov	r3, r0
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	4403      	add	r3, r0
 8001874:	409a      	lsls	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b06      	cmp	r3, #6
 8001884:	d824      	bhi.n	80018d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3b05      	subs	r3, #5
 8001898:	221f      	movs	r2, #31
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	400a      	ands	r2, r1
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	3b05      	subs	r3, #5
 80018c2:	fa00 f203 	lsl.w	r2, r0, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	635a      	str	r2, [r3, #52]	; 0x34
 80018ce:	e04c      	b.n	800196a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d824      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	3b23      	subs	r3, #35	; 0x23
 80018ea:	221f      	movs	r2, #31
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43da      	mvns	r2, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	400a      	ands	r2, r1
 80018f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4618      	mov	r0, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b23      	subs	r3, #35	; 0x23
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	631a      	str	r2, [r3, #48]	; 0x30
 8001920:	e023      	b.n	800196a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	4613      	mov	r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	4413      	add	r3, r2
 8001932:	3b41      	subs	r3, #65	; 0x41
 8001934:	221f      	movs	r2, #31
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	43da      	mvns	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	400a      	ands	r2, r1
 8001942:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	4618      	mov	r0, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	3b41      	subs	r3, #65	; 0x41
 800195e:	fa00 f203 	lsl.w	r2, r0, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800196a:	4b29      	ldr	r3, [pc, #164]	; (8001a10 <HAL_ADC_ConfigChannel+0x250>)
 800196c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <HAL_ADC_ConfigChannel+0x254>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d10f      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1d8>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b12      	cmp	r3, #18
 800197e:	d10b      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1d      	ldr	r2, [pc, #116]	; (8001a14 <HAL_ADC_ConfigChannel+0x254>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12b      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x23a>
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1c      	ldr	r2, [pc, #112]	; (8001a18 <HAL_ADC_ConfigChannel+0x258>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d003      	beq.n	80019b4 <HAL_ADC_ConfigChannel+0x1f4>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b11      	cmp	r3, #17
 80019b2:	d122      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_ADC_ConfigChannel+0x258>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d111      	bne.n	80019fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019d6:	4b11      	ldr	r3, [pc, #68]	; (8001a1c <HAL_ADC_ConfigChannel+0x25c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a11      	ldr	r2, [pc, #68]	; (8001a20 <HAL_ADC_ConfigChannel+0x260>)
 80019dc:	fba2 2303 	umull	r2, r3, r2, r3
 80019e0:	0c9a      	lsrs	r2, r3, #18
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019ec:	e002      	b.n	80019f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f9      	bne.n	80019ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	40012300 	.word	0x40012300
 8001a14:	40012000 	.word	0x40012000
 8001a18:	10000012 	.word	0x10000012
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2c:	4b79      	ldr	r3, [pc, #484]	; (8001c14 <ADC_Init+0x1f0>)
 8001a2e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	685a      	ldr	r2, [r3, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	431a      	orrs	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6859      	ldr	r1, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	021a      	lsls	r2, r3, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	4a58      	ldr	r2, [pc, #352]	; (8001c18 <ADC_Init+0x1f4>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d022      	beq.n	8001b02 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689a      	ldr	r2, [r3, #8]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001aec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6899      	ldr	r1, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	e00f      	b.n	8001b22 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689a      	ldr	r2, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b20:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 0202 	bic.w	r2, r2, #2
 8001b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6899      	ldr	r1, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7e1b      	ldrb	r3, [r3, #24]
 8001b3c:	005a      	lsls	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	430a      	orrs	r2, r1
 8001b44:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d01b      	beq.n	8001b88 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b5e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b6e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6859      	ldr	r1, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	035a      	lsls	r2, r3, #13
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	e007      	b.n	8001b98 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b96:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	051a      	lsls	r2, r3, #20
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bcc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6899      	ldr	r1, [r3, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bda:	025a      	lsls	r2, r3, #9
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	430a      	orrs	r2, r1
 8001be2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bf2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6899      	ldr	r1, [r3, #8]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	029a      	lsls	r2, r3, #10
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	609a      	str	r2, [r3, #8]
}
 8001c08:	bf00      	nop
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	40012300 	.word	0x40012300
 8001c18:	0f000001 	.word	0x0f000001

08001c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c38:	4013      	ands	r3, r2
 8001c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4e:	4a04      	ldr	r2, [pc, #16]	; (8001c60 <__NVIC_SetPriorityGrouping+0x44>)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	60d3      	str	r3, [r2, #12]
}
 8001c54:	bf00      	nop
 8001c56:	3714      	adds	r7, #20
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <__NVIC_GetPriorityGrouping+0x18>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	0a1b      	lsrs	r3, r3, #8
 8001c6e:	f003 0307 	and.w	r3, r3, #7
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	db0b      	blt.n	8001caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	f003 021f 	and.w	r2, r3, #31
 8001c98:	4907      	ldr	r1, [pc, #28]	; (8001cb8 <__NVIC_EnableIRQ+0x38>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100

08001cbc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db12      	blt.n	8001cf4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	490a      	ldr	r1, [pc, #40]	; (8001d00 <__NVIC_DisableIRQ+0x44>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	3320      	adds	r3, #32
 8001ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce8:	f3bf 8f4f 	dsb	sy
}
 8001cec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cee:	f3bf 8f6f 	isb	sy
}
 8001cf2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	db0a      	blt.n	8001d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	490c      	ldr	r1, [pc, #48]	; (8001d50 <__NVIC_SetPriority+0x4c>)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	b2d2      	uxtb	r2, r2
 8001d26:	440b      	add	r3, r1
 8001d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	4908      	ldr	r1, [pc, #32]	; (8001d54 <__NVIC_SetPriority+0x50>)
 8001d34:	79fb      	ldrb	r3, [r7, #7]
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	3b04      	subs	r3, #4
 8001d3c:	0112      	lsls	r2, r2, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	440b      	add	r3, r1
 8001d42:	761a      	strb	r2, [r3, #24]
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000e100 	.word	0xe000e100
 8001d54:	e000ed00 	.word	0xe000ed00

08001d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f1c3 0307 	rsb	r3, r3, #7
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	bf28      	it	cs
 8001d76:	2304      	movcs	r3, #4
 8001d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	2b06      	cmp	r3, #6
 8001d80:	d902      	bls.n	8001d88 <NVIC_EncodePriority+0x30>
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3b03      	subs	r3, #3
 8001d86:	e000      	b.n	8001d8a <NVIC_EncodePriority+0x32>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	fa01 f303 	lsl.w	r3, r1, r3
 8001daa:	43d9      	mvns	r1, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	4313      	orrs	r3, r2
         );
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3724      	adds	r7, #36	; 0x24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd0:	d301      	bcc.n	8001dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e00f      	b.n	8001df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd6:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <SysTick_Config+0x40>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dde:	210f      	movs	r1, #15
 8001de0:	f04f 30ff 	mov.w	r0, #4294967295
 8001de4:	f7ff ff8e 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <SysTick_Config+0x40>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dee:	4b04      	ldr	r3, [pc, #16]	; (8001e00 <SysTick_Config+0x40>)
 8001df0:	2207      	movs	r2, #7
 8001df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	e000e010 	.word	0xe000e010

08001e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f7ff ff05 	bl	8001c1c <__NVIC_SetPriorityGrouping>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e2c:	f7ff ff1a 	bl	8001c64 <__NVIC_GetPriorityGrouping>
 8001e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	6978      	ldr	r0, [r7, #20]
 8001e38:	f7ff ff8e 	bl	8001d58 <NVIC_EncodePriority>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>
}
 8001e4a:	bf00      	nop
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff ff0d 	bl	8001c80 <__NVIC_EnableIRQ>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	4603      	mov	r3, r0
 8001e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff1d 	bl	8001cbc <__NVIC_DisableIRQ>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff94 	bl	8001dc0 <SysTick_Config>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b089      	sub	sp, #36	; 0x24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	e159      	b.n	8002174 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	f040 8148 	bne.w	800216e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d130      	bne.n	8001f58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	2203      	movs	r2, #3
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	68da      	ldr	r2, [r3, #12]
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	d017      	beq.n	8001f94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	2203      	movs	r2, #3
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d123      	bne.n	8001fe8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	08da      	lsrs	r2, r3, #3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	3208      	adds	r2, #8
 8001fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	691a      	ldr	r2, [r3, #16]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	08da      	lsrs	r2, r3, #3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3208      	adds	r2, #8
 8001fe2:	69b9      	ldr	r1, [r7, #24]
 8001fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0203 	and.w	r2, r3, #3
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a2 	beq.w	800216e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_GPIO_Init+0x2e8>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a56      	ldr	r2, [pc, #344]	; (800218c <HAL_GPIO_Init+0x2e8>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_GPIO_Init+0x2e8>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002046:	4a52      	ldr	r2, [pc, #328]	; (8002190 <HAL_GPIO_Init+0x2ec>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	220f      	movs	r2, #15
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a49      	ldr	r2, [pc, #292]	; (8002194 <HAL_GPIO_Init+0x2f0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d019      	beq.n	80020a6 <HAL_GPIO_Init+0x202>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a48      	ldr	r2, [pc, #288]	; (8002198 <HAL_GPIO_Init+0x2f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d013      	beq.n	80020a2 <HAL_GPIO_Init+0x1fe>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a47      	ldr	r2, [pc, #284]	; (800219c <HAL_GPIO_Init+0x2f8>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d00d      	beq.n	800209e <HAL_GPIO_Init+0x1fa>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a46      	ldr	r2, [pc, #280]	; (80021a0 <HAL_GPIO_Init+0x2fc>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d007      	beq.n	800209a <HAL_GPIO_Init+0x1f6>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a45      	ldr	r2, [pc, #276]	; (80021a4 <HAL_GPIO_Init+0x300>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_GPIO_Init+0x1f2>
 8002092:	2304      	movs	r3, #4
 8002094:	e008      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 8002096:	2307      	movs	r3, #7
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 800209a:	2303      	movs	r3, #3
 800209c:	e004      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 800209e:	2302      	movs	r3, #2
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_GPIO_Init+0x204>
 80020a6:	2300      	movs	r3, #0
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	f002 0203 	and.w	r2, r2, #3
 80020ae:	0092      	lsls	r2, r2, #2
 80020b0:	4093      	lsls	r3, r2
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b8:	4935      	ldr	r1, [pc, #212]	; (8002190 <HAL_GPIO_Init+0x2ec>)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	089b      	lsrs	r3, r3, #2
 80020be:	3302      	adds	r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020ea:	4a2f      	ldr	r2, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020f0:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_GPIO_Init+0x304>)
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d003      	beq.n	800213e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800213e:	4a1a      	ldr	r2, [pc, #104]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <HAL_GPIO_Init+0x304>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002168:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_GPIO_Init+0x304>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b0f      	cmp	r3, #15
 8002178:	f67f aea2 	bls.w	8001ec0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	3724      	adds	r7, #36	; 0x24
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40023800 	.word	0x40023800
 8002190:	40013800 	.word	0x40013800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400
 800219c:	40020800 	.word	0x40020800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40013c00 	.word	0x40013c00

080021ac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b087      	sub	sp, #28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e0bb      	b.n	8002340 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c8:	2201      	movs	r2, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	429a      	cmp	r2, r3
 80021e0:	f040 80ab 	bne.w	800233a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80021e4:	4a5c      	ldr	r2, [pc, #368]	; (8002358 <HAL_GPIO_DeInit+0x1ac>)
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	089b      	lsrs	r3, r3, #2
 80021ea:	3302      	adds	r3, #2
 80021ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021f0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	220f      	movs	r2, #15
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	68ba      	ldr	r2, [r7, #8]
 8002202:	4013      	ands	r3, r2
 8002204:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a54      	ldr	r2, [pc, #336]	; (800235c <HAL_GPIO_DeInit+0x1b0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d019      	beq.n	8002242 <HAL_GPIO_DeInit+0x96>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a53      	ldr	r2, [pc, #332]	; (8002360 <HAL_GPIO_DeInit+0x1b4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d013      	beq.n	800223e <HAL_GPIO_DeInit+0x92>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_GPIO_DeInit+0x1b8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00d      	beq.n	800223a <HAL_GPIO_DeInit+0x8e>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a51      	ldr	r2, [pc, #324]	; (8002368 <HAL_GPIO_DeInit+0x1bc>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <HAL_GPIO_DeInit+0x8a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a50      	ldr	r2, [pc, #320]	; (800236c <HAL_GPIO_DeInit+0x1c0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_GPIO_DeInit+0x86>
 800222e:	2304      	movs	r3, #4
 8002230:	e008      	b.n	8002244 <HAL_GPIO_DeInit+0x98>
 8002232:	2307      	movs	r3, #7
 8002234:	e006      	b.n	8002244 <HAL_GPIO_DeInit+0x98>
 8002236:	2303      	movs	r3, #3
 8002238:	e004      	b.n	8002244 <HAL_GPIO_DeInit+0x98>
 800223a:	2302      	movs	r3, #2
 800223c:	e002      	b.n	8002244 <HAL_GPIO_DeInit+0x98>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_GPIO_DeInit+0x98>
 8002242:	2300      	movs	r3, #0
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	f002 0203 	and.w	r2, r2, #3
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	4093      	lsls	r3, r2
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	429a      	cmp	r2, r3
 8002252:	d132      	bne.n	80022ba <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002254:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	4944      	ldr	r1, [pc, #272]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 800225e:	4013      	ands	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43db      	mvns	r3, r3
 800226a:	4941      	ldr	r1, [pc, #260]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 800226c:	4013      	ands	r3, r2
 800226e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	43db      	mvns	r3, r3
 8002278:	493d      	ldr	r1, [pc, #244]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 800227a:	4013      	ands	r3, r2
 800227c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800227e:	4b3c      	ldr	r3, [pc, #240]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	43db      	mvns	r3, r3
 8002286:	493a      	ldr	r1, [pc, #232]	; (8002370 <HAL_GPIO_DeInit+0x1c4>)
 8002288:	4013      	ands	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	220f      	movs	r2, #15
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800229c:	4a2e      	ldr	r2, [pc, #184]	; (8002358 <HAL_GPIO_DeInit+0x1ac>)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	089b      	lsrs	r3, r3, #2
 80022a2:	3302      	adds	r3, #2
 80022a4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	43da      	mvns	r2, r3
 80022ac:	482a      	ldr	r0, [pc, #168]	; (8002358 <HAL_GPIO_DeInit+0x1ac>)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	400a      	ands	r2, r1
 80022b4:	3302      	adds	r3, #2
 80022b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2103      	movs	r1, #3
 80022c4:	fa01 f303 	lsl.w	r3, r1, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	401a      	ands	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	08d2      	lsrs	r2, r2, #3
 80022f0:	4019      	ands	r1, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	2103      	movs	r1, #3
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	43db      	mvns	r3, r3
 800230a:	401a      	ands	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	2101      	movs	r1, #1
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	fa01 f303 	lsl.w	r3, r1, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	401a      	ands	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	2103      	movs	r1, #3
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43db      	mvns	r3, r3
 8002334:	401a      	ands	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b0f      	cmp	r3, #15
 8002344:	f67f af40 	bls.w	80021c8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002348:	bf00      	nop
 800234a:	bf00      	nop
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	40013800 	.word	0x40013800
 800235c:	40020000 	.word	0x40020000
 8002360:	40020400 	.word	0x40020400
 8002364:	40020800 	.word	0x40020800
 8002368:	40020c00 	.word	0x40020c00
 800236c:	40021000 	.word	0x40021000
 8002370:	40013c00 	.word	0x40013c00

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e264      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d075      	beq.n	80024b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c6:	4ba3      	ldr	r3, [pc, #652]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d00c      	beq.n	80023ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d2:	4ba0      	ldr	r3, [pc, #640]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023da:	2b08      	cmp	r3, #8
 80023dc:	d112      	bne.n	8002404 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023de:	4b9d      	ldr	r3, [pc, #628]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ea:	d10b      	bne.n	8002404 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	4b99      	ldr	r3, [pc, #612]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d05b      	beq.n	80024b0 <HAL_RCC_OscConfig+0x108>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d157      	bne.n	80024b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e23f      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800240c:	d106      	bne.n	800241c <HAL_RCC_OscConfig+0x74>
 800240e:	4b91      	ldr	r3, [pc, #580]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a90      	ldr	r2, [pc, #576]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e01d      	b.n	8002458 <HAL_RCC_OscConfig+0xb0>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002424:	d10c      	bne.n	8002440 <HAL_RCC_OscConfig+0x98>
 8002426:	4b8b      	ldr	r3, [pc, #556]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a8a      	ldr	r2, [pc, #552]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	4b88      	ldr	r3, [pc, #544]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a87      	ldr	r2, [pc, #540]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	e00b      	b.n	8002458 <HAL_RCC_OscConfig+0xb0>
 8002440:	4b84      	ldr	r3, [pc, #528]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a83      	ldr	r2, [pc, #524]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b81      	ldr	r3, [pc, #516]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a80      	ldr	r2, [pc, #512]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002452:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d013      	beq.n	8002488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7ff f81c 	bl	800149c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002468:	f7ff f818 	bl	800149c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	; 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e204      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800247a:	4b76      	ldr	r3, [pc, #472]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0xc0>
 8002486:	e014      	b.n	80024b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff f808 	bl	800149c <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff f804 	bl	800149c <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e1f0      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024a2:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0xe8>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d063      	beq.n	8002586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024be:	4b65      	ldr	r3, [pc, #404]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ca:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d11c      	bne.n	8002510 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d6:	4b5f      	ldr	r3, [pc, #380]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d116      	bne.n	8002510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e2:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d005      	beq.n	80024fa <HAL_RCC_OscConfig+0x152>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e1c4      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fa:	4b56      	ldr	r3, [pc, #344]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4952      	ldr	r1, [pc, #328]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	4313      	orrs	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	e03a      	b.n	8002586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d020      	beq.n	800255a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002518:	4b4f      	ldr	r3, [pc, #316]	; (8002658 <HAL_RCC_OscConfig+0x2b0>)
 800251a:	2201      	movs	r2, #1
 800251c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7fe ffbd 	bl	800149c <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002526:	f7fe ffb9 	bl	800149c <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e1a5      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b43      	ldr	r3, [pc, #268]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4940      	ldr	r1, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	4313      	orrs	r3, r2
 8002556:	600b      	str	r3, [r1, #0]
 8002558:	e015      	b.n	8002586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b3f      	ldr	r3, [pc, #252]	; (8002658 <HAL_RCC_OscConfig+0x2b0>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe ff9c 	bl	800149c <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002568:	f7fe ff98 	bl	800149c <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e184      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d030      	beq.n	80025f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695b      	ldr	r3, [r3, #20]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800259a:	4b30      	ldr	r3, [pc, #192]	; (800265c <HAL_RCC_OscConfig+0x2b4>)
 800259c:	2201      	movs	r2, #1
 800259e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a0:	f7fe ff7c 	bl	800149c <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a8:	f7fe ff78 	bl	800149c <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e164      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ba:	4b26      	ldr	r3, [pc, #152]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80025bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x200>
 80025c6:	e015      	b.n	80025f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x2b4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ce:	f7fe ff65 	bl	800149c <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d6:	f7fe ff61 	bl	800149c <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e14d      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e8:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 80025ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f0      	bne.n	80025d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a0 	beq.w	8002742 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002606:	4b13      	ldr	r3, [pc, #76]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10f      	bne.n	8002632 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]
 8002616:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	4a0e      	ldr	r2, [pc, #56]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 800261c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002620:	6413      	str	r3, [r2, #64]	; 0x40
 8002622:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <HAL_RCC_OscConfig+0x2ac>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262e:	2301      	movs	r3, #1
 8002630:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x2b8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d121      	bne.n	8002682 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <HAL_RCC_OscConfig+0x2b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a07      	ldr	r2, [pc, #28]	; (8002660 <HAL_RCC_OscConfig+0x2b8>)
 8002644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002648:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800264a:	f7fe ff27 	bl	800149c <HAL_GetTick>
 800264e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	e011      	b.n	8002676 <HAL_RCC_OscConfig+0x2ce>
 8002652:	bf00      	nop
 8002654:	40023800 	.word	0x40023800
 8002658:	42470000 	.word	0x42470000
 800265c:	42470e80 	.word	0x42470e80
 8002660:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7fe ff1a 	bl	800149c <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e106      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002676:	4b85      	ldr	r3, [pc, #532]	; (800288c <HAL_RCC_OscConfig+0x4e4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b01      	cmp	r3, #1
 8002688:	d106      	bne.n	8002698 <HAL_RCC_OscConfig+0x2f0>
 800268a:	4b81      	ldr	r3, [pc, #516]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a80      	ldr	r2, [pc, #512]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
 8002696:	e01c      	b.n	80026d2 <HAL_RCC_OscConfig+0x32a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	2b05      	cmp	r3, #5
 800269e:	d10c      	bne.n	80026ba <HAL_RCC_OscConfig+0x312>
 80026a0:	4b7b      	ldr	r3, [pc, #492]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	4a7a      	ldr	r2, [pc, #488]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026a6:	f043 0304 	orr.w	r3, r3, #4
 80026aa:	6713      	str	r3, [r2, #112]	; 0x70
 80026ac:	4b78      	ldr	r3, [pc, #480]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a77      	ldr	r2, [pc, #476]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e00b      	b.n	80026d2 <HAL_RCC_OscConfig+0x32a>
 80026ba:	4b75      	ldr	r3, [pc, #468]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026be:	4a74      	ldr	r2, [pc, #464]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	f023 0301 	bic.w	r3, r3, #1
 80026c4:	6713      	str	r3, [r2, #112]	; 0x70
 80026c6:	4b72      	ldr	r3, [pc, #456]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ca:	4a71      	ldr	r2, [pc, #452]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	f023 0304 	bic.w	r3, r3, #4
 80026d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d015      	beq.n	8002706 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fe fedf 	bl	800149c <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe fedb 	bl	800149c <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e0c5      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	4b65      	ldr	r3, [pc, #404]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0ee      	beq.n	80026e2 <HAL_RCC_OscConfig+0x33a>
 8002704:	e014      	b.n	8002730 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002706:	f7fe fec9 	bl	800149c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7fe fec5 	bl	800149c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0af      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	4b5a      	ldr	r3, [pc, #360]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ee      	bne.n	800270e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002730:	7dfb      	ldrb	r3, [r7, #23]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d105      	bne.n	8002742 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002736:	4b56      	ldr	r3, [pc, #344]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a55      	ldr	r2, [pc, #340]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800273c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 809b 	beq.w	8002882 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 030c 	and.w	r3, r3, #12
 8002754:	2b08      	cmp	r3, #8
 8002756:	d05c      	beq.n	8002812 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d141      	bne.n	80027e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b4c      	ldr	r3, [pc, #304]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe fe99 	bl	800149c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe fe95 	bl	800149c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e081      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	4b43      	ldr	r3, [pc, #268]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	019b      	lsls	r3, r3, #6
 800279c:	431a      	orrs	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	085b      	lsrs	r3, r3, #1
 80027a4:	3b01      	subs	r3, #1
 80027a6:	041b      	lsls	r3, r3, #16
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	061b      	lsls	r3, r3, #24
 80027b0:	4937      	ldr	r1, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b6:	4b37      	ldr	r3, [pc, #220]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027bc:	f7fe fe6e 	bl	800149c <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c4:	f7fe fe6a 	bl	800149c <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e056      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d6:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x41c>
 80027e2:	e04e      	b.n	8002882 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e4:	4b2b      	ldr	r3, [pc, #172]	; (8002894 <HAL_RCC_OscConfig+0x4ec>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7fe fe57 	bl	800149c <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe fe53 	bl	800149c <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e03f      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002804:	4b22      	ldr	r3, [pc, #136]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x44a>
 8002810:	e037      	b.n	8002882 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e032      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800281e:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCC_OscConfig+0x4e8>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d028      	beq.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002836:	429a      	cmp	r2, r3
 8002838:	d121      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d11a      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002854:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	085b      	lsrs	r3, r3, #1
 8002866:	3b01      	subs	r3, #1
 8002868:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286a:	429a      	cmp	r2, r3
 800286c:	d107      	bne.n	800287e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002878:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40007000 	.word	0x40007000
 8002890:	40023800 	.word	0x40023800
 8002894:	42470060 	.word	0x42470060

08002898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0cc      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d90c      	bls.n	80028d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	b2d2      	uxtb	r2, r2
 80028c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c2:	4b63      	ldr	r3, [pc, #396]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0b8      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ec:	4b59      	ldr	r3, [pc, #356]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80028f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002904:	4b53      	ldr	r3, [pc, #332]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	494d      	ldr	r1, [pc, #308]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	d044      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d107      	bne.n	8002946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002936:	4b47      	ldr	r3, [pc, #284]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d119      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e07f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d003      	beq.n	8002956 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002952:	2b03      	cmp	r3, #3
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e067      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b37      	ldr	r3, [pc, #220]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4934      	ldr	r1, [pc, #208]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002988:	f7fe fd88 	bl	800149c <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7fe fd84 	bl	800149c <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	; 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e04f      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	4b2b      	ldr	r3, [pc, #172]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f003 020c 	and.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1eb      	bne.n	8002990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d20c      	bcs.n	80029e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_ClockConfig+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e032      	b.n	8002a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	4916      	ldr	r1, [pc, #88]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d009      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a0a:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	490e      	ldr	r1, [pc, #56]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1e:	f000 f821 	bl	8002a64 <HAL_RCC_GetSysClockFreq>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	490a      	ldr	r1, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	5ccb      	ldrb	r3, [r1, r3]
 8002a32:	fa22 f303 	lsr.w	r3, r2, r3
 8002a36:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a3a:	4b09      	ldr	r3, [pc, #36]	; (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fce8 	bl	8001414 <HAL_InitTick>

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023c00 	.word	0x40023c00
 8002a54:	40023800 	.word	0x40023800
 8002a58:	08005e18 	.word	0x08005e18
 8002a5c:	20000000 	.word	0x20000000
 8002a60:	20000004 	.word	0x20000004

08002a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	2300      	movs	r3, #0
 8002a76:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a7c:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f003 030c 	and.w	r3, r3, #12
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d00d      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	f200 80bd 	bhi.w	8002c08 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d002      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0x34>
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d003      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a96:	e0b7      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a9a:	60bb      	str	r3, [r7, #8]
       break;
 8002a9c:	e0b7      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9e:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002aa0:	60bb      	str	r3, [r7, #8]
      break;
 8002aa2:	e0b4      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa4:	4b5d      	ldr	r3, [pc, #372]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aae:	4b5b      	ldr	r3, [pc, #364]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d04d      	beq.n	8002b56 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aba:	4b58      	ldr	r3, [pc, #352]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	ea02 0800 	and.w	r8, r2, r0
 8002ad2:	ea03 0901 	and.w	r9, r3, r1
 8002ad6:	4640      	mov	r0, r8
 8002ad8:	4649      	mov	r1, r9
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	014b      	lsls	r3, r1, #5
 8002ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ae8:	0142      	lsls	r2, r0, #5
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	ebb0 0008 	subs.w	r0, r0, r8
 8002af2:	eb61 0109 	sbc.w	r1, r1, r9
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	018b      	lsls	r3, r1, #6
 8002b00:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b04:	0182      	lsls	r2, r0, #6
 8002b06:	1a12      	subs	r2, r2, r0
 8002b08:	eb63 0301 	sbc.w	r3, r3, r1
 8002b0c:	f04f 0000 	mov.w	r0, #0
 8002b10:	f04f 0100 	mov.w	r1, #0
 8002b14:	00d9      	lsls	r1, r3, #3
 8002b16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b1a:	00d0      	lsls	r0, r2, #3
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	eb12 0208 	adds.w	r2, r2, r8
 8002b24:	eb43 0309 	adc.w	r3, r3, r9
 8002b28:	f04f 0000 	mov.w	r0, #0
 8002b2c:	f04f 0100 	mov.w	r1, #0
 8002b30:	0259      	lsls	r1, r3, #9
 8002b32:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b36:	0250      	lsls	r0, r2, #9
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	461a      	mov	r2, r3
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	f7fd fba2 	bl	8000290 <__aeabi_uldivmod>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4613      	mov	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e04a      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b56:	4b31      	ldr	r3, [pc, #196]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	099b      	lsrs	r3, r3, #6
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	f04f 0300 	mov.w	r3, #0
 8002b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b66:	f04f 0100 	mov.w	r1, #0
 8002b6a:	ea02 0400 	and.w	r4, r2, r0
 8002b6e:	ea03 0501 	and.w	r5, r3, r1
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	014b      	lsls	r3, r1, #5
 8002b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b84:	0142      	lsls	r2, r0, #5
 8002b86:	4610      	mov	r0, r2
 8002b88:	4619      	mov	r1, r3
 8002b8a:	1b00      	subs	r0, r0, r4
 8002b8c:	eb61 0105 	sbc.w	r1, r1, r5
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	018b      	lsls	r3, r1, #6
 8002b9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b9e:	0182      	lsls	r2, r0, #6
 8002ba0:	1a12      	subs	r2, r2, r0
 8002ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	00d9      	lsls	r1, r3, #3
 8002bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bb4:	00d0      	lsls	r0, r2, #3
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	1912      	adds	r2, r2, r4
 8002bbc:	eb45 0303 	adc.w	r3, r5, r3
 8002bc0:	f04f 0000 	mov.w	r0, #0
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	0299      	lsls	r1, r3, #10
 8002bca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bce:	0290      	lsls	r0, r2, #10
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	f7fd fb56 	bl	8000290 <__aeabi_uldivmod>
 8002be4:	4602      	mov	r2, r0
 8002be6:	460b      	mov	r3, r1
 8002be8:	4613      	mov	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	60bb      	str	r3, [r7, #8]
      break;
 8002c06:	e002      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c0a:	60bb      	str	r3, [r7, #8]
      break;
 8002c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	00f42400 	.word	0x00f42400
 8002c24:	007a1200 	.word	0x007a1200

08002c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	20000000 	.word	0x20000000

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff0 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	08005e28 	.word	0x08005e28

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c6c:	f7ff ffdc 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0b5b      	lsrs	r3, r3, #13
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4903      	ldr	r1, [pc, #12]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08005e28 	.word	0x08005e28

08002c90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b082      	sub	sp, #8
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e07b      	b.n	8002d9a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d108      	bne.n	8002cbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cb2:	d009      	beq.n	8002cc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	61da      	str	r2, [r3, #28]
 8002cba:	e005      	b.n	8002cc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f885 	bl	8002df2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2202      	movs	r2, #2
 8002cec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a1b      	ldr	r3, [r3, #32]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	ea42 0103 	orr.w	r1, r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0104 	and.w	r1, r3, #4
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	f003 0210 	and.w	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d88:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e01a      	b.n	8002dea <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 f81a 	bl	8002e06 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002dfa:	bf00      	nop
 8002dfc:	370c      	adds	r7, #12
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08c      	sub	sp, #48	; 0x30
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_SPI_TransmitReceive+0x26>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e18a      	b.n	8003156 <HAL_SPI_TransmitReceive+0x33c>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e48:	f7fe fb28 	bl	800149c <HAL_GetTick>
 8002e4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e5e:	887b      	ldrh	r3, [r7, #2]
 8002e60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d00f      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x70>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e70:	d107      	bne.n	8002e82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d103      	bne.n	8002e82 <HAL_SPI_TransmitReceive+0x68>
 8002e7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	d003      	beq.n	8002e8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
 8002e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002e88:	e15b      	b.n	8003142 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x82>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x82>
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d103      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ea2:	e14e      	b.n	8003142 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d003      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2205      	movs	r2, #5
 8002eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	887a      	ldrh	r2, [r7, #2]
 8002ec8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	887a      	ldrh	r2, [r7, #2]
 8002ece:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	887a      	ldrh	r2, [r7, #2]
 8002eda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	887a      	ldrh	r2, [r7, #2]
 8002ee0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b40      	cmp	r3, #64	; 0x40
 8002efa:	d007      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f14:	d178      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_TransmitReceive+0x10a>
 8002f1e:	8b7b      	ldrh	r3, [r7, #26]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d166      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f48:	e053      	b.n	8002ff2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d11b      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x176>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_SPI_TransmitReceive+0x176>
 8002f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d113      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d119      	bne.n	8002fd2 <HAL_SPI_TransmitReceive+0x1b8>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d014      	beq.n	8002fd2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002fd2:	f7fe fa63 	bl	800149c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d807      	bhi.n	8002ff2 <HAL_SPI_TransmitReceive+0x1d8>
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d003      	beq.n	8002ff2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ff0:	e0a7      	b.n	8003142 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1a6      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x130>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003000:	b29b      	uxth	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1a1      	bne.n	8002f4a <HAL_SPI_TransmitReceive+0x130>
 8003006:	e07c      	b.n	8003102 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_SPI_TransmitReceive+0x1fc>
 8003010:	8b7b      	ldrh	r3, [r7, #26]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d16b      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003032:	b29b      	uxth	r3, r3
 8003034:	3b01      	subs	r3, #1
 8003036:	b29a      	uxth	r2, r3
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800303c:	e057      	b.n	80030ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b02      	cmp	r3, #2
 800304a:	d11c      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x26c>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d017      	beq.n	8003086 <HAL_SPI_TransmitReceive+0x26c>
 8003056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d114      	bne.n	8003086 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	330c      	adds	r3, #12
 8003066:	7812      	ldrb	r2, [r2, #0]
 8003068:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d119      	bne.n	80030c8 <HAL_SPI_TransmitReceive+0x2ae>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d014      	beq.n	80030c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030c4:	2301      	movs	r3, #1
 80030c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80030c8:	f7fe f9e8 	bl	800149c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d803      	bhi.n	80030e0 <HAL_SPI_TransmitReceive+0x2c6>
 80030d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030de:	d102      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x2cc>
 80030e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80030ec:	e029      	b.n	8003142 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1a2      	bne.n	800303e <HAL_SPI_TransmitReceive+0x224>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d19d      	bne.n	800303e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f8b2 	bl	8003270 <SPI_EndRxTxTransaction>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d006      	beq.n	8003120 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800311e:	e010      	b.n	8003142 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10b      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	e000      	b.n	8003142 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003140:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003152:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003156:	4618      	mov	r0, r3
 8003158:	3730      	adds	r7, #48	; 0x30
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	603b      	str	r3, [r7, #0]
 800316c:	4613      	mov	r3, r2
 800316e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003170:	f7fe f994 	bl	800149c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	4413      	add	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003180:	f7fe f98c 	bl	800149c <HAL_GetTick>
 8003184:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	015b      	lsls	r3, r3, #5
 800318c:	0d1b      	lsrs	r3, r3, #20
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	fb02 f303 	mul.w	r3, r2, r3
 8003194:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003196:	e054      	b.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d050      	beq.n	8003242 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031a0:	f7fe f97c 	bl	800149c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d902      	bls.n	80031b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d13d      	bne.n	8003232 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031ce:	d111      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031d8:	d004      	beq.n	80031e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e2:	d107      	bne.n	80031f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fc:	d10f      	bne.n	800321e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800321c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e017      	b.n	8003262 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3b01      	subs	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4013      	ands	r3, r2
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	429a      	cmp	r2, r3
 8003250:	bf0c      	ite	eq
 8003252:	2301      	moveq	r3, #1
 8003254:	2300      	movne	r3, #0
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	429a      	cmp	r2, r3
 800325e:	d19b      	bne.n	8003198 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	20000000 	.word	0x20000000

08003270 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <SPI_EndRxTxTransaction+0x7c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <SPI_EndRxTxTransaction+0x80>)
 8003282:	fba2 2303 	umull	r2, r3, r2, r3
 8003286:	0d5b      	lsrs	r3, r3, #21
 8003288:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800328c:	fb02 f303 	mul.w	r3, r2, r3
 8003290:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800329a:	d112      	bne.n	80032c2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	2180      	movs	r1, #128	; 0x80
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f7ff ff5a 	bl	8003160 <SPI_WaitFlagStateUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d016      	beq.n	80032e0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e00f      	b.n	80032e2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3b01      	subs	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d8:	2b80      	cmp	r3, #128	; 0x80
 80032da:	d0f2      	beq.n	80032c2 <SPI_EndRxTxTransaction+0x52>
 80032dc:	e000      	b.n	80032e0 <SPI_EndRxTxTransaction+0x70>
        break;
 80032de:	bf00      	nop
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3718      	adds	r7, #24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000000 	.word	0x20000000
 80032f0:	165e9f81 	.word	0x165e9f81

080032f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e03f      	b.n	8003386 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f000 f866 	bl	80033ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2224      	movs	r2, #36	; 0x24
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f86b 	bl	8003414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800335c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800336c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2220      	movs	r2, #32
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e021      	b.n	80033e4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033b6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f821 	bl	8003400 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b09f      	sub	sp, #124	; 0x7c
 800341a:	af00      	add	r7, sp, #0
 800341c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800341e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342a:	68d9      	ldr	r1, [r3, #12]
 800342c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	ea40 0301 	orr.w	r3, r0, r1
 8003434:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	431a      	orrs	r2, r3
 8003440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	431a      	orrs	r2, r3
 8003446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	4313      	orrs	r3, r2
 800344c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800344e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003458:	f021 010c 	bic.w	r1, r1, #12
 800345c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003462:	430b      	orrs	r3, r1
 8003464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003470:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003472:	6999      	ldr	r1, [r3, #24]
 8003474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	ea40 0301 	orr.w	r3, r0, r1
 800347c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800347e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4bc5      	ldr	r3, [pc, #788]	; (8003798 <UART_SetConfig+0x384>)
 8003484:	429a      	cmp	r2, r3
 8003486:	d004      	beq.n	8003492 <UART_SetConfig+0x7e>
 8003488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4bc3      	ldr	r3, [pc, #780]	; (800379c <UART_SetConfig+0x388>)
 800348e:	429a      	cmp	r2, r3
 8003490:	d103      	bne.n	800349a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003492:	f7ff fbe9 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8003496:	6778      	str	r0, [r7, #116]	; 0x74
 8003498:	e002      	b.n	80034a0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800349a:	f7ff fbd1 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 800349e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a8:	f040 80b6 	bne.w	8003618 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034ae:	461c      	mov	r4, r3
 80034b0:	f04f 0500 	mov.w	r5, #0
 80034b4:	4622      	mov	r2, r4
 80034b6:	462b      	mov	r3, r5
 80034b8:	1891      	adds	r1, r2, r2
 80034ba:	6439      	str	r1, [r7, #64]	; 0x40
 80034bc:	415b      	adcs	r3, r3
 80034be:	647b      	str	r3, [r7, #68]	; 0x44
 80034c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034c4:	1912      	adds	r2, r2, r4
 80034c6:	eb45 0303 	adc.w	r3, r5, r3
 80034ca:	f04f 0000 	mov.w	r0, #0
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	00d9      	lsls	r1, r3, #3
 80034d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034d8:	00d0      	lsls	r0, r2, #3
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	1911      	adds	r1, r2, r4
 80034e0:	6639      	str	r1, [r7, #96]	; 0x60
 80034e2:	416b      	adcs	r3, r5
 80034e4:	667b      	str	r3, [r7, #100]	; 0x64
 80034e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80034f4:	415b      	adcs	r3, r3
 80034f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80034fc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003500:	f7fc fec6 	bl	8000290 <__aeabi_uldivmod>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	4ba5      	ldr	r3, [pc, #660]	; (80037a0 <UART_SetConfig+0x38c>)
 800350a:	fba3 2302 	umull	r2, r3, r3, r2
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	011e      	lsls	r6, r3, #4
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	461c      	mov	r4, r3
 8003516:	f04f 0500 	mov.w	r5, #0
 800351a:	4622      	mov	r2, r4
 800351c:	462b      	mov	r3, r5
 800351e:	1891      	adds	r1, r2, r2
 8003520:	6339      	str	r1, [r7, #48]	; 0x30
 8003522:	415b      	adcs	r3, r3
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
 8003526:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800352a:	1912      	adds	r2, r2, r4
 800352c:	eb45 0303 	adc.w	r3, r5, r3
 8003530:	f04f 0000 	mov.w	r0, #0
 8003534:	f04f 0100 	mov.w	r1, #0
 8003538:	00d9      	lsls	r1, r3, #3
 800353a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800353e:	00d0      	lsls	r0, r2, #3
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	1911      	adds	r1, r2, r4
 8003546:	65b9      	str	r1, [r7, #88]	; 0x58
 8003548:	416b      	adcs	r3, r5
 800354a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800354c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	461a      	mov	r2, r3
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	1891      	adds	r1, r2, r2
 8003558:	62b9      	str	r1, [r7, #40]	; 0x28
 800355a:	415b      	adcs	r3, r3
 800355c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800355e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003562:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003566:	f7fc fe93 	bl	8000290 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <UART_SetConfig+0x38c>)
 8003570:	fba3 1302 	umull	r1, r3, r3, r2
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	2164      	movs	r1, #100	; 0x64
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	3332      	adds	r3, #50	; 0x32
 8003582:	4a87      	ldr	r2, [pc, #540]	; (80037a0 <UART_SetConfig+0x38c>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003590:	441e      	add	r6, r3
 8003592:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003594:	4618      	mov	r0, r3
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	4602      	mov	r2, r0
 800359c:	460b      	mov	r3, r1
 800359e:	1894      	adds	r4, r2, r2
 80035a0:	623c      	str	r4, [r7, #32]
 80035a2:	415b      	adcs	r3, r3
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035aa:	1812      	adds	r2, r2, r0
 80035ac:	eb41 0303 	adc.w	r3, r1, r3
 80035b0:	f04f 0400 	mov.w	r4, #0
 80035b4:	f04f 0500 	mov.w	r5, #0
 80035b8:	00dd      	lsls	r5, r3, #3
 80035ba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035be:	00d4      	lsls	r4, r2, #3
 80035c0:	4622      	mov	r2, r4
 80035c2:	462b      	mov	r3, r5
 80035c4:	1814      	adds	r4, r2, r0
 80035c6:	653c      	str	r4, [r7, #80]	; 0x50
 80035c8:	414b      	adcs	r3, r1
 80035ca:	657b      	str	r3, [r7, #84]	; 0x54
 80035cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	461a      	mov	r2, r3
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	1891      	adds	r1, r2, r2
 80035d8:	61b9      	str	r1, [r7, #24]
 80035da:	415b      	adcs	r3, r3
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80035e6:	f7fc fe53 	bl	8000290 <__aeabi_uldivmod>
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <UART_SetConfig+0x38c>)
 80035f0:	fba3 1302 	umull	r1, r3, r3, r2
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	2164      	movs	r1, #100	; 0x64
 80035f8:	fb01 f303 	mul.w	r3, r1, r3
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	3332      	adds	r3, #50	; 0x32
 8003602:	4a67      	ldr	r2, [pc, #412]	; (80037a0 <UART_SetConfig+0x38c>)
 8003604:	fba2 2303 	umull	r2, r3, r2, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	f003 0207 	and.w	r2, r3, #7
 800360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4432      	add	r2, r6
 8003614:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003616:	e0b9      	b.n	800378c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361a:	461c      	mov	r4, r3
 800361c:	f04f 0500 	mov.w	r5, #0
 8003620:	4622      	mov	r2, r4
 8003622:	462b      	mov	r3, r5
 8003624:	1891      	adds	r1, r2, r2
 8003626:	6139      	str	r1, [r7, #16]
 8003628:	415b      	adcs	r3, r3
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003630:	1912      	adds	r2, r2, r4
 8003632:	eb45 0303 	adc.w	r3, r5, r3
 8003636:	f04f 0000 	mov.w	r0, #0
 800363a:	f04f 0100 	mov.w	r1, #0
 800363e:	00d9      	lsls	r1, r3, #3
 8003640:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003644:	00d0      	lsls	r0, r2, #3
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	eb12 0804 	adds.w	r8, r2, r4
 800364e:	eb43 0905 	adc.w	r9, r3, r5
 8003652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4618      	mov	r0, r3
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	008b      	lsls	r3, r1, #2
 8003666:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800366a:	0082      	lsls	r2, r0, #2
 800366c:	4640      	mov	r0, r8
 800366e:	4649      	mov	r1, r9
 8003670:	f7fc fe0e 	bl	8000290 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <UART_SetConfig+0x38c>)
 800367a:	fba3 2302 	umull	r2, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	011e      	lsls	r6, r3, #4
 8003682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003684:	4618      	mov	r0, r3
 8003686:	f04f 0100 	mov.w	r1, #0
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	1894      	adds	r4, r2, r2
 8003690:	60bc      	str	r4, [r7, #8]
 8003692:	415b      	adcs	r3, r3
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800369a:	1812      	adds	r2, r2, r0
 800369c:	eb41 0303 	adc.w	r3, r1, r3
 80036a0:	f04f 0400 	mov.w	r4, #0
 80036a4:	f04f 0500 	mov.w	r5, #0
 80036a8:	00dd      	lsls	r5, r3, #3
 80036aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036ae:	00d4      	lsls	r4, r2, #3
 80036b0:	4622      	mov	r2, r4
 80036b2:	462b      	mov	r3, r5
 80036b4:	1814      	adds	r4, r2, r0
 80036b6:	64bc      	str	r4, [r7, #72]	; 0x48
 80036b8:	414b      	adcs	r3, r1
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f04f 0100 	mov.w	r1, #0
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	008b      	lsls	r3, r1, #2
 80036d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036d4:	0082      	lsls	r2, r0, #2
 80036d6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80036da:	f7fc fdd9 	bl	8000290 <__aeabi_uldivmod>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <UART_SetConfig+0x38c>)
 80036e4:	fba3 1302 	umull	r1, r3, r3, r2
 80036e8:	095b      	lsrs	r3, r3, #5
 80036ea:	2164      	movs	r1, #100	; 0x64
 80036ec:	fb01 f303 	mul.w	r3, r1, r3
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	3332      	adds	r3, #50	; 0x32
 80036f6:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <UART_SetConfig+0x38c>)
 80036f8:	fba2 2303 	umull	r2, r3, r2, r3
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003702:	441e      	add	r6, r3
 8003704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003706:	4618      	mov	r0, r3
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	1894      	adds	r4, r2, r2
 8003712:	603c      	str	r4, [r7, #0]
 8003714:	415b      	adcs	r3, r3
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800371c:	1812      	adds	r2, r2, r0
 800371e:	eb41 0303 	adc.w	r3, r1, r3
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	f04f 0500 	mov.w	r5, #0
 800372a:	00dd      	lsls	r5, r3, #3
 800372c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003730:	00d4      	lsls	r4, r2, #3
 8003732:	4622      	mov	r2, r4
 8003734:	462b      	mov	r3, r5
 8003736:	eb12 0a00 	adds.w	sl, r2, r0
 800373a:	eb43 0b01 	adc.w	fp, r3, r1
 800373e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	4618      	mov	r0, r3
 8003744:	f04f 0100 	mov.w	r1, #0
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	008b      	lsls	r3, r1, #2
 8003752:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003756:	0082      	lsls	r2, r0, #2
 8003758:	4650      	mov	r0, sl
 800375a:	4659      	mov	r1, fp
 800375c:	f7fc fd98 	bl	8000290 <__aeabi_uldivmod>
 8003760:	4602      	mov	r2, r0
 8003762:	460b      	mov	r3, r1
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <UART_SetConfig+0x38c>)
 8003766:	fba3 1302 	umull	r1, r3, r3, r2
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	2164      	movs	r1, #100	; 0x64
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	011b      	lsls	r3, r3, #4
 8003776:	3332      	adds	r3, #50	; 0x32
 8003778:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <UART_SetConfig+0x38c>)
 800377a:	fba2 2303 	umull	r2, r3, r2, r3
 800377e:	095b      	lsrs	r3, r3, #5
 8003780:	f003 020f 	and.w	r2, r3, #15
 8003784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4432      	add	r2, r6
 800378a:	609a      	str	r2, [r3, #8]
}
 800378c:	bf00      	nop
 800378e:	377c      	adds	r7, #124	; 0x7c
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003796:	bf00      	nop
 8003798:	40011000 	.word	0x40011000
 800379c:	40011400 	.word	0x40011400
 80037a0:	51eb851f 	.word	0x51eb851f

080037a4 <_ZN7QAD_ADC11imp_handlerEv>:
	//-----------------------
	//QAD_ADC Handler Methods

//QAD_ADC::imp_handler
//QAD_ADC Handler Method
void QAD_ADC::imp_handler(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]

	//Check for overrun error
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_OVR)) {
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b20      	cmp	r3, #32
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <_ZN7QAD_ADC11imp_handlerEv+0x36>
		imp_stop();
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f951 	bl	8003a6c <_ZN7QAD_ADC8imp_stopEv>
		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_OVR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f06f 0220 	mvn.w	r2, #32
 80037d2:	601a      	str	r2, [r3, #0]
		imp_start();
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f839 	bl	800384c <_ZN7QAD_ADC9imp_startEv>
	}

	//Check for end of conversion
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_EOC)) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d028      	beq.n	8003844 <_ZN7QAD_ADC11imp_handlerEv+0xa0>

		m_uData[m_uDataIdx] = m_sADCHandle.Instance->DR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 80037fe:	b291      	uxth	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	33cc      	adds	r3, #204	; 0xcc
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	460a      	mov	r2, r1
 800380a:	80da      	strh	r2, [r3, #6]
		if (m_uDataIdx >= (m_uChannelCount-1))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800381a:	3b01      	subs	r3, #1
 800381c:	429a      	cmp	r2, r3
 800381e:	db04      	blt.n	800382a <_ZN7QAD_ADC11imp_handlerEv+0x86>
			m_uDataIdx = 0; else
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8003828:	e007      	b.n	800383a <_ZN7QAD_ADC11imp_handlerEv+0x96>
			m_uDataIdx++;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003830:	3301      	adds	r3, #1
 8003832:	b2da      	uxtb	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_EOC);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383e:	f06f 0202 	mvn.w	r2, #2
 8003842:	601a      	str	r2, [r3, #0]
	}
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <_ZN7QAD_ADC9imp_startEv>:
	//-----------------------
	//QAD_ADC Control Methods

//QAD_ADC::imp_start
//QAD_ADC Control Method
QA_Result QAD_ADC::imp_start(void) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	; 0x30
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	if ((m_eState) || (!m_uChannelCount))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <_ZN7QAD_ADC9imp_startEv+0x1a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <_ZN7QAD_ADC9imp_startEv+0x1e>
		return QA_Fail;
 8003866:	2301      	movs	r3, #1
 8003868:	e0f9      	b.n	8003a5e <_ZN7QAD_ADC9imp_startEv+0x212>

	//Initialize ADC
	m_sADCHandle.Instance                   = ADC1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a7e      	ldr	r2, [pc, #504]	; (8003a68 <_ZN7QAD_ADC9imp_startEv+0x21c>)
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
	m_sADCHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003876:	659a      	str	r2, [r3, #88]	; 0x58
	m_sADCHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sADCHandle.Init.ScanConvMode          = ENABLE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	665a      	str	r2, [r3, #100]	; 0x64
	m_sADCHandle.Init.ContinuousConvMode    = DISABLE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sADCHandle.Init.DiscontinuousConvMode = DISABLE;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sADCHandle.Init.NbrOfDiscConversion   = 0;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	679a      	str	r2, [r3, #120]	; 0x78
	m_sADCHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sADCHandle.Init.ExternalTrigConv      = imp_getTrigger();
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f933 	bl	8003b10 <_ZN7QAD_ADC14imp_getTriggerEv>
 80038aa:	4602      	mov	r2, r0
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sADCHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	661a      	str	r2, [r3, #96]	; 0x60
	m_sADCHandle.Init.NbrOfConversion       = m_uChannelCount;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80038bc:	461a      	mov	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	671a      	str	r2, [r3, #112]	; 0x70
	m_sADCHandle.Init.DMAContinuousRequests = ENABLE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	m_sADCHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_ADC_Init(&m_sADCHandle) != HAL_OK) {
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3354      	adds	r3, #84	; 0x54
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fd fded 	bl	80014b4 <HAL_ADC_Init>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d004      	beq.n	80038f4 <_ZN7QAD_ADC9imp_startEv+0xa8>
		imp_stop();
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f8be 	bl	8003a6c <_ZN7QAD_ADC8imp_stopEv>
		return QA_Fail;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e0b4      	b.n	8003a5e <_ZN7QAD_ADC9imp_startEv+0x212>
	}

	//Channel GPIO Configuration
	GPIO_InitTypeDef GPIO_Init = {0};
 80038f4:	f107 0318 	add.w	r3, r7, #24
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode  = GPIO_MODE_ANALOG;
 8003904:	2303      	movs	r3, #3
 8003906:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Pull  = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2300      	movs	r3, #0
 800390e:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003910:	2300      	movs	r3, #0
 8003912:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800391c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003920:	429a      	cmp	r2, r3
 8003922:	d22e      	bcs.n	8003982 <_ZN7QAD_ADC9imp_startEv+0x136>
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	330a      	adds	r3, #10
 800392c:	011b      	lsls	r3, r3, #4
 800392e:	4413      	add	r3, r2
 8003930:	3304      	adds	r3, #4
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b11      	cmp	r3, #17
 8003936:	d109      	bne.n	800394c <_ZN7QAD_ADC9imp_startEv+0x100>
				(m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVBat)) {
 8003938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	330a      	adds	r3, #10
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003948:	2b12      	cmp	r3, #18
 800394a:	d014      	beq.n	8003976 <_ZN7QAD_ADC9imp_startEv+0x12a>
			GPIO_Init.Pin       = m_sChannels[i].uPin;
 800394c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	4413      	add	r3, r2
 8003956:	33a0      	adds	r3, #160	; 0xa0
 8003958:	881b      	ldrh	r3, [r3, #0]
 800395a:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 800395c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	4413      	add	r3, r2
 8003966:	339c      	adds	r3, #156	; 0x9c
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f107 0218 	add.w	r2, r7, #24
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fa97 	bl	8001ea4 <HAL_GPIO_Init>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800397a:	3301      	adds	r3, #1
 800397c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003980:	e7c9      	b.n	8003916 <_ZN7QAD_ADC9imp_startEv+0xca>
		}
	}


	//Channel Configuration
	ADC_ChannelConfTypeDef  ADCChannel_Init = {0};
 8003982:	f107 0308 	add.w	r3, r7, #8
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	60da      	str	r2, [r3, #12]
	ADCChannel_Init.Offset        = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003994:	2300      	movs	r3, #0
 8003996:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80039a0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d230      	bcs.n	8003a0a <_ZN7QAD_ADC9imp_startEv+0x1be>
		ADCChannel_Init.Channel       = m_sChannels[i].eChannel;
 80039a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	330a      	adds	r3, #10
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	4413      	add	r3, r2
 80039b4:	3304      	adds	r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60bb      	str	r3, [r7, #8]
		ADCChannel_Init.Rank          = i+1;
 80039ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039be:	3301      	adds	r3, #1
 80039c0:	60fb      	str	r3, [r7, #12]
		ADCChannel_Init.SamplingTime = m_sChannels[i].eSamplingTime;
 80039c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	330a      	adds	r3, #10
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4413      	add	r3, r2
 80039ce:	3308      	adds	r3, #8
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&m_sADCHandle, &ADCChannel_Init) != HAL_OK) {
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3354      	adds	r3, #84	; 0x54
 80039d8:	f107 0208 	add.w	r2, r7, #8
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd feee 	bl	80017c0 <HAL_ADC_ConfigChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	bf14      	ite	ne
 80039ea:	2301      	movne	r3, #1
 80039ec:	2300      	moveq	r3, #0
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d004      	beq.n	80039fe <_ZN7QAD_ADC9imp_startEv+0x1b2>
			imp_stop();
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f839 	bl	8003a6c <_ZN7QAD_ADC8imp_stopEv>
			return QA_Fail;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e02f      	b.n	8003a5e <_ZN7QAD_ADC9imp_startEv+0x212>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80039fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003a02:	3301      	adds	r3, #1
 8003a04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003a08:	e7c7      	b.n	800399a <_ZN7QAD_ADC9imp_startEv+0x14e>
		}

	}

	//Clear Data
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003a10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a14:	2b0f      	cmp	r3, #15
 8003a16:	d80d      	bhi.n	8003a34 <_ZN7QAD_ADC9imp_startEv+0x1e8>
		m_uData[i] = 0;
 8003a18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	33cc      	adds	r3, #204	; 0xcc
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	4413      	add	r3, r2
 8003a24:	2200      	movs	r2, #0
 8003a26:	80da      	strh	r2, [r3, #6]
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003a28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003a32:	e7ed      	b.n	8003a10 <_ZN7QAD_ADC9imp_startEv+0x1c4>
	m_uDataIdx = 0;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

	//Enable ADC IRQ
	HAL_ADC_Start_IT(&m_sADCHandle);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	3354      	adds	r3, #84	; 0x54
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fd fdc1 	bl	80015c8 <HAL_ADC_Start_IT>
	__HAL_TIM_ENABLE(&m_sTIMHandle);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f042 0201 	orr.w	r2, r2, #1
 8003a54:	601a      	str	r2, [r3, #0]

	//Set States
	m_eState = QA_Active;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3730      	adds	r7, #48	; 0x30
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40012000 	.word	0x40012000

08003a6c <_ZN7QAD_ADC8imp_stopEv>:


//QAD_ADC::imp_stop
//QAD_ADC Control Method
void QAD_ADC::imp_stop(void) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]

	//Disable ADC IRQ
	__HAL_TIM_DISABLE(&m_sTIMHandle);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	6a1a      	ldr	r2, [r3, #32]
 8003a7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d014      	beq.n	8003ab8 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	6a1a      	ldr	r2, [r3, #32]
 8003a94:	f240 4344 	movw	r3, #1092	; 0x444
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d007      	beq.n	8003ab8 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f022 0201 	bic.w	r2, r2, #1
 8003ab6:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&m_sADCHandle);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3354      	adds	r3, #84	; 0x54
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd fe41 	bl	8001744 <HAL_ADC_Stop_IT>

	//GPIO Deinitialization
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d212      	bcs.n	8003af8 <_ZN7QAD_ADC8imp_stopEv+0x8c>
		HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 8003ad2:	7bfb      	ldrb	r3, [r7, #15]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	011b      	lsls	r3, r3, #4
 8003ad8:	4413      	add	r3, r2
 8003ada:	339c      	adds	r3, #156	; 0x9c
 8003adc:	6818      	ldr	r0, [r3, #0]
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	4413      	add	r3, r2
 8003ae6:	33a0      	adds	r3, #160	; 0xa0
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f7fe fb5e 	bl	80021ac <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	3301      	adds	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	e7e6      	b.n	8003ac6 <_ZN7QAD_ADC8imp_stopEv+0x5a>
	}

	//Deinitialize ADC
	HAL_ADC_DeInit(&m_sADCHandle);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3354      	adds	r3, #84	; 0x54
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd fd1c 	bl	800153a <HAL_ADC_DeInit>

	//Set States
	m_eState = QA_Inactive;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	705a      	strb	r2, [r3, #1]
}
 8003b08:	bf00      	nop
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <_ZN7QAD_ADC14imp_getTriggerEv>:
	//--------------------
	//QAD_ADC Tool Methods

//QAD_ADC::imp_getTrigger
//QAD_ADC Tool Method
uint32_t QAD_ADC::imp_getTrigger(void) {
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	uint32_t uTrigger;
	switch (m_eTimer) {
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	789b      	ldrb	r3, [r3, #2]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d002      	beq.n	8003b26 <_ZN7QAD_ADC14imp_getTriggerEv+0x16>
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d004      	beq.n	8003b2e <_ZN7QAD_ADC14imp_getTriggerEv+0x1e>
 8003b24:	e007      	b.n	8003b36 <_ZN7QAD_ADC14imp_getTriggerEv+0x26>
		case QAD_Timer2:
			uTrigger = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003b26:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003b2a:	60fb      	str	r3, [r7, #12]
			break;
 8003b2c:	e006      	b.n	8003b3c <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		case QAD_Timer3:
			uTrigger = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003b2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b32:	60fb      	str	r3, [r7, #12]
			break;
 8003b34:	e002      	b.n	8003b3c <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		default:
			uTrigger = 0xFFFFFFFF;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	60fb      	str	r3, [r7, #12]
	}
	return uTrigger;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	4613      	mov	r3, r2
 8003b56:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	88fa      	ldrh	r2, [r7, #6]
 8003b62:	809a      	strh	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	719a      	strb	r2, [r3, #6]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f841 	bl	8003c04 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	889b      	ldrh	r3, [r3, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f7fe fbe8 	bl	8002374 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	741a      	strb	r2, [r3, #16]
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b082      	sub	sp, #8
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	889b      	ldrh	r3, [r3, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f7fe fbd5 	bl	8002374 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	741a      	strb	r2, [r3, #16]
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	7c1b      	ldrb	r3, [r3, #16]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d005      	beq.n	8003bf4 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d107      	bne.n	8003bfc <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff ffe0 	bl	8003bb2 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8003bf2:	e003      	b.n	8003bfc <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff ffc9 	bl	8003b8c <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8003bfa:	bf00      	nop
	}
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b088      	sub	sp, #32
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003c0c:	f107 030c 	add.w	r3, r7, #12
 8003c10:	2200      	movs	r2, #0
 8003c12:	601a      	str	r2, [r3, #0]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	60da      	str	r2, [r3, #12]
 8003c1a:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	889b      	ldrh	r3, [r3, #4]
 8003c20:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	799b      	ldrb	r3, [r3, #6]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8003c2a:	2311      	movs	r3, #17
 8003c2c:	e000      	b.n	8003c30 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8003c2e:	2301      	movs	r3, #1
 8003c30:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f107 020c 	add.w	r2, r7, #12
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe f92b 	bl	8001ea4 <HAL_GPIO_Init>
}
 8003c4e:	bf00      	nop
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <_ZN10QAD_SPIMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_SPIMgr& get(void) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
		static QAD_SPIMgr instance;
 8003c5c:	4b10      	ldr	r3, [pc, #64]	; (8003ca0 <_ZN10QAD_SPIMgr3getEv+0x48>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f3bf 8f5b 	dmb	ish
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d010      	beq.n	8003c9a <_ZN10QAD_SPIMgr3getEv+0x42>
 8003c78:	4809      	ldr	r0, [pc, #36]	; (8003ca0 <_ZN10QAD_SPIMgr3getEv+0x48>)
 8003c7a:	f001 fb6d 	bl	8005358 <__cxa_guard_acquire>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	bf14      	ite	ne
 8003c84:	2301      	movne	r3, #1
 8003c86:	2300      	moveq	r3, #0
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d005      	beq.n	8003c9a <_ZN10QAD_SPIMgr3getEv+0x42>
 8003c8e:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <_ZN10QAD_SPIMgr3getEv+0x4c>)
 8003c90:	f000 fdb8 	bl	8004804 <_ZN10QAD_SPIMgrC1Ev>
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <_ZN10QAD_SPIMgr3getEv+0x48>)
 8003c96:	f001 fb6b 	bl	8005370 <__cxa_guard_release>
		return instance;
 8003c9a:	4b02      	ldr	r3, [pc, #8]	; (8003ca4 <_ZN10QAD_SPIMgr3getEv+0x4c>)
	}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	200002a0 	.word	0x200002a0
 8003ca4:	20000264 	.word	0x20000264

08003ca8 <_ZN10QAD_SPIMgr8getStateE14QAD_SPI_Periph>:


	//------------
	//Data Methods

	static QAD_SPI_State getState(QAD_SPI_Periph eSPI) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	4603      	mov	r3, r0
 8003cb0:	71fb      	strb	r3, [r7, #7]
		if (eSPI >= QAD_SPINone)
 8003cb2:	79fb      	ldrb	r3, [r7, #7]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d901      	bls.n	8003cbc <_ZN10QAD_SPIMgr8getStateE14QAD_SPI_Periph+0x14>
			return QAD_SPI_InvalidDevice;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e00a      	b.n	8003cd2 <_ZN10QAD_SPIMgr8getStateE14QAD_SPI_Periph+0x2a>

		return get().m_sSPIs[eSPI].eState;
 8003cbc:	f7ff ffcc 	bl	8003c58 <_ZN10QAD_SPIMgr3getEv>
 8003cc0:	4601      	mov	r1, r0
 8003cc2:	79fa      	ldrb	r2, [r7, #7]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	3301      	adds	r3, #1
 8003cd0:	781b      	ldrb	r3, [r3, #0]
	}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <_ZN10QAD_SPIMgr11getInstanceE14QAD_SPI_Periph>:


	static SPI_TypeDef* getInstance(QAD_SPI_Periph eSPI) {
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	71fb      	strb	r3, [r7, #7]
		if (eSPI >= QAD_SPINone)
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d901      	bls.n	8003cee <_ZN10QAD_SPIMgr11getInstanceE14QAD_SPI_Periph+0x14>
			return NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	e00a      	b.n	8003d04 <_ZN10QAD_SPIMgr11getInstanceE14QAD_SPI_Periph+0x2a>

		return get().m_sSPIs[eSPI].pInstance;
 8003cee:	f7ff ffb3 	bl	8003c58 <_ZN10QAD_SPIMgr3getEv>
 8003cf2:	4601      	mov	r1, r0
 8003cf4:	79fa      	ldrb	r2, [r7, #7]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	3304      	adds	r3, #4
 8003d02:	681b      	ldr	r3, [r3, #0]
	}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZN10QAD_SPIMgr6getIRQE14QAD_SPI_Periph>:


	static IRQn_Type getIRQ(QAD_SPI_Periph eSPI) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	71fb      	strb	r3, [r7, #7]
		if (eSPI >= QAD_SPINone)
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d902      	bls.n	8003d22 <_ZN10QAD_SPIMgr6getIRQE14QAD_SPI_Periph+0x16>
			return UsageFault_IRQn;
 8003d1c:	f06f 0309 	mvn.w	r3, #9
 8003d20:	e00b      	b.n	8003d3a <_ZN10QAD_SPIMgr6getIRQE14QAD_SPI_Periph+0x2e>

		return get().m_sSPIs[eSPI].eIRQ;
 8003d22:	f7ff ff99 	bl	8003c58 <_ZN10QAD_SPIMgr3getEv>
 8003d26:	4601      	mov	r1, r0
 8003d28:	79fa      	ldrb	r2, [r7, #7]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3308      	adds	r3, #8
 8003d36:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_ZN10QAD_SPIMgr11registerSPIE14QAD_SPI_Periph13QAD_SPI_State>:


	//------------------
	//Management Methods

	static QA_Result registerSPI(QAD_SPI_Periph eSPI, QAD_SPI_State eState) {
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b082      	sub	sp, #8
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	4603      	mov	r3, r0
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	71fb      	strb	r3, [r7, #7]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerSPI(eSPI, eState);
 8003d52:	f7ff ff81 	bl	8003c58 <_ZN10QAD_SPIMgr3getEv>
 8003d56:	79ba      	ldrb	r2, [r7, #6]
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	f000 fdb6 	bl	80048cc <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State>
 8003d60:	4603      	mov	r3, r0
	}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3708      	adds	r7, #8
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <_ZN10QAD_SPIMgr13deregisterSPIE14QAD_SPI_Periph>:

	static void deregisterSPI(QAD_SPI_Periph eSPI) {
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterSPI(eSPI);
 8003d74:	f7ff ff70 	bl	8003c58 <_ZN10QAD_SPIMgr3getEv>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	79fb      	ldrb	r3, [r7, #7]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f000 fde2 	bl	8004948 <_ZN10QAD_SPIMgr17imp_deregisterSPIE14QAD_SPI_Periph>
	}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <_ZN10QAD_SPIMgr11enableClockE14QAD_SPI_Periph>:


	//-------------
	//Clock Methods

	static void enableClock(QAD_SPI_Periph eSPI) {
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eSPI);
 8003d96:	f7ff ff5f 	bl	8003c58 <_ZN10QAD_SPIMgr3getEv>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f000 fdeb 	bl	800497c <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph>
	}
 8003da6:	bf00      	nop
 8003da8:	3708      	adds	r7, #8
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <_ZN10QAD_SPIMgr12disableClockE14QAD_SPI_Periph>:

	static void disableClock(QAD_SPI_Periph eSPI) {
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b082      	sub	sp, #8
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eSPI);
 8003db8:	f7ff ff4e 	bl	8003c58 <_ZN10QAD_SPIMgr3getEv>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	f000 fe84 	bl	8004ad0 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph>
	}
 8003dc8:	bf00      	nop
 8003dca:	3708      	adds	r7, #8
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <_ZN7QAD_SPI4initEv>:
	//------------------------------
	//QAD_SPI Initialization Methods

//QAD_SPI::init
//QAD_SPI Initialization Method
QA_Result QAD_SPI::init(void) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if (QAD_SPIMgr::getState(m_eSPI))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	791b      	ldrb	r3, [r3, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff63 	bl	8003ca8 <_ZN10QAD_SPIMgr8getStateE14QAD_SPI_Periph>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	bf14      	ite	ne
 8003de8:	2301      	movne	r3, #1
 8003dea:	2300      	moveq	r3, #0
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <_ZN7QAD_SPI4initEv+0x26>
  	return QA_Error_PeriphBusy;
 8003df2:	2302      	movs	r3, #2
 8003df4:	e013      	b.n	8003e1e <_ZN7QAD_SPI4initEv+0x4e>

  QAD_SPIMgr::registerSPI(m_eSPI, QAD_SPI_InUse_SPI);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	791b      	ldrb	r3, [r3, #4]
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ffa0 	bl	8003d42 <_ZN10QAD_SPIMgr11registerSPIE14QAD_SPI_Periph13QAD_SPI_State>
  QA_Result eRes = periphInit();
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 f879 	bl	8003efa <_ZN7QAD_SPI10periphInitEv>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d004      	beq.n	8003e1c <_ZN7QAD_SPI4initEv+0x4c>
  	QAD_SPIMgr::deregisterSPI(m_eSPI);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff ffa7 	bl	8003d6a <_ZN10QAD_SPIMgr13deregisterSPIE14QAD_SPI_Periph>
  return eRes;
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}

08003e26 <_ZN7QAD_SPI5startEv>:
	//-----------------------
	//QAD_SPI Control Methods

//QAD_SPI::start
//QAD_SPI Control Method
void QAD_SPI::start(void) {
 8003e26:	b480      	push	{r7}
 8003e28:	b083      	sub	sp, #12
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE(&m_sHandle);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e3c:	601a      	str	r2, [r3, #0]
	m_eState = QA_Active;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	70da      	strb	r2, [r3, #3]
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <_ZN7QAD_SPI4stopEv>:


//QAD_SPI::stop
//QAD_SPI Control Method
void QAD_SPI::stop(void) {
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	__HAL_SPI_DISABLE(&m_sHandle);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e66:	601a      	str	r2, [r3, #0]
	m_eState = QA_Inactive;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	70da      	strb	r2, [r3, #3]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <_ZN7QAD_SPI10transceiveEPhS0_t>:
}


//QAD_SPI::transceive
//QAD_SPI Transceive Method
QA_Result QAD_SPI::transceive(uint8_t* pTXData, uint8_t* pRXData, uint16_t uSize) {
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b088      	sub	sp, #32
 8003e7e:	af02      	add	r7, sp, #8
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	807b      	strh	r3, [r7, #2]
	if (m_bCS_Soft)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d008      	beq.n	8003ea4 <_ZN7QAD_SPI10transceiveEPhS0_t+0x2a>
		HAL_GPIO_WritePin(m_pCS_GPIO, m_uCS_Pin, GPIO_PIN_RESET);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f7fe fa68 	bl	8002374 <HAL_GPIO_WritePin>

	QA_Result eRes = QA_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	75fb      	strb	r3, [r7, #23]
	if (HAL_SPI_TransmitReceive(&m_sHandle, pTXData, pRXData, uSize, m_uTimeout) != HAL_OK) {
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	9200      	str	r2, [sp, #0]
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	f7fe ffad 	bl	8002e1a <HAL_SPI_TransmitReceive>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <_ZN7QAD_SPI10transceiveEPhS0_t+0x5a>
		return QA_Fail;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e00e      	b.n	8003ef2 <_ZN7QAD_SPI10transceiveEPhS0_t+0x78>
	}

	if (m_bCS_Soft)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <_ZN7QAD_SPI10transceiveEPhS0_t+0x76>
		HAL_GPIO_WritePin(m_pCS_GPIO, m_uCS_Pin, GPIO_PIN_SET);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee8:	2201      	movs	r2, #1
 8003eea:	4619      	mov	r1, r3
 8003eec:	f7fe fa42 	bl	8002374 <HAL_GPIO_WritePin>

	return eRes;
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <_ZN7QAD_SPI10periphInitEv>:
	//--------------------------------------
	//QAD_SPI Private Initialization Methods

//QAD_SPI::periphInit
//QAD_SPI Private Initialization Method
QA_Result QAD_SPI::periphInit(void) {
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b088      	sub	sp, #32
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003f02:	f107 030c 	add.w	r3, r7, #12
 8003f06:	2200      	movs	r2, #0
 8003f08:	601a      	str	r2, [r3, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	611a      	str	r2, [r3, #16]

	//Init Clock GPIO Pin
	GPIO_Init.Pin       = m_uClk_Pin;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f16:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f20:	2303      	movs	r3, #3
 8003f22:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uClk_AF;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f2a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pClk_GPIO, &GPIO_Init);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f30:	f107 020c 	add.w	r2, r7, #12
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd ffb4 	bl	8001ea4 <HAL_GPIO_Init>

	//Init MOSI GPIO Pin
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f44:	d107      	bne.n	8003f56 <_ZN7QAD_SPI10periphInitEv+0x5c>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7b5b      	ldrb	r3, [r3, #13]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d103      	bne.n	8003f56 <_ZN7QAD_SPI10periphInitEv+0x5c>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	7b1b      	ldrb	r3, [r3, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d020      	beq.n	8003f98 <_ZN7QAD_SPI10periphInitEv+0x9e>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <_ZN7QAD_SPI10periphInitEv+0x74>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	7b5b      	ldrb	r3, [r3, #13]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d103      	bne.n	8003f6e <_ZN7QAD_SPI10periphInitEv+0x74>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	7b1b      	ldrb	r3, [r3, #12]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d014      	beq.n	8003f98 <_ZN7QAD_SPI10periphInitEv+0x9e>
			((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8003f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f76:	d107      	bne.n	8003f88 <_ZN7QAD_SPI10periphInitEv+0x8e>
			((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7b5b      	ldrb	r3, [r3, #13]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <_ZN7QAD_SPI10periphInitEv+0x8e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7b1b      	ldrb	r3, [r3, #12]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d007      	beq.n	8003f98 <_ZN7QAD_SPI10periphInitEv+0x9e>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7b5b      	ldrb	r3, [r3, #13]
			((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d119      	bne.n	8003fc4 <_ZN7QAD_SPI10periphInitEv+0xca>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7b1b      	ldrb	r3, [r3, #12]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d115      	bne.n	8003fc4 <_ZN7QAD_SPI10periphInitEv+0xca>
		GPIO_Init.Pin       = m_uMOSI_Pin;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f9e:	60fb      	str	r3, [r7, #12]
		GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	613b      	str	r3, [r7, #16]
		GPIO_Init.Pull      = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
		GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	61bb      	str	r3, [r7, #24]
		GPIO_Init.Alternate = m_uMOSI_AF;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fb2:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(m_pMOSI_GPIO, &GPIO_Init);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb8:	f107 020c 	add.w	r2, r7, #12
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fd ff70 	bl	8001ea4 <HAL_GPIO_Init>
	}

	//Init MISO GPIO Pin
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fcc:	d107      	bne.n	8003fde <_ZN7QAD_SPI10periphInitEv+0xe4>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	7b5b      	ldrb	r3, [r3, #13]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d103      	bne.n	8003fde <_ZN7QAD_SPI10periphInitEv+0xe4>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	7b1b      	ldrb	r3, [r3, #12]
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d01f      	beq.n	800401e <_ZN7QAD_SPI10periphInitEv+0x124>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d107      	bne.n	8003ff6 <_ZN7QAD_SPI10periphInitEv+0xfc>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7b5b      	ldrb	r3, [r3, #13]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d103      	bne.n	8003ff6 <_ZN7QAD_SPI10periphInitEv+0xfc>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7b1b      	ldrb	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d013      	beq.n	800401e <_ZN7QAD_SPI10periphInitEv+0x124>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d107      	bne.n	800400e <_ZN7QAD_SPI10periphInitEv+0x114>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7b5b      	ldrb	r3, [r3, #13]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <_ZN7QAD_SPI10periphInitEv+0x114>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	7b1b      	ldrb	r3, [r3, #12]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d007      	beq.n	800401e <_ZN7QAD_SPI10periphInitEv+0x124>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7b5b      	ldrb	r3, [r3, #13]
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 8004012:	2b01      	cmp	r3, #1
 8004014:	d119      	bne.n	800404a <_ZN7QAD_SPI10periphInitEv+0x150>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	7b1b      	ldrb	r3, [r3, #12]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d115      	bne.n	800404a <_ZN7QAD_SPI10periphInitEv+0x150>
		GPIO_Init.Pin       = m_uMISO_Pin;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004024:	60fb      	str	r3, [r7, #12]
		GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8004026:	2302      	movs	r3, #2
 8004028:	613b      	str	r3, [r7, #16]
		GPIO_Init.Pull      = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
		GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800402e:	2303      	movs	r3, #3
 8004030:	61bb      	str	r3, [r7, #24]
		GPIO_Init.Alternate = m_uMISO_AF;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8004038:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(m_pMISO_GPIO, &GPIO_Init);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	f107 020c 	add.w	r2, r7, #12
 8004042:	4611      	mov	r1, r2
 8004044:	4618      	mov	r0, r3
 8004046:	f7fd ff2d 	bl	8001ea4 <HAL_GPIO_Init>
	}

	//Init CS GPIO Pin
	if (m_eSPICS != QAD_SPI_CS_Soft) {
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004052:	d016      	beq.n	8004082 <_ZN7QAD_SPI10periphInitEv+0x188>
		GPIO_Init.Pin       = m_uCS_Pin;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405a:	60fb      	str	r3, [r7, #12]
		GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800405c:	2302      	movs	r3, #2
 800405e:	613b      	str	r3, [r7, #16]
		GPIO_Init.Pull      = GPIO_PULLUP;
 8004060:	2301      	movs	r3, #1
 8004062:	617b      	str	r3, [r7, #20]
		GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8004064:	2303      	movs	r3, #3
 8004066:	61bb      	str	r3, [r7, #24]
		GPIO_Init.Alternate = m_uCS_AF;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800406e:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(m_pCS_GPIO, &GPIO_Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004074:	f107 020c 	add.w	r2, r7, #12
 8004078:	4611      	mov	r1, r2
 800407a:	4618      	mov	r0, r3
 800407c:	f7fd ff12 	bl	8001ea4 <HAL_GPIO_Init>
 8004080:	e02a      	b.n	80040d8 <_ZN7QAD_SPI10periphInitEv+0x1de>

	} else if (m_pCS_GPIO != NULL){
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d026      	beq.n	80040d8 <_ZN7QAD_SPI10periphInitEv+0x1de>
		GPIO_Init = {0};
 800408a:	f107 030c 	add.w	r3, r7, #12
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	609a      	str	r2, [r3, #8]
 8004096:	60da      	str	r2, [r3, #12]
 8004098:	611a      	str	r2, [r3, #16]
		GPIO_Init.Pin       = m_uCS_Pin;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040a0:	60fb      	str	r3, [r7, #12]
		GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80040a2:	2301      	movs	r3, #1
 80040a4:	613b      	str	r3, [r7, #16]
		GPIO_Init.Pull      = GPIO_PULLUP;
 80040a6:	2301      	movs	r3, #1
 80040a8:	617b      	str	r3, [r7, #20]
		GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80040aa:	2303      	movs	r3, #3
 80040ac:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(m_pCS_GPIO, &GPIO_Init);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	f107 020c 	add.w	r2, r7, #12
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fd fef3 	bl	8001ea4 <HAL_GPIO_Init>

		m_bCS_Soft = true;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
		HAL_GPIO_WritePin(m_pCS_GPIO, m_uCS_Pin, GPIO_PIN_SET);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040d0:	2201      	movs	r2, #1
 80040d2:	4619      	mov	r1, r3
 80040d4:	f7fe f94e 	bl	8002374 <HAL_GPIO_WritePin>
	}


	//Enable SPI Clock
	QAD_SPIMgr::enableClock(m_eSPI);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fe55 	bl	8003d8c <_ZN10QAD_SPIMgr11enableClockE14QAD_SPI_Periph>


	//Initialize SPI Peripheral
	m_sHandle.Instance               = QAD_SPIMgr::getInstance(m_eSPI);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	791b      	ldrb	r3, [r3, #4]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fdf7 	bl	8003cda <_ZN10QAD_SPIMgr11getInstanceE14QAD_SPI_Periph>
 80040ec:	4602      	mov	r2, r0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	659a      	str	r2, [r3, #88]	; 0x58
	m_sHandle.Init.Mode              = m_eSPIMode;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	65da      	str	r2, [r3, #92]	; 0x5c

	if ((m_eSPILines == QAD_SPI_Lines_2Lines) ||
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	7b5b      	ldrb	r3, [r3, #13]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d007      	beq.n	8004112 <_ZN7QAD_SPI10periphInitEv+0x218>
			((m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	7b5b      	ldrb	r3, [r3, #13]
	if ((m_eSPILines == QAD_SPI_Lines_2Lines) ||
 8004106:	2b00      	cmp	r3, #0
 8004108:	d107      	bne.n	800411a <_ZN7QAD_SPI10periphInitEv+0x220>
			((m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7b1b      	ldrb	r3, [r3, #12]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d103      	bne.n	800411a <_ZN7QAD_SPI10periphInitEv+0x220>
		m_sHandle.Init.Direction       = SPI_DIRECTION_2LINES; else
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	661a      	str	r2, [r3, #96]	; 0x60
 8004118:	e010      	b.n	800413c <_ZN7QAD_SPI10periphInitEv+0x242>
	if ((m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7b5b      	ldrb	r3, [r3, #13]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d108      	bne.n	8004134 <_ZN7QAD_SPI10periphInitEv+0x23a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	7b1b      	ldrb	r3, [r3, #12]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d104      	bne.n	8004134 <_ZN7QAD_SPI10periphInitEv+0x23a>
		m_sHandle.Init.Direction       = SPI_DIRECTION_2LINES_RXONLY; else
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004130:	661a      	str	r2, [r3, #96]	; 0x60
 8004132:	e003      	b.n	800413c <_ZN7QAD_SPI10periphInitEv+0x242>
		m_sHandle.Init.Direction       = SPI_DIRECTION_1LINE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800413a:	661a      	str	r2, [r3, #96]	; 0x60

	m_sHandle.Init.DataSize          = m_eSPIDataSize;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	665a      	str	r2, [r3, #100]	; 0x64
	m_sHandle.Init.CLKPolarity       = m_eSPIClkPolarity;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	669a      	str	r2, [r3, #104]	; 0x68
	m_sHandle.Init.CLKPhase          = m_eSPIClkPhase;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	699a      	ldr	r2, [r3, #24]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	66da      	str	r2, [r3, #108]	; 0x6c
	m_sHandle.Init.NSS               = m_eSPICS;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	671a      	str	r2, [r3, #112]	; 0x70
	m_sHandle.Init.BaudRatePrescaler = m_eSPIPrescaler;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	675a      	str	r2, [r3, #116]	; 0x74
	m_sHandle.Init.FirstBit          = m_eSPIFirstBit;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	679a      	str	r2, [r3, #120]	; 0x78
	m_sHandle.Init.TIMode            = m_eSPITIMode;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sHandle.Init.CRCCalculation    = m_eSPICRC;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sHandle.Init.CRCPolynomial     = m_uSPICRCPolynomial;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	if (HAL_SPI_Init(&m_sHandle) != HAL_OK) {
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3358      	adds	r3, #88	; 0x58
 800418c:	4618      	mov	r0, r3
 800418e:	f7fe fd7f 	bl	8002c90 <HAL_SPI_Init>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <_ZN7QAD_SPI10periphInitEv+0x2b4>
		periphDeinit(DeinitPartial);
 80041a2:	2100      	movs	r1, #0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f823 	bl	80041f0 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e01c      	b.n	80041e8 <_ZN7QAD_SPI10periphInitEv+0x2ee>
	}


	//Setup SPI IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_SPIMgr::getIRQ(m_eSPI), m_uIRQPriority, 0);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	791b      	ldrb	r3, [r3, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7ff fdaa 	bl	8003d0c <_ZN10QAD_SPIMgr6getIRQE14QAD_SPI_Periph>
 80041b8:	4603      	mov	r3, r0
 80041ba:	4618      	mov	r0, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	795b      	ldrb	r3, [r3, #5]
 80041c0:	2200      	movs	r2, #0
 80041c2:	4619      	mov	r1, r3
 80041c4:	f7fd fe29 	bl	8001e1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_SPIMgr::getIRQ(m_eSPI));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	791b      	ldrb	r3, [r3, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fd9d 	bl	8003d0c <_ZN10QAD_SPIMgr6getIRQE14QAD_SPI_Periph>
 80041d2:	4603      	mov	r3, r0
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fd fe3c 	bl	8001e52 <HAL_NVIC_EnableIRQ>


	//Set Driver States
	m_eInitState = QA_Initialized;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	709a      	strb	r2, [r3, #2]
	m_eState     = QA_Inactive;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	70da      	strb	r2, [r3, #3]


	//Return
	return QA_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3720      	adds	r7, #32
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE>:


//QAD_SPI::periphDeinit
//QAD_SPI Private Initialization Method
void QAD_SPI::periphDeinit(DeinitMode eDeinitMode) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	460b      	mov	r3, r1
 80041fa:	70fb      	strb	r3, [r7, #3]

	if (eDeinitMode) {
 80041fc:	78fb      	ldrb	r3, [r7, #3]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d010      	beq.n	8004224 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x34>
		stop();
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fe24 	bl	8003e50 <_ZN7QAD_SPI4stopEv>
		HAL_NVIC_DisableIRQ(QAD_SPIMgr::getIRQ(m_eSPI));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	791b      	ldrb	r3, [r3, #4]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fd7d 	bl	8003d0c <_ZN10QAD_SPIMgr6getIRQE14QAD_SPI_Periph>
 8004212:	4603      	mov	r3, r0
 8004214:	4618      	mov	r0, r3
 8004216:	f7fd fe2a 	bl	8001e6e <HAL_NVIC_DisableIRQ>

		//DeInit Peripheral
		HAL_SPI_DeInit(&m_sHandle);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3358      	adds	r3, #88	; 0x58
 800421e:	4618      	mov	r0, r3
 8004220:	f7fe fdbf 	bl	8002da2 <HAL_SPI_DeInit>
	}

	//Disable SPI Clock
	QAD_SPIMgr::disableClock(m_eSPI);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	791b      	ldrb	r3, [r3, #4]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fdc0 	bl	8003dae <_ZN10QAD_SPIMgr12disableClockE14QAD_SPI_Periph>

	//Init Clock GPIO Pin
	HAL_GPIO_DeInit(m_pClk_GPIO, m_uClk_Pin);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004236:	4619      	mov	r1, r3
 8004238:	4610      	mov	r0, r2
 800423a:	f7fd ffb7 	bl	80021ac <HAL_GPIO_DeInit>

	//Init MOSI GPIO Pin
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004246:	d107      	bne.n	8004258 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x68>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7b5b      	ldrb	r3, [r3, #13]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d103      	bne.n	8004258 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x68>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	7b1b      	ldrb	r3, [r3, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xaa>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 800425c:	2b00      	cmp	r3, #0
 800425e:	d107      	bne.n	8004270 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x80>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	7b5b      	ldrb	r3, [r3, #13]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d103      	bne.n	8004270 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x80>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7b1b      	ldrb	r3, [r3, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d014      	beq.n	800429a <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xaa>
			((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 8004274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004278:	d107      	bne.n	800428a <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x9a>
			((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	7b5b      	ldrb	r3, [r3, #13]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d103      	bne.n	800428a <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x9a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	7b1b      	ldrb	r3, [r3, #12]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d007      	beq.n	800429a <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xaa>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	7b5b      	ldrb	r3, [r3, #13]
			((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10c      	bne.n	80042ac <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xbc>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7b1b      	ldrb	r3, [r3, #12]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d108      	bne.n	80042ac <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xbc>
		HAL_GPIO_DeInit(m_pMOSI_GPIO, m_uMOSI_Pin);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f7fd ff80 	bl	80021ac <HAL_GPIO_DeInit>
	}

	//Init MISO GPIO Pin
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b4:	d107      	bne.n	80042c6 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xd6>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	7b5b      	ldrb	r3, [r3, #13]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d103      	bne.n	80042c6 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xd6>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7b1b      	ldrb	r3, [r3, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d01f      	beq.n	8004306 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x116>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
	if (((m_eSPIMode == QAD_SPI_Mode_Master) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_RXOnly)) ||
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xee>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7b5b      	ldrb	r3, [r3, #13]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d103      	bne.n	80042de <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0xee>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	7b1b      	ldrb	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d013      	beq.n	8004306 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x116>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_TXOnly)) ||
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d107      	bne.n	80042f6 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x106>
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	7b5b      	ldrb	r3, [r3, #13]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x106>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	7b1b      	ldrb	r3, [r3, #12]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d007      	beq.n	8004306 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x116>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	7b5b      	ldrb	r3, [r3, #13]
			((m_eSPIMode == QAD_SPI_Mode_Slave) && (m_eSPILines == QAD_SPI_Lines_1Line) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled)) ||
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d10c      	bne.n	8004318 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x128>
			((m_eSPILines == QAD_SPI_Lines_2Lines) && (m_eSPIBiDir == QAD_SPI_BiDir_Enabled))) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	7b1b      	ldrb	r3, [r3, #12]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d108      	bne.n	8004318 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x128>
		HAL_GPIO_DeInit(m_pMISO_GPIO, m_uMISO_Pin);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004310:	4619      	mov	r1, r3
 8004312:	4610      	mov	r0, r2
 8004314:	f7fd ff4a 	bl	80021ac <HAL_GPIO_DeInit>
	}

	//Init CS GPIO Pin
	if (m_pCS_GPIO != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <_ZN7QAD_SPI12periphDeinitENS_10DeinitModeE+0x142>
		HAL_GPIO_DeInit(m_pCS_GPIO, m_uCS_Pin);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7fd ff3d 	bl	80021ac <HAL_GPIO_DeInit>

	//Set Driver States
	m_eInitState = QA_NotInitialized;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	709a      	strb	r2, [r3, #2]
	m_eState     = QA_Inactive;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	70da      	strb	r2, [r3, #3]

}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 800434c:	4b10      	ldr	r3, [pc, #64]	; (8004390 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f3bf 8f5b 	dmb	ish
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	bf0c      	ite	eq
 800435e:	2301      	moveq	r3, #1
 8004360:	2300      	movne	r3, #0
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <_ZN11QAD_UARTMgr3getEv+0x42>
 8004368:	4809      	ldr	r0, [pc, #36]	; (8004390 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800436a:	f000 fff5 	bl	8005358 <__cxa_guard_acquire>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	bf14      	ite	ne
 8004374:	2301      	movne	r3, #1
 8004376:	2300      	moveq	r3, #0
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <_ZN11QAD_UARTMgr3getEv+0x42>
 800437e:	4805      	ldr	r0, [pc, #20]	; (8004394 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8004380:	f000 fbea 	bl	8004b58 <_ZN11QAD_UARTMgrC1Ev>
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8004386:	f000 fff3 	bl	8005370 <__cxa_guard_release>
		return instance;
 800438a:	4b02      	ldr	r3, [pc, #8]	; (8004394 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200002c8 	.word	0x200002c8
 8004394:	200002a4 	.word	0x200002a4

08004398 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	4603      	mov	r3, r0
 80043a0:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 80043a8:	2302      	movs	r3, #2
 80043aa:	e00a      	b.n	80043c2 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 80043ac:	f7ff ffcc 	bl	8004348 <_ZN11QAD_UARTMgr3getEv>
 80043b0:	4601      	mov	r1, r0
 80043b2:	79fa      	ldrb	r2, [r7, #7]
 80043b4:	4613      	mov	r3, r2
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	4413      	add	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	3301      	adds	r3, #1
 80043c0:	781b      	ldrb	r3, [r3, #0]
	}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b082      	sub	sp, #8
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	4603      	mov	r3, r0
 80043d2:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80043d4:	79fb      	ldrb	r3, [r7, #7]
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 80043da:	2300      	movs	r3, #0
 80043dc:	e00a      	b.n	80043f4 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 80043de:	f7ff ffb3 	bl	8004348 <_ZN11QAD_UARTMgr3getEv>
 80043e2:	4601      	mov	r1, r0
 80043e4:	79fa      	ldrb	r2, [r7, #7]
 80043e6:	4613      	mov	r3, r2
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	440b      	add	r3, r1
 80043f0:	3304      	adds	r3, #4
 80043f2:	681b      	ldr	r3, [r3, #0]
	}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8004406:	79fb      	ldrb	r3, [r7, #7]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d902      	bls.n	8004412 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 800440c:	f06f 0309 	mvn.w	r3, #9
 8004410:	e00b      	b.n	800442a <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8004412:	f7ff ff99 	bl	8004348 <_ZN11QAD_UARTMgr3getEv>
 8004416:	4601      	mov	r1, r0
 8004418:	79fa      	ldrb	r2, [r7, #7]
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	3308      	adds	r3, #8
 8004426:	f993 3000 	ldrsb.w	r3, [r3]
	}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	4603      	mov	r3, r0
 800443a:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 800443c:	f7ff ff84 	bl	8004348 <_ZN11QAD_UARTMgr3getEv>
 8004440:	4602      	mov	r2, r0
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	4619      	mov	r1, r3
 8004446:	4610      	mov	r0, r2
 8004448:	f000 fbc6 	bl	8004bd8 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 800444c:	4603      	mov	r3, r0
	}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	4603      	mov	r3, r0
 800445e:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8004460:	f7ff ff72 	bl	8004348 <_ZN11QAD_UARTMgr3getEv>
 8004464:	4602      	mov	r2, r0
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	4619      	mov	r1, r3
 800446a:	4610      	mov	r0, r2
 800446c:	f000 fbdd 	bl	8004c2a <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8004470:	bf00      	nop
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	4603      	mov	r3, r0
 8004480:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8004482:	f7ff ff61 	bl	8004348 <_ZN11QAD_UARTMgr3getEv>
 8004486:	4602      	mov	r2, r0
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	4619      	mov	r1, r3
 800448c:	4610      	mov	r0, r2
 800448e:	f000 fbe7 	bl	8004c60 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	4603      	mov	r3, r0
 80044a2:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 80044a4:	f7ff ff50 	bl	8004348 <_ZN11QAD_UARTMgr3getEv>
 80044a8:	4602      	mov	r2, r0
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f000 fc44 	bl	8004d3c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	785b      	ldrb	r3, [r3, #1]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7ff ff65 	bl	8004398 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	bf14      	ite	ne
 80044d4:	2301      	movne	r3, #1
 80044d6:	2300      	moveq	r3, #0
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 80044de:	2302      	movs	r3, #2
 80044e0:	e012      	b.n	8004508 <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	785b      	ldrb	r3, [r3, #1]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ffa3 	bl	8004432 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f8a7 	bl	8004640 <_ZN8QAD_UART10periphInitEv>
 80044f2:	4603      	mov	r3, r0
 80044f4:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	785b      	ldrb	r3, [r3, #1]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff ffa8 	bl	8004456 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 8004506:	7bfb      	ldrb	r3, [r7, #15]
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d009      	beq.n	8004534 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 8004520:	2101      	movs	r1, #1
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f924 	bl	8004770 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	785b      	ldrb	r3, [r3, #1]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff92 	bl	8004456 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8004532:	e000      	b.n	8004536 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8004534:	bf00      	nop
}
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	331c      	adds	r3, #28
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
 8004566:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800456a:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
 8004592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004596:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	69db      	ldr	r3, [r3, #28]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f042 0220 	orr.w	r2, r2, #32
 80045c2:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	f022 0220 	bic.w	r2, r2, #32
 80045ee:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	460b      	mov	r3, r1
 800460e:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	605a      	str	r2, [r3, #4]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	b2db      	uxtb	r3, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8004648:	f107 030c 	add.w	r3, r7, #12
 800464c:	2200      	movs	r2, #0
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	8a1b      	ldrh	r3, [r3, #16]
 800465c:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 800465e:	2302      	movs	r3, #2
 8004660:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8004666:	2303      	movs	r3, #3
 8004668:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	7c9b      	ldrb	r3, [r3, #18]
 800466e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f107 020c 	add.w	r2, r7, #12
 8004678:	4611      	mov	r1, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd fc12 	bl	8001ea4 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8b1b      	ldrh	r3, [r3, #24]
 8004684:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8004686:	2302      	movs	r3, #2
 8004688:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 800468a:	2301      	movs	r3, #1
 800468c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800468e:	2303      	movs	r3, #3
 8004690:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	7e9b      	ldrb	r3, [r3, #26]
 8004696:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	f107 020c 	add.w	r2, r7, #12
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7fd fbfe 	bl	8001ea4 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fee3 	bl	8004478 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	785b      	ldrb	r3, [r3, #1]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fe87 	bl	80043ca <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 80046bc:	4602      	mov	r2, r0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685a      	ldr	r2, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	220c      	movs	r2, #12
 80046e0:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	331c      	adds	r3, #28
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7fe fdfe 	bl	80032f4 <HAL_UART_Init>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d005      	beq.n	8004714 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8004708:	2100      	movs	r1, #0
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f830 	bl	8004770 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8004710:	2301      	movs	r3, #1
 8004712:	e029      	b.n	8004768 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004722:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fe67 	bl	80043fc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800472e:	4603      	mov	r3, r0
 8004730:	4618      	mov	r0, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7a1b      	ldrb	r3, [r3, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	4619      	mov	r1, r3
 800473a:	f7fd fb6e 	bl	8001e1a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff fe5a 	bl	80043fc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004748:	4603      	mov	r3, r0
 800474a:	4618      	mov	r0, r3
 800474c:	f7fd fb81 	bl	8001e52 <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01b      	beq.n	80047ba <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7ff fefc 	bl	8004580 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff ff25 	bl	80045d8 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff fe32 	bl	80043fc <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004798:	4603      	mov	r3, r0
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fb67 	bl	8001e6e <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ae:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	331c      	adds	r3, #28
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe fdea 	bl	800338e <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	785b      	ldrb	r3, [r3, #1]
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fe6b 	bl	800449a <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8b1b      	ldrh	r3, [r3, #24]
 80047cc:	4619      	mov	r1, r3
 80047ce:	4610      	mov	r0, r2
 80047d0:	f7fd fcec 	bl	80021ac <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	8a1b      	ldrh	r3, [r3, #16]
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f7fd fce4 	bl	80021ac <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <_ZN10QAD_SPIMgrC1Ev>:
	//-----------------------
	//QAD_SPIMgr Constructors

//QAD_SPIMgr::QAD_SPIMgr
//QAD_SPIMgr Constructor
QAD_SPIMgr::QAD_SPIMgr() {
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_SPI_PeriphCount; i++) {
 800480c:	2300      	movs	r3, #0
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	7bfb      	ldrb	r3, [r7, #15]
 8004812:	2b04      	cmp	r3, #4
 8004814:	d817      	bhi.n	8004846 <_ZN10QAD_SPIMgrC1Ev+0x42>
		m_sSPIs[i].eState = QAD_SPI_Unused;
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	3301      	adds	r3, #1
 8004826:	2200      	movs	r2, #0
 8004828:	701a      	strb	r2, [r3, #0]
		m_sSPIs[i].bI2S   = true;
 800482a:	7bfa      	ldrb	r2, [r7, #15]
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	3309      	adds	r3, #9
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_SPI_PeriphCount; i++) {
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	3301      	adds	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	e7e4      	b.n	8004810 <_ZN10QAD_SPIMgrC1Ev+0xc>
	}

	//Set SPI Periph ID
	m_sSPIs[QAD_SPI1].eSPI = QAD_SPI1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	701a      	strb	r2, [r3, #0]
	m_sSPIs[QAD_SPI2].eSPI = QAD_SPI2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	731a      	strb	r2, [r3, #12]
	m_sSPIs[QAD_SPI3].eSPI = QAD_SPI3;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2202      	movs	r2, #2
 8004856:	761a      	strb	r2, [r3, #24]
	m_sSPIs[QAD_SPI4].eSPI = QAD_SPI4;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2203      	movs	r2, #3
 800485c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sSPIs[QAD_SPI5].eSPI = QAD_SPI5;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2204      	movs	r2, #4
 8004864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	//Set Instances
  m_sSPIs[QAD_SPI1].pInstance = SPI1;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a13      	ldr	r2, [pc, #76]	; (80048b8 <_ZN10QAD_SPIMgrC1Ev+0xb4>)
 800486c:	605a      	str	r2, [r3, #4]
  m_sSPIs[QAD_SPI2].pInstance = SPI2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a12      	ldr	r2, [pc, #72]	; (80048bc <_ZN10QAD_SPIMgrC1Ev+0xb8>)
 8004872:	611a      	str	r2, [r3, #16]
  m_sSPIs[QAD_SPI3].pInstance = SPI3;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <_ZN10QAD_SPIMgrC1Ev+0xbc>)
 8004878:	61da      	str	r2, [r3, #28]
  m_sSPIs[QAD_SPI4].pInstance = SPI4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a11      	ldr	r2, [pc, #68]	; (80048c4 <_ZN10QAD_SPIMgrC1Ev+0xc0>)
 800487e:	629a      	str	r2, [r3, #40]	; 0x28
  m_sSPIs[QAD_SPI5].pInstance = SPI5;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a11      	ldr	r2, [pc, #68]	; (80048c8 <_ZN10QAD_SPIMgrC1Ev+0xc4>)
 8004884:	635a      	str	r2, [r3, #52]	; 0x34

	//Set IRQs
  m_sSPIs[QAD_SPI1].eIRQ = SPI1_IRQn;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2223      	movs	r2, #35	; 0x23
 800488a:	721a      	strb	r2, [r3, #8]
  m_sSPIs[QAD_SPI2].eIRQ = SPI2_IRQn;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2224      	movs	r2, #36	; 0x24
 8004890:	751a      	strb	r2, [r3, #20]
  m_sSPIs[QAD_SPI3].eIRQ = SPI3_IRQn;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2233      	movs	r2, #51	; 0x33
 8004896:	f883 2020 	strb.w	r2, [r3, #32]
  m_sSPIs[QAD_SPI4].eIRQ = SPI4_IRQn;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2254      	movs	r2, #84	; 0x54
 800489e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  m_sSPIs[QAD_SPI5].eIRQ = SPI5_IRQn;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2255      	movs	r2, #85	; 0x55
 80048a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

}
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4618      	mov	r0, r3
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	40013000 	.word	0x40013000
 80048bc:	40003800 	.word	0x40003800
 80048c0:	40003c00 	.word	0x40003c00
 80048c4:	40013400 	.word	0x40013400
 80048c8:	40015000 	.word	0x40015000

080048cc <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State>:
//-----------------------------
//QAD_SPIMgr Management Methods

//QAD_SPIMgr::imp_registerSPI
//QAD_SPIMgr Management Method
QA_Result QAD_SPIMgr::imp_registerSPI(QAD_SPI_Periph eSPI, QAD_SPI_State eState) {
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	70fb      	strb	r3, [r7, #3]
 80048d8:	4613      	mov	r3, r2
 80048da:	70bb      	strb	r3, [r7, #2]
	if (eSPI >= QAD_SPINone)
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d901      	bls.n	80048e6 <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State+0x1a>
		return QA_Fail;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e02a      	b.n	800493c <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State+0x70>

	if (m_sSPIs[eSPI].eState)
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	4413      	add	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	3301      	adds	r3, #1
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State+0x34>
		return QA_Error_PeriphBusy;
 80048fc:	2302      	movs	r3, #2
 80048fe:	e01d      	b.n	800493c <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State+0x70>

	if ((eState == QAD_SPI_InUse_I2S) && (!m_sSPIs[eSPI].bI2S))
 8004900:	78bb      	ldrb	r3, [r7, #2]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d10f      	bne.n	8004926 <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State+0x5a>
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3309      	adds	r3, #9
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State+0x5a>
		return QA_Error_PeriphNotSupported;
 8004922:	2303      	movs	r3, #3
 8004924:	e00a      	b.n	800493c <_ZN10QAD_SPIMgr15imp_registerSPIE14QAD_SPI_Periph13QAD_SPI_State+0x70>

	m_sSPIs[eSPI].eState = eState;
 8004926:	78fa      	ldrb	r2, [r7, #3]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3301      	adds	r3, #1
 8004936:	78ba      	ldrb	r2, [r7, #2]
 8004938:	701a      	strb	r2, [r3, #0]
	return QA_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <_ZN10QAD_SPIMgr17imp_deregisterSPIE14QAD_SPI_Periph>:


//QAD_SPIMgr::imp_deregisterSPI
//QAD_SPIMgr Management Method
void QAD_SPIMgr::imp_deregisterSPI(QAD_SPI_Periph eSPI) {
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
	if (eSPI >= QAD_SPINone)
 8004954:	78fb      	ldrb	r3, [r7, #3]
 8004956:	2b04      	cmp	r3, #4
 8004958:	d80a      	bhi.n	8004970 <_ZN10QAD_SPIMgr17imp_deregisterSPIE14QAD_SPI_Periph+0x28>
		return;

	m_sSPIs[eSPI].eState = QAD_SPI_Unused;
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	3301      	adds	r3, #1
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e000      	b.n	8004972 <_ZN10QAD_SPIMgr17imp_deregisterSPIE14QAD_SPI_Periph+0x2a>
		return;
 8004970:	bf00      	nop
}
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph>:
//------------------------
//QAD_SPIMgr Clock Methods

//QAD_SPIMgr::imp_enableClock
//QAD_SPIMgr Clock Method
void QAD_SPIMgr::imp_enableClock(QAD_SPI_Periph eSPI) {
 800497c:	b480      	push	{r7}
 800497e:	b089      	sub	sp, #36	; 0x24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	460b      	mov	r3, r1
 8004986:	70fb      	strb	r3, [r7, #3]
	switch (eSPI) {
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	2b05      	cmp	r3, #5
 800498c:	f200 8098 	bhi.w	8004ac0 <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x144>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x1c>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049b1 	.word	0x080049b1
 800499c:	080049e7 	.word	0x080049e7
 80049a0:	08004a1d 	.word	0x08004a1d
 80049a4:	08004a53 	.word	0x08004a53
 80049a8:	08004a89 	.word	0x08004a89
 80049ac:	08004abf 	.word	0x08004abf
		case (QAD_SPI1):
			__HAL_RCC_SPI1_CLK_ENABLE();
 80049b0:	2300      	movs	r3, #0
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	4b45      	ldr	r3, [pc, #276]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b8:	4a44      	ldr	r2, [pc, #272]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049be:	6453      	str	r3, [r2, #68]	; 0x44
 80049c0:	4b42      	ldr	r3, [pc, #264]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	69fb      	ldr	r3, [r7, #28]
			__HAL_RCC_SPI1_FORCE_RESET();
 80049cc:	4b3f      	ldr	r3, [pc, #252]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d0:	4a3e      	ldr	r2, [pc, #248]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049d6:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_SPI1_RELEASE_RESET();
 80049d8:	4b3c      	ldr	r3, [pc, #240]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	4a3b      	ldr	r2, [pc, #236]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e2:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 80049e4:	e06c      	b.n	8004ac0 <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x144>
		case (QAD_SPI2):
			__HAL_RCC_SPI2_CLK_ENABLE();
 80049e6:	2300      	movs	r3, #0
 80049e8:	61bb      	str	r3, [r7, #24]
 80049ea:	4b38      	ldr	r3, [pc, #224]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	4a37      	ldr	r2, [pc, #220]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f4:	6413      	str	r3, [r2, #64]	; 0x40
 80049f6:	4b35      	ldr	r3, [pc, #212]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fe:	61bb      	str	r3, [r7, #24]
 8004a00:	69bb      	ldr	r3, [r7, #24]
			__HAL_RCC_SPI2_FORCE_RESET();
 8004a02:	4b32      	ldr	r3, [pc, #200]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	4a31      	ldr	r2, [pc, #196]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a0c:	6213      	str	r3, [r2, #32]
			__HAL_RCC_SPI2_RELEASE_RESET();
 8004a0e:	4b2f      	ldr	r3, [pc, #188]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	4a2e      	ldr	r2, [pc, #184]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a18:	6213      	str	r3, [r2, #32]
			break;
 8004a1a:	e051      	b.n	8004ac0 <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x144>
		case (QAD_SPI3):
			__HAL_RCC_SPI3_CLK_ENABLE();
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	4b2a      	ldr	r3, [pc, #168]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	4a29      	ldr	r2, [pc, #164]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a34:	617b      	str	r3, [r7, #20]
 8004a36:	697b      	ldr	r3, [r7, #20]
			__HAL_RCC_SPI3_FORCE_RESET();
 8004a38:	4b24      	ldr	r3, [pc, #144]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	4a23      	ldr	r2, [pc, #140]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a42:	6213      	str	r3, [r2, #32]
			__HAL_RCC_SPI3_RELEASE_RESET();
 8004a44:	4b21      	ldr	r3, [pc, #132]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	4a20      	ldr	r2, [pc, #128]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004a4e:	6213      	str	r3, [r2, #32]
			break;
 8004a50:	e036      	b.n	8004ac0 <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x144>
		case (QAD_SPI4):
			__HAL_RCC_SPI4_CLK_ENABLE();
 8004a52:	2300      	movs	r3, #0
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	4b1d      	ldr	r3, [pc, #116]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	4a1c      	ldr	r2, [pc, #112]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a60:	6453      	str	r3, [r2, #68]	; 0x44
 8004a62:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_SPI4_FORCE_RESET();
 8004a6e:	4b17      	ldr	r3, [pc, #92]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	4a16      	ldr	r2, [pc, #88]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a78:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_SPI4_RELEASE_RESET();
 8004a7a:	4b14      	ldr	r3, [pc, #80]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	4a13      	ldr	r2, [pc, #76]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a84:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8004a86:	e01b      	b.n	8004ac0 <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x144>
		case (QAD_SPI5):
			__HAL_RCC_SPI5_CLK_ENABLE();
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a90:	4a0e      	ldr	r2, [pc, #56]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a96:	6453      	str	r3, [r2, #68]	; 0x44
 8004a98:	4b0c      	ldr	r3, [pc, #48]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa0:	60fb      	str	r3, [r7, #12]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
			__HAL_RCC_SPI5_FORCE_RESET();
 8004aa4:	4b09      	ldr	r3, [pc, #36]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004aaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aae:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_SPI5_RELEASE_RESET();
 8004ab0:	4b06      	ldr	r3, [pc, #24]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	4a05      	ldr	r2, [pc, #20]	; (8004acc <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x150>)
 8004ab6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004aba:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 8004abc:	e000      	b.n	8004ac0 <_ZN10QAD_SPIMgr15imp_enableClockE14QAD_SPI_Periph+0x144>
		case (QAD_SPINone):
			break;
 8004abe:	bf00      	nop
	}
}
 8004ac0:	bf00      	nop
 8004ac2:	3724      	adds	r7, #36	; 0x24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	40023800 	.word	0x40023800

08004ad0 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph>:


//QAD_SPIMgr::imp_disableClock
//QAD_SPIMgr Clock Method
void QAD_SPIMgr::imp_disableClock(QAD_SPI_Periph eSPI) {
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
	switch (eSPI) {
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	2b05      	cmp	r3, #5
 8004ae0:	d832      	bhi.n	8004b48 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x78>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x18>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004b01 	.word	0x08004b01
 8004aec:	08004b0f 	.word	0x08004b0f
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b2b 	.word	0x08004b2b
 8004af8:	08004b39 	.word	0x08004b39
 8004afc:	08004b47 	.word	0x08004b47
		case (QAD_SPI1):
			__HAL_RCC_SPI1_CLK_DISABLE();
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b0a:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8004b0c:	e01c      	b.n	8004b48 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x78>
		case (QAD_SPI2):
			__HAL_RCC_SPI2_CLK_DISABLE();
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a10      	ldr	r2, [pc, #64]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8004b1a:	e015      	b.n	8004b48 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x78>
		case (QAD_SPI3):
			__HAL_RCC_SPI3_CLK_DISABLE();
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	4a0c      	ldr	r2, [pc, #48]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b26:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8004b28:	e00e      	b.n	8004b48 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x78>
		case (QAD_SPI4):
			__HAL_RCC_SPI4_CLK_DISABLE();
 8004b2a:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	4a09      	ldr	r2, [pc, #36]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b34:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8004b36:	e007      	b.n	8004b48 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x78>
		case (QAD_SPI5):
			__HAL_RCC_SPI5_CLK_DISABLE();
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3c:	4a05      	ldr	r2, [pc, #20]	; (8004b54 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x84>)
 8004b3e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004b42:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8004b44:	e000      	b.n	8004b48 <_ZN10QAD_SPIMgr16imp_disableClockE14QAD_SPI_Periph+0x78>
		case (QAD_SPINone):
			break;
 8004b46:	bf00      	nop
	}
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40023800 	.word	0x40023800

08004b58 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004b60:	2300      	movs	r3, #0
 8004b62:	73fb      	strb	r3, [r7, #15]
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d80d      	bhi.n	8004b86 <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3301      	adds	r3, #1
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
 8004b80:	3301      	adds	r3, #1
 8004b82:	73fb      	strb	r3, [r7, #15]
 8004b84:	e7ee      	b.n	8004b64 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2202      	movs	r2, #2
 8004b96:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <_ZN11QAD_UARTMgrC1Ev+0x74>)
 8004b9c:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a0b      	ldr	r2, [pc, #44]	; (8004bd0 <_ZN11QAD_UARTMgrC1Ev+0x78>)
 8004ba2:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a0b      	ldr	r2, [pc, #44]	; (8004bd4 <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 8004ba8:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2225      	movs	r2, #37	; 0x25
 8004bae:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2226      	movs	r2, #38	; 0x26
 8004bb4:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2247      	movs	r2, #71	; 0x47
 8004bba:	f883 2020 	strb.w	r2, [r3, #32]

}
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40004400 	.word	0x40004400
 8004bd4:	40011400 	.word	0x40011400

08004bd8 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	460b      	mov	r3, r1
 8004be2:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8004be4:	78fb      	ldrb	r3, [r7, #3]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e017      	b.n	8004c1e <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8004bee:	78fa      	ldrb	r2, [r7, #3]
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	005b      	lsls	r3, r3, #1
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	440b      	add	r3, r1
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8004c04:	2302      	movs	r3, #2
 8004c06:	e00a      	b.n	8004c1e <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3301      	adds	r3, #1
 8004c18:	2201      	movs	r2, #1
 8004c1a:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	460b      	mov	r3, r1
 8004c34:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d80a      	bhi.n	8004c52 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8004c3c:	78fa      	ldrb	r2, [r7, #3]
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e000      	b.n	8004c54 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8004c52:	bf00      	nop
}
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d85c      	bhi.n	8004d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004cbf 	.word	0x08004cbf
 8004c80:	08004cf5 	.word	0x08004cf5
 8004c84:	08004d2b 	.word	0x08004d2b
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c90:	4a29      	ldr	r2, [pc, #164]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004c92:	f043 0310 	orr.w	r3, r3, #16
 8004c96:	6453      	str	r3, [r2, #68]	; 0x44
 8004c98:	4b27      	ldr	r3, [pc, #156]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004caa:	f043 0310 	orr.w	r3, r3, #16
 8004cae:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	4a20      	ldr	r2, [pc, #128]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004cbc:	e036      	b.n	8004d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	4a1c      	ldr	r2, [pc, #112]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cce:	4b1a      	ldr	r3, [pc, #104]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	613b      	str	r3, [r7, #16]
 8004cd8:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 8004cda:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	4a16      	ldr	r2, [pc, #88]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce4:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 8004ce6:	4b14      	ldr	r3, [pc, #80]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	4a13      	ldr	r2, [pc, #76]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004cf0:	6213      	str	r3, [r2, #32]
      break;
 8004cf2:	e01b      	b.n	8004d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfc:	4a0e      	ldr	r2, [pc, #56]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004cfe:	f043 0320 	orr.w	r3, r3, #32
 8004d02:	6453      	str	r3, [r2, #68]	; 0x44
 8004d04:	4b0c      	ldr	r3, [pc, #48]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	f003 0320 	and.w	r3, r3, #32
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 8004d10:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	4a08      	ldr	r2, [pc, #32]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004d16:	f043 0320 	orr.w	r3, r3, #32
 8004d1a:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	4a05      	ldr	r2, [pc, #20]	; (8004d38 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004d22:	f023 0320 	bic.w	r3, r3, #32
 8004d26:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004d28:	e000      	b.n	8004d2c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 8004d2a:	bf00      	nop
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	371c      	adds	r7, #28
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40023800 	.word	0x40023800

08004d3c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d820      	bhi.n	8004d90 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d65 	.word	0x08004d65
 8004d58:	08004d73 	.word	0x08004d73
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004d8f 	.word	0x08004d8f
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8004d64:	4b0d      	ldr	r3, [pc, #52]	; (8004d9c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d68:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004d6a:	f023 0310 	bic.w	r3, r3, #16
 8004d6e:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004d70:	e00e      	b.n	8004d90 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	4a09      	ldr	r2, [pc, #36]	; (8004d9c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004d78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d7c:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004d7e:	e007      	b.n	8004d90 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8004d80:	4b06      	ldr	r3, [pc, #24]	; (8004d9c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d84:	4a05      	ldr	r2, [pc, #20]	; (8004d9c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004d86:	f023 0320 	bic.w	r3, r3, #32
 8004d8a:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004d8c:	e000      	b.n	8004d90 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 8004d8e:	bf00      	nop
  }
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40023800 	.word	0x40023800

08004da0 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	7b1b      	ldrb	r3, [r3, #12]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e010      	b.n	8004dd8 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	6839      	ldr	r1, [r7, #0]
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	4798      	blx	r3
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	e003      	b.n	8004dd8 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6839      	ldr	r1, [r7, #0]
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8004e0a:	6838      	ldr	r0, [r7, #0]
 8004e0c:	f7fb f9e8 	bl	80001e0 <strlen>
 8004e10:	4603      	mov	r3, r0
 8004e12:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8004e14:	2300      	movs	r3, #0
 8004e16:	81fb      	strh	r3, [r7, #14]
 8004e18:	89fa      	ldrh	r2, [r7, #14]
 8004e1a:	89bb      	ldrh	r3, [r7, #12]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d20f      	bcs.n	8004e40 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 f837 	bl	8004e98 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004e2a:	89fb      	ldrh	r3, [r7, #14]
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	4413      	add	r3, r2
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	4619      	mov	r1, r3
 8004e34:	f000 f9e1 	bl	80051fa <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8004e38:	89fb      	ldrh	r3, [r7, #14]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	81fb      	strh	r3, [r7, #14]
 8004e3e:	e7eb      	b.n	8004e18 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	3304      	adds	r3, #4
 8004e44:	4618      	mov	r0, r3
 8004e46:	f000 f827 	bl	8004e98 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	210d      	movs	r1, #13
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 f9d3 	bl	80051fa <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	4798      	blx	r3
}
 8004e60:	bf00      	nop
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3304      	adds	r3, #4
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f80f 	bl	8004e98 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	210d      	movs	r1, #13
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f9bb 	bl	80051fa <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	330c      	adds	r3, #12
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	4798      	blx	r3
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
	return get();
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f805 	bl	8004eb0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 8004ea6:	4603      	mov	r3, r0
      }
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 f805 	bl	8004eca <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f806 	bl	8004ee6 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8004eda:	4603      	mov	r3, r0
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b082      	sub	sp, #8
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 f805 	bl	8004f00 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f805 	bl	8004f18 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4618      	mov	r0, r3
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 f805 	bl	8004f32 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004f32:	b480      	push	{r7}
 8004f34:	b083      	sub	sp, #12
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3314      	adds	r3, #20
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 f8e4 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff faac 	bl	80044bc <_ZN8QAD_UART4initEv>
 8004f64:	4603      	mov	r3, r0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 f8d2 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fac4 	bl	8004510 <_ZN8QAD_UART6deinitEv>
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b095      	sub	sp, #84	; 0x54
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3314      	adds	r3, #20
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f8c0 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fac8 	bl	800453c <_ZN8QAD_UART9getHandleEv>
 8004fac:	4602      	mov	r2, r0
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	2244      	movs	r2, #68	; 0x44
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fa48 	bl	800544c <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0320 	and.w	r3, r3, #32
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	bf0c      	ite	eq
 8004fc8:	2301      	moveq	r3, #1
 8004fca:	2300      	movne	r3, #0
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d01f      	beq.n	8005012 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3314      	adds	r3, #20
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 f8a4 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f7ff fb20 	bl	8004624 <_ZN8QAD_UART6dataRXEv>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	7b9b      	ldrb	r3, [r3, #14]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff4e 	bl	8004e98 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005002:	4619      	mov	r1, r3
 8005004:	4610      	mov	r0, r2
 8005006:	f000 f8f8 	bl	80051fa <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f06f 0220 	mvn.w	r2, #32
 8005010:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b80      	cmp	r3, #128	; 0x80
 800501c:	bf0c      	ite	eq
 800501e:	2301      	moveq	r3, #1
 8005020:	2300      	movne	r3, #0
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	d035      	beq.n	8005094 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	4618      	mov	r0, r3
 800502e:	f7ff ff33 	bl	8004e98 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005032:	4603      	mov	r3, r0
 8005034:	4618      	mov	r0, r3
 8005036:	f000 f8cd 	bl	80051d4 <_ZN14QAT_FIFOBuffer5emptyEv>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	bf0c      	ite	eq
 8005040:	2301      	moveq	r3, #1
 8005042:	2300      	movne	r3, #0
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d014      	beq.n	8005074 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3314      	adds	r3, #20
 800504e:	4618      	mov	r0, r3
 8005050:	f000 f868 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005054:	4604      	mov	r4, r0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	3304      	adds	r3, #4
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff ff1c 	bl	8004e98 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005060:	4603      	mov	r3, r0
 8005062:	4618      	mov	r0, r3
 8005064:	f000 f8ed 	bl	8005242 <_ZN14QAT_FIFOBuffer3popEv>
 8005068:	4603      	mov	r3, r0
 800506a:	4619      	mov	r1, r3
 800506c:	4620      	mov	r0, r4
 800506e:	f7ff fac9 	bl	8004604 <_ZN8QAD_UART6dataTXEh>
 8005072:	e00b      	b.n	800508c <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3314      	adds	r3, #20
 8005078:	4618      	mov	r0, r3
 800507a:	f000 f853 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800507e:	4603      	mov	r3, r0
 8005080:	4618      	mov	r0, r3
 8005082:	f7ff fa7d 	bl	8004580 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005092:	601a      	str	r2, [r3, #0]
  }
}
 8005094:	bf00      	nop
 8005096:	3754      	adds	r7, #84	; 0x54
 8005098:	46bd      	mov	sp, r7
 800509a:	bd90      	pop	{r4, r7, pc}

0800509c <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3314      	adds	r3, #20
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 f83b 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80050ae:	4603      	mov	r3, r0
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fa4f 	bl	8004554 <_ZN8QAD_UART7startTXEv>
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	3314      	adds	r3, #20
 80050ca:	4618      	mov	r0, r3
 80050cc:	f000 f82a 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80050d0:	4603      	mov	r3, r0
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff fa54 	bl	8004580 <_ZN8QAD_UART6stopTXEv>
}
 80050d8:	bf00      	nop
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3314      	adds	r3, #20
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 f819 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80050f2:	4603      	mov	r3, r0
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff fa59 	bl	80045ac <_ZN8QAD_UART7startRXEv>
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	3314      	adds	r3, #20
 800510e:	4618      	mov	r0, r3
 8005110:	f000 f808 	bl	8005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005114:	4603      	mov	r3, r0
 8005116:	4618      	mov	r0, r3
 8005118:	f7ff fa5e 	bl	80045d8 <_ZN8QAD_UART6stopRXEv>
}
 800511c:	bf00      	nop
 800511e:	3708      	adds	r7, #8
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	return get();
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f805 	bl	800513c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8005132:	4603      	mov	r3, r0
      }
 8005134:	4618      	mov	r0, r3
 8005136:	3708      	adds	r7, #8
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f805 	bl	8005156 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800514c:	4603      	mov	r3, r0
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4618      	mov	r0, r3
 8005162:	f000 f806 	bl	8005172 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8005166:	4603      	mov	r3, r0
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 f805 	bl	800518c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005182:	4603      	mov	r3, r0
 8005184:	4618      	mov	r0, r3
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 f805 	bl	80051a4 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 800519a:	4603      	mov	r3, r0
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f805 	bl	80051be <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 80051b4:	4603      	mov	r3, r0
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	88da      	ldrh	r2, [r3, #6]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	891b      	ldrh	r3, [r3, #8]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d101      	bne.n	80051ec <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e000      	b.n	80051ee <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b082      	sub	sp, #8
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	460b      	mov	r3, r1
 8005204:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	891b      	ldrh	r3, [r3, #8]
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f000 f847 	bl	80052a2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8005214:	4602      	mov	r2, r0
 8005216:	78fb      	ldrb	r3, [r7, #3]
 8005218:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	889a      	ldrh	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	891b      	ldrh	r3, [r3, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d906      	bls.n	8005234 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	891b      	ldrh	r3, [r3, #8]
 800522a:	3301      	adds	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8005232:	e002      	b.n	800523a <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	811a      	strh	r2, [r3, #8]
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8005242:	b580      	push	{r7, lr}
 8005244:	b084      	sub	sp, #16
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff ffc2 	bl	80051d4 <_ZN14QAT_FIFOBuffer5emptyEv>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	88db      	ldrh	r3, [r3, #6]
 8005266:	4619      	mov	r1, r3
 8005268:	4610      	mov	r0, r2
 800526a:	f000 f81a 	bl	80052a2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800526e:	4603      	mov	r3, r0
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	889a      	ldrh	r2, [r3, #4]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	88db      	ldrh	r3, [r3, #6]
 800527c:	429a      	cmp	r2, r3
 800527e:	d906      	bls.n	800528e <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	88db      	ldrh	r3, [r3, #6]
 8005284:	3301      	adds	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	80da      	strh	r2, [r3, #6]
 800528c:	e002      	b.n	8005294 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	80da      	strh	r2, [r3, #6]
		return uData;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
 8005296:	e000      	b.n	800529a <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f807 	bl	80052c0 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80052b2:	4602      	mov	r2, r0
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	4413      	add	r3, r2
      }
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f805 	bl	80052da <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80052d0:	4603      	mov	r3, r0
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f806 	bl	80052f6 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80052ea:	4603      	mov	r3, r0
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f805 	bl	8005310 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005306:	4603      	mov	r3, r0
 8005308:	4618      	mov	r0, r3
 800530a:	3708      	adds	r7, #8
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f805 	bl	8005328 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 800531e:	4603      	mov	r3, r0
 8005320:	4618      	mov	r0, r3
 8005322:	3708      	adds	r7, #8
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f805 	bl	8005342 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8005338:	4603      	mov	r3, r0
 800533a:	4618      	mov	r0, r3
 800533c:	3708      	adds	r7, #8
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}

08005342 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005342:	b480      	push	{r7}
 8005344:	b083      	sub	sp, #12
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4618      	mov	r0, r3
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <__cxa_guard_acquire>:
 8005358:	6803      	ldr	r3, [r0, #0]
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d406      	bmi.n	800536c <__cxa_guard_acquire+0x14>
 800535e:	7843      	ldrb	r3, [r0, #1]
 8005360:	b103      	cbz	r3, 8005364 <__cxa_guard_acquire+0xc>
 8005362:	deff      	udf	#255	; 0xff
 8005364:	2301      	movs	r3, #1
 8005366:	7043      	strb	r3, [r0, #1]
 8005368:	4618      	mov	r0, r3
 800536a:	4770      	bx	lr
 800536c:	2000      	movs	r0, #0
 800536e:	4770      	bx	lr

08005370 <__cxa_guard_release>:
 8005370:	2301      	movs	r3, #1
 8005372:	6003      	str	r3, [r0, #0]
 8005374:	4770      	bx	lr

08005376 <_Znwj>:
 8005376:	2801      	cmp	r0, #1
 8005378:	bf38      	it	cc
 800537a:	2001      	movcc	r0, #1
 800537c:	b510      	push	{r4, lr}
 800537e:	4604      	mov	r4, r0
 8005380:	4620      	mov	r0, r4
 8005382:	f000 f85b 	bl	800543c <malloc>
 8005386:	b930      	cbnz	r0, 8005396 <_Znwj+0x20>
 8005388:	f000 f81e 	bl	80053c8 <_ZSt15get_new_handlerv>
 800538c:	b908      	cbnz	r0, 8005392 <_Znwj+0x1c>
 800538e:	f000 f823 	bl	80053d8 <abort>
 8005392:	4780      	blx	r0
 8005394:	e7f4      	b.n	8005380 <_Znwj+0xa>
 8005396:	bd10      	pop	{r4, pc}

08005398 <_Znaj>:
 8005398:	f7ff bfed 	b.w	8005376 <_Znwj>

0800539c <__cxa_pure_virtual>:
 800539c:	b508      	push	{r3, lr}
 800539e:	f000 f80d 	bl	80053bc <_ZSt9terminatev>

080053a2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80053a2:	b508      	push	{r3, lr}
 80053a4:	4780      	blx	r0
 80053a6:	f000 f817 	bl	80053d8 <abort>
	...

080053ac <_ZSt13get_terminatev>:
 80053ac:	4b02      	ldr	r3, [pc, #8]	; (80053b8 <_ZSt13get_terminatev+0xc>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	f3bf 8f5b 	dmb	ish
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	2000000c 	.word	0x2000000c

080053bc <_ZSt9terminatev>:
 80053bc:	b508      	push	{r3, lr}
 80053be:	f7ff fff5 	bl	80053ac <_ZSt13get_terminatev>
 80053c2:	f7ff ffee 	bl	80053a2 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080053c8 <_ZSt15get_new_handlerv>:
 80053c8:	4b02      	ldr	r3, [pc, #8]	; (80053d4 <_ZSt15get_new_handlerv+0xc>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	f3bf 8f5b 	dmb	ish
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	200002cc 	.word	0x200002cc

080053d8 <abort>:
 80053d8:	b508      	push	{r3, lr}
 80053da:	2006      	movs	r0, #6
 80053dc:	f000 f92e 	bl	800563c <raise>
 80053e0:	2001      	movs	r0, #1
 80053e2:	f7fb ffc5 	bl	8001370 <_exit>
	...

080053e8 <__errno>:
 80053e8:	4b01      	ldr	r3, [pc, #4]	; (80053f0 <__errno+0x8>)
 80053ea:	6818      	ldr	r0, [r3, #0]
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	20000010 	.word	0x20000010

080053f4 <__libc_init_array>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	4d0d      	ldr	r5, [pc, #52]	; (800542c <__libc_init_array+0x38>)
 80053f8:	4c0d      	ldr	r4, [pc, #52]	; (8005430 <__libc_init_array+0x3c>)
 80053fa:	1b64      	subs	r4, r4, r5
 80053fc:	10a4      	asrs	r4, r4, #2
 80053fe:	2600      	movs	r6, #0
 8005400:	42a6      	cmp	r6, r4
 8005402:	d109      	bne.n	8005418 <__libc_init_array+0x24>
 8005404:	4d0b      	ldr	r5, [pc, #44]	; (8005434 <__libc_init_array+0x40>)
 8005406:	4c0c      	ldr	r4, [pc, #48]	; (8005438 <__libc_init_array+0x44>)
 8005408:	f000 fc9a 	bl	8005d40 <_init>
 800540c:	1b64      	subs	r4, r4, r5
 800540e:	10a4      	asrs	r4, r4, #2
 8005410:	2600      	movs	r6, #0
 8005412:	42a6      	cmp	r6, r4
 8005414:	d105      	bne.n	8005422 <__libc_init_array+0x2e>
 8005416:	bd70      	pop	{r4, r5, r6, pc}
 8005418:	f855 3b04 	ldr.w	r3, [r5], #4
 800541c:	4798      	blx	r3
 800541e:	3601      	adds	r6, #1
 8005420:	e7ee      	b.n	8005400 <__libc_init_array+0xc>
 8005422:	f855 3b04 	ldr.w	r3, [r5], #4
 8005426:	4798      	blx	r3
 8005428:	3601      	adds	r6, #1
 800542a:	e7f2      	b.n	8005412 <__libc_init_array+0x1e>
 800542c:	08005e90 	.word	0x08005e90
 8005430:	08005e90 	.word	0x08005e90
 8005434:	08005e90 	.word	0x08005e90
 8005438:	08005e94 	.word	0x08005e94

0800543c <malloc>:
 800543c:	4b02      	ldr	r3, [pc, #8]	; (8005448 <malloc+0xc>)
 800543e:	4601      	mov	r1, r0
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	f000 b869 	b.w	8005518 <_malloc_r>
 8005446:	bf00      	nop
 8005448:	20000010 	.word	0x20000010

0800544c <memcpy>:
 800544c:	440a      	add	r2, r1
 800544e:	4291      	cmp	r1, r2
 8005450:	f100 33ff 	add.w	r3, r0, #4294967295
 8005454:	d100      	bne.n	8005458 <memcpy+0xc>
 8005456:	4770      	bx	lr
 8005458:	b510      	push	{r4, lr}
 800545a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800545e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005462:	4291      	cmp	r1, r2
 8005464:	d1f9      	bne.n	800545a <memcpy+0xe>
 8005466:	bd10      	pop	{r4, pc}

08005468 <memset>:
 8005468:	4402      	add	r2, r0
 800546a:	4603      	mov	r3, r0
 800546c:	4293      	cmp	r3, r2
 800546e:	d100      	bne.n	8005472 <memset+0xa>
 8005470:	4770      	bx	lr
 8005472:	f803 1b01 	strb.w	r1, [r3], #1
 8005476:	e7f9      	b.n	800546c <memset+0x4>

08005478 <_free_r>:
 8005478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800547a:	2900      	cmp	r1, #0
 800547c:	d048      	beq.n	8005510 <_free_r+0x98>
 800547e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005482:	9001      	str	r0, [sp, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f1a1 0404 	sub.w	r4, r1, #4
 800548a:	bfb8      	it	lt
 800548c:	18e4      	addlt	r4, r4, r3
 800548e:	f000 f911 	bl	80056b4 <__malloc_lock>
 8005492:	4a20      	ldr	r2, [pc, #128]	; (8005514 <_free_r+0x9c>)
 8005494:	9801      	ldr	r0, [sp, #4]
 8005496:	6813      	ldr	r3, [r2, #0]
 8005498:	4615      	mov	r5, r2
 800549a:	b933      	cbnz	r3, 80054aa <_free_r+0x32>
 800549c:	6063      	str	r3, [r4, #4]
 800549e:	6014      	str	r4, [r2, #0]
 80054a0:	b003      	add	sp, #12
 80054a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a6:	f000 b90b 	b.w	80056c0 <__malloc_unlock>
 80054aa:	42a3      	cmp	r3, r4
 80054ac:	d90b      	bls.n	80054c6 <_free_r+0x4e>
 80054ae:	6821      	ldr	r1, [r4, #0]
 80054b0:	1862      	adds	r2, r4, r1
 80054b2:	4293      	cmp	r3, r2
 80054b4:	bf04      	itt	eq
 80054b6:	681a      	ldreq	r2, [r3, #0]
 80054b8:	685b      	ldreq	r3, [r3, #4]
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	bf04      	itt	eq
 80054be:	1852      	addeq	r2, r2, r1
 80054c0:	6022      	streq	r2, [r4, #0]
 80054c2:	602c      	str	r4, [r5, #0]
 80054c4:	e7ec      	b.n	80054a0 <_free_r+0x28>
 80054c6:	461a      	mov	r2, r3
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	b10b      	cbz	r3, 80054d0 <_free_r+0x58>
 80054cc:	42a3      	cmp	r3, r4
 80054ce:	d9fa      	bls.n	80054c6 <_free_r+0x4e>
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	1855      	adds	r5, r2, r1
 80054d4:	42a5      	cmp	r5, r4
 80054d6:	d10b      	bne.n	80054f0 <_free_r+0x78>
 80054d8:	6824      	ldr	r4, [r4, #0]
 80054da:	4421      	add	r1, r4
 80054dc:	1854      	adds	r4, r2, r1
 80054de:	42a3      	cmp	r3, r4
 80054e0:	6011      	str	r1, [r2, #0]
 80054e2:	d1dd      	bne.n	80054a0 <_free_r+0x28>
 80054e4:	681c      	ldr	r4, [r3, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	6053      	str	r3, [r2, #4]
 80054ea:	4421      	add	r1, r4
 80054ec:	6011      	str	r1, [r2, #0]
 80054ee:	e7d7      	b.n	80054a0 <_free_r+0x28>
 80054f0:	d902      	bls.n	80054f8 <_free_r+0x80>
 80054f2:	230c      	movs	r3, #12
 80054f4:	6003      	str	r3, [r0, #0]
 80054f6:	e7d3      	b.n	80054a0 <_free_r+0x28>
 80054f8:	6825      	ldr	r5, [r4, #0]
 80054fa:	1961      	adds	r1, r4, r5
 80054fc:	428b      	cmp	r3, r1
 80054fe:	bf04      	itt	eq
 8005500:	6819      	ldreq	r1, [r3, #0]
 8005502:	685b      	ldreq	r3, [r3, #4]
 8005504:	6063      	str	r3, [r4, #4]
 8005506:	bf04      	itt	eq
 8005508:	1949      	addeq	r1, r1, r5
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	6054      	str	r4, [r2, #4]
 800550e:	e7c7      	b.n	80054a0 <_free_r+0x28>
 8005510:	b003      	add	sp, #12
 8005512:	bd30      	pop	{r4, r5, pc}
 8005514:	200002d0 	.word	0x200002d0

08005518 <_malloc_r>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	1ccd      	adds	r5, r1, #3
 800551c:	f025 0503 	bic.w	r5, r5, #3
 8005520:	3508      	adds	r5, #8
 8005522:	2d0c      	cmp	r5, #12
 8005524:	bf38      	it	cc
 8005526:	250c      	movcc	r5, #12
 8005528:	2d00      	cmp	r5, #0
 800552a:	4606      	mov	r6, r0
 800552c:	db01      	blt.n	8005532 <_malloc_r+0x1a>
 800552e:	42a9      	cmp	r1, r5
 8005530:	d903      	bls.n	800553a <_malloc_r+0x22>
 8005532:	230c      	movs	r3, #12
 8005534:	6033      	str	r3, [r6, #0]
 8005536:	2000      	movs	r0, #0
 8005538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800553a:	f000 f8bb 	bl	80056b4 <__malloc_lock>
 800553e:	4921      	ldr	r1, [pc, #132]	; (80055c4 <_malloc_r+0xac>)
 8005540:	680a      	ldr	r2, [r1, #0]
 8005542:	4614      	mov	r4, r2
 8005544:	b99c      	cbnz	r4, 800556e <_malloc_r+0x56>
 8005546:	4f20      	ldr	r7, [pc, #128]	; (80055c8 <_malloc_r+0xb0>)
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	b923      	cbnz	r3, 8005556 <_malloc_r+0x3e>
 800554c:	4621      	mov	r1, r4
 800554e:	4630      	mov	r0, r6
 8005550:	f000 f83c 	bl	80055cc <_sbrk_r>
 8005554:	6038      	str	r0, [r7, #0]
 8005556:	4629      	mov	r1, r5
 8005558:	4630      	mov	r0, r6
 800555a:	f000 f837 	bl	80055cc <_sbrk_r>
 800555e:	1c43      	adds	r3, r0, #1
 8005560:	d123      	bne.n	80055aa <_malloc_r+0x92>
 8005562:	230c      	movs	r3, #12
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	4630      	mov	r0, r6
 8005568:	f000 f8aa 	bl	80056c0 <__malloc_unlock>
 800556c:	e7e3      	b.n	8005536 <_malloc_r+0x1e>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	1b5b      	subs	r3, r3, r5
 8005572:	d417      	bmi.n	80055a4 <_malloc_r+0x8c>
 8005574:	2b0b      	cmp	r3, #11
 8005576:	d903      	bls.n	8005580 <_malloc_r+0x68>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	441c      	add	r4, r3
 800557c:	6025      	str	r5, [r4, #0]
 800557e:	e004      	b.n	800558a <_malloc_r+0x72>
 8005580:	6863      	ldr	r3, [r4, #4]
 8005582:	42a2      	cmp	r2, r4
 8005584:	bf0c      	ite	eq
 8005586:	600b      	streq	r3, [r1, #0]
 8005588:	6053      	strne	r3, [r2, #4]
 800558a:	4630      	mov	r0, r6
 800558c:	f000 f898 	bl	80056c0 <__malloc_unlock>
 8005590:	f104 000b 	add.w	r0, r4, #11
 8005594:	1d23      	adds	r3, r4, #4
 8005596:	f020 0007 	bic.w	r0, r0, #7
 800559a:	1ac2      	subs	r2, r0, r3
 800559c:	d0cc      	beq.n	8005538 <_malloc_r+0x20>
 800559e:	1a1b      	subs	r3, r3, r0
 80055a0:	50a3      	str	r3, [r4, r2]
 80055a2:	e7c9      	b.n	8005538 <_malloc_r+0x20>
 80055a4:	4622      	mov	r2, r4
 80055a6:	6864      	ldr	r4, [r4, #4]
 80055a8:	e7cc      	b.n	8005544 <_malloc_r+0x2c>
 80055aa:	1cc4      	adds	r4, r0, #3
 80055ac:	f024 0403 	bic.w	r4, r4, #3
 80055b0:	42a0      	cmp	r0, r4
 80055b2:	d0e3      	beq.n	800557c <_malloc_r+0x64>
 80055b4:	1a21      	subs	r1, r4, r0
 80055b6:	4630      	mov	r0, r6
 80055b8:	f000 f808 	bl	80055cc <_sbrk_r>
 80055bc:	3001      	adds	r0, #1
 80055be:	d1dd      	bne.n	800557c <_malloc_r+0x64>
 80055c0:	e7cf      	b.n	8005562 <_malloc_r+0x4a>
 80055c2:	bf00      	nop
 80055c4:	200002d0 	.word	0x200002d0
 80055c8:	200002d4 	.word	0x200002d4

080055cc <_sbrk_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	4d06      	ldr	r5, [pc, #24]	; (80055e8 <_sbrk_r+0x1c>)
 80055d0:	2300      	movs	r3, #0
 80055d2:	4604      	mov	r4, r0
 80055d4:	4608      	mov	r0, r1
 80055d6:	602b      	str	r3, [r5, #0]
 80055d8:	f7fb fed4 	bl	8001384 <_sbrk>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_sbrk_r+0x1a>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_sbrk_r+0x1a>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	200002dc 	.word	0x200002dc

080055ec <_raise_r>:
 80055ec:	291f      	cmp	r1, #31
 80055ee:	b538      	push	{r3, r4, r5, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	460d      	mov	r5, r1
 80055f4:	d904      	bls.n	8005600 <_raise_r+0x14>
 80055f6:	2316      	movs	r3, #22
 80055f8:	6003      	str	r3, [r0, #0]
 80055fa:	f04f 30ff 	mov.w	r0, #4294967295
 80055fe:	bd38      	pop	{r3, r4, r5, pc}
 8005600:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005602:	b112      	cbz	r2, 800560a <_raise_r+0x1e>
 8005604:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005608:	b94b      	cbnz	r3, 800561e <_raise_r+0x32>
 800560a:	4620      	mov	r0, r4
 800560c:	f000 f830 	bl	8005670 <_getpid_r>
 8005610:	462a      	mov	r2, r5
 8005612:	4601      	mov	r1, r0
 8005614:	4620      	mov	r0, r4
 8005616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800561a:	f000 b817 	b.w	800564c <_kill_r>
 800561e:	2b01      	cmp	r3, #1
 8005620:	d00a      	beq.n	8005638 <_raise_r+0x4c>
 8005622:	1c59      	adds	r1, r3, #1
 8005624:	d103      	bne.n	800562e <_raise_r+0x42>
 8005626:	2316      	movs	r3, #22
 8005628:	6003      	str	r3, [r0, #0]
 800562a:	2001      	movs	r0, #1
 800562c:	e7e7      	b.n	80055fe <_raise_r+0x12>
 800562e:	2400      	movs	r4, #0
 8005630:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005634:	4628      	mov	r0, r5
 8005636:	4798      	blx	r3
 8005638:	2000      	movs	r0, #0
 800563a:	e7e0      	b.n	80055fe <_raise_r+0x12>

0800563c <raise>:
 800563c:	4b02      	ldr	r3, [pc, #8]	; (8005648 <raise+0xc>)
 800563e:	4601      	mov	r1, r0
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f7ff bfd3 	b.w	80055ec <_raise_r>
 8005646:	bf00      	nop
 8005648:	20000010 	.word	0x20000010

0800564c <_kill_r>:
 800564c:	b538      	push	{r3, r4, r5, lr}
 800564e:	4d07      	ldr	r5, [pc, #28]	; (800566c <_kill_r+0x20>)
 8005650:	2300      	movs	r3, #0
 8005652:	4604      	mov	r4, r0
 8005654:	4608      	mov	r0, r1
 8005656:	4611      	mov	r1, r2
 8005658:	602b      	str	r3, [r5, #0]
 800565a:	f7fb fe79 	bl	8001350 <_kill>
 800565e:	1c43      	adds	r3, r0, #1
 8005660:	d102      	bne.n	8005668 <_kill_r+0x1c>
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	b103      	cbz	r3, 8005668 <_kill_r+0x1c>
 8005666:	6023      	str	r3, [r4, #0]
 8005668:	bd38      	pop	{r3, r4, r5, pc}
 800566a:	bf00      	nop
 800566c:	200002dc 	.word	0x200002dc

08005670 <_getpid_r>:
 8005670:	f7fb be66 	b.w	8001340 <_getpid>

08005674 <siprintf>:
 8005674:	b40e      	push	{r1, r2, r3}
 8005676:	b500      	push	{lr}
 8005678:	b09c      	sub	sp, #112	; 0x70
 800567a:	ab1d      	add	r3, sp, #116	; 0x74
 800567c:	9002      	str	r0, [sp, #8]
 800567e:	9006      	str	r0, [sp, #24]
 8005680:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005684:	4809      	ldr	r0, [pc, #36]	; (80056ac <siprintf+0x38>)
 8005686:	9107      	str	r1, [sp, #28]
 8005688:	9104      	str	r1, [sp, #16]
 800568a:	4909      	ldr	r1, [pc, #36]	; (80056b0 <siprintf+0x3c>)
 800568c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005690:	9105      	str	r1, [sp, #20]
 8005692:	6800      	ldr	r0, [r0, #0]
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	a902      	add	r1, sp, #8
 8005698:	f000 f874 	bl	8005784 <_svfiprintf_r>
 800569c:	9b02      	ldr	r3, [sp, #8]
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	b01c      	add	sp, #112	; 0x70
 80056a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056a8:	b003      	add	sp, #12
 80056aa:	4770      	bx	lr
 80056ac:	20000010 	.word	0x20000010
 80056b0:	ffff0208 	.word	0xffff0208

080056b4 <__malloc_lock>:
 80056b4:	4801      	ldr	r0, [pc, #4]	; (80056bc <__malloc_lock+0x8>)
 80056b6:	f000 baf9 	b.w	8005cac <__retarget_lock_acquire_recursive>
 80056ba:	bf00      	nop
 80056bc:	200002e4 	.word	0x200002e4

080056c0 <__malloc_unlock>:
 80056c0:	4801      	ldr	r0, [pc, #4]	; (80056c8 <__malloc_unlock+0x8>)
 80056c2:	f000 baf4 	b.w	8005cae <__retarget_lock_release_recursive>
 80056c6:	bf00      	nop
 80056c8:	200002e4 	.word	0x200002e4

080056cc <__ssputs_r>:
 80056cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056d0:	688e      	ldr	r6, [r1, #8]
 80056d2:	429e      	cmp	r6, r3
 80056d4:	4682      	mov	sl, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	4690      	mov	r8, r2
 80056da:	461f      	mov	r7, r3
 80056dc:	d838      	bhi.n	8005750 <__ssputs_r+0x84>
 80056de:	898a      	ldrh	r2, [r1, #12]
 80056e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80056e4:	d032      	beq.n	800574c <__ssputs_r+0x80>
 80056e6:	6825      	ldr	r5, [r4, #0]
 80056e8:	6909      	ldr	r1, [r1, #16]
 80056ea:	eba5 0901 	sub.w	r9, r5, r1
 80056ee:	6965      	ldr	r5, [r4, #20]
 80056f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056f8:	3301      	adds	r3, #1
 80056fa:	444b      	add	r3, r9
 80056fc:	106d      	asrs	r5, r5, #1
 80056fe:	429d      	cmp	r5, r3
 8005700:	bf38      	it	cc
 8005702:	461d      	movcc	r5, r3
 8005704:	0553      	lsls	r3, r2, #21
 8005706:	d531      	bpl.n	800576c <__ssputs_r+0xa0>
 8005708:	4629      	mov	r1, r5
 800570a:	f7ff ff05 	bl	8005518 <_malloc_r>
 800570e:	4606      	mov	r6, r0
 8005710:	b950      	cbnz	r0, 8005728 <__ssputs_r+0x5c>
 8005712:	230c      	movs	r3, #12
 8005714:	f8ca 3000 	str.w	r3, [sl]
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800571e:	81a3      	strh	r3, [r4, #12]
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005728:	6921      	ldr	r1, [r4, #16]
 800572a:	464a      	mov	r2, r9
 800572c:	f7ff fe8e 	bl	800544c <memcpy>
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800573a:	81a3      	strh	r3, [r4, #12]
 800573c:	6126      	str	r6, [r4, #16]
 800573e:	6165      	str	r5, [r4, #20]
 8005740:	444e      	add	r6, r9
 8005742:	eba5 0509 	sub.w	r5, r5, r9
 8005746:	6026      	str	r6, [r4, #0]
 8005748:	60a5      	str	r5, [r4, #8]
 800574a:	463e      	mov	r6, r7
 800574c:	42be      	cmp	r6, r7
 800574e:	d900      	bls.n	8005752 <__ssputs_r+0x86>
 8005750:	463e      	mov	r6, r7
 8005752:	4632      	mov	r2, r6
 8005754:	6820      	ldr	r0, [r4, #0]
 8005756:	4641      	mov	r1, r8
 8005758:	f000 faaa 	bl	8005cb0 <memmove>
 800575c:	68a3      	ldr	r3, [r4, #8]
 800575e:	6822      	ldr	r2, [r4, #0]
 8005760:	1b9b      	subs	r3, r3, r6
 8005762:	4432      	add	r2, r6
 8005764:	60a3      	str	r3, [r4, #8]
 8005766:	6022      	str	r2, [r4, #0]
 8005768:	2000      	movs	r0, #0
 800576a:	e7db      	b.n	8005724 <__ssputs_r+0x58>
 800576c:	462a      	mov	r2, r5
 800576e:	f000 fab9 	bl	8005ce4 <_realloc_r>
 8005772:	4606      	mov	r6, r0
 8005774:	2800      	cmp	r0, #0
 8005776:	d1e1      	bne.n	800573c <__ssputs_r+0x70>
 8005778:	6921      	ldr	r1, [r4, #16]
 800577a:	4650      	mov	r0, sl
 800577c:	f7ff fe7c 	bl	8005478 <_free_r>
 8005780:	e7c7      	b.n	8005712 <__ssputs_r+0x46>
	...

08005784 <_svfiprintf_r>:
 8005784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005788:	4698      	mov	r8, r3
 800578a:	898b      	ldrh	r3, [r1, #12]
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	b09d      	sub	sp, #116	; 0x74
 8005790:	4607      	mov	r7, r0
 8005792:	460d      	mov	r5, r1
 8005794:	4614      	mov	r4, r2
 8005796:	d50e      	bpl.n	80057b6 <_svfiprintf_r+0x32>
 8005798:	690b      	ldr	r3, [r1, #16]
 800579a:	b963      	cbnz	r3, 80057b6 <_svfiprintf_r+0x32>
 800579c:	2140      	movs	r1, #64	; 0x40
 800579e:	f7ff febb 	bl	8005518 <_malloc_r>
 80057a2:	6028      	str	r0, [r5, #0]
 80057a4:	6128      	str	r0, [r5, #16]
 80057a6:	b920      	cbnz	r0, 80057b2 <_svfiprintf_r+0x2e>
 80057a8:	230c      	movs	r3, #12
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	f04f 30ff 	mov.w	r0, #4294967295
 80057b0:	e0d1      	b.n	8005956 <_svfiprintf_r+0x1d2>
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	616b      	str	r3, [r5, #20]
 80057b6:	2300      	movs	r3, #0
 80057b8:	9309      	str	r3, [sp, #36]	; 0x24
 80057ba:	2320      	movs	r3, #32
 80057bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80057c4:	2330      	movs	r3, #48	; 0x30
 80057c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005970 <_svfiprintf_r+0x1ec>
 80057ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057ce:	f04f 0901 	mov.w	r9, #1
 80057d2:	4623      	mov	r3, r4
 80057d4:	469a      	mov	sl, r3
 80057d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057da:	b10a      	cbz	r2, 80057e0 <_svfiprintf_r+0x5c>
 80057dc:	2a25      	cmp	r2, #37	; 0x25
 80057de:	d1f9      	bne.n	80057d4 <_svfiprintf_r+0x50>
 80057e0:	ebba 0b04 	subs.w	fp, sl, r4
 80057e4:	d00b      	beq.n	80057fe <_svfiprintf_r+0x7a>
 80057e6:	465b      	mov	r3, fp
 80057e8:	4622      	mov	r2, r4
 80057ea:	4629      	mov	r1, r5
 80057ec:	4638      	mov	r0, r7
 80057ee:	f7ff ff6d 	bl	80056cc <__ssputs_r>
 80057f2:	3001      	adds	r0, #1
 80057f4:	f000 80aa 	beq.w	800594c <_svfiprintf_r+0x1c8>
 80057f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057fa:	445a      	add	r2, fp
 80057fc:	9209      	str	r2, [sp, #36]	; 0x24
 80057fe:	f89a 3000 	ldrb.w	r3, [sl]
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 80a2 	beq.w	800594c <_svfiprintf_r+0x1c8>
 8005808:	2300      	movs	r3, #0
 800580a:	f04f 32ff 	mov.w	r2, #4294967295
 800580e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005812:	f10a 0a01 	add.w	sl, sl, #1
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	9307      	str	r3, [sp, #28]
 800581a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800581e:	931a      	str	r3, [sp, #104]	; 0x68
 8005820:	4654      	mov	r4, sl
 8005822:	2205      	movs	r2, #5
 8005824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005828:	4851      	ldr	r0, [pc, #324]	; (8005970 <_svfiprintf_r+0x1ec>)
 800582a:	f7fa fce1 	bl	80001f0 <memchr>
 800582e:	9a04      	ldr	r2, [sp, #16]
 8005830:	b9d8      	cbnz	r0, 800586a <_svfiprintf_r+0xe6>
 8005832:	06d0      	lsls	r0, r2, #27
 8005834:	bf44      	itt	mi
 8005836:	2320      	movmi	r3, #32
 8005838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800583c:	0711      	lsls	r1, r2, #28
 800583e:	bf44      	itt	mi
 8005840:	232b      	movmi	r3, #43	; 0x2b
 8005842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005846:	f89a 3000 	ldrb.w	r3, [sl]
 800584a:	2b2a      	cmp	r3, #42	; 0x2a
 800584c:	d015      	beq.n	800587a <_svfiprintf_r+0xf6>
 800584e:	9a07      	ldr	r2, [sp, #28]
 8005850:	4654      	mov	r4, sl
 8005852:	2000      	movs	r0, #0
 8005854:	f04f 0c0a 	mov.w	ip, #10
 8005858:	4621      	mov	r1, r4
 800585a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800585e:	3b30      	subs	r3, #48	; 0x30
 8005860:	2b09      	cmp	r3, #9
 8005862:	d94e      	bls.n	8005902 <_svfiprintf_r+0x17e>
 8005864:	b1b0      	cbz	r0, 8005894 <_svfiprintf_r+0x110>
 8005866:	9207      	str	r2, [sp, #28]
 8005868:	e014      	b.n	8005894 <_svfiprintf_r+0x110>
 800586a:	eba0 0308 	sub.w	r3, r0, r8
 800586e:	fa09 f303 	lsl.w	r3, r9, r3
 8005872:	4313      	orrs	r3, r2
 8005874:	9304      	str	r3, [sp, #16]
 8005876:	46a2      	mov	sl, r4
 8005878:	e7d2      	b.n	8005820 <_svfiprintf_r+0x9c>
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	1d19      	adds	r1, r3, #4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	9103      	str	r1, [sp, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	bfbb      	ittet	lt
 8005886:	425b      	neglt	r3, r3
 8005888:	f042 0202 	orrlt.w	r2, r2, #2
 800588c:	9307      	strge	r3, [sp, #28]
 800588e:	9307      	strlt	r3, [sp, #28]
 8005890:	bfb8      	it	lt
 8005892:	9204      	strlt	r2, [sp, #16]
 8005894:	7823      	ldrb	r3, [r4, #0]
 8005896:	2b2e      	cmp	r3, #46	; 0x2e
 8005898:	d10c      	bne.n	80058b4 <_svfiprintf_r+0x130>
 800589a:	7863      	ldrb	r3, [r4, #1]
 800589c:	2b2a      	cmp	r3, #42	; 0x2a
 800589e:	d135      	bne.n	800590c <_svfiprintf_r+0x188>
 80058a0:	9b03      	ldr	r3, [sp, #12]
 80058a2:	1d1a      	adds	r2, r3, #4
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	9203      	str	r2, [sp, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	bfb8      	it	lt
 80058ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80058b0:	3402      	adds	r4, #2
 80058b2:	9305      	str	r3, [sp, #20]
 80058b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005980 <_svfiprintf_r+0x1fc>
 80058b8:	7821      	ldrb	r1, [r4, #0]
 80058ba:	2203      	movs	r2, #3
 80058bc:	4650      	mov	r0, sl
 80058be:	f7fa fc97 	bl	80001f0 <memchr>
 80058c2:	b140      	cbz	r0, 80058d6 <_svfiprintf_r+0x152>
 80058c4:	2340      	movs	r3, #64	; 0x40
 80058c6:	eba0 000a 	sub.w	r0, r0, sl
 80058ca:	fa03 f000 	lsl.w	r0, r3, r0
 80058ce:	9b04      	ldr	r3, [sp, #16]
 80058d0:	4303      	orrs	r3, r0
 80058d2:	3401      	adds	r4, #1
 80058d4:	9304      	str	r3, [sp, #16]
 80058d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058da:	4826      	ldr	r0, [pc, #152]	; (8005974 <_svfiprintf_r+0x1f0>)
 80058dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058e0:	2206      	movs	r2, #6
 80058e2:	f7fa fc85 	bl	80001f0 <memchr>
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d038      	beq.n	800595c <_svfiprintf_r+0x1d8>
 80058ea:	4b23      	ldr	r3, [pc, #140]	; (8005978 <_svfiprintf_r+0x1f4>)
 80058ec:	bb1b      	cbnz	r3, 8005936 <_svfiprintf_r+0x1b2>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	3307      	adds	r3, #7
 80058f2:	f023 0307 	bic.w	r3, r3, #7
 80058f6:	3308      	adds	r3, #8
 80058f8:	9303      	str	r3, [sp, #12]
 80058fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058fc:	4433      	add	r3, r6
 80058fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005900:	e767      	b.n	80057d2 <_svfiprintf_r+0x4e>
 8005902:	fb0c 3202 	mla	r2, ip, r2, r3
 8005906:	460c      	mov	r4, r1
 8005908:	2001      	movs	r0, #1
 800590a:	e7a5      	b.n	8005858 <_svfiprintf_r+0xd4>
 800590c:	2300      	movs	r3, #0
 800590e:	3401      	adds	r4, #1
 8005910:	9305      	str	r3, [sp, #20]
 8005912:	4619      	mov	r1, r3
 8005914:	f04f 0c0a 	mov.w	ip, #10
 8005918:	4620      	mov	r0, r4
 800591a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800591e:	3a30      	subs	r2, #48	; 0x30
 8005920:	2a09      	cmp	r2, #9
 8005922:	d903      	bls.n	800592c <_svfiprintf_r+0x1a8>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0c5      	beq.n	80058b4 <_svfiprintf_r+0x130>
 8005928:	9105      	str	r1, [sp, #20]
 800592a:	e7c3      	b.n	80058b4 <_svfiprintf_r+0x130>
 800592c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005930:	4604      	mov	r4, r0
 8005932:	2301      	movs	r3, #1
 8005934:	e7f0      	b.n	8005918 <_svfiprintf_r+0x194>
 8005936:	ab03      	add	r3, sp, #12
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	462a      	mov	r2, r5
 800593c:	4b0f      	ldr	r3, [pc, #60]	; (800597c <_svfiprintf_r+0x1f8>)
 800593e:	a904      	add	r1, sp, #16
 8005940:	4638      	mov	r0, r7
 8005942:	f3af 8000 	nop.w
 8005946:	1c42      	adds	r2, r0, #1
 8005948:	4606      	mov	r6, r0
 800594a:	d1d6      	bne.n	80058fa <_svfiprintf_r+0x176>
 800594c:	89ab      	ldrh	r3, [r5, #12]
 800594e:	065b      	lsls	r3, r3, #25
 8005950:	f53f af2c 	bmi.w	80057ac <_svfiprintf_r+0x28>
 8005954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005956:	b01d      	add	sp, #116	; 0x74
 8005958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800595c:	ab03      	add	r3, sp, #12
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	462a      	mov	r2, r5
 8005962:	4b06      	ldr	r3, [pc, #24]	; (800597c <_svfiprintf_r+0x1f8>)
 8005964:	a904      	add	r1, sp, #16
 8005966:	4638      	mov	r0, r7
 8005968:	f000 f87a 	bl	8005a60 <_printf_i>
 800596c:	e7eb      	b.n	8005946 <_svfiprintf_r+0x1c2>
 800596e:	bf00      	nop
 8005970:	08005e54 	.word	0x08005e54
 8005974:	08005e5e 	.word	0x08005e5e
 8005978:	00000000 	.word	0x00000000
 800597c:	080056cd 	.word	0x080056cd
 8005980:	08005e5a 	.word	0x08005e5a

08005984 <_printf_common>:
 8005984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005988:	4616      	mov	r6, r2
 800598a:	4699      	mov	r9, r3
 800598c:	688a      	ldr	r2, [r1, #8]
 800598e:	690b      	ldr	r3, [r1, #16]
 8005990:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005994:	4293      	cmp	r3, r2
 8005996:	bfb8      	it	lt
 8005998:	4613      	movlt	r3, r2
 800599a:	6033      	str	r3, [r6, #0]
 800599c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059a0:	4607      	mov	r7, r0
 80059a2:	460c      	mov	r4, r1
 80059a4:	b10a      	cbz	r2, 80059aa <_printf_common+0x26>
 80059a6:	3301      	adds	r3, #1
 80059a8:	6033      	str	r3, [r6, #0]
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	0699      	lsls	r1, r3, #26
 80059ae:	bf42      	ittt	mi
 80059b0:	6833      	ldrmi	r3, [r6, #0]
 80059b2:	3302      	addmi	r3, #2
 80059b4:	6033      	strmi	r3, [r6, #0]
 80059b6:	6825      	ldr	r5, [r4, #0]
 80059b8:	f015 0506 	ands.w	r5, r5, #6
 80059bc:	d106      	bne.n	80059cc <_printf_common+0x48>
 80059be:	f104 0a19 	add.w	sl, r4, #25
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	6832      	ldr	r2, [r6, #0]
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	dc26      	bgt.n	8005a1a <_printf_common+0x96>
 80059cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059d0:	1e13      	subs	r3, r2, #0
 80059d2:	6822      	ldr	r2, [r4, #0]
 80059d4:	bf18      	it	ne
 80059d6:	2301      	movne	r3, #1
 80059d8:	0692      	lsls	r2, r2, #26
 80059da:	d42b      	bmi.n	8005a34 <_printf_common+0xb0>
 80059dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059e0:	4649      	mov	r1, r9
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c0      	blx	r8
 80059e6:	3001      	adds	r0, #1
 80059e8:	d01e      	beq.n	8005a28 <_printf_common+0xa4>
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	68e5      	ldr	r5, [r4, #12]
 80059ee:	6832      	ldr	r2, [r6, #0]
 80059f0:	f003 0306 	and.w	r3, r3, #6
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	bf08      	it	eq
 80059f8:	1aad      	subeq	r5, r5, r2
 80059fa:	68a3      	ldr	r3, [r4, #8]
 80059fc:	6922      	ldr	r2, [r4, #16]
 80059fe:	bf0c      	ite	eq
 8005a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a04:	2500      	movne	r5, #0
 8005a06:	4293      	cmp	r3, r2
 8005a08:	bfc4      	itt	gt
 8005a0a:	1a9b      	subgt	r3, r3, r2
 8005a0c:	18ed      	addgt	r5, r5, r3
 8005a0e:	2600      	movs	r6, #0
 8005a10:	341a      	adds	r4, #26
 8005a12:	42b5      	cmp	r5, r6
 8005a14:	d11a      	bne.n	8005a4c <_printf_common+0xc8>
 8005a16:	2000      	movs	r0, #0
 8005a18:	e008      	b.n	8005a2c <_printf_common+0xa8>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	4652      	mov	r2, sl
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4638      	mov	r0, r7
 8005a22:	47c0      	blx	r8
 8005a24:	3001      	adds	r0, #1
 8005a26:	d103      	bne.n	8005a30 <_printf_common+0xac>
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a30:	3501      	adds	r5, #1
 8005a32:	e7c6      	b.n	80059c2 <_printf_common+0x3e>
 8005a34:	18e1      	adds	r1, r4, r3
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	2030      	movs	r0, #48	; 0x30
 8005a3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a3e:	4422      	add	r2, r4
 8005a40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a48:	3302      	adds	r3, #2
 8005a4a:	e7c7      	b.n	80059dc <_printf_common+0x58>
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	4622      	mov	r2, r4
 8005a50:	4649      	mov	r1, r9
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	3001      	adds	r0, #1
 8005a58:	d0e6      	beq.n	8005a28 <_printf_common+0xa4>
 8005a5a:	3601      	adds	r6, #1
 8005a5c:	e7d9      	b.n	8005a12 <_printf_common+0x8e>
	...

08005a60 <_printf_i>:
 8005a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a64:	460c      	mov	r4, r1
 8005a66:	4691      	mov	r9, r2
 8005a68:	7e27      	ldrb	r7, [r4, #24]
 8005a6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a6c:	2f78      	cmp	r7, #120	; 0x78
 8005a6e:	4680      	mov	r8, r0
 8005a70:	469a      	mov	sl, r3
 8005a72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a76:	d807      	bhi.n	8005a88 <_printf_i+0x28>
 8005a78:	2f62      	cmp	r7, #98	; 0x62
 8005a7a:	d80a      	bhi.n	8005a92 <_printf_i+0x32>
 8005a7c:	2f00      	cmp	r7, #0
 8005a7e:	f000 80d8 	beq.w	8005c32 <_printf_i+0x1d2>
 8005a82:	2f58      	cmp	r7, #88	; 0x58
 8005a84:	f000 80a3 	beq.w	8005bce <_printf_i+0x16e>
 8005a88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a90:	e03a      	b.n	8005b08 <_printf_i+0xa8>
 8005a92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a96:	2b15      	cmp	r3, #21
 8005a98:	d8f6      	bhi.n	8005a88 <_printf_i+0x28>
 8005a9a:	a001      	add	r0, pc, #4	; (adr r0, 8005aa0 <_printf_i+0x40>)
 8005a9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005aa0:	08005af9 	.word	0x08005af9
 8005aa4:	08005b0d 	.word	0x08005b0d
 8005aa8:	08005a89 	.word	0x08005a89
 8005aac:	08005a89 	.word	0x08005a89
 8005ab0:	08005a89 	.word	0x08005a89
 8005ab4:	08005a89 	.word	0x08005a89
 8005ab8:	08005b0d 	.word	0x08005b0d
 8005abc:	08005a89 	.word	0x08005a89
 8005ac0:	08005a89 	.word	0x08005a89
 8005ac4:	08005a89 	.word	0x08005a89
 8005ac8:	08005a89 	.word	0x08005a89
 8005acc:	08005c19 	.word	0x08005c19
 8005ad0:	08005b3d 	.word	0x08005b3d
 8005ad4:	08005bfb 	.word	0x08005bfb
 8005ad8:	08005a89 	.word	0x08005a89
 8005adc:	08005a89 	.word	0x08005a89
 8005ae0:	08005c3b 	.word	0x08005c3b
 8005ae4:	08005a89 	.word	0x08005a89
 8005ae8:	08005b3d 	.word	0x08005b3d
 8005aec:	08005a89 	.word	0x08005a89
 8005af0:	08005a89 	.word	0x08005a89
 8005af4:	08005c03 	.word	0x08005c03
 8005af8:	680b      	ldr	r3, [r1, #0]
 8005afa:	1d1a      	adds	r2, r3, #4
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	600a      	str	r2, [r1, #0]
 8005b00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e0a3      	b.n	8005c54 <_printf_i+0x1f4>
 8005b0c:	6825      	ldr	r5, [r4, #0]
 8005b0e:	6808      	ldr	r0, [r1, #0]
 8005b10:	062e      	lsls	r6, r5, #24
 8005b12:	f100 0304 	add.w	r3, r0, #4
 8005b16:	d50a      	bpl.n	8005b2e <_printf_i+0xce>
 8005b18:	6805      	ldr	r5, [r0, #0]
 8005b1a:	600b      	str	r3, [r1, #0]
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	da03      	bge.n	8005b28 <_printf_i+0xc8>
 8005b20:	232d      	movs	r3, #45	; 0x2d
 8005b22:	426d      	negs	r5, r5
 8005b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b28:	485e      	ldr	r0, [pc, #376]	; (8005ca4 <_printf_i+0x244>)
 8005b2a:	230a      	movs	r3, #10
 8005b2c:	e019      	b.n	8005b62 <_printf_i+0x102>
 8005b2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b32:	6805      	ldr	r5, [r0, #0]
 8005b34:	600b      	str	r3, [r1, #0]
 8005b36:	bf18      	it	ne
 8005b38:	b22d      	sxthne	r5, r5
 8005b3a:	e7ef      	b.n	8005b1c <_printf_i+0xbc>
 8005b3c:	680b      	ldr	r3, [r1, #0]
 8005b3e:	6825      	ldr	r5, [r4, #0]
 8005b40:	1d18      	adds	r0, r3, #4
 8005b42:	6008      	str	r0, [r1, #0]
 8005b44:	0628      	lsls	r0, r5, #24
 8005b46:	d501      	bpl.n	8005b4c <_printf_i+0xec>
 8005b48:	681d      	ldr	r5, [r3, #0]
 8005b4a:	e002      	b.n	8005b52 <_printf_i+0xf2>
 8005b4c:	0669      	lsls	r1, r5, #25
 8005b4e:	d5fb      	bpl.n	8005b48 <_printf_i+0xe8>
 8005b50:	881d      	ldrh	r5, [r3, #0]
 8005b52:	4854      	ldr	r0, [pc, #336]	; (8005ca4 <_printf_i+0x244>)
 8005b54:	2f6f      	cmp	r7, #111	; 0x6f
 8005b56:	bf0c      	ite	eq
 8005b58:	2308      	moveq	r3, #8
 8005b5a:	230a      	movne	r3, #10
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b62:	6866      	ldr	r6, [r4, #4]
 8005b64:	60a6      	str	r6, [r4, #8]
 8005b66:	2e00      	cmp	r6, #0
 8005b68:	bfa2      	ittt	ge
 8005b6a:	6821      	ldrge	r1, [r4, #0]
 8005b6c:	f021 0104 	bicge.w	r1, r1, #4
 8005b70:	6021      	strge	r1, [r4, #0]
 8005b72:	b90d      	cbnz	r5, 8005b78 <_printf_i+0x118>
 8005b74:	2e00      	cmp	r6, #0
 8005b76:	d04d      	beq.n	8005c14 <_printf_i+0x1b4>
 8005b78:	4616      	mov	r6, r2
 8005b7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b7e:	fb03 5711 	mls	r7, r3, r1, r5
 8005b82:	5dc7      	ldrb	r7, [r0, r7]
 8005b84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b88:	462f      	mov	r7, r5
 8005b8a:	42bb      	cmp	r3, r7
 8005b8c:	460d      	mov	r5, r1
 8005b8e:	d9f4      	bls.n	8005b7a <_printf_i+0x11a>
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d10b      	bne.n	8005bac <_printf_i+0x14c>
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	07df      	lsls	r7, r3, #31
 8005b98:	d508      	bpl.n	8005bac <_printf_i+0x14c>
 8005b9a:	6923      	ldr	r3, [r4, #16]
 8005b9c:	6861      	ldr	r1, [r4, #4]
 8005b9e:	4299      	cmp	r1, r3
 8005ba0:	bfde      	ittt	le
 8005ba2:	2330      	movle	r3, #48	; 0x30
 8005ba4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ba8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bac:	1b92      	subs	r2, r2, r6
 8005bae:	6122      	str	r2, [r4, #16]
 8005bb0:	f8cd a000 	str.w	sl, [sp]
 8005bb4:	464b      	mov	r3, r9
 8005bb6:	aa03      	add	r2, sp, #12
 8005bb8:	4621      	mov	r1, r4
 8005bba:	4640      	mov	r0, r8
 8005bbc:	f7ff fee2 	bl	8005984 <_printf_common>
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d14c      	bne.n	8005c5e <_printf_i+0x1fe>
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	b004      	add	sp, #16
 8005bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bce:	4835      	ldr	r0, [pc, #212]	; (8005ca4 <_printf_i+0x244>)
 8005bd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	680e      	ldr	r6, [r1, #0]
 8005bd8:	061f      	lsls	r7, r3, #24
 8005bda:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bde:	600e      	str	r6, [r1, #0]
 8005be0:	d514      	bpl.n	8005c0c <_printf_i+0x1ac>
 8005be2:	07d9      	lsls	r1, r3, #31
 8005be4:	bf44      	itt	mi
 8005be6:	f043 0320 	orrmi.w	r3, r3, #32
 8005bea:	6023      	strmi	r3, [r4, #0]
 8005bec:	b91d      	cbnz	r5, 8005bf6 <_printf_i+0x196>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	f023 0320 	bic.w	r3, r3, #32
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	2310      	movs	r3, #16
 8005bf8:	e7b0      	b.n	8005b5c <_printf_i+0xfc>
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f043 0320 	orr.w	r3, r3, #32
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	2378      	movs	r3, #120	; 0x78
 8005c04:	4828      	ldr	r0, [pc, #160]	; (8005ca8 <_printf_i+0x248>)
 8005c06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c0a:	e7e3      	b.n	8005bd4 <_printf_i+0x174>
 8005c0c:	065e      	lsls	r6, r3, #25
 8005c0e:	bf48      	it	mi
 8005c10:	b2ad      	uxthmi	r5, r5
 8005c12:	e7e6      	b.n	8005be2 <_printf_i+0x182>
 8005c14:	4616      	mov	r6, r2
 8005c16:	e7bb      	b.n	8005b90 <_printf_i+0x130>
 8005c18:	680b      	ldr	r3, [r1, #0]
 8005c1a:	6826      	ldr	r6, [r4, #0]
 8005c1c:	6960      	ldr	r0, [r4, #20]
 8005c1e:	1d1d      	adds	r5, r3, #4
 8005c20:	600d      	str	r5, [r1, #0]
 8005c22:	0635      	lsls	r5, r6, #24
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0x1cc>
 8005c28:	6018      	str	r0, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <_printf_i+0x1d2>
 8005c2c:	0671      	lsls	r1, r6, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0x1c8>
 8005c30:	8018      	strh	r0, [r3, #0]
 8005c32:	2300      	movs	r3, #0
 8005c34:	6123      	str	r3, [r4, #16]
 8005c36:	4616      	mov	r6, r2
 8005c38:	e7ba      	b.n	8005bb0 <_printf_i+0x150>
 8005c3a:	680b      	ldr	r3, [r1, #0]
 8005c3c:	1d1a      	adds	r2, r3, #4
 8005c3e:	600a      	str	r2, [r1, #0]
 8005c40:	681e      	ldr	r6, [r3, #0]
 8005c42:	6862      	ldr	r2, [r4, #4]
 8005c44:	2100      	movs	r1, #0
 8005c46:	4630      	mov	r0, r6
 8005c48:	f7fa fad2 	bl	80001f0 <memchr>
 8005c4c:	b108      	cbz	r0, 8005c52 <_printf_i+0x1f2>
 8005c4e:	1b80      	subs	r0, r0, r6
 8005c50:	6060      	str	r0, [r4, #4]
 8005c52:	6863      	ldr	r3, [r4, #4]
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	2300      	movs	r3, #0
 8005c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c5c:	e7a8      	b.n	8005bb0 <_printf_i+0x150>
 8005c5e:	6923      	ldr	r3, [r4, #16]
 8005c60:	4632      	mov	r2, r6
 8005c62:	4649      	mov	r1, r9
 8005c64:	4640      	mov	r0, r8
 8005c66:	47d0      	blx	sl
 8005c68:	3001      	adds	r0, #1
 8005c6a:	d0ab      	beq.n	8005bc4 <_printf_i+0x164>
 8005c6c:	6823      	ldr	r3, [r4, #0]
 8005c6e:	079b      	lsls	r3, r3, #30
 8005c70:	d413      	bmi.n	8005c9a <_printf_i+0x23a>
 8005c72:	68e0      	ldr	r0, [r4, #12]
 8005c74:	9b03      	ldr	r3, [sp, #12]
 8005c76:	4298      	cmp	r0, r3
 8005c78:	bfb8      	it	lt
 8005c7a:	4618      	movlt	r0, r3
 8005c7c:	e7a4      	b.n	8005bc8 <_printf_i+0x168>
 8005c7e:	2301      	movs	r3, #1
 8005c80:	4632      	mov	r2, r6
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	47d0      	blx	sl
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d09b      	beq.n	8005bc4 <_printf_i+0x164>
 8005c8c:	3501      	adds	r5, #1
 8005c8e:	68e3      	ldr	r3, [r4, #12]
 8005c90:	9903      	ldr	r1, [sp, #12]
 8005c92:	1a5b      	subs	r3, r3, r1
 8005c94:	42ab      	cmp	r3, r5
 8005c96:	dcf2      	bgt.n	8005c7e <_printf_i+0x21e>
 8005c98:	e7eb      	b.n	8005c72 <_printf_i+0x212>
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	f104 0619 	add.w	r6, r4, #25
 8005ca0:	e7f5      	b.n	8005c8e <_printf_i+0x22e>
 8005ca2:	bf00      	nop
 8005ca4:	08005e65 	.word	0x08005e65
 8005ca8:	08005e76 	.word	0x08005e76

08005cac <__retarget_lock_acquire_recursive>:
 8005cac:	4770      	bx	lr

08005cae <__retarget_lock_release_recursive>:
 8005cae:	4770      	bx	lr

08005cb0 <memmove>:
 8005cb0:	4288      	cmp	r0, r1
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	eb01 0402 	add.w	r4, r1, r2
 8005cb8:	d902      	bls.n	8005cc0 <memmove+0x10>
 8005cba:	4284      	cmp	r4, r0
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	d807      	bhi.n	8005cd0 <memmove+0x20>
 8005cc0:	1e43      	subs	r3, r0, #1
 8005cc2:	42a1      	cmp	r1, r4
 8005cc4:	d008      	beq.n	8005cd8 <memmove+0x28>
 8005cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005cce:	e7f8      	b.n	8005cc2 <memmove+0x12>
 8005cd0:	4402      	add	r2, r0
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	428a      	cmp	r2, r1
 8005cd6:	d100      	bne.n	8005cda <memmove+0x2a>
 8005cd8:	bd10      	pop	{r4, pc}
 8005cda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005cde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ce2:	e7f7      	b.n	8005cd4 <memmove+0x24>

08005ce4 <_realloc_r>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	4607      	mov	r7, r0
 8005ce8:	4614      	mov	r4, r2
 8005cea:	460e      	mov	r6, r1
 8005cec:	b921      	cbnz	r1, 8005cf8 <_realloc_r+0x14>
 8005cee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	f7ff bc10 	b.w	8005518 <_malloc_r>
 8005cf8:	b922      	cbnz	r2, 8005d04 <_realloc_r+0x20>
 8005cfa:	f7ff fbbd 	bl	8005478 <_free_r>
 8005cfe:	4625      	mov	r5, r4
 8005d00:	4628      	mov	r0, r5
 8005d02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d04:	f000 f814 	bl	8005d30 <_malloc_usable_size_r>
 8005d08:	42a0      	cmp	r0, r4
 8005d0a:	d20f      	bcs.n	8005d2c <_realloc_r+0x48>
 8005d0c:	4621      	mov	r1, r4
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f7ff fc02 	bl	8005518 <_malloc_r>
 8005d14:	4605      	mov	r5, r0
 8005d16:	2800      	cmp	r0, #0
 8005d18:	d0f2      	beq.n	8005d00 <_realloc_r+0x1c>
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	f7ff fb95 	bl	800544c <memcpy>
 8005d22:	4631      	mov	r1, r6
 8005d24:	4638      	mov	r0, r7
 8005d26:	f7ff fba7 	bl	8005478 <_free_r>
 8005d2a:	e7e9      	b.n	8005d00 <_realloc_r+0x1c>
 8005d2c:	4635      	mov	r5, r6
 8005d2e:	e7e7      	b.n	8005d00 <_realloc_r+0x1c>

08005d30 <_malloc_usable_size_r>:
 8005d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d34:	1f18      	subs	r0, r3, #4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfbc      	itt	lt
 8005d3a:	580b      	ldrlt	r3, [r1, r0]
 8005d3c:	18c0      	addlt	r0, r0, r3
 8005d3e:	4770      	bx	lr

08005d40 <_init>:
 8005d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d42:	bf00      	nop
 8005d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d46:	bc08      	pop	{r3}
 8005d48:	469e      	mov	lr, r3
 8005d4a:	4770      	bx	lr

08005d4c <_fini>:
 8005d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d4e:	bf00      	nop
 8005d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d52:	bc08      	pop	{r3}
 8005d54:	469e      	mov	lr, r3
 8005d56:	4770      	bx	lr
