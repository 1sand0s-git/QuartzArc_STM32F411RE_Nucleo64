
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006574  08006574  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800657c  0800657c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800657c  0800657c  0001657c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006580  08006580  00016580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000074  080065f8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  080065f8  000202d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   0001818a  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002e02a  00000000  00000000  0003822e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005d61  00000000  00000000  00066258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d0  00000000  00000000  0006bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aaac8  00000000  00000000  0006d190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000010c0  00000000  00000000  00117c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001eba7  00000000  00000000  00118d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001378bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000514c  00000000  00000000  00137914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800643c 	.word	0x0800643c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800643c 	.word	0x0800643c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800058e:	490e      	ldr	r1, [pc, #56]	; (80005c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005a4:	4c0b      	ldr	r4, [pc, #44]	; (80005d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005b2:	f000 ff09 	bl	80013c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b6:	f005 fa9b 	bl	8005af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ba:	f000 fac9 	bl	8000b50 <main>
  bx  lr    
 80005be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005cc:	08006584 	.word	0x08006584
  ldr r2, =_sbss
 80005d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005d4:	200002d4 	.word	0x200002d4

080005d8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <DMA1_Stream0_IRQHandler>
	...

080005dc <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	; 0x60
 80005e0:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005e2:	4b6a      	ldr	r3, [pc, #424]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a69      	ldr	r2, [pc, #420]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ec:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80005ee:	4b67      	ldr	r3, [pc, #412]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a66      	ldr	r2, [pc, #408]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f8:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fa:	4b64      	ldr	r3, [pc, #400]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a63      	ldr	r2, [pc, #396]	; (800078c <_Z16SystemInitializev+0x1b0>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000604:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000606:	2003      	movs	r0, #3
 8000608:	f001 fbe8 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 feed 	bl	80013ec <HAL_InitTick>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 8000622:	2301      	movs	r3, #1
 8000624:	e0ad      	b.n	8000782 <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	4b59      	ldr	r3, [pc, #356]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a58      	ldr	r2, [pc, #352]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
 8000636:	4b56      	ldr	r3, [pc, #344]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	4b53      	ldr	r3, [pc, #332]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a52      	ldr	r2, [pc, #328]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 800064c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 100MHz clock
  //NOTE: HSE Oscillator provided on STM32F411RE Nucleo 64 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800065e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fa7c 	bl	8005b64 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 800066c:	2301      	movs	r3, #1
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 8000690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fe77 	bl	8003388 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e069      	b.n	8000782 <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 80006da:	230f      	movs	r3, #15
 80006dc:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 100MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f8be 	bl	8003878 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf14      	ite	ne
 8000702:	2301      	movne	r3, #1
 8000704:	2300      	moveq	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 800070c:	2301      	movs	r3, #1
 800070e:	e038      	b.n	8000782 <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6313      	str	r3, [r2, #48]	; 0x30
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0308 	and.w	r3, r3, #8
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3760      	adds	r7, #96	; 0x60
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023c00 	.word	0x40023c00
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <_ZN7QAD_ADCC1Ev>:
	uint8_t                 m_uDataIdx;


	//-----------
	//Constructor
	QAD_ADC() :
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_sTIMHandle({0}),
		m_sADCHandle({0}),
		m_uChannelCount(0) {}
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	330c      	adds	r3, #12
 80007b0:	2248      	movs	r2, #72	; 0x48
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f005 f9d5 	bl	8005b64 <memset>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3354      	adds	r3, #84	; 0x54
 80007be:	2248      	movs	r2, #72	; 0x48
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f005 f9ce 	bl	8005b64 <memset>
 80007c8:	230f      	movs	r3, #15
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db01      	blt.n	80007d2 <_ZN7QAD_ADCC1Ev+0x3a>
 80007ce:	3b01      	subs	r3, #1
 80007d0:	e7fb      	b.n	80007ca <_ZN7QAD_ADCC1Ev+0x32>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN7QAD_ADC3getEv>:


	  //-----------------
	  //Singleton Methods

	static QAD_ADC& get(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
		static QAD_ADC instance;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f3bf 8f5b 	dmb	ish
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d010      	beq.n	8000826 <_ZN7QAD_ADC3getEv+0x42>
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 8000806:	f005 f925 	bl	8005a54 <__cxa_guard_acquire>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d005      	beq.n	8000826 <_ZN7QAD_ADC3getEv+0x42>
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <_ZN7QAD_ADC3getEv+0x4c>)
 800081c:	f7ff ffbc 	bl	8000798 <_ZN7QAD_ADCC1Ev>
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 8000822:	f005 f923 	bl	8005a6c <__cxa_guard_release>
		return instance;
 8000826:	4b02      	ldr	r3, [pc, #8]	; (8000830 <_ZN7QAD_ADC3getEv+0x4c>)
	}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000250 	.word	0x20000250
 8000830:	20000090 	.word	0x20000090

08000834 <_ZN7QAD_ADC7handlerEv>:


	  //--------------
	  //Handler Method

	static void handler(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
		get().imp_handler();
 8000838:	f7ff ffd4 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 800083c:	4603      	mov	r3, r0
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fc6e 	bl	8004120 <_ZN7QAD_ADC11imp_handlerEv>
	}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 800085c:	4b02      	ldr	r3, [pc, #8]	; (8000868 <HardFault_Handler+0x10>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f003 fe51 	bl	8004508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 8000866:	e7fe      	b.n	8000866 <HardFault_Handler+0xe>
 8000868:	20000254 	.word	0x20000254

0800086c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 8000870:	4b02      	ldr	r3, [pc, #8]	; (800087c <MemManage_Handler+0x10>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4618      	mov	r0, r3
 8000876:	f003 fe47 	bl	8004508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 800087a:	e7fe      	b.n	800087a <MemManage_Handler+0xe>
 800087c:	20000254 	.word	0x20000254

08000880 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 8000884:	4b02      	ldr	r3, [pc, #8]	; (8000890 <BusFault_Handler+0x10>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4618      	mov	r0, r3
 800088a:	f003 fe3d 	bl	8004508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0xe>
 8000890:	20000254 	.word	0x20000254

08000894 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 8000898:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <UsageFault_Handler+0x10>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f003 fe33 	bl	8004508 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80008a2:	e7fe      	b.n	80008a2 <UsageFault_Handler+0xe>
 80008a4:	20000254 	.word	0x20000254

080008a8 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0

}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80008d6:	f000 fdb9 	bl	800144c <HAL_IncTick>
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Function
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <USART2_IRQHandler+0x14>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f004 fdf6 	bl	80054dc <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 80008f0:	bf00      	nop
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000258 	.word	0x20000258

080008f8 <ADC_IRQHandler>:


//ADC_IRQHandler
//Interrupt Handler Function
void ADC_IRQHandler(void) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  QAD_ADC::handler();
 80008fc:	f7ff ff9a 	bl	8000834 <_ZN7QAD_ADC7handlerEv>
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>:
		//--------------------------
		//Constructors / Destructors

	QAD_I2C() = delete;                      //Delete the default class constructor, as we need an initialization structure to be provided on class creation.

	QAD_I2C(QAD_I2C_InitStruct& sInit) :     //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
		m_pSDA_GPIO(sInit.pSDA_GPIO),
		m_uSDA_Pin(sInit.uSDA_Pin),
		m_uSDA_AF(sInit.uSDA_AF),
		m_eIRQ_Event(I2C1_EV_IRQn),
		m_eIRQ_Error(I2C1_ER_IRQn),
		m_sHandle({0}) {}
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000914:	801a      	strh	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2201      	movs	r2, #1
 800091a:	709a      	strb	r2, [r3, #2]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2202      	movs	r2, #2
 8000920:	70da      	strb	r2, [r3, #3]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	711a      	strb	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2200      	movs	r2, #0
 800092c:	715a      	strb	r2, [r3, #5]
		m_eI2C(sInit.eI2C),
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	781a      	ldrb	r2, [r3, #0]
		m_sHandle({0}) {}
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	719a      	strb	r2, [r3, #6]
		m_uIRQPriority_Event(sInit.uIRQPriority_Event),
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	785a      	ldrb	r2, [r3, #1]
		m_sHandle({0}) {}
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	71da      	strb	r2, [r3, #7]
		m_uIRQPriority_Error(sInit.uIRQPriority_Error),
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	789a      	ldrb	r2, [r3, #2]
		m_sHandle({0}) {}
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	721a      	strb	r2, [r3, #8]
		m_uClockSpeed(sInit.uClockSpeed),
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685a      	ldr	r2, [r3, #4]
		m_sHandle({0}) {}
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	60da      	str	r2, [r3, #12]
		m_eDutyCycle(sInit.eDutyCycle),
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	689a      	ldr	r2, [r3, #8]
		m_sHandle({0}) {}
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	611a      	str	r2, [r3, #16]
		m_eAddressingMode(sInit.eAddressingMode),
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
		m_sHandle({0}) {}
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	615a      	str	r2, [r3, #20]
		m_eDualAddressingMode(sInit.eDualAddressingMode),
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	691a      	ldr	r2, [r3, #16]
		m_sHandle({0}) {}
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	619a      	str	r2, [r3, #24]
		m_eGeneralCallMode(sInit.eGeneralCallMode),
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	695a      	ldr	r2, [r3, #20]
		m_sHandle({0}) {}
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	61da      	str	r2, [r3, #28]
		m_eNoStretchMode(sInit.eNoStretchMode),
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	699a      	ldr	r2, [r3, #24]
		m_sHandle({0}) {}
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	621a      	str	r2, [r3, #32]
		m_uOwnAddress1(sInit.uOwnAddress1),
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	8b9a      	ldrh	r2, [r3, #28]
		m_sHandle({0}) {}
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	849a      	strh	r2, [r3, #36]	; 0x24
		m_uOwnAddress2(sInit.uOwnAddress2),
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	8bda      	ldrh	r2, [r3, #30]
		m_sHandle({0}) {}
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	84da      	strh	r2, [r3, #38]	; 0x26
		m_pSCL_GPIO(sInit.pSCL_GPIO),
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	6a1a      	ldr	r2, [r3, #32]
		m_sHandle({0}) {}
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	629a      	str	r2, [r3, #40]	; 0x28
		m_uSCL_Pin(sInit.uSCL_Pin),
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
		m_sHandle({0}) {}
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	859a      	strh	r2, [r3, #44]	; 0x2c
		m_uSCL_AF(sInit.uSCL_AF),
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
		m_sHandle({0}) {}
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		m_pSDA_GPIO(sInit.pSDA_GPIO),
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		m_sHandle({0}) {}
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
		m_uSDA_Pin(sInit.uSDA_Pin),
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
		m_sHandle({0}) {}
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	869a      	strh	r2, [r3, #52]	; 0x34
		m_uSDA_AF(sInit.uSDA_AF),
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
		m_sHandle({0}) {}
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	221f      	movs	r2, #31
 80009c2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2220      	movs	r2, #32
 80009ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	333c      	adds	r3, #60	; 0x3c
 80009d2:	2254      	movs	r2, #84	; 0x54
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 f8c4 	bl	8005b64 <memset>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
 80009ee:	460b      	mov	r3, r1
 80009f0:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 80009f2:	887a      	ldrh	r2, [r7, #2]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4611      	mov	r1, r2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 fa3d 	bl	8000e78 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	887a      	ldrh	r2, [r7, #2]
 8000a02:	809a      	strh	r2, [r3, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2200      	movs	r2, #0
 8000a08:	80da      	strh	r2, [r3, #6]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	811a      	strh	r2, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4618      	mov	r0, r3
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	4608      	mov	r0, r1
 8000a26:	4611      	mov	r1, r2
 8000a28:	461a      	mov	r2, r3
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	817b      	strh	r3, [r7, #10]
 8000a2e:	460b      	mov	r3, r1
 8000a30:	813b      	strh	r3, [r7, #8]
 8000a32:	4613      	mov	r3, r2
 8000a34:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3304      	adds	r3, #4
 8000a40:	f107 020a 	add.w	r2, r7, #10
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fa32 	bl	8000eb0 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3308      	adds	r3, #8
 8000a50:	f107 0208 	add.w	r2, r7, #8
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fa2a 	bl	8000eb0 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	731a      	strb	r2, [r3, #12]
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	2200      	movs	r2, #0
 8000a66:	735a      	strb	r2, [r3, #13]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	739a      	strb	r2, [r3, #14]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	79fa      	ldrb	r2, [r7, #7]
 8000a72:	73da      	strb	r2, [r3, #15]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	080064e8 	.word	0x080064e8

08000a84 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	769a      	strb	r2, [r3, #26]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2225      	movs	r2, #37	; 0x25
 8000ae0:	76da      	strb	r2, [r3, #27]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	331c      	adds	r3, #28
 8000ae6:	2244      	movs	r2, #68	; 0x44
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4618      	mov	r0, r3
 8000aec:	f005 f83a 	bl	8005b64 <memset>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4618      	mov	r0, r3
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	8b99      	ldrh	r1, [r3, #28]
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	8bda      	ldrh	r2, [r3, #30]
 8000b20:	2300      	movs	r3, #0
 8000b22:	f7ff ff7b 	bl	8000a1c <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	741a      	strb	r2, [r3, #16]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3314      	adds	r3, #20
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f9d2 	bl	8000ee6 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	08006524 	.word	0x08006524

08000b50 <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b0db      	sub	sp, #364	; 0x16c
 8000b54:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000b56:	f7ff fd41 	bl	80005dc <_Z16SystemInitializev>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf14      	ite	ne
 8000b60:	2301      	movne	r3, #1
 8000b62:	2300      	moveq	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d000      	beq.n	8000b6c <main+0x1c>
		while (1) {}
 8000b6a:	e7fe      	b.n	8000b6a <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000b6c:	2014      	movs	r0, #20
 8000b6e:	f004 ff80 	bl	8005a72 <_Znwj>
 8000b72:	4603      	mov	r3, r0
 8000b74:	461c      	mov	r4, r3
 8000b76:	2220      	movs	r2, #32
 8000b78:	49b4      	ldr	r1, [pc, #720]	; (8000e4c <main+0x2fc>)
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	f003 fca3 	bl	80044c6 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000b80:	4bb3      	ldr	r3, [pc, #716]	; (8000e50 <main+0x300>)
 8000b82:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000b84:	2301      	movs	r3, #1
 8000b86:	f887 3134 	strb.w	r3, [r7, #308]	; 0x134
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000b8a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000b92:	2308      	movs	r3, #8
 8000b94:	f887 313c 	strb.w	r3, [r7, #316]	; 0x13c
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000b98:	4bac      	ldr	r3, [pc, #688]	; (8000e4c <main+0x2fc>)
 8000b9a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	f8a7 3144 	strh.w	r3, [r7, #324]	; 0x144
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000baa:	4ba8      	ldr	r3, [pc, #672]	; (8000e4c <main+0x2fc>)
 8000bac:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	f8a7 314c 	strh.w	r3, [r7, #332]	; 0x14c
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	f887 314e 	strb.w	r3, [r7, #334]	; 0x14e
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc0:	f8a7 3150 	strh.w	r3, [r7, #336]	; 0x150
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	f8a7 3152 	strh.w	r3, [r7, #338]	; 0x152

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000bcc:	2018      	movs	r0, #24
 8000bce:	f004 ff50 	bl	8005a72 <_Znwj>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	461c      	mov	r4, r3
 8000bd6:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f7ff ff95 	bl	8000b0c <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000be2:	4b9c      	ldr	r3, [pc, #624]	; (8000e54 <main+0x304>)
 8000be4:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000be6:	4b9b      	ldr	r3, [pc, #620]	; (8000e54 <main+0x304>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f004 fc55 	bl	800549c <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d005      	beq.n	8000c0e <main+0xbe>
  	GPIO_UserLED->on();
 8000c02:	4b93      	ldr	r3, [pc, #588]	; (8000e50 <main+0x300>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f003 fc7e 	bl	8004508 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000c0c:	e7fe      	b.n	8000c0c <main+0xbc>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000c0e:	4b91      	ldr	r3, [pc, #580]	; (8000e54 <main+0x304>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f004 fca6 	bl	8005564 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000c18:	4b8e      	ldr	r3, [pc, #568]	; (8000e54 <main+0x304>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	498e      	ldr	r1, [pc, #568]	; (8000e58 <main+0x308>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f004 fc6c 	bl	80054fc <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  sprintf(strOut, "I2C Read: ID - %02X", uData);
  UART_STLink->txStringCR(strOut);*/


  QAD_I2C_InitStruct I2C_Init;
  I2C_Init.eI2C                = QAD_I2C2;
 8000c24:	2301      	movs	r3, #1
 8000c26:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
  I2C_Init.uIRQPriority_Event  = 0xE;
 8000c2a:	230e      	movs	r3, #14
 8000c2c:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
  I2C_Init.uIRQPriority_Error  = 0xE;
 8000c30:	230e      	movs	r3, #14
 8000c32:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
  I2C_Init.uClockSpeed         = 100000;
 8000c36:	4b89      	ldr	r3, [pc, #548]	; (8000e5c <main+0x30c>)
 8000c38:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  I2C_Init.eDutyCycle          = QAD_I2C_DutyCycle_2;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  I2C_Init.eAddressingMode     = QAD_I2C_AddressingMode_7Bit;
 8000c42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  I2C_Init.eDualAddressingMode = QAD_I2C_DualAddressingMode_Disable;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  I2C_Init.eGeneralCallMode    = QAD_I2C_GeneralCallMode_Disable;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  I2C_Init.eNoStretchMode      = QAD_I2C_NoStretchMode_Disable;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  I2C_Init.uOwnAddress1        = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8a7 3120 	strh.w	r3, [r7, #288]	; 0x120
  I2C_Init.uOwnAddress2        = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122

  I2C_Init.pSCL_GPIO           = GPIOB;
 8000c68:	4b7d      	ldr	r3, [pc, #500]	; (8000e60 <main+0x310>)
 8000c6a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  I2C_Init.uSCL_Pin            = GPIO_PIN_10;
 8000c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c72:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
  I2C_Init.uSCL_AF             = GPIO_AF4_I2C2;
 8000c76:	2304      	movs	r3, #4
 8000c78:	f887 312a 	strb.w	r3, [r7, #298]	; 0x12a

  I2C_Init.pSDA_GPIO           = GPIOB;
 8000c7c:	4b78      	ldr	r3, [pc, #480]	; (8000e60 <main+0x310>)
 8000c7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  I2C_Init.uSDA_Pin            = GPIO_PIN_3;
 8000c82:	2308      	movs	r3, #8
 8000c84:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
  I2C_Init.uSDA_AF             = GPIO_AF9_I2C2;
 8000c88:	2309      	movs	r3, #9
 8000c8a:	f887 3132 	strb.w	r3, [r7, #306]	; 0x132
  I2C_ADXL345 = new QAD_I2C(I2C_Init);
 8000c8e:	2090      	movs	r0, #144	; 0x90
 8000c90:	f004 feef 	bl	8005a72 <_Znwj>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461c      	mov	r4, r3
 8000c98:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f7ff fe30 	bl	8000904 <_ZN7QAD_I2CC1ER18QAD_I2C_InitStruct>
 8000ca4:	4b6f      	ldr	r3, [pc, #444]	; (8000e64 <main+0x314>)
 8000ca6:	601c      	str	r4, [r3, #0]

  if (I2C_ADXL345->init()) {
 8000ca8:	4b6e      	ldr	r3, [pc, #440]	; (8000e64 <main+0x314>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f003 fd68 	bl	8004782 <_ZN7QAD_I2C4initEv>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	bf14      	ite	ne
 8000cb8:	2301      	movne	r3, #1
 8000cba:	2300      	moveq	r3, #0
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00b      	beq.n	8000cda <main+0x18a>
  	UART_STLink->txStringCR("I2C1: Initialization Failed");
 8000cc2:	4b64      	ldr	r3, [pc, #400]	; (8000e54 <main+0x304>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4968      	ldr	r1, [pc, #416]	; (8000e68 <main+0x318>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f004 fc17 	bl	80054fc <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED->on();
 8000cce:	4b60      	ldr	r3, [pc, #384]	; (8000e50 <main+0x300>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fc18 	bl	8004508 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000cd8:	e7fe      	b.n	8000cd8 <main+0x188>
  }
  I2C_ADXL345->start();
 8000cda:	4b62      	ldr	r3, [pc, #392]	; (8000e64 <main+0x314>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 fd7a 	bl	80047d8 <_ZN7QAD_I2C5startEv>
  UART_STLink->txStringCR("I2C1: Initialized and Started");
 8000ce4:	4b5b      	ldr	r3, [pc, #364]	; (8000e54 <main+0x304>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4960      	ldr	r1, [pc, #384]	; (8000e6c <main+0x31c>)
 8000cea:	4618      	mov	r0, r3
 8000cec:	f004 fc06 	bl	80054fc <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Test ADXL345
  uint8_t testVal = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  char strOut[256];

  I2C_ADXL345->read8Bit(0x53 << 1, 0x00, &testVal);
 8000cf6:	4b5b      	ldr	r3, [pc, #364]	; (8000e64 <main+0x314>)
 8000cf8:	6818      	ldr	r0, [r3, #0]
 8000cfa:	f207 1303 	addw	r3, r7, #259	; 0x103
 8000cfe:	2200      	movs	r2, #0
 8000d00:	21a6      	movs	r1, #166	; 0xa6
 8000d02:	f003 fdb3 	bl	800486c <_ZN7QAD_I2C8read8BitEthPh>
  sprintf(strOut, "ADXL345 ID: %02X", testVal);
 8000d06:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4958      	ldr	r1, [pc, #352]	; (8000e70 <main+0x320>)
 8000d10:	4618      	mov	r0, r3
 8000d12:	f005 f82d 	bl	8005d70 <siprintf>
  UART_STLink->txStringCR(strOut);
 8000d16:	4b4f      	ldr	r3, [pc, #316]	; (8000e54 <main+0x304>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4610      	mov	r0, r2
 8000d22:	f004 fbeb 	bl	80054fc <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  testVal = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  I2C_ADXL345->write8Bit(0x53 << 1, 0x31, 0x00);
 8000d2c:	4b4d      	ldr	r3, [pc, #308]	; (8000e64 <main+0x314>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	2300      	movs	r3, #0
 8000d32:	2231      	movs	r2, #49	; 0x31
 8000d34:	21a6      	movs	r1, #166	; 0xa6
 8000d36:	f003 fd79 	bl	800482c <_ZN7QAD_I2C9write8BitEthh>
  I2C_ADXL345->read8Bit(0x53 << 1, 0x31, &testVal);
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <main+0x314>)
 8000d3c:	6818      	ldr	r0, [r3, #0]
 8000d3e:	f207 1303 	addw	r3, r7, #259	; 0x103
 8000d42:	2231      	movs	r2, #49	; 0x31
 8000d44:	21a6      	movs	r1, #166	; 0xa6
 8000d46:	f003 fd91 	bl	800486c <_ZN7QAD_I2C8read8BitEthPh>
  sprintf(strOut, "ADXL345 Data Format: %02X", testVal);
 8000d4a:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000d4e:	461a      	mov	r2, r3
 8000d50:	463b      	mov	r3, r7
 8000d52:	4948      	ldr	r1, [pc, #288]	; (8000e74 <main+0x324>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 f80b 	bl	8005d70 <siprintf>
  UART_STLink->txStringCR(strOut);
 8000d5a:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <main+0x304>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	4610      	mov	r0, r2
 8000d66:	f004 fbc9 	bl	80054fc <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  testVal = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
  I2C_ADXL345->write8Bit(0x53 << 1, 0x31, 0x04);
 8000d70:	4b3c      	ldr	r3, [pc, #240]	; (8000e64 <main+0x314>)
 8000d72:	6818      	ldr	r0, [r3, #0]
 8000d74:	2304      	movs	r3, #4
 8000d76:	2231      	movs	r2, #49	; 0x31
 8000d78:	21a6      	movs	r1, #166	; 0xa6
 8000d7a:	f003 fd57 	bl	800482c <_ZN7QAD_I2C9write8BitEthh>
  I2C_ADXL345->read8Bit(0x53 << 1, 0x31, &testVal);
 8000d7e:	4b39      	ldr	r3, [pc, #228]	; (8000e64 <main+0x314>)
 8000d80:	6818      	ldr	r0, [r3, #0]
 8000d82:	f207 1303 	addw	r3, r7, #259	; 0x103
 8000d86:	2231      	movs	r2, #49	; 0x31
 8000d88:	21a6      	movs	r1, #166	; 0xa6
 8000d8a:	f003 fd6f 	bl	800486c <_ZN7QAD_I2C8read8BitEthPh>
  sprintf(strOut, "ADXL345 Data Format: %02X", testVal);
 8000d8e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8000d92:	461a      	mov	r2, r3
 8000d94:	463b      	mov	r3, r7
 8000d96:	4937      	ldr	r1, [pc, #220]	; (8000e74 <main+0x324>)
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 ffe9 	bl	8005d70 <siprintf>
  UART_STLink->txStringCR(strOut);
 8000d9e:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <main+0x304>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	4610      	mov	r0, r2
 8000daa:	f004 fba7 	bl	80054fc <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000dae:	f000 fb61 	bl	8001474 <HAL_GetTick>
 8000db2:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160
	uint32_t uOldTick = uNewTick;
 8000db6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000dba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

  //Create task timing variables
	uint32_t uHeartbeatTicks = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000dc4:	f000 fb56 	bl	8001474 <HAL_GetTick>
 8000dc8:	f8c7 0154 	str.w	r0, [r7, #340]	; 0x154
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000dcc:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8000dd0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d01e      	beq.n	8000e16 <main+0x2c6>
    	uOldTick = uNewTick;
 8000dd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8000ddc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    	uNewTick = uCurTick;
 8000de0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000de4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000de8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000dec:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d208      	bcs.n	8000e06 <main+0x2b6>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000df4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000df8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000e04:	e00a      	b.n	8000e1c <main+0x2cc>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000e06:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8000e0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8000e0e:	1ad3      	subs	r3, r2, r3
 8000e10:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8000e14:	e002      	b.n	8000e1c <main+0x2cc>
    	}

    } else {
    	uTicks = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000e1c:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8000e20:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000e24:	4413      	add	r3, r2
 8000e26:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000e2a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000e2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e32:	d3c7      	bcc.n	8000dc4 <main+0x274>
    	GPIO_UserLED->toggle();
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <main+0x300>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f003 fb8b 	bl	8004554 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset heartbeat ticks
 8000e3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000e42:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e46:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    uCurTick = HAL_GetTick();
 8000e4a:	e7bb      	b.n	8000dc4 <main+0x274>
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	20000254 	.word	0x20000254
 8000e54:	20000258 	.word	0x20000258
 8000e58:	08006454 	.word	0x08006454
 8000e5c:	000186a0 	.word	0x000186a0
 8000e60:	40020400 	.word	0x40020400
 8000e64:	2000025c 	.word	0x2000025c
 8000e68:	08006474 	.word	0x08006474
 8000e6c:	08006490 	.word	0x08006490
 8000e70:	080064b0 	.word	0x080064b0
 8000e74:	080064c4 	.word	0x080064c4

08000e78 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000e82:	683c      	ldr	r4, [r7, #0]
 8000e84:	4620      	mov	r0, r4
 8000e86:	f004 fe05 	bl	8005a94 <_Znaj>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	4602      	mov	r2, r0
 8000e90:	1e63      	subs	r3, r4, #1
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db04      	blt.n	8000ea0 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000e96:	2100      	movs	r1, #0
 8000e98:	7011      	strb	r1, [r2, #0]
 8000e9a:	3201      	adds	r2, #1
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	e7f8      	b.n	8000e92 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000ea0:	4601      	mov	r1, r0
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f839 	bl	8000f1a <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd90      	pop	{r4, r7, pc}

08000eb0 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000eba:	6838      	ldr	r0, [r7, #0]
 8000ebc:	f000 f849 	bl	8000f52 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	881c      	ldrh	r4, [r3, #0]
 8000ec4:	200c      	movs	r0, #12
 8000ec6:	f004 fdd4 	bl	8005a72 <_Znwj>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461d      	mov	r5, r3
 8000ece:	4621      	mov	r1, r4
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	f7ff fd88 	bl	80009e6 <_ZN14QAT_FIFOBufferC1Et>
 8000ed6:	4629      	mov	r1, r5
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f000 f845 	bl	8000f68 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bdb0      	pop	{r4, r5, r7, pc}

08000ee6 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000ee6:	b5b0      	push	{r4, r5, r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f000 f855 	bl	8000fa0 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f004 fdba 	bl	8005a72 <_Znwj>
 8000efe:	4603      	mov	r3, r0
 8000f00:	461c      	mov	r4, r3
 8000f02:	4629      	mov	r1, r5
 8000f04:	4620      	mov	r0, r4
 8000f06:	f7ff fdbd 	bl	8000a84 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f000 f852 	bl	8000fb6 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bdb0      	pop	{r4, r5, r7, pc}

08000f1a <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f860 	bl	8000fee <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f867 	bl	8001016 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6839      	ldr	r1, [r7, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f85a 	bl	8001030 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f861 	bl	8001058 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f96:	4603      	mov	r3, r0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4618      	mov	r0, r3
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
 8000fbe:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6839      	ldr	r1, [r7, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 f854 	bl	8001072 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f85b 	bl	800109a <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f85a 	bl	80010b4 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff99 	bl	8000f38 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8001006:	4602      	mov	r2, r0
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	f000 f854 	bl	80010ce <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001026:	4603      	mov	r3, r0
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 f852 	bl	80010e6 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff9f 	bl	8000f86 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001048:	4602      	mov	r2, r0
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 f84c 	bl	8001100 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001068:	4603      	mov	r3, r0
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	6039      	str	r1, [r7, #0]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f84a 	bl	8001118 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ffa5 	bl	8000fd4 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 800108a:	4602      	mov	r2, r0
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f000 f844 	bl	8001132 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80010aa:	4603      	mov	r3, r0
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f843 	bl	800114a <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f847 	bl	800116a <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80010dc:	4603      	mov	r3, r0
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f000 f847 	bl	8001184 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f84b 	bl	80011a4 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 800110e:	4603      	mov	r3, r0
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f84b 	bl	80011be <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f84f 	bl	80011de <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001140:	4603      	mov	r3, r0
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f000 f850 	bl	80011f8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f858 	bl	8001210 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f859 	bl	800122c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 800117a:	4603      	mov	r3, r0
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f858 	bl	8001242 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f000 f860 	bl	800125a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f861 	bl	8001276 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f860 	bl	800128c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 f868 	bl	80012a4 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 f869 	bl	80012c0 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 80011ee:	4603      	mov	r3, r0
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f868 	bl	80012d6 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4618      	mov	r0, r3
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f84e 	bl	80012ec <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4618      	mov	r0, r3
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f834 	bl	8001302 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	return 1;
 800131c:	2301      	movs	r3, #1
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_kill>:

int _kill(int pid, int sig)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001332:	f004 fbd7 	bl	8005ae4 <__errno>
 8001336:	4603      	mov	r3, r0
 8001338:	2216      	movs	r2, #22
 800133a:	601a      	str	r2, [r3, #0]
	return -1;
 800133c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_exit>:

void _exit (int status)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001350:	f04f 31ff 	mov.w	r1, #4294967295
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffe7 	bl	8001328 <_kill>
	while (1) {}		/* Make sure we hang here */
 800135a:	e7fe      	b.n	800135a <_exit+0x12>

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f004 fbaa 	bl	8005ae4 <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20020000 	.word	0x20020000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	20000260 	.word	0x20000260
 80013c4:	200002d8 	.word	0x200002d8

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013cc:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <SystemInit+0x20>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a05      	ldr	r2, [pc, #20]	; (80013e8 <SystemInit+0x20>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_InitTick+0x54>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b12      	ldr	r3, [pc, #72]	; (8001444 <HAL_InitTick+0x58>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4619      	mov	r1, r3
 80013fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001402:	fbb3 f3f1 	udiv	r3, r3, r1
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fd29 	bl	8001e62 <HAL_SYSTICK_Config>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e00e      	b.n	8001438 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d80a      	bhi.n	8001436 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 fce3 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_InitTick+0x5c>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	e000      	b.n	8001438 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000000 	.word	0x20000000
 8001444:	20000008 	.word	0x20000008
 8001448:	20000004 	.word	0x20000004

0800144c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_IncTick+0x20>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	461a      	mov	r2, r3
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x24>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a04      	ldr	r2, [pc, #16]	; (8001470 <HAL_IncTick+0x24>)
 800145e:	6013      	str	r3, [r2, #0]
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000008 	.word	0x20000008
 8001470:	200002c0 	.word	0x200002c0

08001474 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  return uwTick;
 8001478:	4b03      	ldr	r3, [pc, #12]	; (8001488 <HAL_GetTick+0x14>)
 800147a:	681b      	ldr	r3, [r3, #0]
}
 800147c:	4618      	mov	r0, r3
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	200002c0 	.word	0x200002c0

0800148c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e033      	b.n	800150a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d109      	bne.n	80014be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f863 	bl	8001576 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d118      	bne.n	80014fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014d2:	f023 0302 	bic.w	r3, r3, #2
 80014d6:	f043 0202 	orr.w	r2, r3, #2
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 fa8c 	bl	80019fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f023 0303 	bic.w	r3, r3, #3
 80014f2:	f043 0201 	orr.w	r2, r3, #1
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
 80014fa:	e001      	b.n	8001500 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d101      	bne.n	8001528 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e022      	b.n	800156e <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f043 0202 	orr.w	r2, r3, #2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d108      	bne.n	8001564 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f000 f819 	bl	800158a <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800156c:	7bfb      	ldrb	r3, [r7, #15]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <HAL_ADC_MspDeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d101      	bne.n	80015ba <HAL_ADC_Start_IT+0x1a>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e0a1      	b.n	80016fe <HAL_ADC_Start_IT+0x15e>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d018      	beq.n	8001602 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 0201 	orr.w	r2, r2, #1
 80015de:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015e0:	4b4a      	ldr	r3, [pc, #296]	; (800170c <HAL_ADC_Start_IT+0x16c>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_ADC_Start_IT+0x170>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	0c9a      	lsrs	r2, r3, #18
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80015f4:	e002      	b.n	80015fc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b01      	cmp	r3, #1
 800160e:	d169      	bne.n	80016e4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800163a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800164a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800164e:	d106      	bne.n	800165e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	f023 0206 	bic.w	r2, r3, #6
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	645a      	str	r2, [r3, #68]	; 0x44
 800165c:	e002      	b.n	8001664 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166c:	4b29      	ldr	r3, [pc, #164]	; (8001714 <HAL_ADC_Start_IT+0x174>)
 800166e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001678:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6812      	ldr	r2, [r2, #0]
 8001684:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001688:	f043 0320 	orr.w	r3, r3, #32
 800168c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 031f 	and.w	r3, r3, #31
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d129      	bne.n	80016fc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e020      	b.n	80016fc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_ADC_Start_IT+0x178>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d11b      	bne.n	80016fc <HAL_ADC_Start_IT+0x15c>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d114      	bne.n	80016fc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	e00b      	b.n	80016fc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e8:	f043 0210 	orr.w	r2, r3, #16
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	20000000 	.word	0x20000000
 8001710:	431bde83 	.word	0x431bde83
 8001714:	40012300 	.word	0x40012300
 8001718:	40012000 	.word	0x40012000

0800171c <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_ADC_Stop_IT+0x16>
 800172e:	2302      	movs	r3, #2
 8001730:	e02b      	b.n	800178a <HAL_ADC_Stop_IT+0x6e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d113      	bne.n	8001780 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	6812      	ldr	r2, [r2, #0]
 8001762:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001766:	f023 0320 	bic.w	r3, r3, #32
 800176a:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x1c>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e113      	b.n	80019dc <HAL_ADC_ConfigChannel+0x244>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b09      	cmp	r3, #9
 80017c2:	d925      	bls.n	8001810 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68d9      	ldr	r1, [r3, #12]
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	3b1e      	subs	r3, #30
 80017da:	2207      	movs	r2, #7
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43da      	mvns	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	400a      	ands	r2, r1
 80017e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68d9      	ldr	r1, [r3, #12]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4618      	mov	r0, r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4403      	add	r3, r0
 8001802:	3b1e      	subs	r3, #30
 8001804:	409a      	lsls	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	e022      	b.n	8001856 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6919      	ldr	r1, [r3, #16]
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	461a      	mov	r2, r3
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	2207      	movs	r2, #7
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43da      	mvns	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	400a      	ands	r2, r1
 8001832:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6919      	ldr	r1, [r3, #16]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	4603      	mov	r3, r0
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	4403      	add	r3, r0
 800184c:	409a      	lsls	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b06      	cmp	r3, #6
 800185c:	d824      	bhi.n	80018a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b05      	subs	r3, #5
 8001870:	221f      	movs	r2, #31
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	400a      	ands	r2, r1
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b05      	subs	r3, #5
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34
 80018a6:	e04c      	b.n	8001942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b0c      	cmp	r3, #12
 80018ae:	d824      	bhi.n	80018fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	3b23      	subs	r3, #35	; 0x23
 80018c2:	221f      	movs	r2, #31
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43da      	mvns	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	400a      	ands	r2, r1
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b23      	subs	r3, #35	; 0x23
 80018ec:	fa00 f203 	lsl.w	r2, r0, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	631a      	str	r2, [r3, #48]	; 0x30
 80018f8:	e023      	b.n	8001942 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	3b41      	subs	r3, #65	; 0x41
 800190c:	221f      	movs	r2, #31
 800190e:	fa02 f303 	lsl.w	r3, r2, r3
 8001912:	43da      	mvns	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	400a      	ands	r2, r1
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	3b41      	subs	r3, #65	; 0x41
 8001936:	fa00 f203 	lsl.w	r2, r0, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001942:	4b29      	ldr	r3, [pc, #164]	; (80019e8 <HAL_ADC_ConfigChannel+0x250>)
 8001944:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a28      	ldr	r2, [pc, #160]	; (80019ec <HAL_ADC_ConfigChannel+0x254>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d10f      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1d8>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b12      	cmp	r3, #18
 8001956:	d10b      	bne.n	8001970 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1d      	ldr	r2, [pc, #116]	; (80019ec <HAL_ADC_ConfigChannel+0x254>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d12b      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x23a>
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1c      	ldr	r2, [pc, #112]	; (80019f0 <HAL_ADC_ConfigChannel+0x258>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d003      	beq.n	800198c <HAL_ADC_ConfigChannel+0x1f4>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b11      	cmp	r3, #17
 800198a:	d122      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_ADC_ConfigChannel+0x258>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d111      	bne.n	80019d2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_ADC_ConfigChannel+0x25c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_ADC_ConfigChannel+0x260>)
 80019b4:	fba2 2303 	umull	r2, r3, r2, r3
 80019b8:	0c9a      	lsrs	r2, r3, #18
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019c4:	e002      	b.n	80019cc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	3b01      	subs	r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f9      	bne.n	80019c6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	40012300 	.word	0x40012300
 80019ec:	40012000 	.word	0x40012000
 80019f0:	10000012 	.word	0x10000012
 80019f4:	20000000 	.word	0x20000000
 80019f8:	431bde83 	.word	0x431bde83

080019fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a04:	4b79      	ldr	r3, [pc, #484]	; (8001bec <ADC_Init+0x1f0>)
 8001a06:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	685a      	ldr	r2, [r3, #4]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	021a      	lsls	r2, r3, #8
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	430a      	orrs	r2, r1
 8001a66:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6899      	ldr	r1, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68da      	ldr	r2, [r3, #12]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8e:	4a58      	ldr	r2, [pc, #352]	; (8001bf0 <ADC_Init+0x1f4>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d022      	beq.n	8001ada <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6899      	ldr	r1, [r3, #8]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6899      	ldr	r1, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	e00f      	b.n	8001afa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001af8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0202 	bic.w	r2, r2, #2
 8001b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e1b      	ldrb	r3, [r3, #24]
 8001b14:	005a      	lsls	r2, r3, #1
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d01b      	beq.n	8001b60 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b36:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685a      	ldr	r2, [r3, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b46:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6859      	ldr	r1, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	3b01      	subs	r3, #1
 8001b54:	035a      	lsls	r2, r3, #13
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	e007      	b.n	8001b70 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	051a      	lsls	r2, r3, #20
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ba4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bb2:	025a      	lsls	r2, r3, #9
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6899      	ldr	r1, [r3, #8]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	029a      	lsls	r2, r3, #10
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	609a      	str	r2, [r3, #8]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40012300 	.word	0x40012300
 8001bf0:	0f000001 	.word	0x0f000001

08001bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c04:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c10:	4013      	ands	r3, r2
 8001c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c26:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <__NVIC_SetPriorityGrouping+0x44>)
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	60d3      	str	r3, [r2, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <__NVIC_GetPriorityGrouping+0x18>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	0a1b      	lsrs	r3, r3, #8
 8001c46:	f003 0307 	and.w	r3, r3, #7
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	db0b      	blt.n	8001c82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	f003 021f 	and.w	r2, r3, #31
 8001c70:	4907      	ldr	r1, [pc, #28]	; (8001c90 <__NVIC_EnableIRQ+0x38>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	095b      	lsrs	r3, r3, #5
 8001c78:	2001      	movs	r0, #1
 8001c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	db12      	blt.n	8001ccc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	f003 021f 	and.w	r2, r3, #31
 8001cac:	490a      	ldr	r1, [pc, #40]	; (8001cd8 <__NVIC_DisableIRQ+0x44>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cba:	3320      	adds	r3, #32
 8001cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc0:	f3bf 8f4f 	dsb	sy
}
 8001cc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cc6:	f3bf 8f6f 	isb	sy
}
 8001cca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff05 	bl	8001bf4 <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff1a 	bl	8001c3c <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff0d 	bl	8001c58 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff1d 	bl	8001c94 <__NVIC_DisableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff94 	bl	8001d98 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e159      	b.n	800214c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8148 	bne.w	8002146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80a2 	beq.w	8002146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b57      	ldr	r3, [pc, #348]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a56      	ldr	r2, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b54      	ldr	r3, [pc, #336]	; (8002164 <HAL_GPIO_Init+0x2e8>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a52      	ldr	r2, [pc, #328]	; (8002168 <HAL_GPIO_Init+0x2ec>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a49      	ldr	r2, [pc, #292]	; (800216c <HAL_GPIO_Init+0x2f0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d019      	beq.n	800207e <HAL_GPIO_Init+0x202>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a48      	ldr	r2, [pc, #288]	; (8002170 <HAL_GPIO_Init+0x2f4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <HAL_GPIO_Init+0x1fe>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a47      	ldr	r2, [pc, #284]	; (8002174 <HAL_GPIO_Init+0x2f8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00d      	beq.n	8002076 <HAL_GPIO_Init+0x1fa>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a46      	ldr	r2, [pc, #280]	; (8002178 <HAL_GPIO_Init+0x2fc>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d007      	beq.n	8002072 <HAL_GPIO_Init+0x1f6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a45      	ldr	r2, [pc, #276]	; (800217c <HAL_GPIO_Init+0x300>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_GPIO_Init+0x1f2>
 800206a:	2304      	movs	r3, #4
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800206e:	2307      	movs	r3, #7
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x204>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x204>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	; (8002168 <HAL_GPIO_Init+0x2ec>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209e:	4b38      	ldr	r3, [pc, #224]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c2:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ec:	4a24      	ldr	r2, [pc, #144]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_GPIO_Init+0x304>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b18      	ldr	r3, [pc, #96]	; (8002180 <HAL_GPIO_Init+0x304>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_GPIO_Init+0x304>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f aea2 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40013c00 	.word	0x40013c00

08002184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002184:	b480      	push	{r7}
 8002186:	b087      	sub	sp, #28
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	2300      	movs	r3, #0
 800219c:	617b      	str	r3, [r7, #20]
 800219e:	e0bb      	b.n	8002318 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a0:	2201      	movs	r2, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	f040 80ab 	bne.w	8002312 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80021bc:	4a5c      	ldr	r2, [pc, #368]	; (8002330 <HAL_GPIO_DeInit+0x1ac>)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	089b      	lsrs	r3, r3, #2
 80021c2:	3302      	adds	r3, #2
 80021c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	220f      	movs	r2, #15
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	68ba      	ldr	r2, [r7, #8]
 80021da:	4013      	ands	r3, r2
 80021dc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a54      	ldr	r2, [pc, #336]	; (8002334 <HAL_GPIO_DeInit+0x1b0>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_DeInit+0x96>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a53      	ldr	r2, [pc, #332]	; (8002338 <HAL_GPIO_DeInit+0x1b4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_DeInit+0x92>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a52      	ldr	r2, [pc, #328]	; (800233c <HAL_GPIO_DeInit+0x1b8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_DeInit+0x8e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a51      	ldr	r2, [pc, #324]	; (8002340 <HAL_GPIO_DeInit+0x1bc>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_DeInit+0x8a>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a50      	ldr	r2, [pc, #320]	; (8002344 <HAL_GPIO_DeInit+0x1c0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_DeInit+0x86>
 8002206:	2304      	movs	r3, #4
 8002208:	e008      	b.n	800221c <HAL_GPIO_DeInit+0x98>
 800220a:	2307      	movs	r3, #7
 800220c:	e006      	b.n	800221c <HAL_GPIO_DeInit+0x98>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_DeInit+0x98>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_DeInit+0x98>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_DeInit+0x98>
 800221a:	2300      	movs	r3, #0
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	429a      	cmp	r2, r3
 800222a:	d132      	bne.n	8002292 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800222c:	4b46      	ldr	r3, [pc, #280]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	43db      	mvns	r3, r3
 8002234:	4944      	ldr	r1, [pc, #272]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 8002236:	4013      	ands	r3, r2
 8002238:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	4941      	ldr	r1, [pc, #260]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 8002244:	4013      	ands	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002248:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	43db      	mvns	r3, r3
 8002250:	493d      	ldr	r1, [pc, #244]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 8002252:	4013      	ands	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002256:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	43db      	mvns	r3, r3
 800225e:	493a      	ldr	r1, [pc, #232]	; (8002348 <HAL_GPIO_DeInit+0x1c4>)
 8002260:	4013      	ands	r3, r2
 8002262:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	220f      	movs	r2, #15
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002274:	4a2e      	ldr	r2, [pc, #184]	; (8002330 <HAL_GPIO_DeInit+0x1ac>)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	089b      	lsrs	r3, r3, #2
 800227a:	3302      	adds	r3, #2
 800227c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	43da      	mvns	r2, r3
 8002284:	482a      	ldr	r0, [pc, #168]	; (8002330 <HAL_GPIO_DeInit+0x1ac>)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	400a      	ands	r2, r1
 800228c:	3302      	adds	r3, #2
 800228e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2103      	movs	r1, #3
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	08da      	lsrs	r2, r3, #3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3208      	adds	r2, #8
 80022b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	220f      	movs	r2, #15
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	08d2      	lsrs	r2, r2, #3
 80022c8:	4019      	ands	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2103      	movs	r1, #3
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	2101      	movs	r1, #1
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	fa01 f303 	lsl.w	r3, r1, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2103      	movs	r1, #3
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	401a      	ands	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	3301      	adds	r3, #1
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	2b0f      	cmp	r3, #15
 800231c:	f67f af40 	bls.w	80021a0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	371c      	adds	r7, #28
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40013800 	.word	0x40013800
 8002334:	40020000 	.word	0x40020000
 8002338:	40020400 	.word	0x40020400
 800233c:	40020800 	.word	0x40020800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40021000 	.word	0x40021000
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e12b      	b.n	80025ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f95d 	bl	8002666 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023e4:	f001 fc1c 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 80023e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4a81      	ldr	r2, [pc, #516]	; (80025f4 <HAL_I2C_Init+0x274>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d807      	bhi.n	8002404 <HAL_I2C_Init+0x84>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	4a80      	ldr	r2, [pc, #512]	; (80025f8 <HAL_I2C_Init+0x278>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	bf94      	ite	ls
 80023fc:	2301      	movls	r3, #1
 80023fe:	2300      	movhi	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e006      	b.n	8002412 <HAL_I2C_Init+0x92>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	4a7d      	ldr	r2, [pc, #500]	; (80025fc <HAL_I2C_Init+0x27c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	bf94      	ite	ls
 800240c:	2301      	movls	r3, #1
 800240e:	2300      	movhi	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e0e7      	b.n	80025ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a78      	ldr	r2, [pc, #480]	; (8002600 <HAL_I2C_Init+0x280>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	0c9b      	lsrs	r3, r3, #18
 8002424:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4a6a      	ldr	r2, [pc, #424]	; (80025f4 <HAL_I2C_Init+0x274>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d802      	bhi.n	8002454 <HAL_I2C_Init+0xd4>
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	3301      	adds	r3, #1
 8002452:	e009      	b.n	8002468 <HAL_I2C_Init+0xe8>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	4a69      	ldr	r2, [pc, #420]	; (8002604 <HAL_I2C_Init+0x284>)
 8002460:	fba2 2303 	umull	r2, r3, r2, r3
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	3301      	adds	r3, #1
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800247a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	495c      	ldr	r1, [pc, #368]	; (80025f4 <HAL_I2C_Init+0x274>)
 8002484:	428b      	cmp	r3, r1
 8002486:	d819      	bhi.n	80024bc <HAL_I2C_Init+0x13c>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e59      	subs	r1, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fbb1 f3f3 	udiv	r3, r1, r3
 8002496:	1c59      	adds	r1, r3, #1
 8002498:	f640 73fc 	movw	r3, #4092	; 0xffc
 800249c:	400b      	ands	r3, r1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_I2C_Init+0x138>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1e59      	subs	r1, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b6:	e051      	b.n	800255c <HAL_I2C_Init+0x1dc>
 80024b8:	2304      	movs	r3, #4
 80024ba:	e04f      	b.n	800255c <HAL_I2C_Init+0x1dc>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d111      	bne.n	80024e8 <HAL_I2C_Init+0x168>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	440b      	add	r3, r1
 80024d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d6:	3301      	adds	r3, #1
 80024d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf0c      	ite	eq
 80024e0:	2301      	moveq	r3, #1
 80024e2:	2300      	movne	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e012      	b.n	800250e <HAL_I2C_Init+0x18e>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	1e58      	subs	r0, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	440b      	add	r3, r1
 80024f6:	0099      	lsls	r1, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002504:	2b00      	cmp	r3, #0
 8002506:	bf0c      	ite	eq
 8002508:	2301      	moveq	r3, #1
 800250a:	2300      	movne	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <HAL_I2C_Init+0x196>
 8002512:	2301      	movs	r3, #1
 8002514:	e022      	b.n	800255c <HAL_I2C_Init+0x1dc>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10e      	bne.n	800253c <HAL_I2C_Init+0x1bc>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1e58      	subs	r0, r3, #1
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	440b      	add	r3, r1
 800252c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002530:	3301      	adds	r3, #1
 8002532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800253a:	e00f      	b.n	800255c <HAL_I2C_Init+0x1dc>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1e58      	subs	r0, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	460b      	mov	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	0099      	lsls	r1, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	6809      	ldr	r1, [r1, #0]
 8002560:	4313      	orrs	r3, r2
 8002562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69da      	ldr	r2, [r3, #28]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800258a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6911      	ldr	r1, [r2, #16]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68d2      	ldr	r2, [r2, #12]
 8002596:	4311      	orrs	r1, r2
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	430b      	orrs	r3, r1
 800259e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2220      	movs	r2, #32
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	000186a0 	.word	0x000186a0
 80025f8:	001e847f 	.word	0x001e847f
 80025fc:	003d08ff 	.word	0x003d08ff
 8002600:	431bde83 	.word	0x431bde83
 8002604:	10624dd3 	.word	0x10624dd3

08002608 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e021      	b.n	800265e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2224      	movs	r2, #36	; 0x24
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f821 	bl	800267a <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af02      	add	r7, sp, #8
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	4608      	mov	r0, r1
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	4603      	mov	r3, r0
 80026a0:	817b      	strh	r3, [r7, #10]
 80026a2:	460b      	mov	r3, r1
 80026a4:	813b      	strh	r3, [r7, #8]
 80026a6:	4613      	mov	r3, r2
 80026a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026aa:	f7fe fee3 	bl	8001474 <HAL_GetTick>
 80026ae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	f040 80d9 	bne.w	8002870 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2319      	movs	r3, #25
 80026c4:	2201      	movs	r2, #1
 80026c6:	496d      	ldr	r1, [pc, #436]	; (800287c <HAL_I2C_Mem_Write+0x1ec>)
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fc7f 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026d4:	2302      	movs	r3, #2
 80026d6:	e0cc      	b.n	8002872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_Mem_Write+0x56>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e0c5      	b.n	8002872 <HAL_I2C_Mem_Write+0x1e2>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d007      	beq.n	800270c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2221      	movs	r2, #33	; 0x21
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2240      	movs	r2, #64	; 0x40
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a3a      	ldr	r2, [r7, #32]
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a4d      	ldr	r2, [pc, #308]	; (8002880 <HAL_I2C_Mem_Write+0x1f0>)
 800274c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800274e:	88f8      	ldrh	r0, [r7, #6]
 8002750:	893a      	ldrh	r2, [r7, #8]
 8002752:	8979      	ldrh	r1, [r7, #10]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275a:	9300      	str	r3, [sp, #0]
 800275c:	4603      	mov	r3, r0
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fab6 	bl	8002cd0 <I2C_RequestMemoryWrite>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d052      	beq.n	8002810 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e081      	b.n	8002872 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fd00 	bl	8003178 <I2C_WaitOnTXEFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b04      	cmp	r3, #4
 8002784:	d107      	bne.n	8002796 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002794:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e06b      	b.n	8002872 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b4:	3b01      	subs	r3, #1
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d11b      	bne.n	8002810 <HAL_I2C_Mem_Write+0x180>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d017      	beq.n	8002810 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	781a      	ldrb	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1aa      	bne.n	800276e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fcec 	bl	80031fa <I2C_WaitOnBTFFlagUntilTimeout>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00d      	beq.n	8002844 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2b04      	cmp	r3, #4
 800282e:	d107      	bne.n	8002840 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e016      	b.n	8002872 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002852:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3718      	adds	r7, #24
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	00100002 	.word	0x00100002
 8002880:	ffff0000 	.word	0xffff0000

08002884 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800289e:	f7fe fde9 	bl	8001474 <HAL_GetTick>
 80028a2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b20      	cmp	r3, #32
 80028ae:	f040 8208 	bne.w	8002cc2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	2319      	movs	r3, #25
 80028b8:	2201      	movs	r2, #1
 80028ba:	497b      	ldr	r1, [pc, #492]	; (8002aa8 <HAL_I2C_Mem_Read+0x224>)
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 fb85 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
 80028ca:	e1fb      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Mem_Read+0x56>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e1f4      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d007      	beq.n	8002900 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2222      	movs	r2, #34	; 0x22
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002930:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4a5b      	ldr	r2, [pc, #364]	; (8002aac <HAL_I2C_Mem_Read+0x228>)
 8002940:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002942:	88f8      	ldrh	r0, [r7, #6]
 8002944:	893a      	ldrh	r2, [r7, #8]
 8002946:	8979      	ldrh	r1, [r7, #10]
 8002948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294a:	9301      	str	r3, [sp, #4]
 800294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4603      	mov	r3, r0
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fa52 	bl	8002dfc <I2C_RequestMemoryRead>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e1b0      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002966:	2b00      	cmp	r3, #0
 8002968:	d113      	bne.n	8002992 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296a:	2300      	movs	r3, #0
 800296c:	623b      	str	r3, [r7, #32]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	623b      	str	r3, [r7, #32]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	623b      	str	r3, [r7, #32]
 800297e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	e184      	b.n	8002c9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	2b01      	cmp	r3, #1
 8002998:	d11b      	bne.n	80029d2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e164      	b.n	8002c9c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d11b      	bne.n	8002a12 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fa:	2300      	movs	r3, #0
 80029fc:	61bb      	str	r3, [r7, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	e144      	b.n	8002c9c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	617b      	str	r3, [r7, #20]
 8002a26:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a28:	e138      	b.n	8002c9c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	f200 80f1 	bhi.w	8002c16 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d123      	bne.n	8002a84 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 fc1b 	bl	800327c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e139      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a82:	e10b      	b.n	8002c9c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d14e      	bne.n	8002b2a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a92:	2200      	movs	r2, #0
 8002a94:	4906      	ldr	r1, [pc, #24]	; (8002ab0 <HAL_I2C_Mem_Read+0x22c>)
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 fa98 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d008      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e10e      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
 8002aa6:	bf00      	nop
 8002aa8:	00100002 	.word	0x00100002
 8002aac:	ffff0000 	.word	0xffff0000
 8002ab0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	691a      	ldr	r2, [r3, #16]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	b2d2      	uxtb	r2, r2
 8002b02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b28:	e0b8      	b.n	8002c9c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b30:	2200      	movs	r2, #0
 8002b32:	4966      	ldr	r1, [pc, #408]	; (8002ccc <HAL_I2C_Mem_Read+0x448>)
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 fa49 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0bf      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	494f      	ldr	r1, [pc, #316]	; (8002ccc <HAL_I2C_Mem_Read+0x448>)
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fa1b 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e091      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c14:	e042      	b.n	8002c9c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 fb2e 	bl	800327c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e04c      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	691a      	ldr	r2, [r3, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	1c5a      	adds	r2, r3, #1
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0304 	and.w	r3, r3, #4
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	d118      	bne.n	8002c9c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f aec2 	bne.w	8002a2a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	e000      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
  }
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3728      	adds	r7, #40	; 0x28
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	00010004 	.word	0x00010004

08002cd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	4608      	mov	r0, r1
 8002cda:	4611      	mov	r1, r2
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4603      	mov	r3, r0
 8002ce0:	817b      	strh	r3, [r7, #10]
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	813b      	strh	r3, [r7, #8]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f960 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00d      	beq.n	8002d2e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d20:	d103      	bne.n	8002d2a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e05f      	b.n	8002dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d2e:	897b      	ldrh	r3, [r7, #10]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	492d      	ldr	r1, [pc, #180]	; (8002df8 <I2C_RequestMemoryWrite+0x128>)
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f998 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e04c      	b.n	8002dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	6a39      	ldr	r1, [r7, #32]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa02 	bl	8003178 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d107      	bne.n	8002d92 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e02b      	b.n	8002dee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d105      	bne.n	8002da8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9c:	893b      	ldrh	r3, [r7, #8]
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	611a      	str	r2, [r3, #16]
 8002da6:	e021      	b.n	8002dec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002da8:	893b      	ldrh	r3, [r7, #8]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	6a39      	ldr	r1, [r7, #32]
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f9dc 	bl	8003178 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d107      	bne.n	8002dde <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ddc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e005      	b.n	8002dee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002de2:	893b      	ldrh	r3, [r7, #8]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00010002 	.word	0x00010002

08002dfc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e24:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e34:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f8c2 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e5c:	d103      	bne.n	8002e66 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e0aa      	b.n	8002fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e78:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	6a3a      	ldr	r2, [r7, #32]
 8002e7e:	4952      	ldr	r1, [pc, #328]	; (8002fc8 <I2C_RequestMemoryRead+0x1cc>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f8fa 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e097      	b.n	8002fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea8:	6a39      	ldr	r1, [r7, #32]
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f964 	bl	8003178 <I2C_WaitOnTXEFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00d      	beq.n	8002ed2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d107      	bne.n	8002ece <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ecc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e076      	b.n	8002fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d105      	bne.n	8002ee4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	611a      	str	r2, [r3, #16]
 8002ee2:	e021      	b.n	8002f28 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee4:	893b      	ldrh	r3, [r7, #8]
 8002ee6:	0a1b      	lsrs	r3, r3, #8
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	6a39      	ldr	r1, [r7, #32]
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 f93e 	bl	8003178 <I2C_WaitOnTXEFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d107      	bne.n	8002f1a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e050      	b.n	8002fc0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f1e:	893b      	ldrh	r3, [r7, #8]
 8002f20:	b2da      	uxtb	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2a:	6a39      	ldr	r1, [r7, #32]
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f923 	bl	8003178 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00d      	beq.n	8002f54 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d107      	bne.n	8002f50 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e035      	b.n	8002fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f62:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f82b 	bl	8002fcc <I2C_WaitOnFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f8a:	d103      	bne.n	8002f94 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e013      	b.n	8002fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f98:	897b      	ldrh	r3, [r7, #10]
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	6a3a      	ldr	r2, [r7, #32]
 8002fac:	4906      	ldr	r1, [pc, #24]	; (8002fc8 <I2C_RequestMemoryRead+0x1cc>)
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f863 	bl	800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	00010002 	.word	0x00010002

08002fcc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	603b      	str	r3, [r7, #0]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fdc:	e025      	b.n	800302a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d021      	beq.n	800302a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe6:	f7fe fa45 	bl	8001474 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d116      	bne.n	800302a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e023      	b.n	8003072 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d10d      	bne.n	8003050 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	43da      	mvns	r2, r3
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4013      	ands	r3, r2
 8003040:	b29b      	uxth	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf0c      	ite	eq
 8003046:	2301      	moveq	r3, #1
 8003048:	2300      	movne	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	e00c      	b.n	800306a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf0c      	ite	eq
 8003062:	2301      	moveq	r3, #1
 8003064:	2300      	movne	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	429a      	cmp	r2, r3
 800306e:	d0b6      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b084      	sub	sp, #16
 800307e:	af00      	add	r7, sp, #0
 8003080:	60f8      	str	r0, [r7, #12]
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003088:	e051      	b.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d123      	bne.n	80030e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2220      	movs	r2, #32
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f043 0204 	orr.w	r2, r3, #4
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e046      	b.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e8:	d021      	beq.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fe f9c3 	bl	8001474 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d116      	bne.n	800312e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0220 	orr.w	r2, r3, #32
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e020      	b.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10c      	bne.n	8003152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	43da      	mvns	r2, r3
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	4013      	ands	r3, r2
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf14      	ite	ne
 800314a:	2301      	movne	r3, #1
 800314c:	2300      	moveq	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	e00b      	b.n	800316a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	43da      	mvns	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	4013      	ands	r3, r2
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf14      	ite	ne
 8003164:	2301      	movne	r3, #1
 8003166:	2300      	moveq	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d18d      	bne.n	800308a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	3710      	adds	r7, #16
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}

08003178 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003184:	e02d      	b.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 f8ce 	bl	8003328 <I2C_IsAcknowledgeFailed>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e02d      	b.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d021      	beq.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319e:	f7fe f969 	bl	8001474 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	68ba      	ldr	r2, [r7, #8]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d302      	bcc.n	80031b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d116      	bne.n	80031e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e007      	b.n	80031f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ec:	2b80      	cmp	r3, #128	; 0x80
 80031ee:	d1ca      	bne.n	8003186 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003206:	e02d      	b.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 f88d 	bl	8003328 <I2C_IsAcknowledgeFailed>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e02d      	b.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321e:	d021      	beq.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fe f928 	bl	8001474 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e007      	b.n	8003274 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d1ca      	bne.n	8003208 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003288:	e042      	b.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695b      	ldr	r3, [r3, #20]
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d119      	bne.n	80032cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f06f 0210 	mvn.w	r2, #16
 80032a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e029      	b.n	8003320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032cc:	f7fe f8d2 	bl	8001474 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d302      	bcc.n	80032e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d116      	bne.n	8003310 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331a:	2b40      	cmp	r3, #64	; 0x40
 800331c:	d1b5      	bne.n	800328a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d11b      	bne.n	8003378 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003348:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e264      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d075      	beq.n	8003492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033a6:	4ba3      	ldr	r3, [pc, #652]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d00c      	beq.n	80033cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4ba0      	ldr	r3, [pc, #640]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d112      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033be:	4b9d      	ldr	r3, [pc, #628]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ca:	d10b      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033cc:	4b99      	ldr	r3, [pc, #612]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d05b      	beq.n	8003490 <HAL_RCC_OscConfig+0x108>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d157      	bne.n	8003490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e23f      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ec:	d106      	bne.n	80033fc <HAL_RCC_OscConfig+0x74>
 80033ee:	4b91      	ldr	r3, [pc, #580]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a90      	ldr	r2, [pc, #576]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e01d      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x98>
 8003406:	4b8b      	ldr	r3, [pc, #556]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a8a      	ldr	r2, [pc, #552]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800340c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b88      	ldr	r3, [pc, #544]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a87      	ldr	r2, [pc, #540]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e00b      	b.n	8003438 <HAL_RCC_OscConfig+0xb0>
 8003420:	4b84      	ldr	r3, [pc, #528]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a83      	ldr	r2, [pc, #524]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	4b81      	ldr	r3, [pc, #516]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a80      	ldr	r2, [pc, #512]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d013      	beq.n	8003468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003440:	f7fe f818 	bl	8001474 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe f814 	bl	8001474 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b64      	cmp	r3, #100	; 0x64
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e204      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800345a:	4b76      	ldr	r3, [pc, #472]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f0      	beq.n	8003448 <HAL_RCC_OscConfig+0xc0>
 8003466:	e014      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe f804 	bl	8001474 <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003470:	f7fe f800 	bl	8001474 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b64      	cmp	r3, #100	; 0x64
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e1f0      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003482:	4b6c      	ldr	r3, [pc, #432]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0xe8>
 800348e:	e000      	b.n	8003492 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d063      	beq.n	8003566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00b      	beq.n	80034c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034aa:	4b62      	ldr	r3, [pc, #392]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d11c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b6:	4b5f      	ldr	r3, [pc, #380]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d116      	bne.n	80034f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c2:	4b5c      	ldr	r3, [pc, #368]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x152>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d001      	beq.n	80034da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e1c4      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b56      	ldr	r3, [pc, #344]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4952      	ldr	r1, [pc, #328]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	e03a      	b.n	8003566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d020      	beq.n	800353a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b4f      	ldr	r3, [pc, #316]	; (8003638 <HAL_RCC_OscConfig+0x2b0>)
 80034fa:	2201      	movs	r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034fe:	f7fd ffb9 	bl	8001474 <HAL_GetTick>
 8003502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003506:	f7fd ffb5 	bl	8001474 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e1a5      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003518:	4b46      	ldr	r3, [pc, #280]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0302 	and.w	r3, r3, #2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b43      	ldr	r3, [pc, #268]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	00db      	lsls	r3, r3, #3
 8003532:	4940      	ldr	r1, [pc, #256]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	4313      	orrs	r3, r2
 8003536:	600b      	str	r3, [r1, #0]
 8003538:	e015      	b.n	8003566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_OscConfig+0x2b0>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fd ff98 	bl	8001474 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003548:	f7fd ff94 	bl	8001474 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e184      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355a:	4b36      	ldr	r3, [pc, #216]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0308 	and.w	r3, r3, #8
 800356e:	2b00      	cmp	r3, #0
 8003570:	d030      	beq.n	80035d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <HAL_RCC_OscConfig+0x2b4>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003580:	f7fd ff78 	bl	8001474 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003588:	f7fd ff74 	bl	8001474 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e164      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800359a:	4b26      	ldr	r3, [pc, #152]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0x200>
 80035a6:	e015      	b.n	80035d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_RCC_OscConfig+0x2b4>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ae:	f7fd ff61 	bl	8001474 <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fd ff5d 	bl	8001474 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e14d      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b1a      	ldr	r3, [pc, #104]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80a0 	beq.w	8003722 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x2b8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d121      	bne.n	8003662 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <HAL_RCC_OscConfig+0x2b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a07      	ldr	r2, [pc, #28]	; (8003640 <HAL_RCC_OscConfig+0x2b8>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fd ff23 	bl	8001474 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e011      	b.n	8003656 <HAL_RCC_OscConfig+0x2ce>
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	42470000 	.word	0x42470000
 800363c:	42470e80 	.word	0x42470e80
 8003640:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003644:	f7fd ff16 	bl	8001474 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e106      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003656:	4b85      	ldr	r3, [pc, #532]	; (800386c <HAL_RCC_OscConfig+0x4e4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x2f0>
 800366a:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a80      	ldr	r2, [pc, #512]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	e01c      	b.n	80036b2 <HAL_RCC_OscConfig+0x32a>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b05      	cmp	r3, #5
 800367e:	d10c      	bne.n	800369a <HAL_RCC_OscConfig+0x312>
 8003680:	4b7b      	ldr	r3, [pc, #492]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003684:	4a7a      	ldr	r2, [pc, #488]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003686:	f043 0304 	orr.w	r3, r3, #4
 800368a:	6713      	str	r3, [r2, #112]	; 0x70
 800368c:	4b78      	ldr	r3, [pc, #480]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4a77      	ldr	r2, [pc, #476]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6713      	str	r3, [r2, #112]	; 0x70
 8003698:	e00b      	b.n	80036b2 <HAL_RCC_OscConfig+0x32a>
 800369a:	4b75      	ldr	r3, [pc, #468]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a74      	ldr	r2, [pc, #464]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
 80036a6:	4b72      	ldr	r3, [pc, #456]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a71      	ldr	r2, [pc, #452]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 80036ac:	f023 0304 	bic.w	r3, r3, #4
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d015      	beq.n	80036e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fd fedb 	bl	8001474 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7fd fed7 	bl	8001474 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e0c5      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d8:	4b65      	ldr	r3, [pc, #404]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 80036da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ee      	beq.n	80036c2 <HAL_RCC_OscConfig+0x33a>
 80036e4:	e014      	b.n	8003710 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fec5 	bl	8001474 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fec1 	bl	8001474 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e0af      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	4b5a      	ldr	r3, [pc, #360]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1ee      	bne.n	80036ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d105      	bne.n	8003722 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003716:	4b56      	ldr	r3, [pc, #344]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a55      	ldr	r2, [pc, #340]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 800371c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 809b 	beq.w	8003862 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372c:	4b50      	ldr	r3, [pc, #320]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
 8003734:	2b08      	cmp	r3, #8
 8003736:	d05c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d141      	bne.n	80037c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCC_OscConfig+0x4ec>)
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003746:	f7fd fe95 	bl	8001474 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374e:	f7fd fe91 	bl	8001474 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e081      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003760:	4b43      	ldr	r3, [pc, #268]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	019b      	lsls	r3, r3, #6
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	085b      	lsrs	r3, r3, #1
 8003784:	3b01      	subs	r3, #1
 8003786:	041b      	lsls	r3, r3, #16
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	061b      	lsls	r3, r3, #24
 8003790:	4937      	ldr	r1, [pc, #220]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003796:	4b37      	ldr	r3, [pc, #220]	; (8003874 <HAL_RCC_OscConfig+0x4ec>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379c:	f7fd fe6a 	bl	8001474 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fd fe66 	bl	8001474 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e056      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b6:	4b2e      	ldr	r3, [pc, #184]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f0      	beq.n	80037a4 <HAL_RCC_OscConfig+0x41c>
 80037c2:	e04e      	b.n	8003862 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c4:	4b2b      	ldr	r3, [pc, #172]	; (8003874 <HAL_RCC_OscConfig+0x4ec>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ca:	f7fd fe53 	bl	8001474 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037d2:	f7fd fe4f 	bl	8001474 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e03f      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e4:	4b22      	ldr	r3, [pc, #136]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1f0      	bne.n	80037d2 <HAL_RCC_OscConfig+0x44a>
 80037f0:	e037      	b.n	8003862 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e032      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037fe:	4b1c      	ldr	r3, [pc, #112]	; (8003870 <HAL_RCC_OscConfig+0x4e8>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d028      	beq.n	800385e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d121      	bne.n	800385e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d11a      	bne.n	800385e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800382e:	4013      	ands	r3, r2
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003834:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003836:	4293      	cmp	r3, r2
 8003838:	d111      	bne.n	800385e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	3b01      	subs	r3, #1
 8003848:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d107      	bne.n	800385e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003858:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800385a:	429a      	cmp	r2, r3
 800385c:	d001      	beq.n	8003862 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3718      	adds	r7, #24
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40007000 	.word	0x40007000
 8003870:	40023800 	.word	0x40023800
 8003874:	42470060 	.word	0x42470060

08003878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0cc      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800388c:	4b68      	ldr	r3, [pc, #416]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	429a      	cmp	r2, r3
 8003898:	d90c      	bls.n	80038b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	4b65      	ldr	r3, [pc, #404]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	b2d2      	uxtb	r2, r2
 80038a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a2:	4b63      	ldr	r3, [pc, #396]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d001      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0b8      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d020      	beq.n	8003902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038cc:	4b59      	ldr	r3, [pc, #356]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a58      	ldr	r2, [pc, #352]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0308 	and.w	r3, r3, #8
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e4:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	4a52      	ldr	r2, [pc, #328]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f0:	4b50      	ldr	r3, [pc, #320]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	494d      	ldr	r1, [pc, #308]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d044      	beq.n	8003998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	4b47      	ldr	r3, [pc, #284]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d119      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e07f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d003      	beq.n	8003936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	2b03      	cmp	r3, #3
 8003934:	d107      	bne.n	8003946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b3f      	ldr	r3, [pc, #252]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d101      	bne.n	8003956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e067      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003956:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f023 0203 	bic.w	r2, r3, #3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	4934      	ldr	r1, [pc, #208]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	4313      	orrs	r3, r2
 8003966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003968:	f7fd fd84 	bl	8001474 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396e:	e00a      	b.n	8003986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003970:	f7fd fd80 	bl	8001474 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e04f      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 020c 	and.w	r2, r3, #12
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	429a      	cmp	r2, r3
 8003996:	d1eb      	bne.n	8003970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003998:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d20c      	bcs.n	80039c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ae:	4b20      	ldr	r3, [pc, #128]	; (8003a30 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d001      	beq.n	80039c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e032      	b.n	8003a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	4916      	ldr	r1, [pc, #88]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039ea:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	490e      	ldr	r1, [pc, #56]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039fe:	f000 f821 	bl	8003a44 <HAL_RCC_GetSysClockFreq>
 8003a02:	4602      	mov	r2, r0
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	091b      	lsrs	r3, r3, #4
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	490a      	ldr	r1, [pc, #40]	; (8003a38 <HAL_RCC_ClockConfig+0x1c0>)
 8003a10:	5ccb      	ldrb	r3, [r1, r3]
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	4a09      	ldr	r2, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a1a:	4b09      	ldr	r3, [pc, #36]	; (8003a40 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fd fce4 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023c00 	.word	0x40023c00
 8003a34:	40023800 	.word	0x40023800
 8003a38:	08006504 	.word	0x08006504
 8003a3c:	20000000 	.word	0x20000000
 8003a40:	20000004 	.word	0x20000004

08003a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a44:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	2300      	movs	r3, #0
 8003a56:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5c:	4b67      	ldr	r3, [pc, #412]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d00d      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x40>
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	f200 80bd 	bhi.w	8003be8 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x34>
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d003      	beq.n	8003a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a76:	e0b7      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003a7a:	60bb      	str	r3, [r7, #8]
       break;
 8003a7c:	e0b7      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7e:	4b61      	ldr	r3, [pc, #388]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003a80:	60bb      	str	r3, [r7, #8]
      break;
 8003a82:	e0b4      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a84:	4b5d      	ldr	r3, [pc, #372]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a8e:	4b5b      	ldr	r3, [pc, #364]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04d      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9a:	4b58      	ldr	r3, [pc, #352]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	099b      	lsrs	r3, r3, #6
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	ea02 0800 	and.w	r8, r2, r0
 8003ab2:	ea03 0901 	and.w	r9, r3, r1
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	4649      	mov	r1, r9
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	014b      	lsls	r3, r1, #5
 8003ac4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ac8:	0142      	lsls	r2, r0, #5
 8003aca:	4610      	mov	r0, r2
 8003acc:	4619      	mov	r1, r3
 8003ace:	ebb0 0008 	subs.w	r0, r0, r8
 8003ad2:	eb61 0109 	sbc.w	r1, r1, r9
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	018b      	lsls	r3, r1, #6
 8003ae0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ae4:	0182      	lsls	r2, r0, #6
 8003ae6:	1a12      	subs	r2, r2, r0
 8003ae8:	eb63 0301 	sbc.w	r3, r3, r1
 8003aec:	f04f 0000 	mov.w	r0, #0
 8003af0:	f04f 0100 	mov.w	r1, #0
 8003af4:	00d9      	lsls	r1, r3, #3
 8003af6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003afa:	00d0      	lsls	r0, r2, #3
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	eb12 0208 	adds.w	r2, r2, r8
 8003b04:	eb43 0309 	adc.w	r3, r3, r9
 8003b08:	f04f 0000 	mov.w	r0, #0
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	0259      	lsls	r1, r3, #9
 8003b12:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b16:	0250      	lsls	r0, r2, #9
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4610      	mov	r0, r2
 8003b1e:	4619      	mov	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	461a      	mov	r2, r3
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	f7fc fbb2 	bl	8000290 <__aeabi_uldivmod>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4613      	mov	r3, r2
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e04a      	b.n	8003bcc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b36:	4b31      	ldr	r3, [pc, #196]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b46:	f04f 0100 	mov.w	r1, #0
 8003b4a:	ea02 0400 	and.w	r4, r2, r0
 8003b4e:	ea03 0501 	and.w	r5, r3, r1
 8003b52:	4620      	mov	r0, r4
 8003b54:	4629      	mov	r1, r5
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	014b      	lsls	r3, r1, #5
 8003b60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b64:	0142      	lsls	r2, r0, #5
 8003b66:	4610      	mov	r0, r2
 8003b68:	4619      	mov	r1, r3
 8003b6a:	1b00      	subs	r0, r0, r4
 8003b6c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b70:	f04f 0200 	mov.w	r2, #0
 8003b74:	f04f 0300 	mov.w	r3, #0
 8003b78:	018b      	lsls	r3, r1, #6
 8003b7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b7e:	0182      	lsls	r2, r0, #6
 8003b80:	1a12      	subs	r2, r2, r0
 8003b82:	eb63 0301 	sbc.w	r3, r3, r1
 8003b86:	f04f 0000 	mov.w	r0, #0
 8003b8a:	f04f 0100 	mov.w	r1, #0
 8003b8e:	00d9      	lsls	r1, r3, #3
 8003b90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b94:	00d0      	lsls	r0, r2, #3
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	1912      	adds	r2, r2, r4
 8003b9c:	eb45 0303 	adc.w	r3, r5, r3
 8003ba0:	f04f 0000 	mov.w	r0, #0
 8003ba4:	f04f 0100 	mov.w	r1, #0
 8003ba8:	0299      	lsls	r1, r3, #10
 8003baa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bae:	0290      	lsls	r0, r2, #10
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	f7fc fb66 	bl	8000290 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4613      	mov	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	0c1b      	lsrs	r3, r3, #16
 8003bd2:	f003 0303 	and.w	r3, r3, #3
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	60bb      	str	r3, [r7, #8]
      break;
 8003be6:	e002      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003bea:	60bb      	str	r3, [r7, #8]
      break;
 8003bec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bee:	68bb      	ldr	r3, [r7, #8]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	007a1200 	.word	0x007a1200

08003c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000000 	.word	0x20000000

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a9b      	lsrs	r3, r3, #10
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4903      	ldr	r1, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c36:	5ccb      	ldrb	r3, [r1, r3]
 8003c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08006514 	.word	0x08006514

08003c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c4c:	f7ff ffdc 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c50:	4602      	mov	r2, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0b5b      	lsrs	r3, r3, #13
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4903      	ldr	r1, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5e:	5ccb      	ldrb	r3, [r1, r3]
 8003c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08006514 	.word	0x08006514

08003c70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e03f      	b.n	8003d02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d106      	bne.n	8003c9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f866 	bl	8003d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2224      	movs	r2, #36	; 0x24
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f86b 	bl	8003d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	691a      	ldr	r2, [r3, #16]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68da      	ldr	r2, [r3, #12]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ce8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b082      	sub	sp, #8
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e021      	b.n	8003d60 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2224      	movs	r2, #36	; 0x24
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d32:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f821 	bl	8003d7c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3708      	adds	r7, #8
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d94:	b09f      	sub	sp, #124	; 0x7c
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da6:	68d9      	ldr	r1, [r3, #12]
 8003da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	ea40 0301 	orr.w	r3, r0, r1
 8003db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dd4:	f021 010c 	bic.w	r1, r1, #12
 8003dd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dde:	430b      	orrs	r3, r1
 8003de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	6999      	ldr	r1, [r3, #24]
 8003df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	ea40 0301 	orr.w	r3, r0, r1
 8003df8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	4bc5      	ldr	r3, [pc, #788]	; (8004114 <UART_SetConfig+0x384>)
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d004      	beq.n	8003e0e <UART_SetConfig+0x7e>
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4bc3      	ldr	r3, [pc, #780]	; (8004118 <UART_SetConfig+0x388>)
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d103      	bne.n	8003e16 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e0e:	f7ff ff1b 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8003e12:	6778      	str	r0, [r7, #116]	; 0x74
 8003e14:	e002      	b.n	8003e1c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e16:	f7ff ff03 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8003e1a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e24:	f040 80b6 	bne.w	8003f94 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2a:	461c      	mov	r4, r3
 8003e2c:	f04f 0500 	mov.w	r5, #0
 8003e30:	4622      	mov	r2, r4
 8003e32:	462b      	mov	r3, r5
 8003e34:	1891      	adds	r1, r2, r2
 8003e36:	6439      	str	r1, [r7, #64]	; 0x40
 8003e38:	415b      	adcs	r3, r3
 8003e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e3c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e40:	1912      	adds	r2, r2, r4
 8003e42:	eb45 0303 	adc.w	r3, r5, r3
 8003e46:	f04f 0000 	mov.w	r0, #0
 8003e4a:	f04f 0100 	mov.w	r1, #0
 8003e4e:	00d9      	lsls	r1, r3, #3
 8003e50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e54:	00d0      	lsls	r0, r2, #3
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	1911      	adds	r1, r2, r4
 8003e5c:	6639      	str	r1, [r7, #96]	; 0x60
 8003e5e:	416b      	adcs	r3, r5
 8003e60:	667b      	str	r3, [r7, #100]	; 0x64
 8003e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f04f 0300 	mov.w	r3, #0
 8003e6c:	1891      	adds	r1, r2, r2
 8003e6e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e70:	415b      	adcs	r3, r3
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003e78:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003e7c:	f7fc fa08 	bl	8000290 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4ba5      	ldr	r3, [pc, #660]	; (800411c <UART_SetConfig+0x38c>)
 8003e86:	fba3 2302 	umull	r2, r3, r3, r2
 8003e8a:	095b      	lsrs	r3, r3, #5
 8003e8c:	011e      	lsls	r6, r3, #4
 8003e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e90:	461c      	mov	r4, r3
 8003e92:	f04f 0500 	mov.w	r5, #0
 8003e96:	4622      	mov	r2, r4
 8003e98:	462b      	mov	r3, r5
 8003e9a:	1891      	adds	r1, r2, r2
 8003e9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003e9e:	415b      	adcs	r3, r3
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ea6:	1912      	adds	r2, r2, r4
 8003ea8:	eb45 0303 	adc.w	r3, r5, r3
 8003eac:	f04f 0000 	mov.w	r0, #0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	00d9      	lsls	r1, r3, #3
 8003eb6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003eba:	00d0      	lsls	r0, r2, #3
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	1911      	adds	r1, r2, r4
 8003ec2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ec4:	416b      	adcs	r3, r5
 8003ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f04f 0300 	mov.w	r3, #0
 8003ed2:	1891      	adds	r1, r2, r2
 8003ed4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ed6:	415b      	adcs	r3, r3
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ede:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ee2:	f7fc f9d5 	bl	8000290 <__aeabi_uldivmod>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4b8c      	ldr	r3, [pc, #560]	; (800411c <UART_SetConfig+0x38c>)
 8003eec:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef0:	095b      	lsrs	r3, r3, #5
 8003ef2:	2164      	movs	r1, #100	; 0x64
 8003ef4:	fb01 f303 	mul.w	r3, r1, r3
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	3332      	adds	r3, #50	; 0x32
 8003efe:	4a87      	ldr	r2, [pc, #540]	; (800411c <UART_SetConfig+0x38c>)
 8003f00:	fba2 2303 	umull	r2, r3, r2, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f0c:	441e      	add	r6, r3
 8003f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f10:	4618      	mov	r0, r3
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	1894      	adds	r4, r2, r2
 8003f1c:	623c      	str	r4, [r7, #32]
 8003f1e:	415b      	adcs	r3, r3
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
 8003f22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f26:	1812      	adds	r2, r2, r0
 8003f28:	eb41 0303 	adc.w	r3, r1, r3
 8003f2c:	f04f 0400 	mov.w	r4, #0
 8003f30:	f04f 0500 	mov.w	r5, #0
 8003f34:	00dd      	lsls	r5, r3, #3
 8003f36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f3a:	00d4      	lsls	r4, r2, #3
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	462b      	mov	r3, r5
 8003f40:	1814      	adds	r4, r2, r0
 8003f42:	653c      	str	r4, [r7, #80]	; 0x50
 8003f44:	414b      	adcs	r3, r1
 8003f46:	657b      	str	r3, [r7, #84]	; 0x54
 8003f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	1891      	adds	r1, r2, r2
 8003f54:	61b9      	str	r1, [r7, #24]
 8003f56:	415b      	adcs	r3, r3
 8003f58:	61fb      	str	r3, [r7, #28]
 8003f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f5e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003f62:	f7fc f995 	bl	8000290 <__aeabi_uldivmod>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4b6c      	ldr	r3, [pc, #432]	; (800411c <UART_SetConfig+0x38c>)
 8003f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f70:	095b      	lsrs	r3, r3, #5
 8003f72:	2164      	movs	r1, #100	; 0x64
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	3332      	adds	r3, #50	; 0x32
 8003f7e:	4a67      	ldr	r2, [pc, #412]	; (800411c <UART_SetConfig+0x38c>)
 8003f80:	fba2 2303 	umull	r2, r3, r2, r3
 8003f84:	095b      	lsrs	r3, r3, #5
 8003f86:	f003 0207 	and.w	r2, r3, #7
 8003f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4432      	add	r2, r6
 8003f90:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f92:	e0b9      	b.n	8004108 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f96:	461c      	mov	r4, r3
 8003f98:	f04f 0500 	mov.w	r5, #0
 8003f9c:	4622      	mov	r2, r4
 8003f9e:	462b      	mov	r3, r5
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	6139      	str	r1, [r7, #16]
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fac:	1912      	adds	r2, r2, r4
 8003fae:	eb45 0303 	adc.w	r3, r5, r3
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f04f 0100 	mov.w	r1, #0
 8003fba:	00d9      	lsls	r1, r3, #3
 8003fbc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fc0:	00d0      	lsls	r0, r2, #3
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	eb12 0804 	adds.w	r8, r2, r4
 8003fca:	eb43 0905 	adc.w	r9, r3, r5
 8003fce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f04f 0100 	mov.w	r1, #0
 8003fd8:	f04f 0200 	mov.w	r2, #0
 8003fdc:	f04f 0300 	mov.w	r3, #0
 8003fe0:	008b      	lsls	r3, r1, #2
 8003fe2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fe6:	0082      	lsls	r2, r0, #2
 8003fe8:	4640      	mov	r0, r8
 8003fea:	4649      	mov	r1, r9
 8003fec:	f7fc f950 	bl	8000290 <__aeabi_uldivmod>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <UART_SetConfig+0x38c>)
 8003ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	011e      	lsls	r6, r3, #4
 8003ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004000:	4618      	mov	r0, r3
 8004002:	f04f 0100 	mov.w	r1, #0
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	1894      	adds	r4, r2, r2
 800400c:	60bc      	str	r4, [r7, #8]
 800400e:	415b      	adcs	r3, r3
 8004010:	60fb      	str	r3, [r7, #12]
 8004012:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004016:	1812      	adds	r2, r2, r0
 8004018:	eb41 0303 	adc.w	r3, r1, r3
 800401c:	f04f 0400 	mov.w	r4, #0
 8004020:	f04f 0500 	mov.w	r5, #0
 8004024:	00dd      	lsls	r5, r3, #3
 8004026:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800402a:	00d4      	lsls	r4, r2, #3
 800402c:	4622      	mov	r2, r4
 800402e:	462b      	mov	r3, r5
 8004030:	1814      	adds	r4, r2, r0
 8004032:	64bc      	str	r4, [r7, #72]	; 0x48
 8004034:	414b      	adcs	r3, r1
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4618      	mov	r0, r3
 800403e:	f04f 0100 	mov.w	r1, #0
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	008b      	lsls	r3, r1, #2
 800404c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004050:	0082      	lsls	r2, r0, #2
 8004052:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004056:	f7fc f91b 	bl	8000290 <__aeabi_uldivmod>
 800405a:	4602      	mov	r2, r0
 800405c:	460b      	mov	r3, r1
 800405e:	4b2f      	ldr	r3, [pc, #188]	; (800411c <UART_SetConfig+0x38c>)
 8004060:	fba3 1302 	umull	r1, r3, r3, r2
 8004064:	095b      	lsrs	r3, r3, #5
 8004066:	2164      	movs	r1, #100	; 0x64
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	3332      	adds	r3, #50	; 0x32
 8004072:	4a2a      	ldr	r2, [pc, #168]	; (800411c <UART_SetConfig+0x38c>)
 8004074:	fba2 2303 	umull	r2, r3, r2, r3
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800407e:	441e      	add	r6, r3
 8004080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004082:	4618      	mov	r0, r3
 8004084:	f04f 0100 	mov.w	r1, #0
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	1894      	adds	r4, r2, r2
 800408e:	603c      	str	r4, [r7, #0]
 8004090:	415b      	adcs	r3, r3
 8004092:	607b      	str	r3, [r7, #4]
 8004094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004098:	1812      	adds	r2, r2, r0
 800409a:	eb41 0303 	adc.w	r3, r1, r3
 800409e:	f04f 0400 	mov.w	r4, #0
 80040a2:	f04f 0500 	mov.w	r5, #0
 80040a6:	00dd      	lsls	r5, r3, #3
 80040a8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040ac:	00d4      	lsls	r4, r2, #3
 80040ae:	4622      	mov	r2, r4
 80040b0:	462b      	mov	r3, r5
 80040b2:	eb12 0a00 	adds.w	sl, r2, r0
 80040b6:	eb43 0b01 	adc.w	fp, r3, r1
 80040ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4618      	mov	r0, r3
 80040c0:	f04f 0100 	mov.w	r1, #0
 80040c4:	f04f 0200 	mov.w	r2, #0
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	008b      	lsls	r3, r1, #2
 80040ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040d2:	0082      	lsls	r2, r0, #2
 80040d4:	4650      	mov	r0, sl
 80040d6:	4659      	mov	r1, fp
 80040d8:	f7fc f8da 	bl	8000290 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4b0e      	ldr	r3, [pc, #56]	; (800411c <UART_SetConfig+0x38c>)
 80040e2:	fba3 1302 	umull	r1, r3, r3, r2
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	2164      	movs	r1, #100	; 0x64
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	3332      	adds	r3, #50	; 0x32
 80040f4:	4a09      	ldr	r2, [pc, #36]	; (800411c <UART_SetConfig+0x38c>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	f003 020f 	and.w	r2, r3, #15
 8004100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4432      	add	r2, r6
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	377c      	adds	r7, #124	; 0x7c
 800410c:	46bd      	mov	sp, r7
 800410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004112:	bf00      	nop
 8004114:	40011000 	.word	0x40011000
 8004118:	40011400 	.word	0x40011400
 800411c:	51eb851f 	.word	0x51eb851f

08004120 <_ZN7QAD_ADC11imp_handlerEv>:
	//-----------------------
	//QAD_ADC Handler Methods

//QAD_ADC::imp_handler
//QAD_ADC Handler Method
void QAD_ADC::imp_handler(void) {
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

	//Check for overrun error
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_OVR)) {
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b20      	cmp	r3, #32
 8004134:	bf0c      	ite	eq
 8004136:	2301      	moveq	r3, #1
 8004138:	2300      	movne	r3, #0
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <_ZN7QAD_ADC11imp_handlerEv+0x36>
		imp_stop();
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f951 	bl	80043e8 <_ZN7QAD_ADC8imp_stopEv>
		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_OVR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414a:	f06f 0220 	mvn.w	r2, #32
 800414e:	601a      	str	r2, [r3, #0]
		imp_start();
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f839 	bl	80041c8 <_ZN7QAD_ADC9imp_startEv>
	}

	//Check for end of conversion
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_EOC)) {
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	bf0c      	ite	eq
 8004164:	2301      	moveq	r3, #1
 8004166:	2300      	movne	r3, #0
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d028      	beq.n	80041c0 <_ZN7QAD_ADC11imp_handlerEv+0xa0>

		m_uData[m_uDataIdx] = m_sADCHandle.Instance->DR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800417a:	b291      	uxth	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	33cc      	adds	r3, #204	; 0xcc
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	4413      	add	r3, r2
 8004184:	460a      	mov	r2, r1
 8004186:	80da      	strh	r2, [r3, #6]
		if (m_uDataIdx >= (m_uChannelCount-1))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800418e:	461a      	mov	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8004196:	3b01      	subs	r3, #1
 8004198:	429a      	cmp	r2, r3
 800419a:	db04      	blt.n	80041a6 <_ZN7QAD_ADC11imp_handlerEv+0x86>
			m_uDataIdx = 0; else
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 80041a4:	e007      	b.n	80041b6 <_ZN7QAD_ADC11imp_handlerEv+0x96>
			m_uDataIdx++;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 80041ac:	3301      	adds	r3, #1
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_EOC);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f06f 0202 	mvn.w	r2, #2
 80041be:	601a      	str	r2, [r3, #0]
	}
}
 80041c0:	bf00      	nop
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_ZN7QAD_ADC9imp_startEv>:
	//-----------------------
	//QAD_ADC Control Methods

//QAD_ADC::imp_start
//QAD_ADC Control Method
QA_Result QAD_ADC::imp_start(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	if ((m_eState) || (!m_uChannelCount))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <_ZN7QAD_ADC9imp_startEv+0x1a>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <_ZN7QAD_ADC9imp_startEv+0x1e>
		return QA_Fail;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0f9      	b.n	80043da <_ZN7QAD_ADC9imp_startEv+0x212>

	//Initialize ADC
	m_sADCHandle.Instance                   = ADC1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a7e      	ldr	r2, [pc, #504]	; (80043e4 <_ZN7QAD_ADC9imp_startEv+0x21c>)
 80041ea:	655a      	str	r2, [r3, #84]	; 0x54
	m_sADCHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80041f2:	659a      	str	r2, [r3, #88]	; 0x58
	m_sADCHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sADCHandle.Init.ScanConvMode          = ENABLE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	665a      	str	r2, [r3, #100]	; 0x64
	m_sADCHandle.Init.ContinuousConvMode    = DISABLE;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sADCHandle.Init.DiscontinuousConvMode = DISABLE;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sADCHandle.Init.NbrOfDiscConversion   = 0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	679a      	str	r2, [r3, #120]	; 0x78
	m_sADCHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sADCHandle.Init.ExternalTrigConv      = imp_getTrigger();
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f933 	bl	800448c <_ZN7QAD_ADC14imp_getTriggerEv>
 8004226:	4602      	mov	r2, r0
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sADCHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	661a      	str	r2, [r3, #96]	; 0x60
	m_sADCHandle.Init.NbrOfConversion       = m_uChannelCount;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8004238:	461a      	mov	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	671a      	str	r2, [r3, #112]	; 0x70
	m_sADCHandle.Init.DMAContinuousRequests = ENABLE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2201      	movs	r2, #1
 8004242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	m_sADCHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_ADC_Init(&m_sADCHandle) != HAL_OK) {
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3354      	adds	r3, #84	; 0x54
 8004250:	4618      	mov	r0, r3
 8004252:	f7fd f91b 	bl	800148c <HAL_ADC_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	bf14      	ite	ne
 800425c:	2301      	movne	r3, #1
 800425e:	2300      	moveq	r3, #0
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <_ZN7QAD_ADC9imp_startEv+0xa8>
		imp_stop();
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f8be 	bl	80043e8 <_ZN7QAD_ADC8imp_stopEv>
		return QA_Fail;
 800426c:	2301      	movs	r3, #1
 800426e:	e0b4      	b.n	80043da <_ZN7QAD_ADC9imp_startEv+0x212>
	}

	//Channel GPIO Configuration
	GPIO_InitTypeDef GPIO_Init = {0};
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	60da      	str	r2, [r3, #12]
 800427e:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode  = GPIO_MODE_ANALOG;
 8004280:	2303      	movs	r3, #3
 8004282:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Pull  = GPIO_NOPULL;
 8004284:	2300      	movs	r3, #0
 8004286:	623b      	str	r3, [r7, #32]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8004288:	2300      	movs	r3, #0
 800428a:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800428c:	2300      	movs	r3, #0
 800428e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8004298:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800429c:	429a      	cmp	r2, r3
 800429e:	d22e      	bcs.n	80042fe <_ZN7QAD_ADC9imp_startEv+0x136>
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 80042a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	330a      	adds	r3, #10
 80042a8:	011b      	lsls	r3, r3, #4
 80042aa:	4413      	add	r3, r2
 80042ac:	3304      	adds	r3, #4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b11      	cmp	r3, #17
 80042b2:	d109      	bne.n	80042c8 <_ZN7QAD_ADC9imp_startEv+0x100>
				(m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVBat)) {
 80042b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	330a      	adds	r3, #10
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	3304      	adds	r3, #4
 80042c2:	681b      	ldr	r3, [r3, #0]
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 80042c4:	2b12      	cmp	r3, #18
 80042c6:	d014      	beq.n	80042f2 <_ZN7QAD_ADC9imp_startEv+0x12a>
			GPIO_Init.Pin       = m_sChannels[i].uPin;
 80042c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	4413      	add	r3, r2
 80042d2:	33a0      	adds	r3, #160	; 0xa0
 80042d4:	881b      	ldrh	r3, [r3, #0]
 80042d6:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 80042d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	339c      	adds	r3, #156	; 0x9c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f107 0218 	add.w	r2, r7, #24
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fd fdc5 	bl	8001e7c <HAL_GPIO_Init>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80042f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80042f6:	3301      	adds	r3, #1
 80042f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80042fc:	e7c9      	b.n	8004292 <_ZN7QAD_ADC9imp_startEv+0xca>
		}
	}


	//Channel Configuration
	ADC_ChannelConfTypeDef  ADCChannel_Init = {0};
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	2200      	movs	r2, #0
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	609a      	str	r2, [r3, #8]
 800430a:	60da      	str	r2, [r3, #12]
	ADCChannel_Init.Offset        = 0;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8004310:	2300      	movs	r3, #0
 8004312:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800431c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004320:	429a      	cmp	r2, r3
 8004322:	d230      	bcs.n	8004386 <_ZN7QAD_ADC9imp_startEv+0x1be>
		ADCChannel_Init.Channel       = m_sChannels[i].eChannel;
 8004324:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	330a      	adds	r3, #10
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	60bb      	str	r3, [r7, #8]
		ADCChannel_Init.Rank          = i+1;
 8004336:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
		ADCChannel_Init.SamplingTime = m_sChannels[i].eSamplingTime;
 800433e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	330a      	adds	r3, #10
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	4413      	add	r3, r2
 800434a:	3308      	adds	r3, #8
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&m_sADCHandle, &ADCChannel_Init) != HAL_OK) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3354      	adds	r3, #84	; 0x54
 8004354:	f107 0208 	add.w	r2, r7, #8
 8004358:	4611      	mov	r1, r2
 800435a:	4618      	mov	r0, r3
 800435c:	f7fd fa1c 	bl	8001798 <HAL_ADC_ConfigChannel>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	bf14      	ite	ne
 8004366:	2301      	movne	r3, #1
 8004368:	2300      	moveq	r3, #0
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b00      	cmp	r3, #0
 800436e:	d004      	beq.n	800437a <_ZN7QAD_ADC9imp_startEv+0x1b2>
			imp_stop();
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 f839 	bl	80043e8 <_ZN7QAD_ADC8imp_stopEv>
			return QA_Fail;
 8004376:	2301      	movs	r3, #1
 8004378:	e02f      	b.n	80043da <_ZN7QAD_ADC9imp_startEv+0x212>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800437a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800437e:	3301      	adds	r3, #1
 8004380:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004384:	e7c7      	b.n	8004316 <_ZN7QAD_ADC9imp_startEv+0x14e>
		}

	}

	//Clear Data
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8004386:	2300      	movs	r3, #0
 8004388:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800438c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d80d      	bhi.n	80043b0 <_ZN7QAD_ADC9imp_startEv+0x1e8>
		m_uData[i] = 0;
 8004394:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	33cc      	adds	r3, #204	; 0xcc
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	4413      	add	r3, r2
 80043a0:	2200      	movs	r2, #0
 80043a2:	80da      	strh	r2, [r3, #6]
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 80043a4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80043a8:	3301      	adds	r3, #1
 80043aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80043ae:	e7ed      	b.n	800438c <_ZN7QAD_ADC9imp_startEv+0x1c4>
	m_uDataIdx = 0;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

	//Enable ADC IRQ
	HAL_ADC_Start_IT(&m_sADCHandle);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3354      	adds	r3, #84	; 0x54
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd f8ef 	bl	80015a0 <HAL_ADC_Start_IT>
	__HAL_TIM_ENABLE(&m_sTIMHandle);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f042 0201 	orr.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

	//Set States
	m_eState = QA_Active;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3730      	adds	r7, #48	; 0x30
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40012000 	.word	0x40012000

080043e8 <_ZN7QAD_ADC8imp_stopEv>:


//QAD_ADC::imp_stop
//QAD_ADC Control Method
void QAD_ADC::imp_stop(void) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

	//Disable ADC IRQ
	__HAL_TIM_DISABLE(&m_sTIMHandle);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	6a1a      	ldr	r2, [r3, #32]
 80043f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d014      	beq.n	8004434 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	6a1a      	ldr	r2, [r3, #32]
 8004410:	f240 4344 	movw	r3, #1092	; 0x444
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d007      	beq.n	8004434 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&m_sADCHandle);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3354      	adds	r3, #84	; 0x54
 8004438:	4618      	mov	r0, r3
 800443a:	f7fd f96f 	bl	800171c <HAL_ADC_Stop_IT>

	//GPIO Deinitialization
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800443e:	2300      	movs	r3, #0
 8004440:	73fb      	strb	r3, [r7, #15]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	429a      	cmp	r2, r3
 800444c:	d212      	bcs.n	8004474 <_ZN7QAD_ADC8imp_stopEv+0x8c>
		HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	339c      	adds	r3, #156	; 0x9c
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	4413      	add	r3, r2
 8004462:	33a0      	adds	r3, #160	; 0xa0
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	4619      	mov	r1, r3
 8004468:	f7fd fe8c 	bl	8002184 <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	3301      	adds	r3, #1
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e7e6      	b.n	8004442 <_ZN7QAD_ADC8imp_stopEv+0x5a>
	}

	//Deinitialize ADC
	HAL_ADC_DeInit(&m_sADCHandle);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3354      	adds	r3, #84	; 0x54
 8004478:	4618      	mov	r0, r3
 800447a:	f7fd f84a 	bl	8001512 <HAL_ADC_DeInit>

	//Set States
	m_eState = QA_Inactive;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	705a      	strb	r2, [r3, #1]
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <_ZN7QAD_ADC14imp_getTriggerEv>:
	//--------------------
	//QAD_ADC Tool Methods

//QAD_ADC::imp_getTrigger
//QAD_ADC Tool Method
uint32_t QAD_ADC::imp_getTrigger(void) {
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
	uint32_t uTrigger;
	switch (m_eTimer) {
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	789b      	ldrb	r3, [r3, #2]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d002      	beq.n	80044a2 <_ZN7QAD_ADC14imp_getTriggerEv+0x16>
 800449c:	2b02      	cmp	r3, #2
 800449e:	d004      	beq.n	80044aa <_ZN7QAD_ADC14imp_getTriggerEv+0x1e>
 80044a0:	e007      	b.n	80044b2 <_ZN7QAD_ADC14imp_getTriggerEv+0x26>
		case QAD_Timer2:
			uTrigger = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80044a2:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 80044a6:	60fb      	str	r3, [r7, #12]
			break;
 80044a8:	e006      	b.n	80044b8 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		case QAD_Timer3:
			uTrigger = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80044aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80044ae:	60fb      	str	r3, [r7, #12]
			break;
 80044b0:	e002      	b.n	80044b8 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		default:
			uTrigger = 0xFFFFFFFF;
 80044b2:	f04f 33ff 	mov.w	r3, #4294967295
 80044b6:	60fb      	str	r3, [r7, #12]
	}
	return uTrigger;
 80044b8:	68fb      	ldr	r3, [r7, #12]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	809a      	strh	r2, [r3, #4]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	719a      	strb	r2, [r3, #6]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f841 	bl	8004580 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4618      	mov	r0, r3
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	889b      	ldrh	r3, [r3, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	4619      	mov	r1, r3
 800451c:	f7fd ff16 	bl	800234c <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	741a      	strb	r2, [r3, #16]
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	889b      	ldrh	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	4619      	mov	r1, r3
 8004542:	f7fd ff03 	bl	800234c <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	741a      	strb	r2, [r3, #16]
}
 800454c:	bf00      	nop
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b082      	sub	sp, #8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	7c1b      	ldrb	r3, [r3, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8004564:	2b01      	cmp	r3, #1
 8004566:	d107      	bne.n	8004578 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7ff ffe0 	bl	800452e <_ZN15QAD_GPIO_Output3offEv>
	    break;
 800456e:	e003      	b.n	8004578 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ffc9 	bl	8004508 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8004576:	bf00      	nop
	}
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8004580:	b580      	push	{r7, lr}
 8004582:	b088      	sub	sp, #32
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8004588:	f107 030c 	add.w	r3, r7, #12
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	60da      	str	r2, [r3, #12]
 8004596:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	889b      	ldrh	r3, [r3, #4]
 800459c:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	799b      	ldrb	r3, [r3, #6]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 80045a6:	2311      	movs	r3, #17
 80045a8:	e000      	b.n	80045ac <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 80045aa:	2301      	movs	r3, #1
 80045ac:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f107 020c 	add.w	r2, r7, #12
 80045c2:	4611      	mov	r1, r2
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fd fc59 	bl	8001e7c <HAL_GPIO_Init>
}
 80045ca:	bf00      	nop
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
	...

080045d4 <_ZN10QAD_I2CMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_I2CMgr& get(void) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
		static QAD_I2CMgr instance;
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <_ZN10QAD_I2CMgr3getEv+0x48>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f3bf 8f5b 	dmb	ish
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf0c      	ite	eq
 80045ea:	2301      	moveq	r3, #1
 80045ec:	2300      	movne	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d010      	beq.n	8004616 <_ZN10QAD_I2CMgr3getEv+0x42>
 80045f4:	4809      	ldr	r0, [pc, #36]	; (800461c <_ZN10QAD_I2CMgr3getEv+0x48>)
 80045f6:	f001 fa2d 	bl	8005a54 <__cxa_guard_acquire>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <_ZN10QAD_I2CMgr3getEv+0x42>
 800460a:	4805      	ldr	r0, [pc, #20]	; (8004620 <_ZN10QAD_I2CMgr3getEv+0x4c>)
 800460c:	f000 fcf2 	bl	8004ff4 <_ZN10QAD_I2CMgrC1Ev>
 8004610:	4802      	ldr	r0, [pc, #8]	; (800461c <_ZN10QAD_I2CMgr3getEv+0x48>)
 8004612:	f001 fa2b 	bl	8005a6c <__cxa_guard_release>
		return instance;
 8004616:	4b02      	ldr	r3, [pc, #8]	; (8004620 <_ZN10QAD_I2CMgr3getEv+0x4c>)
	}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000288 	.word	0x20000288
 8004620:	20000264 	.word	0x20000264

08004624 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_I2C_PeriphState enum) of a I2C peripheral
	//eI2C - The I2C peripheral to retrieve the state for. Member of QAD_I2C_Periph
	//Returns a member of QAD_I2C_State enum (QAD_I2C_Unused, etc)
	static QAD_I2C_State getState(QAD_I2C_Periph eI2C) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x14>
			return QAD_I2C_InvalidDevice;
 8004634:	2304      	movs	r3, #4
 8004636:	e00a      	b.n	800464e <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].eState;
 8004638:	f7ff ffcc 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 800463c:	4601      	mov	r1, r0
 800463e:	79fa      	ldrb	r2, [r7, #7]
 8004640:	4613      	mov	r3, r2
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3301      	adds	r3, #1
 800464c:	781b      	ldrb	r3, [r3, #0]
	}
 800464e:	4618      	mov	r0, r3
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>:


	//Used to retrieve an instance for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the instance for. Member of QAD_I2C_Periph
	//Returns I2C_TypeDef, as defined in stm32f411xe.h
	static I2C_TypeDef* getInstance(QAD_I2C_Periph eI2C) {
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8004660:	79fb      	ldrb	r3, [r7, #7]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d901      	bls.n	800466a <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x14>
			return NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	e00a      	b.n	8004680 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph+0x2a>

		return get().m_sI2Cs[eI2C].pInstance;
 800466a:	f7ff ffb3 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 800466e:	4601      	mov	r1, r0
 8004670:	79fa      	ldrb	r2, [r7, #7]
 8004672:	4613      	mov	r3, r2
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	3304      	adds	r3, #4
 800467e:	681b      	ldr	r3, [r3, #0]
	}
 8004680:	4618      	mov	r0, r3
 8004682:	3708      	adds	r7, #8
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>:


	//Used to retrieve an Event IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQEvent(QAD_I2C_Periph eI2C) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d902      	bls.n	800469e <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 8004698:	f06f 0309 	mvn.w	r3, #9
 800469c:	e00b      	b.n	80046b6 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Event;
 800469e:	f7ff ff99 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 80046a2:	4601      	mov	r1, r0
 80046a4:	79fa      	ldrb	r2, [r7, #7]
 80046a6:	4613      	mov	r3, r2
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	3308      	adds	r3, #8
 80046b2:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>:


	//Used to retrieve an Error IRQ Enum for an I2C peripheral
	//eI2C - The I2C peripheral to retrieve the IRQ enum for. Member of QAD_I2C_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQError(QAD_I2C_Periph eI2C) {
 80046be:	b580      	push	{r7, lr}
 80046c0:	b082      	sub	sp, #8
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	4603      	mov	r3, r0
 80046c6:	71fb      	strb	r3, [r7, #7]
		if (eI2C >= QAD_I2CNone)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d902      	bls.n	80046d4 <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x16>
			return UsageFault_IRQn;
 80046ce:	f06f 0309 	mvn.w	r3, #9
 80046d2:	e00b      	b.n	80046ec <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph+0x2e>

		return get().m_sI2Cs[eI2C].eIRQ_Error;
 80046d4:	f7ff ff7e 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 80046d8:	4601      	mov	r1, r0
 80046da:	79fa      	ldrb	r2, [r7, #7]
 80046dc:	4613      	mov	r3, r2
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	4413      	add	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	3309      	adds	r3, #9
 80046e8:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
	//Management Methods

	//Used to register an I2C peripheral as being used by a driver
	//eI2C - the I2C peripheral to be registered
	//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
	static QA_Result registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	460a      	mov	r2, r1
 80046fe:	71fb      	strb	r3, [r7, #7]
 8004700:	4613      	mov	r3, r2
 8004702:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerI2C(eI2C, eMode);
 8004704:	f7ff ff66 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 8004708:	79ba      	ldrb	r2, [r7, #6]
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	4619      	mov	r1, r3
 800470e:	f000 fcbb 	bl	8005088 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>
 8004712:	4603      	mov	r3, r0
	}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>:


	//Used to deregister an I2C to mark it as no longer being used by a driver
	//eI2C - the I2C Peripheral to be deregistered
	static void deregisterI2C(QAD_I2C_Periph eI2C) {
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterI2C(eI2C);
 8004726:	f7ff ff55 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 800472a:	4602      	mov	r2, r0
 800472c:	79fb      	ldrb	r3, [r7, #7]
 800472e:	4619      	mov	r1, r3
 8004730:	4610      	mov	r0, r2
 8004732:	f000 fcd4 	bl	80050de <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>
	}
 8004736:	bf00      	nop
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to enable the clock for
	static void enableClock(QAD_I2C_Periph eI2C) {
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	4603      	mov	r3, r0
 8004746:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eI2C);
 8004748:	f7ff ff44 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 800474c:	4602      	mov	r2, r0
 800474e:	79fb      	ldrb	r3, [r7, #7]
 8004750:	4619      	mov	r1, r3
 8004752:	4610      	mov	r0, r2
 8004754:	f000 fcde 	bl	8005114 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>
	}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>:

	//Used to disable the clock for a specific I2C peripheral
	//eI2C - the I2C peripheral to disable the clock for
	static void disableClock(QAD_I2C_Periph eI2C) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eI2C);
 800476a:	f7ff ff33 	bl	80045d4 <_ZN10QAD_I2CMgr3getEv>
 800476e:	4602      	mov	r2, r0
 8004770:	79fb      	ldrb	r3, [r7, #7]
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f000 fd3b 	bl	80051f0 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>
	}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <_ZN7QAD_I2C4initEv>:
//QAD_I2C::init
//QAD_I2C Initialization Method
//
//Used to initialize the I2C driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result aas defined in setup.hpp)
QA_Result QAD_I2C::init(void) {
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]

	//Check if selected I2C peripheral is currently available
  if (QAD_I2CMgr::getState(m_eI2C))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	799b      	ldrb	r3, [r3, #6]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff48 	bl	8004624 <_ZN10QAD_I2CMgr8getStateE14QAD_I2C_Periph>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	bf14      	ite	ne
 800479a:	2301      	movne	r3, #1
 800479c:	2300      	moveq	r3, #0
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <_ZN7QAD_I2C4initEv+0x26>
  	return QA_Error_PeriphBusy;
 80047a4:	2302      	movs	r3, #2
 80047a6:	e013      	b.n	80047d0 <_ZN7QAD_I2C4initEv+0x4e>

  //Register I2C peripheral as now being in use
  QAD_I2CMgr::registerI2C(m_eI2C, QAD_I2C_InUse_Master);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	799b      	ldrb	r3, [r3, #6]
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ffa0 	bl	80046f4 <_ZN10QAD_I2CMgr11registerI2CE14QAD_I2C_Periph13QAD_I2C_State>

  //Initialize I2C peripheral
  QA_Result eRes = periphInit();
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f875 	bl	80048a4 <_ZN7QAD_I2C10periphInitEv>
 80047ba:	4603      	mov	r3, r0
 80047bc:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister I2C peripheral
  if (eRes)
 80047be:	7bfb      	ldrb	r3, [r7, #15]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d004      	beq.n	80047ce <_ZN7QAD_I2C4initEv+0x4c>
  	QAD_I2CMgr::deregisterI2C(m_eI2C);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	799b      	ldrb	r3, [r3, #6]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff ffa7 	bl	800471c <_ZN10QAD_I2CMgr13deregisterI2CE14QAD_I2C_Periph>

  //Return initialization result
  return eRes;
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <_ZN7QAD_I2C5startEv>:

//QAD_I2C::start
//QAD_I2C Control Method
//
//Used to enable the I2C driver
void QAD_I2C::start(void) {
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  __HAL_I2C_ENABLE(&m_sHandle);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
  m_eState = QA_Active;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	715a      	strb	r2, [r3, #5]
}
 80047f6:	bf00      	nop
 80047f8:	370c      	adds	r7, #12
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <_ZN7QAD_I2C4stopEv>:

//QAD_I2C::stop
//QAD_I2C Control Method
//
//Used to disable the I2C driver
void QAD_I2C::stop(void) {
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  __HAL_I2C_DISABLE(&m_sHandle);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
  m_eState = QA_Inactive;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	715a      	strb	r2, [r3, #5]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <_ZN7QAD_I2C9write8BitEthh>:
//Used to write a value to an I2C device connected to the bus, using an 8bit register address and 8bit data
//uAddr  - The address of the I2C device to write to
//uReg   - The register address to access on the I2C device that is being written to
//uValue - The value to write to the I2C device
//Returns QA_OK if successful, or QA_Fail if unable to perform write
QA_Result QAD_I2C::write8Bit(uint16_t uAddr, uint8_t uReg, uint8_t uValue) {
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af02      	add	r7, sp, #8
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	4608      	mov	r0, r1
 8004836:	4611      	mov	r1, r2
 8004838:	461a      	mov	r2, r3
 800483a:	4603      	mov	r3, r0
 800483c:	807b      	strh	r3, [r7, #2]
 800483e:	460b      	mov	r3, r1
 8004840:	707b      	strb	r3, [r7, #1]
 8004842:	4613      	mov	r3, r2
 8004844:	703b      	strb	r3, [r7, #0]
  return write((uint16_t)uAddr, (uint16_t)uReg, m_uMemAddrSize8Bit, (uint8_t*)&uValue, 1);
 8004846:	787b      	ldrb	r3, [r7, #1]
 8004848:	b29a      	uxth	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	789b      	ldrb	r3, [r3, #2]
 800484e:	b298      	uxth	r0, r3
 8004850:	8879      	ldrh	r1, [r7, #2]
 8004852:	2301      	movs	r3, #1
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	463b      	mov	r3, r7
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4603      	mov	r3, r0
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f912 	bl	8004a86 <_ZN7QAD_I2C5writeEtttPht>
 8004862:	4603      	mov	r3, r0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <_ZN7QAD_I2C8read8BitEthPh>:
//Used to read a value from an I2C device connected to the bus, using an 8bit register address and 8bit data
//uAddr  - The address of the I2C device to read from
//uReg   - The register address to access on the I2C device that is being read from
//pValue - A pointer to a uint8_t where the read data will be stored
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read8Bit(uint16_t uAddr, uint8_t uReg, uint8_t* pValue) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af02      	add	r7, sp, #8
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	607b      	str	r3, [r7, #4]
 8004876:	460b      	mov	r3, r1
 8004878:	817b      	strh	r3, [r7, #10]
 800487a:	4613      	mov	r3, r2
 800487c:	727b      	strb	r3, [r7, #9]
  return read(uAddr, (uint16_t)uReg, m_uMemAddrSize8Bit, pValue, 1);
 800487e:	7a7b      	ldrb	r3, [r7, #9]
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	789b      	ldrb	r3, [r3, #2]
 8004886:	b298      	uxth	r0, r3
 8004888:	8979      	ldrh	r1, [r7, #10]
 800488a:	2301      	movs	r3, #1
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	4603      	mov	r3, r0
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f922 	bl	8004ade <_ZN7QAD_I2C4readEtttPht>
 800489a:	4603      	mov	r3, r0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}

080048a4 <_ZN7QAD_I2C10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the I2C peripheral itself as well as setting interrupt priorities and enabling the interrupts
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_I2C::periphInit(void) {
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init = {0};
 80048ac:	f107 030c 	add.w	r3, r7, #12
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	611a      	str	r2, [r3, #16]

  //Init SCK GPIO Pin
  GPIO_Init.Pin       = m_uSCL_Pin;                //Set pin number
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048c0:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 80048c2:	2312      	movs	r3, #18
 80048c4:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 80048c6:	2301      	movs	r3, #1
 80048c8:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 80048ca:	2303      	movs	r3, #3
 80048cc:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSCL_AF;                 //Set alternate function to suit required I2C peripheral
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80048d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSCL_GPIO, &GPIO_Init);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048da:	f107 020c 	add.w	r2, r7, #12
 80048de:	4611      	mov	r1, r2
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fd facb 	bl	8001e7c <HAL_GPIO_Init>

  //Init SDA GPIO Pin
  GPIO_Init.Pin       = m_uSDA_Pin;                //Set pin number
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80048ea:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode      = GPIO_MODE_AF_OD;           //Set clock pin as alternate function in open-drain mode
 80048ec:	2312      	movs	r3, #18
 80048ee:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull      = GPIO_PULLUP;               //Enable pull-up resistor on pin
 80048f0:	2301      	movs	r3, #1
 80048f2:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH; //Set GPIO pin speed
 80048f4:	2303      	movs	r3, #3
 80048f6:	61bb      	str	r3, [r7, #24]
  GPIO_Init.Alternate = m_uSDA_AF;                 //Set alternate function to suit required I2C peripheral
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80048fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(m_pSDA_GPIO, &GPIO_Init);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	f107 020c 	add.w	r2, r7, #12
 8004908:	4611      	mov	r1, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fab6 	bl	8001e7c <HAL_GPIO_Init>


  //Enable I2C Clock
  QAD_I2CMgr::enableClock(m_eI2C);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	799b      	ldrb	r3, [r3, #6]
 8004914:	4618      	mov	r0, r3
 8004916:	f7ff ff12 	bl	800473e <_ZN10QAD_I2CMgr11enableClockE14QAD_I2C_Periph>


  //Initialize I2C Peripheral
  m_sHandle.Instance             = QAD_I2CMgr::getInstance(m_eI2C);  //Set instance for required I2C peripheral
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	799b      	ldrb	r3, [r3, #6]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fe99 	bl	8004656 <_ZN10QAD_I2CMgr11getInstanceE14QAD_I2C_Periph>
 8004924:	4602      	mov	r2, r0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	63da      	str	r2, [r3, #60]	; 0x3c
  m_sHandle.Init.ClockSpeed      = m_uClockSpeed;                    //Set selected clock speed
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
  m_sHandle.Init.DutyCycle       = m_eDutyCycle;                     //Set selected duty-cycle mode
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
  m_sHandle.Init.AddressingMode  = m_eAddressingMode;                //Set selected addressing mode
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	64da      	str	r2, [r3, #76]	; 0x4c
  m_sHandle.Init.DualAddressMode = m_eDualAddressingMode;            //Set whether dual addressing mode is being used
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	651a      	str	r2, [r3, #80]	; 0x50
  m_sHandle.Init.GeneralCallMode = m_eGeneralCallMode;               //Set whether general call addressing mode is being used
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	69da      	ldr	r2, [r3, #28]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	659a      	str	r2, [r3, #88]	; 0x58
  m_sHandle.Init.NoStretchMode   = m_eNoStretchMode;                 //Set whether clock stretching is currently disabled
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1a      	ldr	r2, [r3, #32]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	65da      	str	r2, [r3, #92]	; 0x5c
  m_sHandle.Init.OwnAddress1     = m_uOwnAddress1;                   //Set primary peripheral I2C address
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800495e:	461a      	mov	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	649a      	str	r2, [r3, #72]	; 0x48
  m_sHandle.Init.OwnAddress2     = m_uOwnAddress2;                   //Set secondary peripheral I2C address
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004968:	461a      	mov	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	; 0x54
  if (HAL_I2C_Init(&m_sHandle) != HAL_OK) {
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	333c      	adds	r3, #60	; 0x3c
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd fd04 	bl	8002380 <HAL_I2C_Init>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf14      	ite	ne
 800497e:	2301      	movne	r3, #1
 8004980:	2300      	moveq	r3, #0
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <_ZN7QAD_I2C10periphInitEv+0xf0>
  	periphDeinit(DeinitPartial);
 8004988:	2100      	movs	r1, #0
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f839 	bl	8004a02 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>
  	return QA_Fail;
 8004990:	2301      	movs	r3, #1
 8004992:	e032      	b.n	80049fa <_ZN7QAD_I2C10periphInitEv+0x156>
  }


  //Enable I2C Interrupt priorties and enable IRQs
  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQEvent(m_eI2C), m_uIRQPriority_Event, 0x0);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	799b      	ldrb	r3, [r3, #6]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fe75 	bl	8004688 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 800499e:	4603      	mov	r3, r0
 80049a0:	4618      	mov	r0, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	79db      	ldrb	r3, [r3, #7]
 80049a6:	2200      	movs	r2, #0
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7fd fa22 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	799b      	ldrb	r3, [r3, #6]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff fe68 	bl	8004688 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 80049b8:	4603      	mov	r3, r0
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fa35 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(QAD_I2CMgr::getIRQError(m_eI2C), m_uIRQPriority_Error, 0x0);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	799b      	ldrb	r3, [r3, #6]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fe7a 	bl	80046be <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4618      	mov	r0, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7a1b      	ldrb	r3, [r3, #8]
 80049d2:	2200      	movs	r2, #0
 80049d4:	4619      	mov	r1, r3
 80049d6:	f7fd fa0c 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	799b      	ldrb	r3, [r3, #6]
 80049de:	4618      	mov	r0, r3
 80049e0:	f7ff fe6d 	bl	80046be <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 80049e4:	4603      	mov	r3, r0
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd fa1f 	bl	8001e2a <HAL_NVIC_EnableIRQ>


  //Set Driver States
  m_eInitState = QA_Initialized; //Set driver state as initialized
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	711a      	strb	r2, [r3, #4]
  m_eState     = QA_Inactive;    //Set driver as currently inactive
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	715a      	strb	r2, [r3, #5]


  //Return
  return QA_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling interrupts
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed).
//              Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_I2C::periphDeinit(DeinitMode eDeinitMode) {
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b082      	sub	sp, #8
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d019      	beq.n	8004a48 <_ZN7QAD_I2C12periphDeinitENS_10DeinitModeE+0x46>

		//Deactivate the peripheral
		stop();
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff fef4 	bl	8004802 <_ZN7QAD_I2C4stopEv>

		//Disable the interrupts
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQError(m_eI2C));
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	799b      	ldrb	r3, [r3, #6]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7ff fe4d 	bl	80046be <_ZN10QAD_I2CMgr11getIRQErrorE14QAD_I2C_Periph>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fd fa0d 	bl	8001e46 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(QAD_I2CMgr::getIRQEvent(m_eI2C));
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	799b      	ldrb	r3, [r3, #6]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fe29 	bl	8004688 <_ZN10QAD_I2CMgr11getIRQEventE14QAD_I2C_Periph>
 8004a36:	4603      	mov	r3, r0
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7fd fa04 	bl	8001e46 <HAL_NVIC_DisableIRQ>

		//Deinitialize the peripheral
		HAL_I2C_DeInit(&m_sHandle);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	333c      	adds	r3, #60	; 0x3c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fde0 	bl	8002608 <HAL_I2C_DeInit>
	}

	//Disable peripheral clock
	QAD_I2CMgr::disableClock(m_eI2C);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	799b      	ldrb	r3, [r3, #6]
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff fe87 	bl	8004760 <_ZN10QAD_I2CMgr12disableClockE14QAD_I2C_Periph>

	//Deinitialize GPIOs
	HAL_GPIO_DeInit(m_pSCL_GPIO, m_uSCL_Pin);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	f7fd fb91 	bl	8002184 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pSDA_GPIO, m_uSDA_Pin);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	f7fd fb89 	bl	8002184 <HAL_GPIO_DeInit>

  //Set Driver States
	m_eState     = QA_Inactive;       //Set driver as being inactive
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	715a      	strb	r2, [r3, #5]
	m_eInitState = QA_NotInitialized; //Set driver as not being initialized
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	711a      	strb	r2, [r3, #4]

}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_ZN7QAD_I2C5writeEtttPht>:
//uReg        - The register address to access on the I2C device that is being written to
//uMemAddress - The number of bytes in size of the register/memory address
//pData       - A pointer to an array of bytes containing the data to be written
//uLength     - The number of bytes to be written
//Returns QA_OK if successful, or QA_Fail if unable to perform write
QA_Result QAD_I2C::write(uint16_t uAddr, uint16_t uReg, uint16_t uMemAddress, uint8_t* pData, uint16_t uLength) {
 8004a86:	b590      	push	{r4, r7, lr}
 8004a88:	b089      	sub	sp, #36	; 0x24
 8004a8a:	af04      	add	r7, sp, #16
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	4608      	mov	r0, r1
 8004a90:	4611      	mov	r1, r2
 8004a92:	461a      	mov	r2, r3
 8004a94:	4603      	mov	r3, r0
 8004a96:	817b      	strh	r3, [r7, #10]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	813b      	strh	r3, [r7, #8]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	80fb      	strh	r3, [r7, #6]
  if (HAL_I2C_Mem_Write(&m_sHandle, uAddr, (uint16_t)uReg, uMemAddress, pData, uLength, m_uTimeout) != HAL_OK)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	881b      	ldrh	r3, [r3, #0]
 8004aaa:	88fc      	ldrh	r4, [r7, #6]
 8004aac:	893a      	ldrh	r2, [r7, #8]
 8004aae:	8979      	ldrh	r1, [r7, #10]
 8004ab0:	9302      	str	r3, [sp, #8]
 8004ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ab4:	9301      	str	r3, [sp, #4]
 8004ab6:	6a3b      	ldr	r3, [r7, #32]
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	4623      	mov	r3, r4
 8004abc:	f7fd fde8 	bl	8002690 <HAL_I2C_Mem_Write>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d001      	beq.n	8004ad4 <_ZN7QAD_I2C5writeEtttPht+0x4e>
  	return QA_Fail;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e000      	b.n	8004ad6 <_ZN7QAD_I2C5writeEtttPht+0x50>

  return QA_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3714      	adds	r7, #20
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd90      	pop	{r4, r7, pc}

08004ade <_ZN7QAD_I2C4readEtttPht>:
//uReg        - The register address to access on the I2C device that is being read from
//uMemAddress - The number of bytes in size of the register/memory address
//pData       - A pointer to an array of bytes to contain the data to be read
//uLength     - The number of bytes to be read
//Returns QA_OK if successful, or QA_Fail if unable to perform read
QA_Result QAD_I2C::read(uint16_t uAddr, uint16_t uReg, uint16_t uMemAddress, uint8_t* pData, uint16_t uLength) {
 8004ade:	b590      	push	{r4, r7, lr}
 8004ae0:	b089      	sub	sp, #36	; 0x24
 8004ae2:	af04      	add	r7, sp, #16
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	4608      	mov	r0, r1
 8004ae8:	4611      	mov	r1, r2
 8004aea:	461a      	mov	r2, r3
 8004aec:	4603      	mov	r3, r0
 8004aee:	817b      	strh	r3, [r7, #10]
 8004af0:	460b      	mov	r3, r1
 8004af2:	813b      	strh	r3, [r7, #8]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  if (HAL_I2C_Mem_Read(&m_sHandle, uAddr, (uint16_t)uReg, uMemAddress, pData, uLength, m_uTimeout) != HAL_OK)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	88fc      	ldrh	r4, [r7, #6]
 8004b04:	893a      	ldrh	r2, [r7, #8]
 8004b06:	8979      	ldrh	r1, [r7, #10]
 8004b08:	9302      	str	r3, [sp, #8]
 8004b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	4623      	mov	r3, r4
 8004b14:	f7fd feb6 	bl	8002884 <HAL_I2C_Mem_Read>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <_ZN7QAD_I2C4readEtttPht+0x4e>
  	return QA_Fail;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <_ZN7QAD_I2C4readEtttPht+0x50>

  return QA_OK;
 8004b2c:	2300      	movs	r3, #0
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
	...

08004b38 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8004b3c:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	f3bf 8f5b 	dmb	ish
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bf0c      	ite	eq
 8004b4e:	2301      	moveq	r3, #1
 8004b50:	2300      	movne	r3, #0
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d010      	beq.n	8004b7a <_ZN11QAD_UARTMgr3getEv+0x42>
 8004b58:	4809      	ldr	r0, [pc, #36]	; (8004b80 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8004b5a:	f000 ff7b 	bl	8005a54 <__cxa_guard_acquire>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d005      	beq.n	8004b7a <_ZN11QAD_UARTMgr3getEv+0x42>
 8004b6e:	4805      	ldr	r0, [pc, #20]	; (8004b84 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8004b70:	f000 fb70 	bl	8005254 <_ZN11QAD_UARTMgrC1Ev>
 8004b74:	4802      	ldr	r0, [pc, #8]	; (8004b80 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8004b76:	f000 ff79 	bl	8005a6c <__cxa_guard_release>
		return instance;
 8004b7a:	4b02      	ldr	r3, [pc, #8]	; (8004b84 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	200002b0 	.word	0x200002b0
 8004b84:	2000028c 	.word	0x2000028c

08004b88 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	4603      	mov	r3, r0
 8004b90:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8004b92:	79fb      	ldrb	r3, [r7, #7]
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d901      	bls.n	8004b9c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e00a      	b.n	8004bb2 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8004b9c:	f7ff ffcc 	bl	8004b38 <_ZN11QAD_UARTMgr3getEv>
 8004ba0:	4601      	mov	r1, r0
 8004ba2:	79fa      	ldrb	r2, [r7, #7]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	440b      	add	r3, r1
 8004bae:	3301      	adds	r3, #1
 8004bb0:	781b      	ldrb	r3, [r3, #0]
	}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3708      	adds	r7, #8
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8004bc4:	79fb      	ldrb	r3, [r7, #7]
 8004bc6:	2b02      	cmp	r3, #2
 8004bc8:	d901      	bls.n	8004bce <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e00a      	b.n	8004be4 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8004bce:	f7ff ffb3 	bl	8004b38 <_ZN11QAD_UARTMgr3getEv>
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	79fa      	ldrb	r2, [r7, #7]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	3304      	adds	r3, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
	}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8004bf6:	79fb      	ldrb	r3, [r7, #7]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d902      	bls.n	8004c02 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8004bfc:	f06f 0309 	mvn.w	r3, #9
 8004c00:	e00b      	b.n	8004c1a <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8004c02:	f7ff ff99 	bl	8004b38 <_ZN11QAD_UARTMgr3getEv>
 8004c06:	4601      	mov	r1, r0
 8004c08:	79fa      	ldrb	r2, [r7, #7]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3308      	adds	r3, #8
 8004c16:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	4603      	mov	r3, r0
 8004c2a:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 8004c2c:	f7ff ff84 	bl	8004b38 <_ZN11QAD_UARTMgr3getEv>
 8004c30:	4602      	mov	r2, r0
 8004c32:	79fb      	ldrb	r3, [r7, #7]
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f000 fb4c 	bl	80052d4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 8004c3c:	4603      	mov	r3, r0
	}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b082      	sub	sp, #8
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8004c50:	f7ff ff72 	bl	8004b38 <_ZN11QAD_UARTMgr3getEv>
 8004c54:	4602      	mov	r2, r0
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	f000 fb63 	bl	8005326 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8004c60:	bf00      	nop
 8004c62:	3708      	adds	r7, #8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8004c72:	f7ff ff61 	bl	8004b38 <_ZN11QAD_UARTMgr3getEv>
 8004c76:	4602      	mov	r2, r0
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4610      	mov	r0, r2
 8004c7e:	f000 fb6d 	bl	800535c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8004c82:	bf00      	nop
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	4603      	mov	r3, r0
 8004c92:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8004c94:	f7ff ff50 	bl	8004b38 <_ZN11QAD_UARTMgr3getEv>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f000 fbca 	bl	8005438 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8004ca4:	bf00      	nop
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	785b      	ldrb	r3, [r3, #1]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ff65 	bl	8004b88 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf14      	ite	ne
 8004cc4:	2301      	movne	r3, #1
 8004cc6:	2300      	moveq	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e012      	b.n	8004cf8 <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	785b      	ldrb	r3, [r3, #1]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff ffa3 	bl	8004c22 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f8a7 	bl	8004e30 <_ZN8QAD_UART10periphInitEv>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff ffa8 	bl	8004c46 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3710      	adds	r7, #16
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 8004d10:	2101      	movs	r1, #1
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f924 	bl	8004f60 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff ff92 	bl	8004c46 <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8004d22:	e000      	b.n	8004d26 <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8004d24:	bf00      	nop
}
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	331c      	adds	r3, #28
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d5a:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	69db      	ldr	r3, [r3, #28]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69db      	ldr	r3, [r3, #28]
 8004d82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d86:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f042 0220 	orr.w	r2, r2, #32
 8004db2:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f022 0220 	bic.w	r2, r2, #32
 8004dde:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	605a      	str	r2, [r3, #4]
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b2db      	uxtb	r3, r3
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b088      	sub	sp, #32
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8004e38:	f107 030c 	add.w	r3, r7, #12
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	60da      	str	r2, [r3, #12]
 8004e46:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8a1b      	ldrh	r3, [r3, #16]
 8004e4c:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8004e4e:	2302      	movs	r3, #2
 8004e50:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8004e56:	2303      	movs	r3, #3
 8004e58:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7c9b      	ldrb	r3, [r3, #18]
 8004e5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f107 020c 	add.w	r2, r7, #12
 8004e68:	4611      	mov	r1, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd f806 	bl	8001e7c <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8b1b      	ldrh	r3, [r3, #24]
 8004e74:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8004e76:	2302      	movs	r3, #2
 8004e78:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8004e7e:	2303      	movs	r3, #3
 8004e80:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	7e9b      	ldrb	r3, [r3, #26]
 8004e86:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f107 020c 	add.w	r2, r7, #12
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fc fff2 	bl	8001e7c <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	785b      	ldrb	r3, [r3, #1]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7ff fee3 	bl	8004c68 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	785b      	ldrb	r3, [r3, #1]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7ff fe87 	bl	8004bba <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8004eac:	4602      	mov	r2, r0
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	220c      	movs	r2, #12
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	331c      	adds	r3, #28
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fe fec4 	bl	8003c70 <HAL_UART_Init>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f830 	bl	8004f60 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e029      	b.n	8004f58 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69db      	ldr	r3, [r3, #28]
 8004f0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f12:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff fe67 	bl	8004bec <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4618      	mov	r0, r3
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	7a1b      	ldrb	r3, [r3, #8]
 8004f26:	2200      	movs	r2, #0
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7fc ff62 	bl	8001df2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fe5a 	bl	8004bec <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fc ff75 	bl	8001e2a <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3720      	adds	r7, #32
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	460b      	mov	r3, r1
 8004f6a:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01b      	beq.n	8004faa <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fefc 	bl	8004d70 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ff25 	bl	8004dc8 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	785b      	ldrb	r3, [r3, #1]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7ff fe32 	bl	8004bec <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fc ff5b 	bl	8001e46 <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69db      	ldr	r3, [r3, #28]
 8004f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f9e:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	331c      	adds	r3, #28
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7fe feb0 	bl	8003d0a <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fe6b 	bl	8004c8a <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695a      	ldr	r2, [r3, #20]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8b1b      	ldrh	r3, [r3, #24]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	f7fd f8e0 	bl	8002184 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	8a1b      	ldrh	r3, [r3, #16]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	4610      	mov	r0, r2
 8004fd0:	f7fd f8d8 	bl	8002184 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	701a      	strb	r2, [r3, #0]
}
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
	...

08004ff4 <_ZN10QAD_I2CMgrC1Ev>:
//QAD_I2CMgr::QAD_I2CMgr
//QAD_I2CMgr Constructor
//
//Fills out details for the system's I2C peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's static get() method is called.
QAD_I2CMgr::QAD_I2CMgr() {
 8004ff4:	b480      	push	{r7}
 8004ff6:	b085      	sub	sp, #20
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b02      	cmp	r3, #2
 8005004:	d80d      	bhi.n	8005022 <_ZN10QAD_I2CMgrC1Ev+0x2e>
		//Set current state of peripheral to unused
		m_sI2Cs[i].eState = QAD_I2C_Unused;
 8005006:	7bfa      	ldrb	r2, [r7, #15]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3301      	adds	r3, #1
 8005016:	2200      	movs	r2, #0
 8005018:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_I2C_PeriphCount; i++) {
 800501a:	7bfb      	ldrb	r3, [r7, #15]
 800501c:	3301      	adds	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
 8005020:	e7ee      	b.n	8005000 <_ZN10QAD_I2CMgrC1Ev+0xc>
	}

	//Set Peripheral IDs
	m_sI2Cs[QAD_I2C1].eI2C = QAD_I2C1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	701a      	strb	r2, [r3, #0]
	m_sI2Cs[QAD_I2C2].eI2C = QAD_I2C2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	731a      	strb	r2, [r3, #12]
	m_sI2Cs[QAD_I2C3].eI2C = QAD_I2C3;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sI2Cs[QAD_I2C1].pInstance = I2C1;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a11      	ldr	r2, [pc, #68]	; (800507c <_ZN10QAD_I2CMgrC1Ev+0x88>)
 8005038:	605a      	str	r2, [r3, #4]
	m_sI2Cs[QAD_I2C2].pInstance = I2C2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a10      	ldr	r2, [pc, #64]	; (8005080 <_ZN10QAD_I2CMgrC1Ev+0x8c>)
 800503e:	611a      	str	r2, [r3, #16]
	m_sI2Cs[QAD_I2C3].pInstance = I2C3;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a10      	ldr	r2, [pc, #64]	; (8005084 <_ZN10QAD_I2CMgrC1Ev+0x90>)
 8005044:	61da      	str	r2, [r3, #28]

  //Set Event IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Event = I2C1_EV_IRQn;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	221f      	movs	r2, #31
 800504a:	721a      	strb	r2, [r3, #8]
	m_sI2Cs[QAD_I2C2].eIRQ_Event = I2C2_EV_IRQn;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2221      	movs	r2, #33	; 0x21
 8005050:	751a      	strb	r2, [r3, #20]
	m_sI2Cs[QAD_I2C3].eIRQ_Event = I2C3_EV_IRQn;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2248      	movs	r2, #72	; 0x48
 8005056:	f883 2020 	strb.w	r2, [r3, #32]

	//Set Error IRQs
	m_sI2Cs[QAD_I2C1].eIRQ_Error = I2C1_ER_IRQn;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	725a      	strb	r2, [r3, #9]
	m_sI2Cs[QAD_I2C2].eIRQ_Error = I2C2_ER_IRQn;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2222      	movs	r2, #34	; 0x22
 8005064:	755a      	strb	r2, [r3, #21]
	m_sI2Cs[QAD_I2C3].eIRQ_Error = I2C3_ER_IRQn;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2249      	movs	r2, #73	; 0x49
 800506a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

}
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40005400 	.word	0x40005400
 8005080:	40005800 	.word	0x40005800
 8005084:	40005c00 	.word	0x40005c00

08005088 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State>:
//
//To be called from static method registerI2C()
//Used to register an I2C peripheral as being used by a driver
//eI2C - the I2C peripheral to be registered
//Returns QA_OK if successful, or returns QA_Error_PeriphBusy if the selected I2C is already in use
QA_Result QAD_I2CMgr::imp_registerI2C(QAD_I2C_Periph eI2C, QAD_I2C_State eMode) {
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	70fb      	strb	r3, [r7, #3]
 8005094:	4613      	mov	r3, r2
 8005096:	70bb      	strb	r3, [r7, #2]
  if (eI2C >= QAD_I2CNone)
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x1a>
  	return QA_Fail;
 800509e:	2301      	movs	r3, #1
 80050a0:	e017      	b.n	80050d2 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  if (m_sI2Cs[eI2C].eState)
 80050a2:	78fa      	ldrb	r2, [r7, #3]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	440b      	add	r3, r1
 80050b0:	3301      	adds	r3, #1
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x34>
  	return QA_Error_PeriphBusy;
 80050b8:	2302      	movs	r3, #2
 80050ba:	e00a      	b.n	80050d2 <_ZN10QAD_I2CMgr15imp_registerI2CE14QAD_I2C_Periph13QAD_I2C_State+0x4a>

  m_sI2Cs[eI2C].eState = eMode;
 80050bc:	78fa      	ldrb	r2, [r7, #3]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	005b      	lsls	r3, r3, #1
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	3301      	adds	r3, #1
 80050cc:	78ba      	ldrb	r2, [r7, #2]
 80050ce:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph>:
//QAD_I2CMgr Management Method
//
//To be called from static method deregisterI2C()
//Used to deregister an I2C to mark it as no longer being used by a driver
//eI2C - the I2C Peripheral to be deregistered
void QAD_I2CMgr::imp_deregisterI2C(QAD_I2C_Periph eI2C) {
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	70fb      	strb	r3, [r7, #3]
  if (eI2C >= QAD_I2CNone)
 80050ea:	78fb      	ldrb	r3, [r7, #3]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d80a      	bhi.n	8005106 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x28>
  	return;

  m_sI2Cs[eI2C].eState = QAD_I2C_Unused;
 80050f0:	78fa      	ldrb	r2, [r7, #3]
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	4613      	mov	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	440b      	add	r3, r1
 80050fe:	3301      	adds	r3, #1
 8005100:	2200      	movs	r2, #0
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e000      	b.n	8005108 <_ZN10QAD_I2CMgr17imp_deregisterI2CE14QAD_I2C_Periph+0x2a>
  	return;
 8005106:	bf00      	nop
}
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called by static method enableClock()
//Used to enable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to enable the clock for
void QAD_I2CMgr::imp_enableClock(QAD_I2C_Periph eI2C) {
 8005114:	b480      	push	{r7}
 8005116:	b087      	sub	sp, #28
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 8005120:	78fb      	ldrb	r3, [r7, #3]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d85c      	bhi.n	80051e0 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xcc>
 8005126:	a201      	add	r2, pc, #4	; (adr r2, 800512c <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0x18>)
 8005128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800512c:	0800513d 	.word	0x0800513d
 8005130:	08005173 	.word	0x08005173
 8005134:	080051a9 	.word	0x080051a9
 8005138:	080051df 	.word	0x080051df
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_ENABLE();
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 8005146:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800514a:	6413      	str	r3, [r2, #64]	; 0x40
 800514c:	4b27      	ldr	r3, [pc, #156]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005154:	617b      	str	r3, [r7, #20]
 8005156:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_I2C1_FORCE_RESET();
 8005158:	4b24      	ldr	r3, [pc, #144]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 800515a:	6a1b      	ldr	r3, [r3, #32]
 800515c:	4a23      	ldr	r2, [pc, #140]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 800515e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005162:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C1_RELEASE_RESET();
 8005164:	4b21      	ldr	r3, [pc, #132]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	4a20      	ldr	r2, [pc, #128]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 800516a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800516e:	6213      	str	r3, [r2, #32]
    	break;
 8005170:	e036      	b.n	80051e0 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xcc>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_ENABLE();
 8005172:	2300      	movs	r3, #0
 8005174:	613b      	str	r3, [r7, #16]
 8005176:	4b1d      	ldr	r3, [pc, #116]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 800517c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005180:	6413      	str	r3, [r2, #64]	; 0x40
 8005182:	4b1a      	ldr	r3, [pc, #104]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_I2C2_FORCE_RESET();
 800518e:	4b17      	ldr	r3, [pc, #92]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	4a16      	ldr	r2, [pc, #88]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 8005194:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005198:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C2_RELEASE_RESET();
 800519a:	4b14      	ldr	r3, [pc, #80]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	4a13      	ldr	r2, [pc, #76]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051a0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80051a4:	6213      	str	r3, [r2, #32]
    	break;
 80051a6:	e01b      	b.n	80051e0 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xcc>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_ENABLE();
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051b6:	6413      	str	r3, [r2, #64]	; 0x40
 80051b8:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_I2C3_FORCE_RESET();
 80051c4:	4b09      	ldr	r3, [pc, #36]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	4a08      	ldr	r2, [pc, #32]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051ce:	6213      	str	r3, [r2, #32]
      __HAL_RCC_I2C3_RELEASE_RESET();
 80051d0:	4b06      	ldr	r3, [pc, #24]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	4a05      	ldr	r2, [pc, #20]	; (80051ec <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xd8>)
 80051d6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051da:	6213      	str	r3, [r2, #32]
    	break;
 80051dc:	e000      	b.n	80051e0 <_ZN10QAD_I2CMgr15imp_enableClockE14QAD_I2C_Periph+0xcc>
    case (QAD_I2CNone):
    	break;
 80051de:	bf00      	nop
  }
}
 80051e0:	bf00      	nop
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	40023800 	.word	0x40023800

080051f0 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph>:
//QAD_I2CMgr Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific I2C peripheral
//eI2C - the I2C peripheral to disable the clock for
void QAD_I2CMgr::imp_disableClock(QAD_I2C_Periph eI2C) {
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  switch (eI2C) {
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	2b03      	cmp	r3, #3
 8005200:	d820      	bhi.n	8005244 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x54>
 8005202:	a201      	add	r2, pc, #4	; (adr r2, 8005208 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x18>)
 8005204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005208:	08005219 	.word	0x08005219
 800520c:	08005227 	.word	0x08005227
 8005210:	08005235 	.word	0x08005235
 8005214:	08005243 	.word	0x08005243
    case (QAD_I2C1):
    	__HAL_RCC_I2C1_CLK_DISABLE();
 8005218:	4b0d      	ldr	r3, [pc, #52]	; (8005250 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x60>)
 800521a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521c:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x60>)
 800521e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005222:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 8005224:	e00e      	b.n	8005244 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x54>
    case (QAD_I2C2):
    	__HAL_RCC_I2C2_CLK_DISABLE();
 8005226:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x60>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a09      	ldr	r2, [pc, #36]	; (8005250 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x60>)
 800522c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 8005232:	e007      	b.n	8005244 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x54>
    case (QAD_I2C3):
    	__HAL_RCC_I2C3_CLK_DISABLE();
 8005234:	4b06      	ldr	r3, [pc, #24]	; (8005250 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x60>)
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	4a05      	ldr	r2, [pc, #20]	; (8005250 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x60>)
 800523a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800523e:	6413      	str	r3, [r2, #64]	; 0x40
    	break;
 8005240:	e000      	b.n	8005244 <_ZN10QAD_I2CMgr16imp_disableClockE14QAD_I2C_Periph+0x54>
    case (QAD_I2CNone):
    	break;
 8005242:	bf00      	nop
  }
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40023800 	.word	0x40023800

08005254 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d80d      	bhi.n	8005282 <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	3301      	adds	r3, #1
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	3301      	adds	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]
 8005280:	e7ee      	b.n	8005260 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <_ZN11QAD_UARTMgrC1Ev+0x74>)
 8005298:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a0b      	ldr	r2, [pc, #44]	; (80052cc <_ZN11QAD_UARTMgrC1Ev+0x78>)
 800529e:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a0b      	ldr	r2, [pc, #44]	; (80052d0 <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 80052a4:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2225      	movs	r2, #37	; 0x25
 80052aa:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2226      	movs	r2, #38	; 0x26
 80052b0:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2247      	movs	r2, #71	; 0x47
 80052b6:	f883 2020 	strb.w	r2, [r3, #32]

}
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	40011000 	.word	0x40011000
 80052cc:	40004400 	.word	0x40004400
 80052d0:	40011400 	.word	0x40011400

080052d4 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80052e0:	78fb      	ldrb	r3, [r7, #3]
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d901      	bls.n	80052ea <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e017      	b.n	800531a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 80052ea:	78fa      	ldrb	r2, [r7, #3]
 80052ec:	6879      	ldr	r1, [r7, #4]
 80052ee:	4613      	mov	r3, r2
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	440b      	add	r3, r1
 80052f8:	3301      	adds	r3, #1
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8005300:	2302      	movs	r3, #2
 8005302:	e00a      	b.n	800531a <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8005304:	78fa      	ldrb	r2, [r7, #3]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	3301      	adds	r3, #1
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	460b      	mov	r3, r1
 8005330:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8005332:	78fb      	ldrb	r3, [r7, #3]
 8005334:	2b02      	cmp	r3, #2
 8005336:	d80a      	bhi.n	800534e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	3301      	adds	r3, #1
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
 800534c:	e000      	b.n	8005350 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 800534e:	bf00      	nop
}
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr
	...

0800535c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	460b      	mov	r3, r1
 8005366:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8005368:	78fb      	ldrb	r3, [r7, #3]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d85c      	bhi.n	8005428 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005385 	.word	0x08005385
 8005378:	080053bb 	.word	0x080053bb
 800537c:	080053f1 	.word	0x080053f1
 8005380:	08005427 	.word	0x08005427
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	4b2a      	ldr	r3, [pc, #168]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800538a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538c:	4a29      	ldr	r2, [pc, #164]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800538e:	f043 0310 	orr.w	r3, r3, #16
 8005392:	6453      	str	r3, [r2, #68]	; 0x44
 8005394:	4b27      	ldr	r3, [pc, #156]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 80053a0:	4b24      	ldr	r3, [pc, #144]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	4a23      	ldr	r2, [pc, #140]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053a6:	f043 0310 	orr.w	r3, r3, #16
 80053aa:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 80053ac:	4b21      	ldr	r3, [pc, #132]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	4a20      	ldr	r2, [pc, #128]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053b2:	f023 0310 	bic.w	r3, r3, #16
 80053b6:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 80053b8:	e036      	b.n	8005428 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 80053ba:	2300      	movs	r3, #0
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	4a1c      	ldr	r2, [pc, #112]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c8:	6413      	str	r3, [r2, #64]	; 0x40
 80053ca:	4b1a      	ldr	r3, [pc, #104]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 80053d6:	4b17      	ldr	r3, [pc, #92]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	4a16      	ldr	r2, [pc, #88]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053e0:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 80053e2:	4b14      	ldr	r3, [pc, #80]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	4a13      	ldr	r2, [pc, #76]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053ec:	6213      	str	r3, [r2, #32]
      break;
 80053ee:	e01b      	b.n	8005428 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f8:	4a0e      	ldr	r2, [pc, #56]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053fa:	f043 0320 	orr.w	r3, r3, #32
 80053fe:	6453      	str	r3, [r2, #68]	; 0x44
 8005400:	4b0c      	ldr	r3, [pc, #48]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f003 0320 	and.w	r3, r3, #32
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 800540c:	4b09      	ldr	r3, [pc, #36]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	4a08      	ldr	r2, [pc, #32]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005412:	f043 0320 	orr.w	r3, r3, #32
 8005416:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8005418:	4b06      	ldr	r3, [pc, #24]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800541a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541c:	4a05      	ldr	r2, [pc, #20]	; (8005434 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800541e:	f023 0320 	bic.w	r3, r3, #32
 8005422:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8005424:	e000      	b.n	8005428 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 8005426:	bf00      	nop
  }
}
 8005428:	bf00      	nop
 800542a:	371c      	adds	r7, #28
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40023800 	.word	0x40023800

08005438 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	2b03      	cmp	r3, #3
 8005448:	d820      	bhi.n	800548c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 800544a:	a201      	add	r2, pc, #4	; (adr r2, 8005450 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 800544c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005450:	08005461 	.word	0x08005461
 8005454:	0800546f 	.word	0x0800546f
 8005458:	0800547d 	.word	0x0800547d
 800545c:	0800548b 	.word	0x0800548b
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8005460:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005464:	4a0c      	ldr	r2, [pc, #48]	; (8005498 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005466:	f023 0310 	bic.w	r3, r3, #16
 800546a:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800546c:	e00e      	b.n	800548c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	4a09      	ldr	r2, [pc, #36]	; (8005498 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005474:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005478:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 800547a:	e007      	b.n	800548c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800547e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005480:	4a05      	ldr	r2, [pc, #20]	; (8005498 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005482:	f023 0320 	bic.w	r3, r3, #32
 8005486:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8005488:	e000      	b.n	800548c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 800548a:	bf00      	nop
  }
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr
 8005498:	40023800 	.word	0x40023800

0800549c <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	7b1b      	ldrb	r3, [r3, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 80054ae:	2300      	movs	r3, #0
 80054b0:	e010      	b.n	80054d4 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6839      	ldr	r1, [r7, #0]
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	4798      	blx	r3
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
 80054ca:	e003      	b.n	80054d4 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6839      	ldr	r1, [r7, #0]
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	4798      	blx	r3
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8005506:	6838      	ldr	r0, [r7, #0]
 8005508:	f7fa fe6a 	bl	80001e0 <strlen>
 800550c:	4603      	mov	r3, r0
 800550e:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8005510:	2300      	movs	r3, #0
 8005512:	81fb      	strh	r3, [r7, #14]
 8005514:	89fa      	ldrh	r2, [r7, #14]
 8005516:	89bb      	ldrh	r3, [r7, #12]
 8005518:	429a      	cmp	r2, r3
 800551a:	d20f      	bcs.n	800553c <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f000 f837 	bl	8005594 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005526:	89fb      	ldrh	r3, [r7, #14]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	4413      	add	r3, r2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	4619      	mov	r1, r3
 8005530:	f000 f9e1 	bl	80058f6 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8005534:	89fb      	ldrh	r3, [r7, #14]
 8005536:	3301      	adds	r3, #1
 8005538:	81fb      	strh	r3, [r7, #14]
 800553a:	e7eb      	b.n	8005514 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3304      	adds	r3, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f000 f827 	bl	8005594 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005546:	4603      	mov	r3, r0
 8005548:	210d      	movs	r1, #13
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f9d3 	bl	80058f6 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	330c      	adds	r3, #12
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	4798      	blx	r3
}
 800555c:	bf00      	nop
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	3304      	adds	r3, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f80f 	bl	8005594 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005576:	4603      	mov	r3, r0
 8005578:	210d      	movs	r1, #13
 800557a:	4618      	mov	r0, r3
 800557c:	f000 f9bb 	bl	80058f6 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	330c      	adds	r3, #12
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	4798      	blx	r3
}
 800558c:	bf00      	nop
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	return get();
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f805 	bl	80055ac <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 80055a2:	4603      	mov	r3, r0
      }
 80055a4:	4618      	mov	r0, r3
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f805 	bl	80055c6 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80055bc:	4603      	mov	r3, r0
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f806 	bl	80055e2 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80055d6:	4603      	mov	r3, r0
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80055e2:	b580      	push	{r7, lr}
 80055e4:	b082      	sub	sp, #8
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f805 	bl	80055fc <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80055f2:	4603      	mov	r3, r0
 80055f4:	4618      	mov	r0, r3
 80055f6:	3708      	adds	r7, #8
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}

080055fc <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 f805 	bl	8005614 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 800560a:	4603      	mov	r3, r0
 800560c:	4618      	mov	r0, r3
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4618      	mov	r0, r3
 8005620:	f000 f805 	bl	800562e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8005624:	4603      	mov	r3, r0
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4618      	mov	r0, r3
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3314      	adds	r3, #20
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f8e4 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005658:	4603      	mov	r3, r0
 800565a:	4618      	mov	r0, r3
 800565c:	f7ff fb26 	bl	8004cac <_ZN8QAD_UART4initEv>
 8005660:	4603      	mov	r3, r0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3314      	adds	r3, #20
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f8d2 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800567c:	4603      	mov	r3, r0
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff fb3e 	bl	8004d00 <_ZN8QAD_UART6deinitEv>
}
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 800568c:	b590      	push	{r4, r7, lr}
 800568e:	b095      	sub	sp, #84	; 0x54
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3314      	adds	r3, #20
 800569a:	4618      	mov	r0, r3
 800569c:	f000 f8c0 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7ff fb42 	bl	8004d2c <_ZN8QAD_UART9getHandleEv>
 80056a8:	4602      	mov	r2, r0
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	4611      	mov	r1, r2
 80056b0:	2244      	movs	r2, #68	; 0x44
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fa48 	bl	8005b48 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	bf0c      	ite	eq
 80056c4:	2301      	moveq	r3, #1
 80056c6:	2300      	movne	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01f      	beq.n	800570e <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3314      	adds	r3, #20
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 f8a4 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80056d8:	4603      	mov	r3, r0
 80056da:	4618      	mov	r0, r3
 80056dc:	f7ff fb9a 	bl	8004e14 <_ZN8QAD_UART6dataRXEv>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	7b9b      	ldrb	r3, [r3, #14]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00b      	beq.n	8005706 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	3308      	adds	r3, #8
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff ff4e 	bl	8005594 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80056f8:	4602      	mov	r2, r0
 80056fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f000 f8f8 	bl	80058f6 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	f06f 0220 	mvn.w	r2, #32
 800570c:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	bf0c      	ite	eq
 800571a:	2301      	moveq	r3, #1
 800571c:	2300      	movne	r3, #0
 800571e:	b2db      	uxtb	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d035      	beq.n	8005790 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3304      	adds	r3, #4
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ff33 	bl	8005594 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800572e:	4603      	mov	r3, r0
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f8cd 	bl	80058d0 <_ZN14QAT_FIFOBuffer5emptyEv>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	bf0c      	ite	eq
 800573c:	2301      	moveq	r3, #1
 800573e:	2300      	movne	r3, #0
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d014      	beq.n	8005770 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3314      	adds	r3, #20
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f868 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005750:	4604      	mov	r4, r0
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff1c 	bl	8005594 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800575c:	4603      	mov	r3, r0
 800575e:	4618      	mov	r0, r3
 8005760:	f000 f8ed 	bl	800593e <_ZN14QAT_FIFOBuffer3popEv>
 8005764:	4603      	mov	r3, r0
 8005766:	4619      	mov	r1, r3
 8005768:	4620      	mov	r0, r4
 800576a:	f7ff fb43 	bl	8004df4 <_ZN8QAD_UART6dataTXEh>
 800576e:	e00b      	b.n	8005788 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3314      	adds	r3, #20
 8005774:	4618      	mov	r0, r3
 8005776:	f000 f853 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800577a:	4603      	mov	r3, r0
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff faf7 	bl	8004d70 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800578e:	601a      	str	r2, [r3, #0]
  }
}
 8005790:	bf00      	nop
 8005792:	3754      	adds	r7, #84	; 0x54
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}

08005798 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	3314      	adds	r3, #20
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f83b 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80057aa:	4603      	mov	r3, r0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fac9 	bl	8004d44 <_ZN8QAD_UART7startTXEv>
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b082      	sub	sp, #8
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3314      	adds	r3, #20
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 f82a 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff face 	bl	8004d70 <_ZN8QAD_UART6stopTXEv>
}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	3314      	adds	r3, #20
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 f819 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7ff fad3 	bl	8004d9c <_ZN8QAD_UART7startRXEv>
}
 80057f6:	bf00      	nop
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 80057fe:	b580      	push	{r7, lr}
 8005800:	b082      	sub	sp, #8
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	3314      	adds	r3, #20
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f808 	bl	8005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005810:	4603      	mov	r3, r0
 8005812:	4618      	mov	r0, r3
 8005814:	f7ff fad8 	bl	8004dc8 <_ZN8QAD_UART6stopRXEv>
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	return get();
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 f805 	bl	8005838 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 800582e:	4603      	mov	r3, r0
      }
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4618      	mov	r0, r3
 8005844:	f000 f805 	bl	8005852 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8005848:	4603      	mov	r3, r0
 800584a:	4618      	mov	r0, r3
 800584c:	3708      	adds	r7, #8
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005852:	b580      	push	{r7, lr}
 8005854:	b082      	sub	sp, #8
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f806 	bl	800586e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8005862:	4603      	mov	r3, r0
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f805 	bl	8005888 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800587e:	4603      	mov	r3, r0
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f000 f805 	bl	80058a0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 8005896:	4603      	mov	r3, r0
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 f805 	bl	80058ba <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 80058b0:	4603      	mov	r3, r0
 80058b2:	4618      	mov	r0, r3
 80058b4:	3708      	adds	r7, #8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}

080058ba <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4618      	mov	r0, r3
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	88da      	ldrh	r2, [r3, #6]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	891b      	ldrh	r3, [r3, #8]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d101      	bne.n	80058e8 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 80058e4:	2301      	movs	r3, #1
 80058e6:	e000      	b.n	80058ea <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	460b      	mov	r3, r1
 8005900:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	891b      	ldrh	r3, [r3, #8]
 8005908:	4619      	mov	r1, r3
 800590a:	4610      	mov	r0, r2
 800590c:	f000 f847 	bl	800599e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8005910:	4602      	mov	r2, r0
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	889a      	ldrh	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	891b      	ldrh	r3, [r3, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	d906      	bls.n	8005930 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	891b      	ldrh	r3, [r3, #8]
 8005926:	3301      	adds	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 800592e:	e002      	b.n	8005936 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	811a      	strh	r2, [r3, #8]
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7ff ffc2 	bl	80058d0 <_ZN14QAT_FIFOBuffer5emptyEv>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf0c      	ite	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	2300      	movne	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01b      	beq.n	8005994 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	88db      	ldrh	r3, [r3, #6]
 8005962:	4619      	mov	r1, r3
 8005964:	4610      	mov	r0, r2
 8005966:	f000 f81a 	bl	800599e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800596a:	4603      	mov	r3, r0
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	889a      	ldrh	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	88db      	ldrh	r3, [r3, #6]
 8005978:	429a      	cmp	r2, r3
 800597a:	d906      	bls.n	800598a <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	88db      	ldrh	r3, [r3, #6]
 8005980:	3301      	adds	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	80da      	strh	r2, [r3, #6]
 8005988:	e002      	b.n	8005990 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	80da      	strh	r2, [r3, #6]
		return uData;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
 8005992:	e000      	b.n	8005996 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 800599e:	b580      	push	{r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f000 f807 	bl	80059bc <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80059ae:	4602      	mov	r2, r0
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	4413      	add	r3, r2
      }
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 f805 	bl	80059d6 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80059cc:	4603      	mov	r3, r0
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b082      	sub	sp, #8
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f806 	bl	80059f2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80059e6:	4603      	mov	r3, r0
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f000 f805 	bl	8005a0c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005a02:	4603      	mov	r3, r0
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f805 	bl	8005a24 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 f805 	bl	8005a3e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8005a34:	4603      	mov	r3, r0
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <__cxa_guard_acquire>:
 8005a54:	6803      	ldr	r3, [r0, #0]
 8005a56:	07db      	lsls	r3, r3, #31
 8005a58:	d406      	bmi.n	8005a68 <__cxa_guard_acquire+0x14>
 8005a5a:	7843      	ldrb	r3, [r0, #1]
 8005a5c:	b103      	cbz	r3, 8005a60 <__cxa_guard_acquire+0xc>
 8005a5e:	deff      	udf	#255	; 0xff
 8005a60:	2301      	movs	r3, #1
 8005a62:	7043      	strb	r3, [r0, #1]
 8005a64:	4618      	mov	r0, r3
 8005a66:	4770      	bx	lr
 8005a68:	2000      	movs	r0, #0
 8005a6a:	4770      	bx	lr

08005a6c <__cxa_guard_release>:
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	6003      	str	r3, [r0, #0]
 8005a70:	4770      	bx	lr

08005a72 <_Znwj>:
 8005a72:	2801      	cmp	r0, #1
 8005a74:	bf38      	it	cc
 8005a76:	2001      	movcc	r0, #1
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	4604      	mov	r4, r0
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	f000 f85b 	bl	8005b38 <malloc>
 8005a82:	b930      	cbnz	r0, 8005a92 <_Znwj+0x20>
 8005a84:	f000 f81e 	bl	8005ac4 <_ZSt15get_new_handlerv>
 8005a88:	b908      	cbnz	r0, 8005a8e <_Znwj+0x1c>
 8005a8a:	f000 f823 	bl	8005ad4 <abort>
 8005a8e:	4780      	blx	r0
 8005a90:	e7f4      	b.n	8005a7c <_Znwj+0xa>
 8005a92:	bd10      	pop	{r4, pc}

08005a94 <_Znaj>:
 8005a94:	f7ff bfed 	b.w	8005a72 <_Znwj>

08005a98 <__cxa_pure_virtual>:
 8005a98:	b508      	push	{r3, lr}
 8005a9a:	f000 f80d 	bl	8005ab8 <_ZSt9terminatev>

08005a9e <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005a9e:	b508      	push	{r3, lr}
 8005aa0:	4780      	blx	r0
 8005aa2:	f000 f817 	bl	8005ad4 <abort>
	...

08005aa8 <_ZSt13get_terminatev>:
 8005aa8:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <_ZSt13get_terminatev+0xc>)
 8005aaa:	6818      	ldr	r0, [r3, #0]
 8005aac:	f3bf 8f5b 	dmb	ish
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	2000000c 	.word	0x2000000c

08005ab8 <_ZSt9terminatev>:
 8005ab8:	b508      	push	{r3, lr}
 8005aba:	f7ff fff5 	bl	8005aa8 <_ZSt13get_terminatev>
 8005abe:	f7ff ffee 	bl	8005a9e <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08005ac4 <_ZSt15get_new_handlerv>:
 8005ac4:	4b02      	ldr	r3, [pc, #8]	; (8005ad0 <_ZSt15get_new_handlerv+0xc>)
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	f3bf 8f5b 	dmb	ish
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	200002b4 	.word	0x200002b4

08005ad4 <abort>:
 8005ad4:	b508      	push	{r3, lr}
 8005ad6:	2006      	movs	r0, #6
 8005ad8:	f000 f92e 	bl	8005d38 <raise>
 8005adc:	2001      	movs	r0, #1
 8005ade:	f7fb fc33 	bl	8001348 <_exit>
	...

08005ae4 <__errno>:
 8005ae4:	4b01      	ldr	r3, [pc, #4]	; (8005aec <__errno+0x8>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	20000010 	.word	0x20000010

08005af0 <__libc_init_array>:
 8005af0:	b570      	push	{r4, r5, r6, lr}
 8005af2:	4d0d      	ldr	r5, [pc, #52]	; (8005b28 <__libc_init_array+0x38>)
 8005af4:	4c0d      	ldr	r4, [pc, #52]	; (8005b2c <__libc_init_array+0x3c>)
 8005af6:	1b64      	subs	r4, r4, r5
 8005af8:	10a4      	asrs	r4, r4, #2
 8005afa:	2600      	movs	r6, #0
 8005afc:	42a6      	cmp	r6, r4
 8005afe:	d109      	bne.n	8005b14 <__libc_init_array+0x24>
 8005b00:	4d0b      	ldr	r5, [pc, #44]	; (8005b30 <__libc_init_array+0x40>)
 8005b02:	4c0c      	ldr	r4, [pc, #48]	; (8005b34 <__libc_init_array+0x44>)
 8005b04:	f000 fc9a 	bl	800643c <_init>
 8005b08:	1b64      	subs	r4, r4, r5
 8005b0a:	10a4      	asrs	r4, r4, #2
 8005b0c:	2600      	movs	r6, #0
 8005b0e:	42a6      	cmp	r6, r4
 8005b10:	d105      	bne.n	8005b1e <__libc_init_array+0x2e>
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b18:	4798      	blx	r3
 8005b1a:	3601      	adds	r6, #1
 8005b1c:	e7ee      	b.n	8005afc <__libc_init_array+0xc>
 8005b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b22:	4798      	blx	r3
 8005b24:	3601      	adds	r6, #1
 8005b26:	e7f2      	b.n	8005b0e <__libc_init_array+0x1e>
 8005b28:	0800657c 	.word	0x0800657c
 8005b2c:	0800657c 	.word	0x0800657c
 8005b30:	0800657c 	.word	0x0800657c
 8005b34:	08006580 	.word	0x08006580

08005b38 <malloc>:
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <malloc+0xc>)
 8005b3a:	4601      	mov	r1, r0
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	f000 b869 	b.w	8005c14 <_malloc_r>
 8005b42:	bf00      	nop
 8005b44:	20000010 	.word	0x20000010

08005b48 <memcpy>:
 8005b48:	440a      	add	r2, r1
 8005b4a:	4291      	cmp	r1, r2
 8005b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b50:	d100      	bne.n	8005b54 <memcpy+0xc>
 8005b52:	4770      	bx	lr
 8005b54:	b510      	push	{r4, lr}
 8005b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5e:	4291      	cmp	r1, r2
 8005b60:	d1f9      	bne.n	8005b56 <memcpy+0xe>
 8005b62:	bd10      	pop	{r4, pc}

08005b64 <memset>:
 8005b64:	4402      	add	r2, r0
 8005b66:	4603      	mov	r3, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <_free_r>:
 8005b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d048      	beq.n	8005c0c <_free_r+0x98>
 8005b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7e:	9001      	str	r0, [sp, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f1a1 0404 	sub.w	r4, r1, #4
 8005b86:	bfb8      	it	lt
 8005b88:	18e4      	addlt	r4, r4, r3
 8005b8a:	f000 f911 	bl	8005db0 <__malloc_lock>
 8005b8e:	4a20      	ldr	r2, [pc, #128]	; (8005c10 <_free_r+0x9c>)
 8005b90:	9801      	ldr	r0, [sp, #4]
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	4615      	mov	r5, r2
 8005b96:	b933      	cbnz	r3, 8005ba6 <_free_r+0x32>
 8005b98:	6063      	str	r3, [r4, #4]
 8005b9a:	6014      	str	r4, [r2, #0]
 8005b9c:	b003      	add	sp, #12
 8005b9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ba2:	f000 b90b 	b.w	8005dbc <__malloc_unlock>
 8005ba6:	42a3      	cmp	r3, r4
 8005ba8:	d90b      	bls.n	8005bc2 <_free_r+0x4e>
 8005baa:	6821      	ldr	r1, [r4, #0]
 8005bac:	1862      	adds	r2, r4, r1
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	bf04      	itt	eq
 8005bb2:	681a      	ldreq	r2, [r3, #0]
 8005bb4:	685b      	ldreq	r3, [r3, #4]
 8005bb6:	6063      	str	r3, [r4, #4]
 8005bb8:	bf04      	itt	eq
 8005bba:	1852      	addeq	r2, r2, r1
 8005bbc:	6022      	streq	r2, [r4, #0]
 8005bbe:	602c      	str	r4, [r5, #0]
 8005bc0:	e7ec      	b.n	8005b9c <_free_r+0x28>
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	b10b      	cbz	r3, 8005bcc <_free_r+0x58>
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	d9fa      	bls.n	8005bc2 <_free_r+0x4e>
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	1855      	adds	r5, r2, r1
 8005bd0:	42a5      	cmp	r5, r4
 8005bd2:	d10b      	bne.n	8005bec <_free_r+0x78>
 8005bd4:	6824      	ldr	r4, [r4, #0]
 8005bd6:	4421      	add	r1, r4
 8005bd8:	1854      	adds	r4, r2, r1
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	d1dd      	bne.n	8005b9c <_free_r+0x28>
 8005be0:	681c      	ldr	r4, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	6053      	str	r3, [r2, #4]
 8005be6:	4421      	add	r1, r4
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	e7d7      	b.n	8005b9c <_free_r+0x28>
 8005bec:	d902      	bls.n	8005bf4 <_free_r+0x80>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	6003      	str	r3, [r0, #0]
 8005bf2:	e7d3      	b.n	8005b9c <_free_r+0x28>
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf04      	itt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	bf04      	itt	eq
 8005c04:	1949      	addeq	r1, r1, r5
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	6054      	str	r4, [r2, #4]
 8005c0a:	e7c7      	b.n	8005b9c <_free_r+0x28>
 8005c0c:	b003      	add	sp, #12
 8005c0e:	bd30      	pop	{r4, r5, pc}
 8005c10:	200002b8 	.word	0x200002b8

08005c14 <_malloc_r>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	1ccd      	adds	r5, r1, #3
 8005c18:	f025 0503 	bic.w	r5, r5, #3
 8005c1c:	3508      	adds	r5, #8
 8005c1e:	2d0c      	cmp	r5, #12
 8005c20:	bf38      	it	cc
 8005c22:	250c      	movcc	r5, #12
 8005c24:	2d00      	cmp	r5, #0
 8005c26:	4606      	mov	r6, r0
 8005c28:	db01      	blt.n	8005c2e <_malloc_r+0x1a>
 8005c2a:	42a9      	cmp	r1, r5
 8005c2c:	d903      	bls.n	8005c36 <_malloc_r+0x22>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	6033      	str	r3, [r6, #0]
 8005c32:	2000      	movs	r0, #0
 8005c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c36:	f000 f8bb 	bl	8005db0 <__malloc_lock>
 8005c3a:	4921      	ldr	r1, [pc, #132]	; (8005cc0 <_malloc_r+0xac>)
 8005c3c:	680a      	ldr	r2, [r1, #0]
 8005c3e:	4614      	mov	r4, r2
 8005c40:	b99c      	cbnz	r4, 8005c6a <_malloc_r+0x56>
 8005c42:	4f20      	ldr	r7, [pc, #128]	; (8005cc4 <_malloc_r+0xb0>)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	b923      	cbnz	r3, 8005c52 <_malloc_r+0x3e>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f000 f83c 	bl	8005cc8 <_sbrk_r>
 8005c50:	6038      	str	r0, [r7, #0]
 8005c52:	4629      	mov	r1, r5
 8005c54:	4630      	mov	r0, r6
 8005c56:	f000 f837 	bl	8005cc8 <_sbrk_r>
 8005c5a:	1c43      	adds	r3, r0, #1
 8005c5c:	d123      	bne.n	8005ca6 <_malloc_r+0x92>
 8005c5e:	230c      	movs	r3, #12
 8005c60:	6033      	str	r3, [r6, #0]
 8005c62:	4630      	mov	r0, r6
 8005c64:	f000 f8aa 	bl	8005dbc <__malloc_unlock>
 8005c68:	e7e3      	b.n	8005c32 <_malloc_r+0x1e>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	1b5b      	subs	r3, r3, r5
 8005c6e:	d417      	bmi.n	8005ca0 <_malloc_r+0x8c>
 8005c70:	2b0b      	cmp	r3, #11
 8005c72:	d903      	bls.n	8005c7c <_malloc_r+0x68>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	441c      	add	r4, r3
 8005c78:	6025      	str	r5, [r4, #0]
 8005c7a:	e004      	b.n	8005c86 <_malloc_r+0x72>
 8005c7c:	6863      	ldr	r3, [r4, #4]
 8005c7e:	42a2      	cmp	r2, r4
 8005c80:	bf0c      	ite	eq
 8005c82:	600b      	streq	r3, [r1, #0]
 8005c84:	6053      	strne	r3, [r2, #4]
 8005c86:	4630      	mov	r0, r6
 8005c88:	f000 f898 	bl	8005dbc <__malloc_unlock>
 8005c8c:	f104 000b 	add.w	r0, r4, #11
 8005c90:	1d23      	adds	r3, r4, #4
 8005c92:	f020 0007 	bic.w	r0, r0, #7
 8005c96:	1ac2      	subs	r2, r0, r3
 8005c98:	d0cc      	beq.n	8005c34 <_malloc_r+0x20>
 8005c9a:	1a1b      	subs	r3, r3, r0
 8005c9c:	50a3      	str	r3, [r4, r2]
 8005c9e:	e7c9      	b.n	8005c34 <_malloc_r+0x20>
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	6864      	ldr	r4, [r4, #4]
 8005ca4:	e7cc      	b.n	8005c40 <_malloc_r+0x2c>
 8005ca6:	1cc4      	adds	r4, r0, #3
 8005ca8:	f024 0403 	bic.w	r4, r4, #3
 8005cac:	42a0      	cmp	r0, r4
 8005cae:	d0e3      	beq.n	8005c78 <_malloc_r+0x64>
 8005cb0:	1a21      	subs	r1, r4, r0
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f000 f808 	bl	8005cc8 <_sbrk_r>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	d1dd      	bne.n	8005c78 <_malloc_r+0x64>
 8005cbc:	e7cf      	b.n	8005c5e <_malloc_r+0x4a>
 8005cbe:	bf00      	nop
 8005cc0:	200002b8 	.word	0x200002b8
 8005cc4:	200002bc 	.word	0x200002bc

08005cc8 <_sbrk_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	4d06      	ldr	r5, [pc, #24]	; (8005ce4 <_sbrk_r+0x1c>)
 8005ccc:	2300      	movs	r3, #0
 8005cce:	4604      	mov	r4, r0
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	602b      	str	r3, [r5, #0]
 8005cd4:	f7fb fb42 	bl	800135c <_sbrk>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	d102      	bne.n	8005ce2 <_sbrk_r+0x1a>
 8005cdc:	682b      	ldr	r3, [r5, #0]
 8005cde:	b103      	cbz	r3, 8005ce2 <_sbrk_r+0x1a>
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	200002c4 	.word	0x200002c4

08005ce8 <_raise_r>:
 8005ce8:	291f      	cmp	r1, #31
 8005cea:	b538      	push	{r3, r4, r5, lr}
 8005cec:	4604      	mov	r4, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	d904      	bls.n	8005cfc <_raise_r+0x14>
 8005cf2:	2316      	movs	r3, #22
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfa:	bd38      	pop	{r3, r4, r5, pc}
 8005cfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005cfe:	b112      	cbz	r2, 8005d06 <_raise_r+0x1e>
 8005d00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d04:	b94b      	cbnz	r3, 8005d1a <_raise_r+0x32>
 8005d06:	4620      	mov	r0, r4
 8005d08:	f000 f830 	bl	8005d6c <_getpid_r>
 8005d0c:	462a      	mov	r2, r5
 8005d0e:	4601      	mov	r1, r0
 8005d10:	4620      	mov	r0, r4
 8005d12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d16:	f000 b817 	b.w	8005d48 <_kill_r>
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d00a      	beq.n	8005d34 <_raise_r+0x4c>
 8005d1e:	1c59      	adds	r1, r3, #1
 8005d20:	d103      	bne.n	8005d2a <_raise_r+0x42>
 8005d22:	2316      	movs	r3, #22
 8005d24:	6003      	str	r3, [r0, #0]
 8005d26:	2001      	movs	r0, #1
 8005d28:	e7e7      	b.n	8005cfa <_raise_r+0x12>
 8005d2a:	2400      	movs	r4, #0
 8005d2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d30:	4628      	mov	r0, r5
 8005d32:	4798      	blx	r3
 8005d34:	2000      	movs	r0, #0
 8005d36:	e7e0      	b.n	8005cfa <_raise_r+0x12>

08005d38 <raise>:
 8005d38:	4b02      	ldr	r3, [pc, #8]	; (8005d44 <raise+0xc>)
 8005d3a:	4601      	mov	r1, r0
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	f7ff bfd3 	b.w	8005ce8 <_raise_r>
 8005d42:	bf00      	nop
 8005d44:	20000010 	.word	0x20000010

08005d48 <_kill_r>:
 8005d48:	b538      	push	{r3, r4, r5, lr}
 8005d4a:	4d07      	ldr	r5, [pc, #28]	; (8005d68 <_kill_r+0x20>)
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	4604      	mov	r4, r0
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	f7fb fae7 	bl	8001328 <_kill>
 8005d5a:	1c43      	adds	r3, r0, #1
 8005d5c:	d102      	bne.n	8005d64 <_kill_r+0x1c>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	b103      	cbz	r3, 8005d64 <_kill_r+0x1c>
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	bd38      	pop	{r3, r4, r5, pc}
 8005d66:	bf00      	nop
 8005d68:	200002c4 	.word	0x200002c4

08005d6c <_getpid_r>:
 8005d6c:	f7fb bad4 	b.w	8001318 <_getpid>

08005d70 <siprintf>:
 8005d70:	b40e      	push	{r1, r2, r3}
 8005d72:	b500      	push	{lr}
 8005d74:	b09c      	sub	sp, #112	; 0x70
 8005d76:	ab1d      	add	r3, sp, #116	; 0x74
 8005d78:	9002      	str	r0, [sp, #8]
 8005d7a:	9006      	str	r0, [sp, #24]
 8005d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d80:	4809      	ldr	r0, [pc, #36]	; (8005da8 <siprintf+0x38>)
 8005d82:	9107      	str	r1, [sp, #28]
 8005d84:	9104      	str	r1, [sp, #16]
 8005d86:	4909      	ldr	r1, [pc, #36]	; (8005dac <siprintf+0x3c>)
 8005d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d8c:	9105      	str	r1, [sp, #20]
 8005d8e:	6800      	ldr	r0, [r0, #0]
 8005d90:	9301      	str	r3, [sp, #4]
 8005d92:	a902      	add	r1, sp, #8
 8005d94:	f000 f874 	bl	8005e80 <_svfiprintf_r>
 8005d98:	9b02      	ldr	r3, [sp, #8]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	b01c      	add	sp, #112	; 0x70
 8005da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005da4:	b003      	add	sp, #12
 8005da6:	4770      	bx	lr
 8005da8:	20000010 	.word	0x20000010
 8005dac:	ffff0208 	.word	0xffff0208

08005db0 <__malloc_lock>:
 8005db0:	4801      	ldr	r0, [pc, #4]	; (8005db8 <__malloc_lock+0x8>)
 8005db2:	f000 baf9 	b.w	80063a8 <__retarget_lock_acquire_recursive>
 8005db6:	bf00      	nop
 8005db8:	200002cc 	.word	0x200002cc

08005dbc <__malloc_unlock>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	; (8005dc4 <__malloc_unlock+0x8>)
 8005dbe:	f000 baf4 	b.w	80063aa <__retarget_lock_release_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	200002cc 	.word	0x200002cc

08005dc8 <__ssputs_r>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	688e      	ldr	r6, [r1, #8]
 8005dce:	429e      	cmp	r6, r3
 8005dd0:	4682      	mov	sl, r0
 8005dd2:	460c      	mov	r4, r1
 8005dd4:	4690      	mov	r8, r2
 8005dd6:	461f      	mov	r7, r3
 8005dd8:	d838      	bhi.n	8005e4c <__ssputs_r+0x84>
 8005dda:	898a      	ldrh	r2, [r1, #12]
 8005ddc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005de0:	d032      	beq.n	8005e48 <__ssputs_r+0x80>
 8005de2:	6825      	ldr	r5, [r4, #0]
 8005de4:	6909      	ldr	r1, [r1, #16]
 8005de6:	eba5 0901 	sub.w	r9, r5, r1
 8005dea:	6965      	ldr	r5, [r4, #20]
 8005dec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005df0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005df4:	3301      	adds	r3, #1
 8005df6:	444b      	add	r3, r9
 8005df8:	106d      	asrs	r5, r5, #1
 8005dfa:	429d      	cmp	r5, r3
 8005dfc:	bf38      	it	cc
 8005dfe:	461d      	movcc	r5, r3
 8005e00:	0553      	lsls	r3, r2, #21
 8005e02:	d531      	bpl.n	8005e68 <__ssputs_r+0xa0>
 8005e04:	4629      	mov	r1, r5
 8005e06:	f7ff ff05 	bl	8005c14 <_malloc_r>
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	b950      	cbnz	r0, 8005e24 <__ssputs_r+0x5c>
 8005e0e:	230c      	movs	r3, #12
 8005e10:	f8ca 3000 	str.w	r3, [sl]
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e24:	6921      	ldr	r1, [r4, #16]
 8005e26:	464a      	mov	r2, r9
 8005e28:	f7ff fe8e 	bl	8005b48 <memcpy>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e36:	81a3      	strh	r3, [r4, #12]
 8005e38:	6126      	str	r6, [r4, #16]
 8005e3a:	6165      	str	r5, [r4, #20]
 8005e3c:	444e      	add	r6, r9
 8005e3e:	eba5 0509 	sub.w	r5, r5, r9
 8005e42:	6026      	str	r6, [r4, #0]
 8005e44:	60a5      	str	r5, [r4, #8]
 8005e46:	463e      	mov	r6, r7
 8005e48:	42be      	cmp	r6, r7
 8005e4a:	d900      	bls.n	8005e4e <__ssputs_r+0x86>
 8005e4c:	463e      	mov	r6, r7
 8005e4e:	4632      	mov	r2, r6
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	4641      	mov	r1, r8
 8005e54:	f000 faaa 	bl	80063ac <memmove>
 8005e58:	68a3      	ldr	r3, [r4, #8]
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	1b9b      	subs	r3, r3, r6
 8005e5e:	4432      	add	r2, r6
 8005e60:	60a3      	str	r3, [r4, #8]
 8005e62:	6022      	str	r2, [r4, #0]
 8005e64:	2000      	movs	r0, #0
 8005e66:	e7db      	b.n	8005e20 <__ssputs_r+0x58>
 8005e68:	462a      	mov	r2, r5
 8005e6a:	f000 fab9 	bl	80063e0 <_realloc_r>
 8005e6e:	4606      	mov	r6, r0
 8005e70:	2800      	cmp	r0, #0
 8005e72:	d1e1      	bne.n	8005e38 <__ssputs_r+0x70>
 8005e74:	6921      	ldr	r1, [r4, #16]
 8005e76:	4650      	mov	r0, sl
 8005e78:	f7ff fe7c 	bl	8005b74 <_free_r>
 8005e7c:	e7c7      	b.n	8005e0e <__ssputs_r+0x46>
	...

08005e80 <_svfiprintf_r>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	4698      	mov	r8, r3
 8005e86:	898b      	ldrh	r3, [r1, #12]
 8005e88:	061b      	lsls	r3, r3, #24
 8005e8a:	b09d      	sub	sp, #116	; 0x74
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	460d      	mov	r5, r1
 8005e90:	4614      	mov	r4, r2
 8005e92:	d50e      	bpl.n	8005eb2 <_svfiprintf_r+0x32>
 8005e94:	690b      	ldr	r3, [r1, #16]
 8005e96:	b963      	cbnz	r3, 8005eb2 <_svfiprintf_r+0x32>
 8005e98:	2140      	movs	r1, #64	; 0x40
 8005e9a:	f7ff febb 	bl	8005c14 <_malloc_r>
 8005e9e:	6028      	str	r0, [r5, #0]
 8005ea0:	6128      	str	r0, [r5, #16]
 8005ea2:	b920      	cbnz	r0, 8005eae <_svfiprintf_r+0x2e>
 8005ea4:	230c      	movs	r3, #12
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	e0d1      	b.n	8006052 <_svfiprintf_r+0x1d2>
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	616b      	str	r3, [r5, #20]
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb6:	2320      	movs	r3, #32
 8005eb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec0:	2330      	movs	r3, #48	; 0x30
 8005ec2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800606c <_svfiprintf_r+0x1ec>
 8005ec6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eca:	f04f 0901 	mov.w	r9, #1
 8005ece:	4623      	mov	r3, r4
 8005ed0:	469a      	mov	sl, r3
 8005ed2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ed6:	b10a      	cbz	r2, 8005edc <_svfiprintf_r+0x5c>
 8005ed8:	2a25      	cmp	r2, #37	; 0x25
 8005eda:	d1f9      	bne.n	8005ed0 <_svfiprintf_r+0x50>
 8005edc:	ebba 0b04 	subs.w	fp, sl, r4
 8005ee0:	d00b      	beq.n	8005efa <_svfiprintf_r+0x7a>
 8005ee2:	465b      	mov	r3, fp
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	4629      	mov	r1, r5
 8005ee8:	4638      	mov	r0, r7
 8005eea:	f7ff ff6d 	bl	8005dc8 <__ssputs_r>
 8005eee:	3001      	adds	r0, #1
 8005ef0:	f000 80aa 	beq.w	8006048 <_svfiprintf_r+0x1c8>
 8005ef4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ef6:	445a      	add	r2, fp
 8005ef8:	9209      	str	r2, [sp, #36]	; 0x24
 8005efa:	f89a 3000 	ldrb.w	r3, [sl]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 80a2 	beq.w	8006048 <_svfiprintf_r+0x1c8>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f0e:	f10a 0a01 	add.w	sl, sl, #1
 8005f12:	9304      	str	r3, [sp, #16]
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f1c:	4654      	mov	r4, sl
 8005f1e:	2205      	movs	r2, #5
 8005f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f24:	4851      	ldr	r0, [pc, #324]	; (800606c <_svfiprintf_r+0x1ec>)
 8005f26:	f7fa f963 	bl	80001f0 <memchr>
 8005f2a:	9a04      	ldr	r2, [sp, #16]
 8005f2c:	b9d8      	cbnz	r0, 8005f66 <_svfiprintf_r+0xe6>
 8005f2e:	06d0      	lsls	r0, r2, #27
 8005f30:	bf44      	itt	mi
 8005f32:	2320      	movmi	r3, #32
 8005f34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f38:	0711      	lsls	r1, r2, #28
 8005f3a:	bf44      	itt	mi
 8005f3c:	232b      	movmi	r3, #43	; 0x2b
 8005f3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f42:	f89a 3000 	ldrb.w	r3, [sl]
 8005f46:	2b2a      	cmp	r3, #42	; 0x2a
 8005f48:	d015      	beq.n	8005f76 <_svfiprintf_r+0xf6>
 8005f4a:	9a07      	ldr	r2, [sp, #28]
 8005f4c:	4654      	mov	r4, sl
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f04f 0c0a 	mov.w	ip, #10
 8005f54:	4621      	mov	r1, r4
 8005f56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f5a:	3b30      	subs	r3, #48	; 0x30
 8005f5c:	2b09      	cmp	r3, #9
 8005f5e:	d94e      	bls.n	8005ffe <_svfiprintf_r+0x17e>
 8005f60:	b1b0      	cbz	r0, 8005f90 <_svfiprintf_r+0x110>
 8005f62:	9207      	str	r2, [sp, #28]
 8005f64:	e014      	b.n	8005f90 <_svfiprintf_r+0x110>
 8005f66:	eba0 0308 	sub.w	r3, r0, r8
 8005f6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	46a2      	mov	sl, r4
 8005f74:	e7d2      	b.n	8005f1c <_svfiprintf_r+0x9c>
 8005f76:	9b03      	ldr	r3, [sp, #12]
 8005f78:	1d19      	adds	r1, r3, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	9103      	str	r1, [sp, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfbb      	ittet	lt
 8005f82:	425b      	neglt	r3, r3
 8005f84:	f042 0202 	orrlt.w	r2, r2, #2
 8005f88:	9307      	strge	r3, [sp, #28]
 8005f8a:	9307      	strlt	r3, [sp, #28]
 8005f8c:	bfb8      	it	lt
 8005f8e:	9204      	strlt	r2, [sp, #16]
 8005f90:	7823      	ldrb	r3, [r4, #0]
 8005f92:	2b2e      	cmp	r3, #46	; 0x2e
 8005f94:	d10c      	bne.n	8005fb0 <_svfiprintf_r+0x130>
 8005f96:	7863      	ldrb	r3, [r4, #1]
 8005f98:	2b2a      	cmp	r3, #42	; 0x2a
 8005f9a:	d135      	bne.n	8006008 <_svfiprintf_r+0x188>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	1d1a      	adds	r2, r3, #4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	9203      	str	r2, [sp, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bfb8      	it	lt
 8005fa8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fac:	3402      	adds	r4, #2
 8005fae:	9305      	str	r3, [sp, #20]
 8005fb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800607c <_svfiprintf_r+0x1fc>
 8005fb4:	7821      	ldrb	r1, [r4, #0]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	4650      	mov	r0, sl
 8005fba:	f7fa f919 	bl	80001f0 <memchr>
 8005fbe:	b140      	cbz	r0, 8005fd2 <_svfiprintf_r+0x152>
 8005fc0:	2340      	movs	r3, #64	; 0x40
 8005fc2:	eba0 000a 	sub.w	r0, r0, sl
 8005fc6:	fa03 f000 	lsl.w	r0, r3, r0
 8005fca:	9b04      	ldr	r3, [sp, #16]
 8005fcc:	4303      	orrs	r3, r0
 8005fce:	3401      	adds	r4, #1
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fd6:	4826      	ldr	r0, [pc, #152]	; (8006070 <_svfiprintf_r+0x1f0>)
 8005fd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fdc:	2206      	movs	r2, #6
 8005fde:	f7fa f907 	bl	80001f0 <memchr>
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	d038      	beq.n	8006058 <_svfiprintf_r+0x1d8>
 8005fe6:	4b23      	ldr	r3, [pc, #140]	; (8006074 <_svfiprintf_r+0x1f4>)
 8005fe8:	bb1b      	cbnz	r3, 8006032 <_svfiprintf_r+0x1b2>
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	3307      	adds	r3, #7
 8005fee:	f023 0307 	bic.w	r3, r3, #7
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	9303      	str	r3, [sp, #12]
 8005ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff8:	4433      	add	r3, r6
 8005ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8005ffc:	e767      	b.n	8005ece <_svfiprintf_r+0x4e>
 8005ffe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006002:	460c      	mov	r4, r1
 8006004:	2001      	movs	r0, #1
 8006006:	e7a5      	b.n	8005f54 <_svfiprintf_r+0xd4>
 8006008:	2300      	movs	r3, #0
 800600a:	3401      	adds	r4, #1
 800600c:	9305      	str	r3, [sp, #20]
 800600e:	4619      	mov	r1, r3
 8006010:	f04f 0c0a 	mov.w	ip, #10
 8006014:	4620      	mov	r0, r4
 8006016:	f810 2b01 	ldrb.w	r2, [r0], #1
 800601a:	3a30      	subs	r2, #48	; 0x30
 800601c:	2a09      	cmp	r2, #9
 800601e:	d903      	bls.n	8006028 <_svfiprintf_r+0x1a8>
 8006020:	2b00      	cmp	r3, #0
 8006022:	d0c5      	beq.n	8005fb0 <_svfiprintf_r+0x130>
 8006024:	9105      	str	r1, [sp, #20]
 8006026:	e7c3      	b.n	8005fb0 <_svfiprintf_r+0x130>
 8006028:	fb0c 2101 	mla	r1, ip, r1, r2
 800602c:	4604      	mov	r4, r0
 800602e:	2301      	movs	r3, #1
 8006030:	e7f0      	b.n	8006014 <_svfiprintf_r+0x194>
 8006032:	ab03      	add	r3, sp, #12
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	462a      	mov	r2, r5
 8006038:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <_svfiprintf_r+0x1f8>)
 800603a:	a904      	add	r1, sp, #16
 800603c:	4638      	mov	r0, r7
 800603e:	f3af 8000 	nop.w
 8006042:	1c42      	adds	r2, r0, #1
 8006044:	4606      	mov	r6, r0
 8006046:	d1d6      	bne.n	8005ff6 <_svfiprintf_r+0x176>
 8006048:	89ab      	ldrh	r3, [r5, #12]
 800604a:	065b      	lsls	r3, r3, #25
 800604c:	f53f af2c 	bmi.w	8005ea8 <_svfiprintf_r+0x28>
 8006050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006052:	b01d      	add	sp, #116	; 0x74
 8006054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006058:	ab03      	add	r3, sp, #12
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	462a      	mov	r2, r5
 800605e:	4b06      	ldr	r3, [pc, #24]	; (8006078 <_svfiprintf_r+0x1f8>)
 8006060:	a904      	add	r1, sp, #16
 8006062:	4638      	mov	r0, r7
 8006064:	f000 f87a 	bl	800615c <_printf_i>
 8006068:	e7eb      	b.n	8006042 <_svfiprintf_r+0x1c2>
 800606a:	bf00      	nop
 800606c:	08006540 	.word	0x08006540
 8006070:	0800654a 	.word	0x0800654a
 8006074:	00000000 	.word	0x00000000
 8006078:	08005dc9 	.word	0x08005dc9
 800607c:	08006546 	.word	0x08006546

08006080 <_printf_common>:
 8006080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006084:	4616      	mov	r6, r2
 8006086:	4699      	mov	r9, r3
 8006088:	688a      	ldr	r2, [r1, #8]
 800608a:	690b      	ldr	r3, [r1, #16]
 800608c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006090:	4293      	cmp	r3, r2
 8006092:	bfb8      	it	lt
 8006094:	4613      	movlt	r3, r2
 8006096:	6033      	str	r3, [r6, #0]
 8006098:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800609c:	4607      	mov	r7, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	b10a      	cbz	r2, 80060a6 <_printf_common+0x26>
 80060a2:	3301      	adds	r3, #1
 80060a4:	6033      	str	r3, [r6, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	0699      	lsls	r1, r3, #26
 80060aa:	bf42      	ittt	mi
 80060ac:	6833      	ldrmi	r3, [r6, #0]
 80060ae:	3302      	addmi	r3, #2
 80060b0:	6033      	strmi	r3, [r6, #0]
 80060b2:	6825      	ldr	r5, [r4, #0]
 80060b4:	f015 0506 	ands.w	r5, r5, #6
 80060b8:	d106      	bne.n	80060c8 <_printf_common+0x48>
 80060ba:	f104 0a19 	add.w	sl, r4, #25
 80060be:	68e3      	ldr	r3, [r4, #12]
 80060c0:	6832      	ldr	r2, [r6, #0]
 80060c2:	1a9b      	subs	r3, r3, r2
 80060c4:	42ab      	cmp	r3, r5
 80060c6:	dc26      	bgt.n	8006116 <_printf_common+0x96>
 80060c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060cc:	1e13      	subs	r3, r2, #0
 80060ce:	6822      	ldr	r2, [r4, #0]
 80060d0:	bf18      	it	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	0692      	lsls	r2, r2, #26
 80060d6:	d42b      	bmi.n	8006130 <_printf_common+0xb0>
 80060d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060dc:	4649      	mov	r1, r9
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d01e      	beq.n	8006124 <_printf_common+0xa4>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	68e5      	ldr	r5, [r4, #12]
 80060ea:	6832      	ldr	r2, [r6, #0]
 80060ec:	f003 0306 	and.w	r3, r3, #6
 80060f0:	2b04      	cmp	r3, #4
 80060f2:	bf08      	it	eq
 80060f4:	1aad      	subeq	r5, r5, r2
 80060f6:	68a3      	ldr	r3, [r4, #8]
 80060f8:	6922      	ldr	r2, [r4, #16]
 80060fa:	bf0c      	ite	eq
 80060fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006100:	2500      	movne	r5, #0
 8006102:	4293      	cmp	r3, r2
 8006104:	bfc4      	itt	gt
 8006106:	1a9b      	subgt	r3, r3, r2
 8006108:	18ed      	addgt	r5, r5, r3
 800610a:	2600      	movs	r6, #0
 800610c:	341a      	adds	r4, #26
 800610e:	42b5      	cmp	r5, r6
 8006110:	d11a      	bne.n	8006148 <_printf_common+0xc8>
 8006112:	2000      	movs	r0, #0
 8006114:	e008      	b.n	8006128 <_printf_common+0xa8>
 8006116:	2301      	movs	r3, #1
 8006118:	4652      	mov	r2, sl
 800611a:	4649      	mov	r1, r9
 800611c:	4638      	mov	r0, r7
 800611e:	47c0      	blx	r8
 8006120:	3001      	adds	r0, #1
 8006122:	d103      	bne.n	800612c <_printf_common+0xac>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800612c:	3501      	adds	r5, #1
 800612e:	e7c6      	b.n	80060be <_printf_common+0x3e>
 8006130:	18e1      	adds	r1, r4, r3
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	2030      	movs	r0, #48	; 0x30
 8006136:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800613a:	4422      	add	r2, r4
 800613c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006140:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006144:	3302      	adds	r3, #2
 8006146:	e7c7      	b.n	80060d8 <_printf_common+0x58>
 8006148:	2301      	movs	r3, #1
 800614a:	4622      	mov	r2, r4
 800614c:	4649      	mov	r1, r9
 800614e:	4638      	mov	r0, r7
 8006150:	47c0      	blx	r8
 8006152:	3001      	adds	r0, #1
 8006154:	d0e6      	beq.n	8006124 <_printf_common+0xa4>
 8006156:	3601      	adds	r6, #1
 8006158:	e7d9      	b.n	800610e <_printf_common+0x8e>
	...

0800615c <_printf_i>:
 800615c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006160:	460c      	mov	r4, r1
 8006162:	4691      	mov	r9, r2
 8006164:	7e27      	ldrb	r7, [r4, #24]
 8006166:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006168:	2f78      	cmp	r7, #120	; 0x78
 800616a:	4680      	mov	r8, r0
 800616c:	469a      	mov	sl, r3
 800616e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006172:	d807      	bhi.n	8006184 <_printf_i+0x28>
 8006174:	2f62      	cmp	r7, #98	; 0x62
 8006176:	d80a      	bhi.n	800618e <_printf_i+0x32>
 8006178:	2f00      	cmp	r7, #0
 800617a:	f000 80d8 	beq.w	800632e <_printf_i+0x1d2>
 800617e:	2f58      	cmp	r7, #88	; 0x58
 8006180:	f000 80a3 	beq.w	80062ca <_printf_i+0x16e>
 8006184:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006188:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800618c:	e03a      	b.n	8006204 <_printf_i+0xa8>
 800618e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006192:	2b15      	cmp	r3, #21
 8006194:	d8f6      	bhi.n	8006184 <_printf_i+0x28>
 8006196:	a001      	add	r0, pc, #4	; (adr r0, 800619c <_printf_i+0x40>)
 8006198:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800619c:	080061f5 	.word	0x080061f5
 80061a0:	08006209 	.word	0x08006209
 80061a4:	08006185 	.word	0x08006185
 80061a8:	08006185 	.word	0x08006185
 80061ac:	08006185 	.word	0x08006185
 80061b0:	08006185 	.word	0x08006185
 80061b4:	08006209 	.word	0x08006209
 80061b8:	08006185 	.word	0x08006185
 80061bc:	08006185 	.word	0x08006185
 80061c0:	08006185 	.word	0x08006185
 80061c4:	08006185 	.word	0x08006185
 80061c8:	08006315 	.word	0x08006315
 80061cc:	08006239 	.word	0x08006239
 80061d0:	080062f7 	.word	0x080062f7
 80061d4:	08006185 	.word	0x08006185
 80061d8:	08006185 	.word	0x08006185
 80061dc:	08006337 	.word	0x08006337
 80061e0:	08006185 	.word	0x08006185
 80061e4:	08006239 	.word	0x08006239
 80061e8:	08006185 	.word	0x08006185
 80061ec:	08006185 	.word	0x08006185
 80061f0:	080062ff 	.word	0x080062ff
 80061f4:	680b      	ldr	r3, [r1, #0]
 80061f6:	1d1a      	adds	r2, r3, #4
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	600a      	str	r2, [r1, #0]
 80061fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006200:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006204:	2301      	movs	r3, #1
 8006206:	e0a3      	b.n	8006350 <_printf_i+0x1f4>
 8006208:	6825      	ldr	r5, [r4, #0]
 800620a:	6808      	ldr	r0, [r1, #0]
 800620c:	062e      	lsls	r6, r5, #24
 800620e:	f100 0304 	add.w	r3, r0, #4
 8006212:	d50a      	bpl.n	800622a <_printf_i+0xce>
 8006214:	6805      	ldr	r5, [r0, #0]
 8006216:	600b      	str	r3, [r1, #0]
 8006218:	2d00      	cmp	r5, #0
 800621a:	da03      	bge.n	8006224 <_printf_i+0xc8>
 800621c:	232d      	movs	r3, #45	; 0x2d
 800621e:	426d      	negs	r5, r5
 8006220:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006224:	485e      	ldr	r0, [pc, #376]	; (80063a0 <_printf_i+0x244>)
 8006226:	230a      	movs	r3, #10
 8006228:	e019      	b.n	800625e <_printf_i+0x102>
 800622a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800622e:	6805      	ldr	r5, [r0, #0]
 8006230:	600b      	str	r3, [r1, #0]
 8006232:	bf18      	it	ne
 8006234:	b22d      	sxthne	r5, r5
 8006236:	e7ef      	b.n	8006218 <_printf_i+0xbc>
 8006238:	680b      	ldr	r3, [r1, #0]
 800623a:	6825      	ldr	r5, [r4, #0]
 800623c:	1d18      	adds	r0, r3, #4
 800623e:	6008      	str	r0, [r1, #0]
 8006240:	0628      	lsls	r0, r5, #24
 8006242:	d501      	bpl.n	8006248 <_printf_i+0xec>
 8006244:	681d      	ldr	r5, [r3, #0]
 8006246:	e002      	b.n	800624e <_printf_i+0xf2>
 8006248:	0669      	lsls	r1, r5, #25
 800624a:	d5fb      	bpl.n	8006244 <_printf_i+0xe8>
 800624c:	881d      	ldrh	r5, [r3, #0]
 800624e:	4854      	ldr	r0, [pc, #336]	; (80063a0 <_printf_i+0x244>)
 8006250:	2f6f      	cmp	r7, #111	; 0x6f
 8006252:	bf0c      	ite	eq
 8006254:	2308      	moveq	r3, #8
 8006256:	230a      	movne	r3, #10
 8006258:	2100      	movs	r1, #0
 800625a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800625e:	6866      	ldr	r6, [r4, #4]
 8006260:	60a6      	str	r6, [r4, #8]
 8006262:	2e00      	cmp	r6, #0
 8006264:	bfa2      	ittt	ge
 8006266:	6821      	ldrge	r1, [r4, #0]
 8006268:	f021 0104 	bicge.w	r1, r1, #4
 800626c:	6021      	strge	r1, [r4, #0]
 800626e:	b90d      	cbnz	r5, 8006274 <_printf_i+0x118>
 8006270:	2e00      	cmp	r6, #0
 8006272:	d04d      	beq.n	8006310 <_printf_i+0x1b4>
 8006274:	4616      	mov	r6, r2
 8006276:	fbb5 f1f3 	udiv	r1, r5, r3
 800627a:	fb03 5711 	mls	r7, r3, r1, r5
 800627e:	5dc7      	ldrb	r7, [r0, r7]
 8006280:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006284:	462f      	mov	r7, r5
 8006286:	42bb      	cmp	r3, r7
 8006288:	460d      	mov	r5, r1
 800628a:	d9f4      	bls.n	8006276 <_printf_i+0x11a>
 800628c:	2b08      	cmp	r3, #8
 800628e:	d10b      	bne.n	80062a8 <_printf_i+0x14c>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	07df      	lsls	r7, r3, #31
 8006294:	d508      	bpl.n	80062a8 <_printf_i+0x14c>
 8006296:	6923      	ldr	r3, [r4, #16]
 8006298:	6861      	ldr	r1, [r4, #4]
 800629a:	4299      	cmp	r1, r3
 800629c:	bfde      	ittt	le
 800629e:	2330      	movle	r3, #48	; 0x30
 80062a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062a8:	1b92      	subs	r2, r2, r6
 80062aa:	6122      	str	r2, [r4, #16]
 80062ac:	f8cd a000 	str.w	sl, [sp]
 80062b0:	464b      	mov	r3, r9
 80062b2:	aa03      	add	r2, sp, #12
 80062b4:	4621      	mov	r1, r4
 80062b6:	4640      	mov	r0, r8
 80062b8:	f7ff fee2 	bl	8006080 <_printf_common>
 80062bc:	3001      	adds	r0, #1
 80062be:	d14c      	bne.n	800635a <_printf_i+0x1fe>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b004      	add	sp, #16
 80062c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062ca:	4835      	ldr	r0, [pc, #212]	; (80063a0 <_printf_i+0x244>)
 80062cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	680e      	ldr	r6, [r1, #0]
 80062d4:	061f      	lsls	r7, r3, #24
 80062d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80062da:	600e      	str	r6, [r1, #0]
 80062dc:	d514      	bpl.n	8006308 <_printf_i+0x1ac>
 80062de:	07d9      	lsls	r1, r3, #31
 80062e0:	bf44      	itt	mi
 80062e2:	f043 0320 	orrmi.w	r3, r3, #32
 80062e6:	6023      	strmi	r3, [r4, #0]
 80062e8:	b91d      	cbnz	r5, 80062f2 <_printf_i+0x196>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	f023 0320 	bic.w	r3, r3, #32
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	2310      	movs	r3, #16
 80062f4:	e7b0      	b.n	8006258 <_printf_i+0xfc>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	f043 0320 	orr.w	r3, r3, #32
 80062fc:	6023      	str	r3, [r4, #0]
 80062fe:	2378      	movs	r3, #120	; 0x78
 8006300:	4828      	ldr	r0, [pc, #160]	; (80063a4 <_printf_i+0x248>)
 8006302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006306:	e7e3      	b.n	80062d0 <_printf_i+0x174>
 8006308:	065e      	lsls	r6, r3, #25
 800630a:	bf48      	it	mi
 800630c:	b2ad      	uxthmi	r5, r5
 800630e:	e7e6      	b.n	80062de <_printf_i+0x182>
 8006310:	4616      	mov	r6, r2
 8006312:	e7bb      	b.n	800628c <_printf_i+0x130>
 8006314:	680b      	ldr	r3, [r1, #0]
 8006316:	6826      	ldr	r6, [r4, #0]
 8006318:	6960      	ldr	r0, [r4, #20]
 800631a:	1d1d      	adds	r5, r3, #4
 800631c:	600d      	str	r5, [r1, #0]
 800631e:	0635      	lsls	r5, r6, #24
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	d501      	bpl.n	8006328 <_printf_i+0x1cc>
 8006324:	6018      	str	r0, [r3, #0]
 8006326:	e002      	b.n	800632e <_printf_i+0x1d2>
 8006328:	0671      	lsls	r1, r6, #25
 800632a:	d5fb      	bpl.n	8006324 <_printf_i+0x1c8>
 800632c:	8018      	strh	r0, [r3, #0]
 800632e:	2300      	movs	r3, #0
 8006330:	6123      	str	r3, [r4, #16]
 8006332:	4616      	mov	r6, r2
 8006334:	e7ba      	b.n	80062ac <_printf_i+0x150>
 8006336:	680b      	ldr	r3, [r1, #0]
 8006338:	1d1a      	adds	r2, r3, #4
 800633a:	600a      	str	r2, [r1, #0]
 800633c:	681e      	ldr	r6, [r3, #0]
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	2100      	movs	r1, #0
 8006342:	4630      	mov	r0, r6
 8006344:	f7f9 ff54 	bl	80001f0 <memchr>
 8006348:	b108      	cbz	r0, 800634e <_printf_i+0x1f2>
 800634a:	1b80      	subs	r0, r0, r6
 800634c:	6060      	str	r0, [r4, #4]
 800634e:	6863      	ldr	r3, [r4, #4]
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	2300      	movs	r3, #0
 8006354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006358:	e7a8      	b.n	80062ac <_printf_i+0x150>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	4632      	mov	r2, r6
 800635e:	4649      	mov	r1, r9
 8006360:	4640      	mov	r0, r8
 8006362:	47d0      	blx	sl
 8006364:	3001      	adds	r0, #1
 8006366:	d0ab      	beq.n	80062c0 <_printf_i+0x164>
 8006368:	6823      	ldr	r3, [r4, #0]
 800636a:	079b      	lsls	r3, r3, #30
 800636c:	d413      	bmi.n	8006396 <_printf_i+0x23a>
 800636e:	68e0      	ldr	r0, [r4, #12]
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	4298      	cmp	r0, r3
 8006374:	bfb8      	it	lt
 8006376:	4618      	movlt	r0, r3
 8006378:	e7a4      	b.n	80062c4 <_printf_i+0x168>
 800637a:	2301      	movs	r3, #1
 800637c:	4632      	mov	r2, r6
 800637e:	4649      	mov	r1, r9
 8006380:	4640      	mov	r0, r8
 8006382:	47d0      	blx	sl
 8006384:	3001      	adds	r0, #1
 8006386:	d09b      	beq.n	80062c0 <_printf_i+0x164>
 8006388:	3501      	adds	r5, #1
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	9903      	ldr	r1, [sp, #12]
 800638e:	1a5b      	subs	r3, r3, r1
 8006390:	42ab      	cmp	r3, r5
 8006392:	dcf2      	bgt.n	800637a <_printf_i+0x21e>
 8006394:	e7eb      	b.n	800636e <_printf_i+0x212>
 8006396:	2500      	movs	r5, #0
 8006398:	f104 0619 	add.w	r6, r4, #25
 800639c:	e7f5      	b.n	800638a <_printf_i+0x22e>
 800639e:	bf00      	nop
 80063a0:	08006551 	.word	0x08006551
 80063a4:	08006562 	.word	0x08006562

080063a8 <__retarget_lock_acquire_recursive>:
 80063a8:	4770      	bx	lr

080063aa <__retarget_lock_release_recursive>:
 80063aa:	4770      	bx	lr

080063ac <memmove>:
 80063ac:	4288      	cmp	r0, r1
 80063ae:	b510      	push	{r4, lr}
 80063b0:	eb01 0402 	add.w	r4, r1, r2
 80063b4:	d902      	bls.n	80063bc <memmove+0x10>
 80063b6:	4284      	cmp	r4, r0
 80063b8:	4623      	mov	r3, r4
 80063ba:	d807      	bhi.n	80063cc <memmove+0x20>
 80063bc:	1e43      	subs	r3, r0, #1
 80063be:	42a1      	cmp	r1, r4
 80063c0:	d008      	beq.n	80063d4 <memmove+0x28>
 80063c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ca:	e7f8      	b.n	80063be <memmove+0x12>
 80063cc:	4402      	add	r2, r0
 80063ce:	4601      	mov	r1, r0
 80063d0:	428a      	cmp	r2, r1
 80063d2:	d100      	bne.n	80063d6 <memmove+0x2a>
 80063d4:	bd10      	pop	{r4, pc}
 80063d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063de:	e7f7      	b.n	80063d0 <memmove+0x24>

080063e0 <_realloc_r>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	4607      	mov	r7, r0
 80063e4:	4614      	mov	r4, r2
 80063e6:	460e      	mov	r6, r1
 80063e8:	b921      	cbnz	r1, 80063f4 <_realloc_r+0x14>
 80063ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063ee:	4611      	mov	r1, r2
 80063f0:	f7ff bc10 	b.w	8005c14 <_malloc_r>
 80063f4:	b922      	cbnz	r2, 8006400 <_realloc_r+0x20>
 80063f6:	f7ff fbbd 	bl	8005b74 <_free_r>
 80063fa:	4625      	mov	r5, r4
 80063fc:	4628      	mov	r0, r5
 80063fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006400:	f000 f814 	bl	800642c <_malloc_usable_size_r>
 8006404:	42a0      	cmp	r0, r4
 8006406:	d20f      	bcs.n	8006428 <_realloc_r+0x48>
 8006408:	4621      	mov	r1, r4
 800640a:	4638      	mov	r0, r7
 800640c:	f7ff fc02 	bl	8005c14 <_malloc_r>
 8006410:	4605      	mov	r5, r0
 8006412:	2800      	cmp	r0, #0
 8006414:	d0f2      	beq.n	80063fc <_realloc_r+0x1c>
 8006416:	4631      	mov	r1, r6
 8006418:	4622      	mov	r2, r4
 800641a:	f7ff fb95 	bl	8005b48 <memcpy>
 800641e:	4631      	mov	r1, r6
 8006420:	4638      	mov	r0, r7
 8006422:	f7ff fba7 	bl	8005b74 <_free_r>
 8006426:	e7e9      	b.n	80063fc <_realloc_r+0x1c>
 8006428:	4635      	mov	r5, r6
 800642a:	e7e7      	b.n	80063fc <_realloc_r+0x1c>

0800642c <_malloc_usable_size_r>:
 800642c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006430:	1f18      	subs	r0, r3, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfbc      	itt	lt
 8006436:	580b      	ldrlt	r3, [r1, r0]
 8006438:	18c0      	addlt	r0, r0, r3
 800643a:	4770      	bx	lr

0800643c <_init>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

08006448 <_fini>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	bf00      	nop
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr
