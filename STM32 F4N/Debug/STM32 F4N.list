
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005864  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  080059fc  080059fc  000159fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ae8  08005ae8  00015ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005af0  08005af0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005af0  08005af0  00015af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005af4  08005af4  00015af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  08005b6c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005b6c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00018834  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002fb46  00000000  00000000  000388d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060d0  00000000  00000000  0006841e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0006e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aa83a  00000000  00000000  0006f858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001220  00000000  00000000  0011a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ede8  00000000  00000000  0011b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013a0a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  0013a0f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080059e4 	.word	0x080059e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	080059e4 	.word	0x080059e4

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e6:	490e      	ldr	r1, [pc, #56]	; (8000520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004fc:	4c0b      	ldr	r4, [pc, #44]	; (800052c <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800050a:	f000 ff39 	bl	8001380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f005 f96b 	bl	80057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000512:	f000 fafd 	bl	8000b10 <main>
  bx  lr    
 8000516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000524:	08005af8 	.word	0x08005af8
  ldr r2, =_sbss
 8000528:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800052c:	20000354 	.word	0x20000354

08000530 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <DMA1_Stream0_IRQHandler>
	...

08000534 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b098      	sub	sp, #96	; 0x60
 8000538:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a69      	ldr	r2, [pc, #420]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000544:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000546:	4b67      	ldr	r3, [pc, #412]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a66      	ldr	r2, [pc, #408]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800054c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000550:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000552:	4b64      	ldr	r3, [pc, #400]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a63      	ldr	r2, [pc, #396]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	2003      	movs	r0, #3
 8000560:	f001 fc18 	bl	8001d94 <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000564:	2000      	movs	r0, #0
 8000566:	f000 ff1d 	bl	80013a4 <HAL_InitTick>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 800057a:	2301      	movs	r3, #1
 800057c:	e0ad      	b.n	80006da <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a58      	ldr	r2, [pc, #352]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b53      	ldr	r3, [pc, #332]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a52      	ldr	r2, [pc, #328]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 100MHz clock
  //NOTE: HSE Oscillator provided on STM32F411RE Nucleo 64 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80005b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 f94c 	bl	800585c <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80005c4:	2301      	movs	r3, #1
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 80005dc:	2332      	movs	r3, #50	; 0x32
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 80005e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fea3 	bl	8002338 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 8000602:	2301      	movs	r3, #1
 8000604:	e069      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000614:	6453      	str	r3, [r2, #68]	; 0x44
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000632:	230f      	movs	r3, #15
 8000634:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 8000636:	2302      	movs	r3, #2
 8000638:	623b      	str	r3, [r7, #32]

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 100MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f8ea 	bl	8002828 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 8000664:	2301      	movs	r3, #1
 8000666:	e038      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6313      	str	r3, [r2, #48]	; 0x30
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023c00 	.word	0x40023c00
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_ZN7QAD_ADCC1Ev>:
	uint8_t                 m_uDataIdx;


	//-----------
	//Constructor
	QAD_ADC() :
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_sTIMHandle({0}),
		m_sADCHandle({0}),
		m_uChannelCount(0) {}
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	705a      	strb	r2, [r3, #1]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	330c      	adds	r3, #12
 8000708:	2248      	movs	r2, #72	; 0x48
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f005 f8a5 	bl	800585c <memset>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3354      	adds	r3, #84	; 0x54
 8000716:	2248      	movs	r2, #72	; 0x48
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 f89e 	bl	800585c <memset>
 8000720:	230f      	movs	r3, #15
 8000722:	2b00      	cmp	r3, #0
 8000724:	db01      	blt.n	800072a <_ZN7QAD_ADCC1Ev+0x3a>
 8000726:	3b01      	subs	r3, #1
 8000728:	e7fb      	b.n	8000722 <_ZN7QAD_ADCC1Ev+0x32>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN7QAD_ADC3getEv>:


	  //-----------------
	  //Singleton Methods

	static QAD_ADC& get(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
		static QAD_ADC instance;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f3bf 8f5b 	dmb	ish
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d010      	beq.n	800077e <_ZN7QAD_ADC3getEv+0x42>
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 800075e:	f004 fff5 	bl	800574c <__cxa_guard_acquire>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d005      	beq.n	800077e <_ZN7QAD_ADC3getEv+0x42>
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <_ZN7QAD_ADC3getEv+0x4c>)
 8000774:	f7ff ffbc 	bl	80006f0 <_ZN7QAD_ADCC1Ev>
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 800077a:	f004 fff3 	bl	8005764 <__cxa_guard_release>
		return instance;
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <_ZN7QAD_ADC3getEv+0x4c>)
	}
 8000780:	4618      	mov	r0, r3
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000250 	.word	0x20000250
 8000788:	20000090 	.word	0x20000090

0800078c <_ZN7QAD_ADC7handlerEv>:


	  //--------------
	  //Handler Method

	static void handler(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
		get().imp_handler();
 8000790:	f7ff ffd4 	bl	800073c <_ZN7QAD_ADC3getEv>
 8000794:	4603      	mov	r3, r0
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f98d 	bl	8003ab6 <_ZN7QAD_ADC11imp_handlerEv>
	}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HardFault_Handler+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fb71 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0xe>
 80007c0:	20000254 	.word	0x20000254

080007c4 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <MemManage_Handler+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fb67 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007d2:	e7fe      	b.n	80007d2 <MemManage_Handler+0xe>
 80007d4:	20000254 	.word	0x20000254

080007d8 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <BusFault_Handler+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fb5d 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0xe>
 80007e8:	20000254 	.word	0x20000254

080007ec <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <UsageFault_Handler+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fb53 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007fa:	e7fe      	b.n	80007fa <UsageFault_Handler+0xe>
 80007fc:	20000254 	.word	0x20000254

08000800 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800082e:	f000 fde9 	bl	8001404 <HAL_IncTick>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Function
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <USART2_IRQHandler+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fcc6 	bl	80051d4 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000258 	.word	0x20000258

08000850 <ADC_IRQHandler>:


//ADC_IRQHandler
//Interrupt Handler Function
void ADC_IRQHandler(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  QAD_ADC::handler();
 8000854:	f7ff ff9a 	bl	800078c <_ZN7QAD_ADC7handlerEv>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN26QAD_PWM_Channel_InitStructaSERKS_>:
	uint8_t        uAF;      //Alternate function used to connect the GPIO pin to the respective timer peripheral


	//Assignment operator definition to allow easy copying of channel data from QAD_PWM_InitStruct to
	//members of m_sChannels array in QAD_PWM driver class
	QAD_PWM_Channel_InitStruct& operator=(const QAD_PWM_Channel_InitStruct& other) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
		eActive   = other.eActive;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	701a      	strb	r2, [r3, #0]
		pGPIO     = other.pGPIO;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	605a      	str	r2, [r3, #4]
		uPin      = other.uPin;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	891a      	ldrh	r2, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	811a      	strh	r2, [r3, #8]
		uAF       = other.uAF;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	7a9a      	ldrb	r2, [r3, #10]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	729a      	strb	r2, [r3, #10]
		return *this;
 8000886:	687b      	ldr	r3, [r7, #4]
	}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct>:
  //--------------------------
	//Constructors / Destructors

  QAD_PWM() = delete;                   //Delete the default class constructor, as we need an initialization structure to be provided on class creation

  QAD_PWM(QAD_PWM_InitStruct& sInit) :  //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  	m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_eTimer(sInit.eTimer),
		m_sHandle({0}),
		m_uPrescaler(sInit.uPrescaler),
		m_uPeriod(sInit.uPeriod) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	705a      	strb	r2, [r3, #1]
		m_eTimer(sInit.eTimer),
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	781a      	ldrb	r2, [r3, #0]
		m_uPeriod(sInit.uPeriod) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	709a      	strb	r2, [r3, #2]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2248      	movs	r2, #72	; 0x48
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 ffce 	bl	800585c <memset>
		m_uPrescaler(sInit.uPrescaler),
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685a      	ldr	r2, [r3, #4]
		m_uPeriod(sInit.uPeriod) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	651a      	str	r2, [r3, #80]	; 0x50
 80008d0:	2303      	movs	r3, #3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db01      	blt.n	80008da <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x46>
 80008d6:	3b01      	subs	r3, #1
 80008d8:	e7fb      	b.n	80008d2 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x3e>

  	//Copy channel specific data from initialization structure to m_sChannels array in QAD_PWM class
  	for (uint8_t i=0; i<QAD_PWM_CHANNEL_COUNT; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d818      	bhi.n	8000916 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x82>
  		m_sChannels[i] = sInit.sChannels[i];
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	3350      	adds	r3, #80	; 0x50
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	1d18      	adds	r0, r3, #4
 80008f6:	7bfa      	ldrb	r2, [r7, #15]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	3308      	adds	r3, #8
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	4413      	add	r3, r2
 8000906:	3304      	adds	r3, #4
 8000908:	4619      	mov	r1, r3
 800090a:	f7ff ffa7 	bl	800085c <_ZN26QAD_PWM_Channel_InitStructaSERKS_>
  	for (uint8_t i=0; i<QAD_PWM_CHANNEL_COUNT; i++) {
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	3301      	adds	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e7e3      	b.n	80008de <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x4a>
  	}

  	//Fill out m_uChannelSelect array with TIM_Channel defines
  	m_uChannelSelect[QAD_PWM_Channel_1] = TIM_CHANNEL_1;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	m_uChannelSelect[QAD_PWM_Channel_2] = TIM_CHANNEL_2;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2204      	movs	r2, #4
 8000922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	m_uChannelSelect[QAD_PWM_Channel_3] = TIM_CHANNEL_3;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2208      	movs	r2, #8
 800092a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  	m_uChannelSelect[QAD_PWM_Channel_4] = TIM_CHANNEL_4;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	220c      	movs	r2, #12
 8000932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_ZN7QAD_RGBC1ER18QAD_RGB_InitStruct>:
	//Constructor

	//Delete default constructor
	QAD_RGB() = delete;

	QAD_RGB(QAD_RGB_InitStruct& sInit) :
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
		m_eBlueChannel(sInit.eBlueChannel),
		m_uRed(sInit.uRed),
		m_uGreen(sInit.uGreen),
		m_uBlue(sInit.uBlue),
		m_uBrightness(sInit.uBrightness),
		m_bInvert(sInit.bInvert) {}
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
		m_cPWM(sInit.cPWM),
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
		m_bInvert(sInit.bInvert) {}
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
		m_eRedChannel(sInit.eRedChannel),
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	791a      	ldrb	r2, [r3, #4]
		m_bInvert(sInit.bInvert) {}
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	721a      	strb	r2, [r3, #8]
		m_eGreenChannel(sInit.eGreenChannel),
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	795a      	ldrb	r2, [r3, #5]
		m_bInvert(sInit.bInvert) {}
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	725a      	strb	r2, [r3, #9]
		m_eBlueChannel(sInit.eBlueChannel),
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	799a      	ldrb	r2, [r3, #6]
		m_bInvert(sInit.bInvert) {}
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	729a      	strb	r2, [r3, #10]
		m_uRed(sInit.uRed),
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	79da      	ldrb	r2, [r3, #7]
		m_bInvert(sInit.bInvert) {}
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	72da      	strb	r2, [r3, #11]
		m_uGreen(sInit.uGreen),
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	7a1a      	ldrb	r2, [r3, #8]
		m_bInvert(sInit.bInvert) {}
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	731a      	strb	r2, [r3, #12]
		m_uBlue(sInit.uBlue),
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	7a5a      	ldrb	r2, [r3, #9]
		m_bInvert(sInit.bInvert) {}
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	735a      	strb	r2, [r3, #13]
		m_uBrightness(sInit.uBrightness),
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	7a9a      	ldrb	r2, [r3, #10]
		m_bInvert(sInit.bInvert) {}
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	739a      	strb	r2, [r3, #14]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	7ada      	ldrb	r2, [r3, #11]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	73da      	strb	r2, [r3, #15]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b082      	sub	sp, #8
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	460b      	mov	r3, r1
 80009b0:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 80009b2:	887a      	ldrh	r2, [r7, #2]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fa39 	bl	8000e30 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	887a      	ldrh	r2, [r7, #2]
 80009c2:	809a      	strh	r2, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2200      	movs	r2, #0
 80009c8:	80da      	strh	r2, [r3, #6]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2200      	movs	r2, #0
 80009ce:	811a      	strh	r2, [r3, #8]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	4608      	mov	r0, r1
 80009e6:	4611      	mov	r1, r2
 80009e8:	461a      	mov	r2, r3
 80009ea:	4603      	mov	r3, r0
 80009ec:	817b      	strh	r3, [r7, #10]
 80009ee:	460b      	mov	r3, r1
 80009f0:	813b      	strh	r3, [r7, #8]
 80009f2:	4613      	mov	r3, r2
 80009f4:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3304      	adds	r3, #4
 8000a00:	f107 020a 	add.w	r2, r7, #10
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa2e 	bl	8000e68 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	f107 0208 	add.w	r2, r7, #8
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fa26 	bl	8000e68 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	731a      	strb	r2, [r3, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	2200      	movs	r2, #0
 8000a26:	735a      	strb	r2, [r3, #13]
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	739a      	strb	r2, [r3, #14]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	79fa      	ldrb	r2, [r7, #7]
 8000a32:	73da      	strb	r2, [r3, #15]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4618      	mov	r0, r3
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	08005a90 	.word	0x08005a90

08000a44 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
 8000a4c:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	769a      	strb	r2, [r3, #26]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2225      	movs	r2, #37	; 0x25
 8000aa0:	76da      	strb	r2, [r3, #27]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	331c      	adds	r3, #28
 8000aa6:	2244      	movs	r2, #68	; 0x44
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 fed6 	bl	800585c <memset>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	8b99      	ldrh	r1, [r3, #28]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	8bda      	ldrh	r2, [r3, #30]
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	f7ff ff7b 	bl	80009dc <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	741a      	strb	r2, [r3, #16]
 8000af4:	683a      	ldr	r2, [r7, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3314      	adds	r3, #20
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f9ce 	bl	8000e9e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08005acc 	.word	0x08005acc

08000b10 <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000b10:	b590      	push	{r4, r7, lr}
 8000b12:	b0a3      	sub	sp, #140	; 0x8c
 8000b14:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000b16:	f7ff fd0d 	bl	8000534 <_Z16SystemInitializev>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	bf14      	ite	ne
 8000b20:	2301      	movne	r3, #1
 8000b22:	2300      	moveq	r3, #0
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d000      	beq.n	8000b2c <main+0x1c>
		while (1) {}
 8000b2a:	e7fe      	b.n	8000b2a <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000b2c:	2014      	movs	r0, #20
 8000b2e:	f004 fe1c 	bl	800576a <_Znwj>
 8000b32:	4603      	mov	r3, r0
 8000b34:	461c      	mov	r4, r3
 8000b36:	2220      	movs	r2, #32
 8000b38:	49b3      	ldr	r1, [pc, #716]	; (8000e08 <main+0x2f8>)
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	f003 f98f 	bl	8003e5e <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000b40:	4bb2      	ldr	r3, [pc, #712]	; (8000e0c <main+0x2fc>)
 8000b42:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000b44:	2301      	movs	r3, #1
 8000b46:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000b4a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b4e:	653b      	str	r3, [r7, #80]	; 0x50
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000b50:	2308      	movs	r3, #8
 8000b52:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000b56:	4bac      	ldr	r3, [pc, #688]	; (8000e08 <main+0x2f8>)
 8000b58:	65bb      	str	r3, [r7, #88]	; 0x58
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000b60:	2307      	movs	r3, #7
 8000b62:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000b66:	4ba8      	ldr	r3, [pc, #672]	; (8000e08 <main+0x2f8>)
 8000b68:	663b      	str	r3, [r7, #96]	; 0x60
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000b70:	2307      	movs	r3, #7
 8000b72:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000b76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b7a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b82:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000b86:	2018      	movs	r0, #24
 8000b88:	f004 fdef 	bl	800576a <_Znwj>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	461c      	mov	r4, r3
 8000b90:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b94:	4619      	mov	r1, r3
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff ff98 	bl	8000acc <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000b9c:	4b9c      	ldr	r3, [pc, #624]	; (8000e10 <main+0x300>)
 8000b9e:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000ba0:	4b9b      	ldr	r3, [pc, #620]	; (8000e10 <main+0x300>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f004 faf4 	bl	8005194 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	bf0c      	ite	eq
 8000bb2:	2301      	moveq	r3, #1
 8000bb4:	2300      	movne	r3, #0
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d005      	beq.n	8000bc8 <main+0xb8>
  	GPIO_UserLED->on();
 8000bbc:	4b93      	ldr	r3, [pc, #588]	; (8000e0c <main+0x2fc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 f96d 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000bc6:	e7fe      	b.n	8000bc6 <main+0xb6>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000bc8:	4b91      	ldr	r3, [pc, #580]	; (8000e10 <main+0x300>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 fb45 	bl	800525c <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000bd2:	4b8f      	ldr	r3, [pc, #572]	; (8000e10 <main+0x300>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	498f      	ldr	r1, [pc, #572]	; (8000e14 <main+0x304>)
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f004 fb0b 	bl	80051f4 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//----------------------------------
  //Initialize RGB

  //PWM
  QAD_PWM_InitStruct PWM_Init;
  PWM_Init.eTimer = QAD_Timer1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	743b      	strb	r3, [r7, #16]
  PWM_Init.uPrescaler = 1000;
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	617b      	str	r3, [r7, #20]
  PWM_Init.uPeriod    = 255;
 8000be8:	23ff      	movs	r3, #255	; 0xff
 8000bea:	61bb      	str	r3, [r7, #24]

  PWM_Init.sChannels[0].eActive = QA_Active;
 8000bec:	2301      	movs	r3, #1
 8000bee:	773b      	strb	r3, [r7, #28]
  PWM_Init.sChannels[0].pGPIO   = GPIOA;
 8000bf0:	4b85      	ldr	r3, [pc, #532]	; (8000e08 <main+0x2f8>)
 8000bf2:	623b      	str	r3, [r7, #32]
  PWM_Init.sChannels[0].uPin    = GPIO_PIN_8;
 8000bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf8:	84bb      	strh	r3, [r7, #36]	; 0x24
  PWM_Init.sChannels[0].uAF     = GPIO_AF1_TIM1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  PWM_Init.sChannels[1].eActive = QA_Active;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  PWM_Init.sChannels[1].pGPIO   = GPIOA;
 8000c06:	4b80      	ldr	r3, [pc, #512]	; (8000e08 <main+0x2f8>)
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  PWM_Init.sChannels[1].uPin    = GPIO_PIN_9;
 8000c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0e:	863b      	strh	r3, [r7, #48]	; 0x30
  PWM_Init.sChannels[1].uAF     = GPIO_AF1_TIM1;
 8000c10:	2301      	movs	r3, #1
 8000c12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  PWM_Init.sChannels[2].eActive = QA_Active;
 8000c16:	2301      	movs	r3, #1
 8000c18:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  PWM_Init.sChannels[2].pGPIO   = GPIOA;
 8000c1c:	4b7a      	ldr	r3, [pc, #488]	; (8000e08 <main+0x2f8>)
 8000c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  PWM_Init.sChannels[2].uPin    = GPIO_PIN_10;
 8000c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c24:	87bb      	strh	r3, [r7, #60]	; 0x3c
  PWM_Init.sChannels[2].uAF     = GPIO_AF1_TIM1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  PWM_Init.sChannels[3].eActive = QA_Inactive;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  PWM_LED = new QAD_PWM(PWM_Init);
 8000c32:	2094      	movs	r0, #148	; 0x94
 8000c34:	f004 fd99 	bl	800576a <_Znwj>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	461c      	mov	r4, r3
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	4619      	mov	r1, r3
 8000c42:	4620      	mov	r0, r4
 8000c44:	f7ff fe26 	bl	8000894 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct>
 8000c48:	4b73      	ldr	r3, [pc, #460]	; (8000e18 <main+0x308>)
 8000c4a:	601c      	str	r4, [r3, #0]

  if (PWM_LED->init()) {
 8000c4c:	4b72      	ldr	r3, [pc, #456]	; (8000e18 <main+0x308>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 f99e 	bl	8003f92 <_ZN7QAD_PWM4initEv>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	bf14      	ite	ne
 8000c5c:	2301      	movne	r3, #1
 8000c5e:	2300      	moveq	r3, #0
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d00b      	beq.n	8000c7e <main+0x16e>
  	UART_STLink->txStringCR("PWM: Initialization Failed");
 8000c66:	4b6a      	ldr	r3, [pc, #424]	; (8000e10 <main+0x300>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	496c      	ldr	r1, [pc, #432]	; (8000e1c <main+0x30c>)
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 fac1 	bl	80051f4 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED->on();
 8000c72:	4b66      	ldr	r3, [pc, #408]	; (8000e0c <main+0x2fc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 f912 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000c7c:	e7fe      	b.n	8000c7c <main+0x16c>
  }
  PWM_LED->start();
 8000c7e:	4b66      	ldr	r3, [pc, #408]	; (8000e18 <main+0x308>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f003 f9b0 	bl	8003fe8 <_ZN7QAD_PWM5startEv>
  UART_STLink->txStringCR("PWM: Initialized and started");
 8000c88:	4b61      	ldr	r3, [pc, #388]	; (8000e10 <main+0x300>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4964      	ldr	r1, [pc, #400]	; (8000e20 <main+0x310>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f004 fab0 	bl	80051f4 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //RGB
  QAD_RGB_InitStruct RGB_Init;
  RGB_Init.cPWM          = PWM_LED;
 8000c94:	4b60      	ldr	r3, [pc, #384]	; (8000e18 <main+0x308>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	607b      	str	r3, [r7, #4]
  RGB_Init.eRedChannel   = QAD_PWM_Channel_1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	723b      	strb	r3, [r7, #8]
  RGB_Init.eGreenChannel = QAD_PWM_Channel_2;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	727b      	strb	r3, [r7, #9]
  RGB_Init.eBlueChannel  = QAD_PWM_Channel_3;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	72bb      	strb	r3, [r7, #10]
  RGB_Init.uRed          = 0x07;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	72fb      	strb	r3, [r7, #11]
  RGB_Init.uGreen        = 0x7F;
 8000caa:	237f      	movs	r3, #127	; 0x7f
 8000cac:	733b      	strb	r3, [r7, #12]
  RGB_Init.uBlue         = 0x07;
 8000cae:	2307      	movs	r3, #7
 8000cb0:	737b      	strb	r3, [r7, #13]
  RGB_Init.uBrightness   = 0xBF;
 8000cb2:	23bf      	movs	r3, #191	; 0xbf
 8000cb4:	73bb      	strb	r3, [r7, #14]
  RGB_Init.bInvert       = true;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	73fb      	strb	r3, [r7, #15]
  RGB_LED = new QAD_RGB(RGB_Init);
 8000cba:	2010      	movs	r0, #16
 8000cbc:	f004 fd55 	bl	800576a <_Znwj>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461c      	mov	r4, r3
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff fe39 	bl	8000940 <_ZN7QAD_RGBC1ER18QAD_RGB_InitStruct>
 8000cce:	4b55      	ldr	r3, [pc, #340]	; (8000e24 <main+0x314>)
 8000cd0:	601c      	str	r4, [r3, #0]

  if (RGB_LED->init()) {
 8000cd2:	4b54      	ldr	r3, [pc, #336]	; (8000e24 <main+0x314>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 fb54 	bl	8004384 <_ZN7QAD_RGB4initEv>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	bf14      	ite	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	2300      	moveq	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d00b      	beq.n	8000d04 <main+0x1f4>
  	UART_STLink->txStringCR("RGB: Initialization Failed");
 8000cec:	4b48      	ldr	r3, [pc, #288]	; (8000e10 <main+0x300>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	494d      	ldr	r1, [pc, #308]	; (8000e28 <main+0x318>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f004 fa7e 	bl	80051f4 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED->on();
 8000cf8:	4b44      	ldr	r3, [pc, #272]	; (8000e0c <main+0x2fc>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f003 f8cf 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000d02:	e7fe      	b.n	8000d02 <main+0x1f2>
  }
  UART_STLink->txStringCR("RGB: Initialized");
 8000d04:	4b42      	ldr	r3, [pc, #264]	; (8000e10 <main+0x300>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4948      	ldr	r1, [pc, #288]	; (8000e2c <main+0x31c>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f004 fa72 	bl	80051f4 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000d10:	f000 fb8c 	bl	800142c <HAL_GetTick>
 8000d14:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	uint32_t uOldTick = uNewTick;
 8000d18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d1c:	673b      	str	r3, [r7, #112]	; 0x70

  //Create task timing variables
	uint32_t uLEDTicks = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	67fb      	str	r3, [r7, #124]	; 0x7c
	uint32_t uHeartbeatTicks = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	67bb      	str	r3, [r7, #120]	; 0x78

	//LED Data
	uint8_t uBrightness = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	bool    bDirection = true;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000d32:	f000 fb7b 	bl	800142c <HAL_GetTick>
 8000d36:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000d38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d019      	beq.n	8000d76 <main+0x266>
    	uOldTick = uNewTick;
 8000d42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d46:	673b      	str	r3, [r7, #112]	; 0x70
    	uNewTick = uCurTick;
 8000d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <main+0x258>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000d58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	3b01      	subs	r3, #1
 8000d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d66:	e009      	b.n	8000d7c <main+0x26c>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000d68:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000d74:	e002      	b.n	8000d7c <main+0x26c>
    	}

    } else {
    	uTicks = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    }


    //----------------------------------
    //Update RGB LED
    uLEDTicks += uTicks;
 8000d7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000d7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d82:	4413      	add	r3, r2
 8000d84:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (uLEDTicks >= QA_FT_LEDTickThreshold) {
 8000d86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d929      	bls.n	8000de0 <main+0x2d0>

    	if (bDirection) {
 8000d8c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00d      	beq.n	8000db0 <main+0x2a0>

    		if (uBrightness == 255) {
 8000d94:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	d103      	bne.n	8000da4 <main+0x294>
    			bDirection = false;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000da2:	e012      	b.n	8000dca <main+0x2ba>
    		} else {
    			uBrightness++;
 8000da4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000da8:	3301      	adds	r3, #1
 8000daa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8000dae:	e00c      	b.n	8000dca <main+0x2ba>
    		}

    	} else {

    		if (uBrightness == 0) {
 8000db0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d103      	bne.n	8000dc0 <main+0x2b0>
    			bDirection = true;
 8000db8:	2301      	movs	r3, #1
 8000dba:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8000dbe:	e004      	b.n	8000dca <main+0x2ba>
    		} else {
    			uBrightness--;
 8000dc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8000dc4:	3b01      	subs	r3, #1
 8000dc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    		}

    	}
    	RGB_LED->setBrightness(uBrightness);
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <main+0x314>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f003 fae4 	bl	80043a2 <_ZN7QAD_RGB13setBrightnessEh>

    	uLEDTicks -= QA_FT_LEDTickThreshold;
 8000dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000ddc:	3b0a      	subs	r3, #10
 8000dde:	67fb      	str	r3, [r7, #124]	; 0x7c

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000de6:	4413      	add	r3, r2
 8000de8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000dea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000df0:	d39f      	bcc.n	8000d32 <main+0x222>
    	GPIO_UserLED->toggle();
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <main+0x2fc>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f003 f878 	bl	8003eec <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset heartbeat ticks
 8000dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000dfe:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e02:	67bb      	str	r3, [r7, #120]	; 0x78
    uCurTick = HAL_GetTick();
 8000e04:	e795      	b.n	8000d32 <main+0x222>
 8000e06:	bf00      	nop
 8000e08:	40020000 	.word	0x40020000
 8000e0c:	20000254 	.word	0x20000254
 8000e10:	20000258 	.word	0x20000258
 8000e14:	080059fc 	.word	0x080059fc
 8000e18:	2000025c 	.word	0x2000025c
 8000e1c:	08005a1c 	.word	0x08005a1c
 8000e20:	08005a38 	.word	0x08005a38
 8000e24:	20000260 	.word	0x20000260
 8000e28:	08005a58 	.word	0x08005a58
 8000e2c:	08005a74 	.word	0x08005a74

08000e30 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000e3a:	683c      	ldr	r4, [r7, #0]
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f004 fca5 	bl	800578c <_Znaj>
 8000e42:	4603      	mov	r3, r0
 8000e44:	4618      	mov	r0, r3
 8000e46:	4602      	mov	r2, r0
 8000e48:	1e63      	subs	r3, r4, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db04      	blt.n	8000e58 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000e4e:	2100      	movs	r1, #0
 8000e50:	7011      	strb	r1, [r2, #0]
 8000e52:	3201      	adds	r2, #1
 8000e54:	3b01      	subs	r3, #1
 8000e56:	e7f8      	b.n	8000e4a <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000e58:	4601      	mov	r1, r0
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f839 	bl	8000ed2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd90      	pop	{r4, r7, pc}

08000e68 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000e68:	b5b0      	push	{r4, r5, r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000e72:	6838      	ldr	r0, [r7, #0]
 8000e74:	f000 f849 	bl	8000f0a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	881c      	ldrh	r4, [r3, #0]
 8000e7c:	200c      	movs	r0, #12
 8000e7e:	f004 fc74 	bl	800576a <_Znwj>
 8000e82:	4603      	mov	r3, r0
 8000e84:	461d      	mov	r5, r3
 8000e86:	4621      	mov	r1, r4
 8000e88:	4628      	mov	r0, r5
 8000e8a:	f7ff fd8c 	bl	80009a6 <_ZN14QAT_FIFOBufferC1Et>
 8000e8e:	4629      	mov	r1, r5
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f845 	bl	8000f20 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bdb0      	pop	{r4, r5, r7, pc}

08000e9e <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000e9e:	b5b0      	push	{r4, r5, r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000ea8:	6838      	ldr	r0, [r7, #0]
 8000eaa:	f000 f855 	bl	8000f58 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000eae:	4605      	mov	r5, r0
 8000eb0:	2064      	movs	r0, #100	; 0x64
 8000eb2:	f004 fc5a 	bl	800576a <_Znwj>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	461c      	mov	r4, r3
 8000eba:	4629      	mov	r1, r5
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	f7ff fdc1 	bl	8000a44 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f852 	bl	8000f6e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bdb0      	pop	{r4, r5, r7, pc}

08000ed2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6839      	ldr	r1, [r7, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f860 	bl	8000fa6 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f867 	bl	8000fce <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6839      	ldr	r1, [r7, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f85a 	bl	8000fe8 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f861 	bl	8001010 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr

08000f6e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b082      	sub	sp, #8
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 f854 	bl	800102a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f85b 	bl	8001052 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f85a 	bl	800106c <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff99 	bl	8000ef0 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f854 	bl	8001086 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f852 	bl	800109e <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff9f 	bl	8000f3e <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001000:	4602      	mov	r2, r0
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f84c 	bl	80010b8 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001020:	4603      	mov	r3, r0
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f84a 	bl	80010d0 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff ffa5 	bl	8000f8c <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001042:	4602      	mov	r2, r0
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f844 	bl	80010ea <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001062:	4603      	mov	r3, r0
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f843 	bl	8001102 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 f847 	bl	8001122 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8001094:	4603      	mov	r3, r0
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 f847 	bl	800113c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f84b 	bl	800115c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f84b 	bl	8001176 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f000 f84f 	bl	8001196 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f850 	bl	80011b0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f858 	bl	80011c8 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f859 	bl	80011e4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f858 	bl	80011fa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f860 	bl	8001212 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f861 	bl	800122e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 800116c:	4603      	mov	r3, r0
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f860 	bl	8001244 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f868 	bl	800125c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f869 	bl	8001278 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4618      	mov	r0, r3
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f868 	bl	800128e <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4618      	mov	r0, r3
 80011c2:	3708      	adds	r7, #8
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f84e 	bl	80012a4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001212:	b480      	push	{r7}
 8001214:	b083      	sub	sp, #12
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 f834 	bl	80012ba <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr

080012ba <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 80012ba:	b480      	push	{r7}
 80012bc:	b083      	sub	sp, #12
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
	return 1;
 80012d4:	2301      	movs	r3, #1
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <_kill>:

int _kill(int pid, int sig)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012ea:	f004 fa77 	bl	80057dc <__errno>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2216      	movs	r2, #22
 80012f2:	601a      	str	r2, [r3, #0]
	return -1;
 80012f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <_exit>:

void _exit (int status)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001308:	f04f 31ff 	mov.w	r1, #4294967295
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7ff ffe7 	bl	80012e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001312:	e7fe      	b.n	8001312 <_exit+0x12>

08001314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800131c:	4a14      	ldr	r2, [pc, #80]	; (8001370 <_sbrk+0x5c>)
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <_sbrk+0x60>)
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <_sbrk+0x64>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d102      	bne.n	8001336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <_sbrk+0x64>)
 8001332:	4a12      	ldr	r2, [pc, #72]	; (800137c <_sbrk+0x68>)
 8001334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <_sbrk+0x64>)
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4413      	add	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	429a      	cmp	r2, r3
 8001342:	d207      	bcs.n	8001354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001344:	f004 fa4a 	bl	80057dc <__errno>
 8001348:	4603      	mov	r3, r0
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20020000 	.word	0x20020000
 8001374:	00000400 	.word	0x00000400
 8001378:	20000264 	.word	0x20000264
 800137c:	20000358 	.word	0x20000358

08001380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <SystemInit+0x20>)
 8001386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800138a:	4a05      	ldr	r2, [pc, #20]	; (80013a0 <SystemInit+0x20>)
 800138c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	e000ed00 	.word	0xe000ed00

080013a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <HAL_InitTick+0x54>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <HAL_InitTick+0x58>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fd29 	bl	8001e1a <HAL_SYSTICK_Config>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00e      	b.n	80013f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	d80a      	bhi.n	80013ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d8:	2200      	movs	r2, #0
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	f04f 30ff 	mov.w	r0, #4294967295
 80013e0:	f000 fce3 	bl	8001daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e4:	4a06      	ldr	r2, [pc, #24]	; (8001400 <HAL_InitTick+0x5c>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	e000      	b.n	80013f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000004 	.word	0x20000004

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000340 	.word	0x20000340

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	; (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000340 	.word	0x20000340

08001444 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e033      	b.n	80014c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f863 	bl	800152e <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800148a:	f023 0302 	bic.w	r3, r3, #2
 800148e:	f043 0202 	orr.w	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fa8c 	bl	80019b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
 80014b2:	e001      	b.n	80014b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e022      	b.n	8001526 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f043 0202 	orr.w	r2, r3, #2
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 0201 	bic.w	r2, r2, #1
 80014fa:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d108      	bne.n	800151c <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 f819 	bl	8001542 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2200      	movs	r2, #0
 800151a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <HAL_ADC_MspDeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800156a:	2b01      	cmp	r3, #1
 800156c:	d101      	bne.n	8001572 <HAL_ADC_Start_IT+0x1a>
 800156e:	2302      	movs	r3, #2
 8001570:	e0a1      	b.n	80016b6 <HAL_ADC_Start_IT+0x15e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	2b01      	cmp	r3, #1
 8001586:	d018      	beq.n	80015ba <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f042 0201 	orr.w	r2, r2, #1
 8001596:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001598:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <HAL_ADC_Start_IT+0x16c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a4a      	ldr	r2, [pc, #296]	; (80016c8 <HAL_ADC_Start_IT+0x170>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0c9a      	lsrs	r2, r3, #18
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80015ac:	e002      	b.n	80015b4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f9      	bne.n	80015ae <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d169      	bne.n	800169c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d007      	beq.n	80015fa <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001606:	d106      	bne.n	8001616 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	f023 0206 	bic.w	r2, r3, #6
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	645a      	str	r2, [r3, #68]	; 0x44
 8001614:	e002      	b.n	800161c <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_Start_IT+0x174>)
 8001626:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001630:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6812      	ldr	r2, [r2, #0]
 800163c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f003 031f 	and.w	r3, r3, #31
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10f      	bne.n	8001672 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d129      	bne.n	80016b4 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689a      	ldr	r2, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	e020      	b.n	80016b4 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a16      	ldr	r2, [pc, #88]	; (80016d0 <HAL_ADC_Start_IT+0x178>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d11b      	bne.n	80016b4 <HAL_ADC_Start_IT+0x15c>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d114      	bne.n	80016b4 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	e00b      	b.n	80016b4 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a0:	f043 0210 	orr.w	r2, r3, #16
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ac:	f043 0201 	orr.w	r2, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000000 	.word	0x20000000
 80016c8:	431bde83 	.word	0x431bde83
 80016cc:	40012300 	.word	0x40012300
 80016d0:	40012000 	.word	0x40012000

080016d4 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_ADC_Stop_IT+0x16>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e02b      	b.n	8001742 <HAL_ADC_Stop_IT+0x6e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0201 	bic.w	r2, r2, #1
 8001700:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d113      	bne.n	8001738 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800171e:	f023 0320 	bic.w	r3, r3, #32
 8001722:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001728:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800172c:	f023 0301 	bic.w	r3, r3, #1
 8001730:	f043 0201 	orr.w	r2, r3, #1
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001740:	2300      	movs	r3, #0
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x1c>
 8001768:	2302      	movs	r3, #2
 800176a:	e113      	b.n	8001994 <HAL_ADC_ConfigChannel+0x244>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2201      	movs	r2, #1
 8001770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b09      	cmp	r3, #9
 800177a:	d925      	bls.n	80017c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68d9      	ldr	r1, [r3, #12]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	3b1e      	subs	r3, #30
 8001792:	2207      	movs	r2, #7
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43da      	mvns	r2, r3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	400a      	ands	r2, r1
 80017a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68d9      	ldr	r1, [r3, #12]
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	4603      	mov	r3, r0
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4403      	add	r3, r0
 80017ba:	3b1e      	subs	r3, #30
 80017bc:	409a      	lsls	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	e022      	b.n	800180e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6919      	ldr	r1, [r3, #16]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	461a      	mov	r2, r3
 80017d6:	4613      	mov	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	4413      	add	r3, r2
 80017dc:	2207      	movs	r2, #7
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	400a      	ands	r2, r1
 80017ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6919      	ldr	r1, [r3, #16]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	4618      	mov	r0, r3
 80017fe:	4603      	mov	r3, r0
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4403      	add	r3, r0
 8001804:	409a      	lsls	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b06      	cmp	r3, #6
 8001814:	d824      	bhi.n	8001860 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b05      	subs	r3, #5
 8001828:	221f      	movs	r2, #31
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43da      	mvns	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	400a      	ands	r2, r1
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b05      	subs	r3, #5
 8001852:	fa00 f203 	lsl.w	r2, r0, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	430a      	orrs	r2, r1
 800185c:	635a      	str	r2, [r3, #52]	; 0x34
 800185e:	e04c      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d824      	bhi.n	80018b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b23      	subs	r3, #35	; 0x23
 800187a:	221f      	movs	r2, #31
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43da      	mvns	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	400a      	ands	r2, r1
 8001888:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	3b23      	subs	r3, #35	; 0x23
 80018a4:	fa00 f203 	lsl.w	r2, r0, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	430a      	orrs	r2, r1
 80018ae:	631a      	str	r2, [r3, #48]	; 0x30
 80018b0:	e023      	b.n	80018fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b41      	subs	r3, #65	; 0x41
 80018c4:	221f      	movs	r2, #31
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b41      	subs	r3, #65	; 0x41
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_ADC_ConfigChannel+0x250>)
 80018fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <HAL_ADC_ConfigChannel+0x254>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d10f      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d8>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b12      	cmp	r3, #18
 800190e:	d10b      	bne.n	8001928 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1d      	ldr	r2, [pc, #116]	; (80019a4 <HAL_ADC_ConfigChannel+0x254>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12b      	bne.n	800198a <HAL_ADC_ConfigChannel+0x23a>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <HAL_ADC_ConfigChannel+0x258>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d003      	beq.n	8001944 <HAL_ADC_ConfigChannel+0x1f4>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b11      	cmp	r3, #17
 8001942:	d122      	bne.n	800198a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <HAL_ADC_ConfigChannel+0x258>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d111      	bne.n	800198a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <HAL_ADC_ConfigChannel+0x25c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <HAL_ADC_ConfigChannel+0x260>)
 800196c:	fba2 2303 	umull	r2, r3, r2, r3
 8001970:	0c9a      	lsrs	r2, r3, #18
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800197c:	e002      	b.n	8001984 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3b01      	subs	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40012300 	.word	0x40012300
 80019a4:	40012000 	.word	0x40012000
 80019a8:	10000012 	.word	0x10000012
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83

080019b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019bc:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <ADC_Init+0x1f0>)
 80019be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	021a      	lsls	r2, r3, #8
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	6859      	ldr	r1, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6899      	ldr	r1, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	4a58      	ldr	r2, [pc, #352]	; (8001ba8 <ADC_Init+0x1f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	6899      	ldr	r1, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6899      	ldr	r1, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	e00f      	b.n	8001ab2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ab0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0202 	bic.w	r2, r2, #2
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	7e1b      	ldrb	r3, [r3, #24]
 8001acc:	005a      	lsls	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01b      	beq.n	8001b18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001afe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6859      	ldr	r1, [r3, #4]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	035a      	lsls	r2, r3, #13
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e007      	b.n	8001b28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	051a      	lsls	r2, r3, #20
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6899      	ldr	r1, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b6a:	025a      	lsls	r2, r3, #9
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6899      	ldr	r1, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	029a      	lsls	r2, r3, #10
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
}
 8001b98:	bf00      	nop
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40012300 	.word	0x40012300
 8001ba8:	0f000001 	.word	0x0f000001

08001bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc8:	4013      	ands	r3, r2
 8001bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	60d3      	str	r3, [r2, #12]
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf8:	4b04      	ldr	r3, [pc, #16]	; (8001c0c <__NVIC_GetPriorityGrouping+0x18>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	0a1b      	lsrs	r3, r3, #8
 8001bfe:	f003 0307 	and.w	r3, r3, #7
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db0b      	blt.n	8001c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	4907      	ldr	r1, [pc, #28]	; (8001c48 <__NVIC_EnableIRQ+0x38>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db12      	blt.n	8001c84 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	490a      	ldr	r1, [pc, #40]	; (8001c90 <__NVIC_DisableIRQ+0x44>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	3320      	adds	r3, #32
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c78:	f3bf 8f4f 	dsb	sy
}
 8001c7c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c7e:	f3bf 8f6f 	isb	sy
}
 8001c82:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100

08001c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	6039      	str	r1, [r7, #0]
 8001c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	db0a      	blt.n	8001cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	490c      	ldr	r1, [pc, #48]	; (8001ce0 <__NVIC_SetPriority+0x4c>)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	0112      	lsls	r2, r2, #4
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cbc:	e00a      	b.n	8001cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4908      	ldr	r1, [pc, #32]	; (8001ce4 <__NVIC_SetPriority+0x50>)
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	3b04      	subs	r3, #4
 8001ccc:	0112      	lsls	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	440b      	add	r3, r1
 8001cd2:	761a      	strb	r2, [r3, #24]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000e100 	.word	0xe000e100
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b089      	sub	sp, #36	; 0x24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f1c3 0307 	rsb	r3, r3, #7
 8001d02:	2b04      	cmp	r3, #4
 8001d04:	bf28      	it	cs
 8001d06:	2304      	movcs	r3, #4
 8001d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	2b06      	cmp	r3, #6
 8001d10:	d902      	bls.n	8001d18 <NVIC_EncodePriority+0x30>
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3b03      	subs	r3, #3
 8001d16:	e000      	b.n	8001d1a <NVIC_EncodePriority+0x32>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43da      	mvns	r2, r3
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d30:	f04f 31ff 	mov.w	r1, #4294967295
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3a:	43d9      	mvns	r1, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	4313      	orrs	r3, r2
         );
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
	...

08001d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d60:	d301      	bcc.n	8001d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d62:	2301      	movs	r3, #1
 8001d64:	e00f      	b.n	8001d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d66:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <SysTick_Config+0x40>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6e:	210f      	movs	r1, #15
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	f7ff ff8e 	bl	8001c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x40>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x40>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ff05 	bl	8001bac <__NVIC_SetPriorityGrouping>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
 8001db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dbc:	f7ff ff1a 	bl	8001bf4 <__NVIC_GetPriorityGrouping>
 8001dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	6978      	ldr	r0, [r7, #20]
 8001dc8:	f7ff ff8e 	bl	8001ce8 <NVIC_EncodePriority>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff ff5d 	bl	8001c94 <__NVIC_SetPriority>
}
 8001dda:	bf00      	nop
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b082      	sub	sp, #8
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff0d 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff1d 	bl	8001c4c <__NVIC_DisableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff94 	bl	8001d50 <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e159      	b.n	8002104 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8148 	bne.w	80020fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d005      	beq.n	8001e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d017      	beq.n	8001f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a2 	beq.w	80020fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b57      	ldr	r3, [pc, #348]	; (800211c <HAL_GPIO_Init+0x2e8>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a56      	ldr	r2, [pc, #344]	; (800211c <HAL_GPIO_Init+0x2e8>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b54      	ldr	r3, [pc, #336]	; (800211c <HAL_GPIO_Init+0x2e8>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd6:	4a52      	ldr	r2, [pc, #328]	; (8002120 <HAL_GPIO_Init+0x2ec>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a49      	ldr	r2, [pc, #292]	; (8002124 <HAL_GPIO_Init+0x2f0>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d019      	beq.n	8002036 <HAL_GPIO_Init+0x202>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a48      	ldr	r2, [pc, #288]	; (8002128 <HAL_GPIO_Init+0x2f4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_GPIO_Init+0x1fe>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a47      	ldr	r2, [pc, #284]	; (800212c <HAL_GPIO_Init+0x2f8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00d      	beq.n	800202e <HAL_GPIO_Init+0x1fa>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a46      	ldr	r2, [pc, #280]	; (8002130 <HAL_GPIO_Init+0x2fc>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <HAL_GPIO_Init+0x1f6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a45      	ldr	r2, [pc, #276]	; (8002134 <HAL_GPIO_Init+0x300>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_GPIO_Init+0x1f2>
 8002022:	2304      	movs	r3, #4
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x204>
 8002026:	2307      	movs	r3, #7
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x204>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x204>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x204>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x204>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x2ec>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <HAL_GPIO_Init+0x304>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800207a:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <HAL_GPIO_Init+0x304>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002080:	4b2d      	ldr	r3, [pc, #180]	; (8002138 <HAL_GPIO_Init+0x304>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020a4:	4a24      	ldr	r2, [pc, #144]	; (8002138 <HAL_GPIO_Init+0x304>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_GPIO_Init+0x304>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020ce:	4a1a      	ldr	r2, [pc, #104]	; (8002138 <HAL_GPIO_Init+0x304>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_GPIO_Init+0x304>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f8:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <HAL_GPIO_Init+0x304>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f aea2 	bls.w	8001e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	; 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800213c:	b480      	push	{r7}
 800213e:	b087      	sub	sp, #28
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800214e:	2300      	movs	r3, #0
 8002150:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
 8002156:	e0bb      	b.n	80022d0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002158:	2201      	movs	r2, #1
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800216a:	68fa      	ldr	r2, [r7, #12]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	429a      	cmp	r2, r3
 8002170:	f040 80ab 	bne.w	80022ca <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002174:	4a5c      	ldr	r2, [pc, #368]	; (80022e8 <HAL_GPIO_DeInit+0x1ac>)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	089b      	lsrs	r3, r3, #2
 800217a:	3302      	adds	r3, #2
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	220f      	movs	r2, #15
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	4013      	ands	r3, r2
 8002194:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a54      	ldr	r2, [pc, #336]	; (80022ec <HAL_GPIO_DeInit+0x1b0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d019      	beq.n	80021d2 <HAL_GPIO_DeInit+0x96>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a53      	ldr	r2, [pc, #332]	; (80022f0 <HAL_GPIO_DeInit+0x1b4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d013      	beq.n	80021ce <HAL_GPIO_DeInit+0x92>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_GPIO_DeInit+0x1b8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00d      	beq.n	80021ca <HAL_GPIO_DeInit+0x8e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_GPIO_DeInit+0x1bc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <HAL_GPIO_DeInit+0x8a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_GPIO_DeInit+0x1c0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d101      	bne.n	80021c2 <HAL_GPIO_DeInit+0x86>
 80021be:	2304      	movs	r3, #4
 80021c0:	e008      	b.n	80021d4 <HAL_GPIO_DeInit+0x98>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e006      	b.n	80021d4 <HAL_GPIO_DeInit+0x98>
 80021c6:	2303      	movs	r3, #3
 80021c8:	e004      	b.n	80021d4 <HAL_GPIO_DeInit+0x98>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e002      	b.n	80021d4 <HAL_GPIO_DeInit+0x98>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_GPIO_DeInit+0x98>
 80021d2:	2300      	movs	r3, #0
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	f002 0203 	and.w	r2, r2, #3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4093      	lsls	r3, r2
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d132      	bne.n	800224a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021e4:	4b46      	ldr	r3, [pc, #280]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	4944      	ldr	r1, [pc, #272]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021f2:	4b43      	ldr	r3, [pc, #268]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	4941      	ldr	r1, [pc, #260]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002200:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	493d      	ldr	r1, [pc, #244]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 800220a:	4013      	ands	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800220e:	4b3c      	ldr	r3, [pc, #240]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	43db      	mvns	r3, r3
 8002216:	493a      	ldr	r1, [pc, #232]	; (8002300 <HAL_GPIO_DeInit+0x1c4>)
 8002218:	4013      	ands	r3, r2
 800221a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800222c:	4a2e      	ldr	r2, [pc, #184]	; (80022e8 <HAL_GPIO_DeInit+0x1ac>)
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	43da      	mvns	r2, r3
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <HAL_GPIO_DeInit+0x1ac>)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	089b      	lsrs	r3, r3, #2
 8002242:	400a      	ands	r2, r1
 8002244:	3302      	adds	r3, #2
 8002246:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	2103      	movs	r1, #3
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	08da      	lsrs	r2, r3, #3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3208      	adds	r2, #8
 8002268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	08d2      	lsrs	r2, r2, #3
 8002280:	4019      	ands	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3208      	adds	r2, #8
 8002286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2103      	movs	r1, #3
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	2101      	movs	r1, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2103      	movs	r1, #3
 80022be:	fa01 f303 	lsl.w	r3, r1, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	401a      	ands	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	3301      	adds	r3, #1
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	f67f af40 	bls.w	8002158 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	371c      	adds	r7, #28
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	807b      	strh	r3, [r7, #2]
 8002310:	4613      	mov	r3, r2
 8002312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002314:	787b      	ldrb	r3, [r7, #1]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800231a:	887a      	ldrh	r2, [r7, #2]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002320:	e003      	b.n	800232a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002322:	887b      	ldrh	r3, [r7, #2]
 8002324:	041a      	lsls	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	619a      	str	r2, [r3, #24]
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e264      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d075      	beq.n	8002442 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b04      	cmp	r3, #4
 8002360:	d00c      	beq.n	800237c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002362:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236a:	2b08      	cmp	r3, #8
 800236c:	d112      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b9d      	ldr	r3, [pc, #628]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237a:	d10b      	bne.n	8002394 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	4b99      	ldr	r3, [pc, #612]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d05b      	beq.n	8002440 <HAL_RCC_OscConfig+0x108>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d157      	bne.n	8002440 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e23f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d106      	bne.n	80023ac <HAL_RCC_OscConfig+0x74>
 800239e:	4b91      	ldr	r3, [pc, #580]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a90      	ldr	r2, [pc, #576]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a8:	6013      	str	r3, [r2, #0]
 80023aa:	e01d      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x98>
 80023b6:	4b8b      	ldr	r3, [pc, #556]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a8a      	ldr	r2, [pc, #552]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a87      	ldr	r2, [pc, #540]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0xb0>
 80023d0:	4b84      	ldr	r3, [pc, #528]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a83      	ldr	r2, [pc, #524]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023da:	6013      	str	r3, [r2, #0]
 80023dc:	4b81      	ldr	r3, [pc, #516]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a80      	ldr	r2, [pc, #512]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80023e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d013      	beq.n	8002418 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7ff f81c 	bl	800142c <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023f8:	f7ff f818 	bl	800142c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e204      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0xc0>
 8002416:	e014      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7ff f808 	bl	800142c <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002420:	f7ff f804 	bl	800142c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b64      	cmp	r3, #100	; 0x64
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1f0      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002432:	4b6c      	ldr	r3, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0xe8>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d063      	beq.n	8002516 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 030c 	and.w	r3, r3, #12
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800245a:	4b62      	ldr	r3, [pc, #392]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002462:	2b08      	cmp	r3, #8
 8002464:	d11c      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002466:	4b5f      	ldr	r3, [pc, #380]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d116      	bne.n	80024a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002472:	4b5c      	ldr	r3, [pc, #368]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d005      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d001      	beq.n	800248a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e1c4      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	4b56      	ldr	r3, [pc, #344]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4952      	ldr	r1, [pc, #328]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800249e:	e03a      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d020      	beq.n	80024ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024a8:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024aa:	2201      	movs	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ae:	f7fe ffbd 	bl	800142c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	e008      	b.n	80024c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b6:	f7fe ffb9 	bl	800142c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d901      	bls.n	80024c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1a5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024c8:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0f0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d4:	4b43      	ldr	r3, [pc, #268]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	4940      	ldr	r1, [pc, #256]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]
 80024e8:	e015      	b.n	8002516 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_OscConfig+0x2b0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f0:	f7fe ff9c 	bl	800142c <HAL_GetTick>
 80024f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024f8:	f7fe ff98 	bl	800142c <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e184      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d1f0      	bne.n	80024f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d030      	beq.n	8002584 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d016      	beq.n	8002558 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800252c:	2201      	movs	r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe ff7c 	bl	800142c <HAL_GetTick>
 8002534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002538:	f7fe ff78 	bl	800142c <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e164      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254a:	4b26      	ldr	r3, [pc, #152]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0f0      	beq.n	8002538 <HAL_RCC_OscConfig+0x200>
 8002556:	e015      	b.n	8002584 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002558:	4b24      	ldr	r3, [pc, #144]	; (80025ec <HAL_RCC_OscConfig+0x2b4>)
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe ff65 	bl	800142c <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	e008      	b.n	8002578 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002566:	f7fe ff61 	bl	800142c <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e14d      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002578:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 800257a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1f0      	bne.n	8002566 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a0 	beq.w	80026d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002592:	2300      	movs	r3, #0
 8002594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10f      	bne.n	80025c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b0f      	ldr	r3, [pc, #60]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025b0:	6413      	str	r3, [r2, #64]	; 0x40
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d121      	bne.n	8002612 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ce:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_RCC_OscConfig+0x2b8>)
 80025d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025da:	f7fe ff27 	bl	800142c <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e0:	e011      	b.n	8002606 <HAL_RCC_OscConfig+0x2ce>
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
 80025f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe ff1a 	bl	800142c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e106      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002606:	4b85      	ldr	r3, [pc, #532]	; (800281c <HAL_RCC_OscConfig+0x4e4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x2f0>
 800261a:	4b81      	ldr	r3, [pc, #516]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261e:	4a80      	ldr	r2, [pc, #512]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	; 0x70
 8002626:	e01c      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b05      	cmp	r3, #5
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x312>
 8002630:	4b7b      	ldr	r3, [pc, #492]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a7a      	ldr	r2, [pc, #488]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	4b78      	ldr	r3, [pc, #480]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4a77      	ldr	r2, [pc, #476]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6713      	str	r3, [r2, #112]	; 0x70
 8002648:	e00b      	b.n	8002662 <HAL_RCC_OscConfig+0x32a>
 800264a:	4b75      	ldr	r3, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a74      	ldr	r2, [pc, #464]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b72      	ldr	r3, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a71      	ldr	r2, [pc, #452]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d015      	beq.n	8002696 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fedf 	bl	800142c <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fedb 	bl	800142c <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e0c5      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	4b65      	ldr	r3, [pc, #404]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 800268a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ee      	beq.n	8002672 <HAL_RCC_OscConfig+0x33a>
 8002694:	e014      	b.n	80026c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002696:	f7fe fec9 	bl	800142c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269c:	e00a      	b.n	80026b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f7fe fec5 	bl	800142c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e0af      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ee      	bne.n	800269e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b56      	ldr	r3, [pc, #344]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	4a55      	ldr	r2, [pc, #340]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 809b 	beq.w	8002812 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026dc:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 030c 	and.w	r3, r3, #12
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d05c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d141      	bne.n	8002774 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f0:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f6:	f7fe fe99 	bl	800142c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fe:	f7fe fe95 	bl	800142c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b02      	cmp	r3, #2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e081      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002710:	4b43      	ldr	r3, [pc, #268]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1f0      	bne.n	80026fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	019b      	lsls	r3, r3, #6
 800272c:	431a      	orrs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	3b01      	subs	r3, #1
 8002736:	041b      	lsls	r3, r3, #16
 8002738:	431a      	orrs	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	4937      	ldr	r1, [pc, #220]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002746:	4b37      	ldr	r3, [pc, #220]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7fe fe6e 	bl	800142c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002754:	f7fe fe6a 	bl	800142c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e056      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002766:	4b2e      	ldr	r3, [pc, #184]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x41c>
 8002772:	e04e      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	4b2b      	ldr	r3, [pc, #172]	; (8002824 <HAL_RCC_OscConfig+0x4ec>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fe57 	bl	800142c <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002782:	f7fe fe53 	bl	800142c <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e03f      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002794:	4b22      	ldr	r3, [pc, #136]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f0      	bne.n	8002782 <HAL_RCC_OscConfig+0x44a>
 80027a0:	e037      	b.n	8002812 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e032      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ae:	4b1c      	ldr	r3, [pc, #112]	; (8002820 <HAL_RCC_OscConfig+0x4e8>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d028      	beq.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d121      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d11a      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d111      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f4:	085b      	lsrs	r3, r3, #1
 80027f6:	3b01      	subs	r3, #1
 80027f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d107      	bne.n	800280e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d001      	beq.n	8002812 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40007000 	.word	0x40007000
 8002820:	40023800 	.word	0x40023800
 8002824:	42470060 	.word	0x42470060

08002828 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0cc      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d90c      	bls.n	8002864 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b65      	ldr	r3, [pc, #404]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	b2d2      	uxtb	r2, r2
 8002850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002852:	4b63      	ldr	r3, [pc, #396]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	429a      	cmp	r2, r3
 800285e:	d001      	beq.n	8002864 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e0b8      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d020      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800287c:	4b59      	ldr	r3, [pc, #356]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002882:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002886:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0308 	and.w	r3, r3, #8
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002894:	4b53      	ldr	r3, [pc, #332]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4a52      	ldr	r2, [pc, #328]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800289e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4b50      	ldr	r3, [pc, #320]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	494d      	ldr	r1, [pc, #308]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d044      	beq.n	8002948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d107      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c6:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e2:	2b03      	cmp	r3, #3
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028e6:	4b3f      	ldr	r3, [pc, #252]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e06f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f6:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e067      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002906:	4b37      	ldr	r3, [pc, #220]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f023 0203 	bic.w	r2, r3, #3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4934      	ldr	r1, [pc, #208]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	4313      	orrs	r3, r2
 8002916:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002918:	f7fe fd88 	bl	800142c <HAL_GetTick>
 800291c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291e:	e00a      	b.n	8002936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002920:	f7fe fd84 	bl	800142c <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	f241 3288 	movw	r2, #5000	; 0x1388
 800292e:	4293      	cmp	r3, r2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e04f      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002936:	4b2b      	ldr	r3, [pc, #172]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 020c 	and.w	r2, r3, #12
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d1eb      	bne.n	8002920 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800295e:	4b20      	ldr	r3, [pc, #128]	; (80029e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e032      	b.n	80029d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0304 	and.w	r3, r3, #4
 8002978:	2b00      	cmp	r3, #0
 800297a:	d008      	beq.n	800298e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297c:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	4916      	ldr	r1, [pc, #88]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800298a:	4313      	orrs	r3, r2
 800298c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	2b00      	cmp	r3, #0
 8002998:	d009      	beq.n	80029ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	490e      	ldr	r1, [pc, #56]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ae:	f000 f821 	bl	80029f4 <HAL_RCC_GetSysClockFreq>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	091b      	lsrs	r3, r3, #4
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	490a      	ldr	r1, [pc, #40]	; (80029e8 <HAL_RCC_ClockConfig+0x1c0>)
 80029c0:	5ccb      	ldrb	r3, [r1, r3]
 80029c2:	fa22 f303 	lsr.w	r3, r2, r3
 80029c6:	4a09      	ldr	r2, [pc, #36]	; (80029ec <HAL_RCC_ClockConfig+0x1c4>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <HAL_RCC_ClockConfig+0x1c8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fce8 	bl	80013a4 <HAL_InitTick>

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40023c00 	.word	0x40023c00
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08005aac 	.word	0x08005aac
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	2300      	movs	r3, #0
 8002a06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a0c:	4b67      	ldr	r3, [pc, #412]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f003 030c 	and.w	r3, r3, #12
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d00d      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x40>
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	f200 80bd 	bhi.w	8002b98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_RCC_GetSysClockFreq+0x34>
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d003      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a26:	e0b7      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b61      	ldr	r3, [pc, #388]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a2a:	60bb      	str	r3, [r7, #8]
       break;
 8002a2c:	e0b7      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b61      	ldr	r3, [pc, #388]	; (8002bb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a30:	60bb      	str	r3, [r7, #8]
      break;
 8002a32:	e0b4      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b5d      	ldr	r3, [pc, #372]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04d      	beq.n	8002ae6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b58      	ldr	r3, [pc, #352]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	461a      	mov	r2, r3
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	ea02 0800 	and.w	r8, r2, r0
 8002a62:	ea03 0901 	and.w	r9, r3, r1
 8002a66:	4640      	mov	r0, r8
 8002a68:	4649      	mov	r1, r9
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	014b      	lsls	r3, r1, #5
 8002a74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a78:	0142      	lsls	r2, r0, #5
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	ebb0 0008 	subs.w	r0, r0, r8
 8002a82:	eb61 0109 	sbc.w	r1, r1, r9
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	018b      	lsls	r3, r1, #6
 8002a90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a94:	0182      	lsls	r2, r0, #6
 8002a96:	1a12      	subs	r2, r2, r0
 8002a98:	eb63 0301 	sbc.w	r3, r3, r1
 8002a9c:	f04f 0000 	mov.w	r0, #0
 8002aa0:	f04f 0100 	mov.w	r1, #0
 8002aa4:	00d9      	lsls	r1, r3, #3
 8002aa6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002aaa:	00d0      	lsls	r0, r2, #3
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	eb12 0208 	adds.w	r2, r2, r8
 8002ab4:	eb43 0309 	adc.w	r3, r3, r9
 8002ab8:	f04f 0000 	mov.w	r0, #0
 8002abc:	f04f 0100 	mov.w	r1, #0
 8002ac0:	0259      	lsls	r1, r3, #9
 8002ac2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002ac6:	0250      	lsls	r0, r2, #9
 8002ac8:	4602      	mov	r2, r0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	f04f 0300 	mov.w	r3, #0
 8002ad8:	f7fd fb86 	bl	80001e8 <__aeabi_uldivmod>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	e04a      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	461a      	mov	r2, r3
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	ea02 0400 	and.w	r4, r2, r0
 8002afe:	ea03 0501 	and.w	r5, r3, r1
 8002b02:	4620      	mov	r0, r4
 8002b04:	4629      	mov	r1, r5
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	014b      	lsls	r3, r1, #5
 8002b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b14:	0142      	lsls	r2, r0, #5
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	1b00      	subs	r0, r0, r4
 8002b1c:	eb61 0105 	sbc.w	r1, r1, r5
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	018b      	lsls	r3, r1, #6
 8002b2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b2e:	0182      	lsls	r2, r0, #6
 8002b30:	1a12      	subs	r2, r2, r0
 8002b32:	eb63 0301 	sbc.w	r3, r3, r1
 8002b36:	f04f 0000 	mov.w	r0, #0
 8002b3a:	f04f 0100 	mov.w	r1, #0
 8002b3e:	00d9      	lsls	r1, r3, #3
 8002b40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b44:	00d0      	lsls	r0, r2, #3
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	1912      	adds	r2, r2, r4
 8002b4c:	eb45 0303 	adc.w	r3, r5, r3
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	0299      	lsls	r1, r3, #10
 8002b5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b5e:	0290      	lsls	r0, r2, #10
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	f7fd fb3a 	bl	80001e8 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	3301      	adds	r3, #1
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b94:	60bb      	str	r3, [r7, #8]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b9a:	60bb      	str	r3, [r7, #8]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002baa:	bf00      	nop
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	00f42400 	.word	0x00f42400
 8002bb4:	007a1200 	.word	0x007a1200

08002bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	20000000 	.word	0x20000000

08002bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bd4:	f7ff fff0 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	0a9b      	lsrs	r3, r3, #10
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be6:	5ccb      	ldrb	r3, [r1, r3]
 8002be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	08005abc 	.word	0x08005abc

08002bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bfc:	f7ff ffdc 	bl	8002bb8 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	0b5b      	lsrs	r3, r3, #13
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	; (8002c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	08005abc 	.word	0x08005abc

08002c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e041      	b.n	8002cb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d106      	bne.n	8002c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f88d 	bl	8002d66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f000 fa08 	bl	8003074 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10f      	bne.n	8002cfe <HAL_TIM_PWM_DeInit+0x40>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a1a      	ldr	r2, [r3, #32]
 8002ce4:	f240 4344 	movw	r3, #1092	; 0x444
 8002ce8:	4013      	ands	r3, r2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_TIM_PWM_DeInit+0x40>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0201 	bic.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f83b 	bl	8002d7a <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d109      	bne.n	8002db4 <HAL_TIM_PWM_Start+0x24>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e022      	b.n	8002dfa <HAL_TIM_PWM_Start+0x6a>
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d109      	bne.n	8002dce <HAL_TIM_PWM_Start+0x3e>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	bf14      	ite	ne
 8002dc6:	2301      	movne	r3, #1
 8002dc8:	2300      	moveq	r3, #0
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	e015      	b.n	8002dfa <HAL_TIM_PWM_Start+0x6a>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d109      	bne.n	8002de8 <HAL_TIM_PWM_Start+0x58>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e008      	b.n	8002dfa <HAL_TIM_PWM_Start+0x6a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	bf14      	ite	ne
 8002df4:	2301      	movne	r3, #1
 8002df6:	2300      	moveq	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e068      	b.n	8002ed4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x82>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e10:	e013      	b.n	8002e3a <HAL_TIM_PWM_Start+0xaa>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b04      	cmp	r3, #4
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_PWM_Start+0x92>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e20:	e00b      	b.n	8002e3a <HAL_TIM_PWM_Start+0xaa>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_PWM_Start+0xa2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e30:	e003      	b.n	8002e3a <HAL_TIM_PWM_Start+0xaa>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	6839      	ldr	r1, [r7, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fb22 	bl	800348c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_TIM_PWM_Start+0x14c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d107      	bne.n	8002e62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_TIM_PWM_Start+0x14c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d018      	beq.n	8002e9e <HAL_TIM_PWM_Start+0x10e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d013      	beq.n	8002e9e <HAL_TIM_PWM_Start+0x10e>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_TIM_PWM_Start+0x150>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d00e      	beq.n	8002e9e <HAL_TIM_PWM_Start+0x10e>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_TIM_PWM_Start+0x154>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d009      	beq.n	8002e9e <HAL_TIM_PWM_Start+0x10e>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a16      	ldr	r2, [pc, #88]	; (8002ee8 <HAL_TIM_PWM_Start+0x158>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d004      	beq.n	8002e9e <HAL_TIM_PWM_Start+0x10e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a14      	ldr	r2, [pc, #80]	; (8002eec <HAL_TIM_PWM_Start+0x15c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d111      	bne.n	8002ec2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b06      	cmp	r3, #6
 8002eae:	d010      	beq.n	8002ed2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec0:	e007      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	40000400 	.word	0x40000400
 8002ee4:	40000800 	.word	0x40000800
 8002ee8:	40000c00 	.word	0x40000c00
 8002eec:	40014000 	.word	0x40014000

08002ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e0ae      	b.n	800306c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	f200 809f 	bhi.w	800305c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f1e:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f24:	08002f59 	.word	0x08002f59
 8002f28:	0800305d 	.word	0x0800305d
 8002f2c:	0800305d 	.word	0x0800305d
 8002f30:	0800305d 	.word	0x0800305d
 8002f34:	08002f99 	.word	0x08002f99
 8002f38:	0800305d 	.word	0x0800305d
 8002f3c:	0800305d 	.word	0x0800305d
 8002f40:	0800305d 	.word	0x0800305d
 8002f44:	08002fdb 	.word	0x08002fdb
 8002f48:	0800305d 	.word	0x0800305d
 8002f4c:	0800305d 	.word	0x0800305d
 8002f50:	0800305d 	.word	0x0800305d
 8002f54:	0800301b 	.word	0x0800301b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 f908 	bl	8003174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699a      	ldr	r2, [r3, #24]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0208 	orr.w	r2, r2, #8
 8002f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699a      	ldr	r2, [r3, #24]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0204 	bic.w	r2, r2, #4
 8002f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6999      	ldr	r1, [r3, #24]
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	619a      	str	r2, [r3, #24]
      break;
 8002f96:	e064      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f94e 	bl	8003240 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	021a      	lsls	r2, r3, #8
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	619a      	str	r2, [r3, #24]
      break;
 8002fd8:	e043      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 f999 	bl	8003318 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69da      	ldr	r2, [r3, #28]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0208 	orr.w	r2, r2, #8
 8002ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69da      	ldr	r2, [r3, #28]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0204 	bic.w	r2, r2, #4
 8003004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69d9      	ldr	r1, [r3, #28]
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	691a      	ldr	r2, [r3, #16]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	61da      	str	r2, [r3, #28]
      break;
 8003018:	e023      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 f9e3 	bl	80033ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	021a      	lsls	r2, r3, #8
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	61da      	str	r2, [r3, #28]
      break;
 800305a:	e002      	b.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	75fb      	strb	r3, [r7, #23]
      break;
 8003060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800306a:	7dfb      	ldrb	r3, [r7, #23]
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a34      	ldr	r2, [pc, #208]	; (8003158 <TIM_Base_SetConfig+0xe4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00f      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003092:	d00b      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a31      	ldr	r2, [pc, #196]	; (800315c <TIM_Base_SetConfig+0xe8>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d007      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a30      	ldr	r2, [pc, #192]	; (8003160 <TIM_Base_SetConfig+0xec>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d003      	beq.n	80030ac <TIM_Base_SetConfig+0x38>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a2f      	ldr	r2, [pc, #188]	; (8003164 <TIM_Base_SetConfig+0xf0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d108      	bne.n	80030be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a25      	ldr	r2, [pc, #148]	; (8003158 <TIM_Base_SetConfig+0xe4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d01b      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030cc:	d017      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <TIM_Base_SetConfig+0xe8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a21      	ldr	r2, [pc, #132]	; (8003160 <TIM_Base_SetConfig+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00f      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <TIM_Base_SetConfig+0xf0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d00b      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <TIM_Base_SetConfig+0xf4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d007      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <TIM_Base_SetConfig+0xf8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d003      	beq.n	80030fe <TIM_Base_SetConfig+0x8a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a1d      	ldr	r2, [pc, #116]	; (8003170 <TIM_Base_SetConfig+0xfc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d108      	bne.n	8003110 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68fa      	ldr	r2, [r7, #12]
 8003122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a08      	ldr	r2, [pc, #32]	; (8003158 <TIM_Base_SetConfig+0xe4>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d103      	bne.n	8003144 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	691a      	ldr	r2, [r3, #16]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	615a      	str	r2, [r3, #20]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	40010000 	.word	0x40010000
 800315c:	40000400 	.word	0x40000400
 8003160:	40000800 	.word	0x40000800
 8003164:	40000c00 	.word	0x40000c00
 8003168:	40014000 	.word	0x40014000
 800316c:	40014400 	.word	0x40014400
 8003170:	40014800 	.word	0x40014800

08003174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003174:	b480      	push	{r7}
 8003176:	b087      	sub	sp, #28
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0201 	bic.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f023 0303 	bic.w	r3, r3, #3
 80031aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f023 0302 	bic.w	r3, r3, #2
 80031bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a1c      	ldr	r2, [pc, #112]	; (800323c <TIM_OC1_SetConfig+0xc8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d10c      	bne.n	80031ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f023 0308 	bic.w	r3, r3, #8
 80031d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	f023 0304 	bic.w	r3, r3, #4
 80031e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a13      	ldr	r2, [pc, #76]	; (800323c <TIM_OC1_SetConfig+0xc8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d111      	bne.n	8003216 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	621a      	str	r2, [r3, #32]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40010000 	.word	0x40010000

08003240 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f023 0210 	bic.w	r2, r3, #16
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f023 0320 	bic.w	r3, r3, #32
 800328a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a1e      	ldr	r2, [pc, #120]	; (8003314 <TIM_OC2_SetConfig+0xd4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d10d      	bne.n	80032bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a15      	ldr	r2, [pc, #84]	; (8003314 <TIM_OC2_SetConfig+0xd4>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d113      	bne.n	80032ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	621a      	str	r2, [r3, #32]
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40010000 	.word	0x40010000

08003318 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003318:	b480      	push	{r7}
 800331a:	b087      	sub	sp, #28
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f023 0303 	bic.w	r3, r3, #3
 800334e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	021b      	lsls	r3, r3, #8
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	4313      	orrs	r3, r2
 800336c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <TIM_OC3_SetConfig+0xd0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d10d      	bne.n	8003392 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800337c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	021b      	lsls	r3, r3, #8
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a14      	ldr	r2, [pc, #80]	; (80033e8 <TIM_OC3_SetConfig+0xd0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d113      	bne.n	80033c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80033a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	621a      	str	r2, [r3, #32]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40010000 	.word	0x40010000

080033ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	021b      	lsls	r3, r3, #8
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	4313      	orrs	r3, r2
 800342e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003436:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	031b      	lsls	r3, r3, #12
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a10      	ldr	r2, [pc, #64]	; (8003488 <TIM_OC4_SetConfig+0x9c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d109      	bne.n	8003460 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003452:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	019b      	lsls	r3, r3, #6
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	621a      	str	r2, [r3, #32]
}
 800347a:	bf00      	nop
 800347c:	371c      	adds	r7, #28
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40010000 	.word	0x40010000

0800348c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 031f 	and.w	r3, r3, #31
 800349e:	2201      	movs	r2, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	401a      	ands	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e03f      	b.n	8003568 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d106      	bne.n	8003502 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f000 f866 	bl	80035ce <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2224      	movs	r2, #36	; 0x24
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003518:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f86c 	bl	80035f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800352e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800353e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800354e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2220      	movs	r2, #32
 800355a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e021      	b.n	80035c6 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2224      	movs	r2, #36	; 0x24
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68da      	ldr	r2, [r3, #12]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003598:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f821 	bl	80035e2 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fc:	b09f      	sub	sp, #124	; 0x7c
 80035fe:	af00      	add	r7, sp, #0
 8003600:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800360c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800360e:	68d9      	ldr	r1, [r3, #12]
 8003610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	ea40 0301 	orr.w	r3, r0, r1
 8003618:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	431a      	orrs	r2, r3
 8003624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	431a      	orrs	r2, r3
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4313      	orrs	r3, r2
 8003630:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800363c:	f021 010c 	bic.w	r1, r1, #12
 8003640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003646:	430b      	orrs	r3, r1
 8003648:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800364a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695b      	ldr	r3, [r3, #20]
 8003650:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003654:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003656:	6999      	ldr	r1, [r3, #24]
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	ea40 0301 	orr.w	r3, r0, r1
 8003660:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	4bc5      	ldr	r3, [pc, #788]	; (800397c <UART_SetConfig+0x384>)
 8003668:	429a      	cmp	r2, r3
 800366a:	d004      	beq.n	8003676 <UART_SetConfig+0x7e>
 800366c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4bc3      	ldr	r3, [pc, #780]	; (8003980 <UART_SetConfig+0x388>)
 8003672:	429a      	cmp	r2, r3
 8003674:	d103      	bne.n	800367e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003676:	f7ff fabf 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 800367a:	6778      	str	r0, [r7, #116]	; 0x74
 800367c:	e002      	b.n	8003684 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800367e:	f7ff faa7 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8003682:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	f040 80b6 	bne.w	80037fc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003692:	461c      	mov	r4, r3
 8003694:	f04f 0500 	mov.w	r5, #0
 8003698:	4622      	mov	r2, r4
 800369a:	462b      	mov	r3, r5
 800369c:	1891      	adds	r1, r2, r2
 800369e:	6439      	str	r1, [r7, #64]	; 0x40
 80036a0:	415b      	adcs	r3, r3
 80036a2:	647b      	str	r3, [r7, #68]	; 0x44
 80036a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80036a8:	1912      	adds	r2, r2, r4
 80036aa:	eb45 0303 	adc.w	r3, r5, r3
 80036ae:	f04f 0000 	mov.w	r0, #0
 80036b2:	f04f 0100 	mov.w	r1, #0
 80036b6:	00d9      	lsls	r1, r3, #3
 80036b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036bc:	00d0      	lsls	r0, r2, #3
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	1911      	adds	r1, r2, r4
 80036c4:	6639      	str	r1, [r7, #96]	; 0x60
 80036c6:	416b      	adcs	r3, r5
 80036c8:	667b      	str	r3, [r7, #100]	; 0x64
 80036ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	1891      	adds	r1, r2, r2
 80036d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80036d8:	415b      	adcs	r3, r3
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036e0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80036e4:	f7fc fd80 	bl	80001e8 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4ba5      	ldr	r3, [pc, #660]	; (8003984 <UART_SetConfig+0x38c>)
 80036ee:	fba3 2302 	umull	r2, r3, r3, r2
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	011e      	lsls	r6, r3, #4
 80036f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036f8:	461c      	mov	r4, r3
 80036fa:	f04f 0500 	mov.w	r5, #0
 80036fe:	4622      	mov	r2, r4
 8003700:	462b      	mov	r3, r5
 8003702:	1891      	adds	r1, r2, r2
 8003704:	6339      	str	r1, [r7, #48]	; 0x30
 8003706:	415b      	adcs	r3, r3
 8003708:	637b      	str	r3, [r7, #52]	; 0x34
 800370a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800370e:	1912      	adds	r2, r2, r4
 8003710:	eb45 0303 	adc.w	r3, r5, r3
 8003714:	f04f 0000 	mov.w	r0, #0
 8003718:	f04f 0100 	mov.w	r1, #0
 800371c:	00d9      	lsls	r1, r3, #3
 800371e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003722:	00d0      	lsls	r0, r2, #3
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	1911      	adds	r1, r2, r4
 800372a:	65b9      	str	r1, [r7, #88]	; 0x58
 800372c:	416b      	adcs	r3, r5
 800372e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	461a      	mov	r2, r3
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	1891      	adds	r1, r2, r2
 800373c:	62b9      	str	r1, [r7, #40]	; 0x28
 800373e:	415b      	adcs	r3, r3
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003742:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003746:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800374a:	f7fc fd4d 	bl	80001e8 <__aeabi_uldivmod>
 800374e:	4602      	mov	r2, r0
 8003750:	460b      	mov	r3, r1
 8003752:	4b8c      	ldr	r3, [pc, #560]	; (8003984 <UART_SetConfig+0x38c>)
 8003754:	fba3 1302 	umull	r1, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	2164      	movs	r1, #100	; 0x64
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	00db      	lsls	r3, r3, #3
 8003764:	3332      	adds	r3, #50	; 0x32
 8003766:	4a87      	ldr	r2, [pc, #540]	; (8003984 <UART_SetConfig+0x38c>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003774:	441e      	add	r6, r3
 8003776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003778:	4618      	mov	r0, r3
 800377a:	f04f 0100 	mov.w	r1, #0
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	1894      	adds	r4, r2, r2
 8003784:	623c      	str	r4, [r7, #32]
 8003786:	415b      	adcs	r3, r3
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800378e:	1812      	adds	r2, r2, r0
 8003790:	eb41 0303 	adc.w	r3, r1, r3
 8003794:	f04f 0400 	mov.w	r4, #0
 8003798:	f04f 0500 	mov.w	r5, #0
 800379c:	00dd      	lsls	r5, r3, #3
 800379e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037a2:	00d4      	lsls	r4, r2, #3
 80037a4:	4622      	mov	r2, r4
 80037a6:	462b      	mov	r3, r5
 80037a8:	1814      	adds	r4, r2, r0
 80037aa:	653c      	str	r4, [r7, #80]	; 0x50
 80037ac:	414b      	adcs	r3, r1
 80037ae:	657b      	str	r3, [r7, #84]	; 0x54
 80037b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	461a      	mov	r2, r3
 80037b6:	f04f 0300 	mov.w	r3, #0
 80037ba:	1891      	adds	r1, r2, r2
 80037bc:	61b9      	str	r1, [r7, #24]
 80037be:	415b      	adcs	r3, r3
 80037c0:	61fb      	str	r3, [r7, #28]
 80037c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80037ca:	f7fc fd0d 	bl	80001e8 <__aeabi_uldivmod>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4b6c      	ldr	r3, [pc, #432]	; (8003984 <UART_SetConfig+0x38c>)
 80037d4:	fba3 1302 	umull	r1, r3, r3, r2
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	2164      	movs	r1, #100	; 0x64
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	3332      	adds	r3, #50	; 0x32
 80037e6:	4a67      	ldr	r2, [pc, #412]	; (8003984 <UART_SetConfig+0x38c>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	f003 0207 	and.w	r2, r3, #7
 80037f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4432      	add	r2, r6
 80037f8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037fa:	e0b9      	b.n	8003970 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fe:	461c      	mov	r4, r3
 8003800:	f04f 0500 	mov.w	r5, #0
 8003804:	4622      	mov	r2, r4
 8003806:	462b      	mov	r3, r5
 8003808:	1891      	adds	r1, r2, r2
 800380a:	6139      	str	r1, [r7, #16]
 800380c:	415b      	adcs	r3, r3
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003814:	1912      	adds	r2, r2, r4
 8003816:	eb45 0303 	adc.w	r3, r5, r3
 800381a:	f04f 0000 	mov.w	r0, #0
 800381e:	f04f 0100 	mov.w	r1, #0
 8003822:	00d9      	lsls	r1, r3, #3
 8003824:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003828:	00d0      	lsls	r0, r2, #3
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	eb12 0804 	adds.w	r8, r2, r4
 8003832:	eb43 0905 	adc.w	r9, r3, r5
 8003836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4618      	mov	r0, r3
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	f04f 0300 	mov.w	r3, #0
 8003848:	008b      	lsls	r3, r1, #2
 800384a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800384e:	0082      	lsls	r2, r0, #2
 8003850:	4640      	mov	r0, r8
 8003852:	4649      	mov	r1, r9
 8003854:	f7fc fcc8 	bl	80001e8 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b49      	ldr	r3, [pc, #292]	; (8003984 <UART_SetConfig+0x38c>)
 800385e:	fba3 2302 	umull	r2, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	011e      	lsls	r6, r3, #4
 8003866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003868:	4618      	mov	r0, r3
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	4602      	mov	r2, r0
 8003870:	460b      	mov	r3, r1
 8003872:	1894      	adds	r4, r2, r2
 8003874:	60bc      	str	r4, [r7, #8]
 8003876:	415b      	adcs	r3, r3
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800387e:	1812      	adds	r2, r2, r0
 8003880:	eb41 0303 	adc.w	r3, r1, r3
 8003884:	f04f 0400 	mov.w	r4, #0
 8003888:	f04f 0500 	mov.w	r5, #0
 800388c:	00dd      	lsls	r5, r3, #3
 800388e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003892:	00d4      	lsls	r4, r2, #3
 8003894:	4622      	mov	r2, r4
 8003896:	462b      	mov	r3, r5
 8003898:	1814      	adds	r4, r2, r0
 800389a:	64bc      	str	r4, [r7, #72]	; 0x48
 800389c:	414b      	adcs	r3, r1
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f04f 0100 	mov.w	r1, #0
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	f04f 0300 	mov.w	r3, #0
 80038b2:	008b      	lsls	r3, r1, #2
 80038b4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038b8:	0082      	lsls	r2, r0, #2
 80038ba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80038be:	f7fc fc93 	bl	80001e8 <__aeabi_uldivmod>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4b2f      	ldr	r3, [pc, #188]	; (8003984 <UART_SetConfig+0x38c>)
 80038c8:	fba3 1302 	umull	r1, r3, r3, r2
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	2164      	movs	r1, #100	; 0x64
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	3332      	adds	r3, #50	; 0x32
 80038da:	4a2a      	ldr	r2, [pc, #168]	; (8003984 <UART_SetConfig+0x38c>)
 80038dc:	fba2 2303 	umull	r2, r3, r2, r3
 80038e0:	095b      	lsrs	r3, r3, #5
 80038e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038e6:	441e      	add	r6, r3
 80038e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ea:	4618      	mov	r0, r3
 80038ec:	f04f 0100 	mov.w	r1, #0
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	1894      	adds	r4, r2, r2
 80038f6:	603c      	str	r4, [r7, #0]
 80038f8:	415b      	adcs	r3, r3
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003900:	1812      	adds	r2, r2, r0
 8003902:	eb41 0303 	adc.w	r3, r1, r3
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	f04f 0500 	mov.w	r5, #0
 800390e:	00dd      	lsls	r5, r3, #3
 8003910:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003914:	00d4      	lsls	r4, r2, #3
 8003916:	4622      	mov	r2, r4
 8003918:	462b      	mov	r3, r5
 800391a:	eb12 0a00 	adds.w	sl, r2, r0
 800391e:	eb43 0b01 	adc.w	fp, r3, r1
 8003922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	4618      	mov	r0, r3
 8003928:	f04f 0100 	mov.w	r1, #0
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	008b      	lsls	r3, r1, #2
 8003936:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800393a:	0082      	lsls	r2, r0, #2
 800393c:	4650      	mov	r0, sl
 800393e:	4659      	mov	r1, fp
 8003940:	f7fc fc52 	bl	80001e8 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4b0e      	ldr	r3, [pc, #56]	; (8003984 <UART_SetConfig+0x38c>)
 800394a:	fba3 1302 	umull	r1, r3, r3, r2
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2164      	movs	r1, #100	; 0x64
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	3332      	adds	r3, #50	; 0x32
 800395c:	4a09      	ldr	r2, [pc, #36]	; (8003984 <UART_SetConfig+0x38c>)
 800395e:	fba2 2303 	umull	r2, r3, r2, r3
 8003962:	095b      	lsrs	r3, r3, #5
 8003964:	f003 020f 	and.w	r2, r3, #15
 8003968:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4432      	add	r2, r6
 800396e:	609a      	str	r2, [r3, #8]
}
 8003970:	bf00      	nop
 8003972:	377c      	adds	r7, #124	; 0x7c
 8003974:	46bd      	mov	sp, r7
 8003976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800397a:	bf00      	nop
 800397c:	40011000 	.word	0x40011000
 8003980:	40011400 	.word	0x40011400
 8003984:	51eb851f 	.word	0x51eb851f

08003988 <_ZN12QAD_TimerMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_TimerMgr& get(void) {
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
		static QAD_TimerMgr instance;
 800398c:	4b10      	ldr	r3, [pc, #64]	; (80039d0 <_ZN12QAD_TimerMgr3getEv+0x48>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	f3bf 8f5b 	dmb	ish
 8003994:	b2db      	uxtb	r3, r3
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	bf0c      	ite	eq
 800399e:	2301      	moveq	r3, #1
 80039a0:	2300      	movne	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d010      	beq.n	80039ca <_ZN12QAD_TimerMgr3getEv+0x42>
 80039a8:	4809      	ldr	r0, [pc, #36]	; (80039d0 <_ZN12QAD_TimerMgr3getEv+0x48>)
 80039aa:	f001 fecf 	bl	800574c <__cxa_guard_acquire>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d005      	beq.n	80039ca <_ZN12QAD_TimerMgr3getEv+0x42>
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <_ZN12QAD_TimerMgr3getEv+0x4c>)
 80039c0:	f001 f812 	bl	80049e8 <_ZN12QAD_TimerMgrC1Ev>
 80039c4:	4802      	ldr	r0, [pc, #8]	; (80039d0 <_ZN12QAD_TimerMgr3getEv+0x48>)
 80039c6:	f001 fecd 	bl	8005764 <__cxa_guard_release>
		return instance;
 80039ca:	4b02      	ldr	r3, [pc, #8]	; (80039d4 <_ZN12QAD_TimerMgr3getEv+0x4c>)
	}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	20000308 	.word	0x20000308
 80039d4:	20000268 	.word	0x20000268

080039d8 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>:
  //Data Methods

	//Used to retrieve the current state of a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the state for. Member of QAD_Timer_Periph
	//Returns member of QAD_TimerState enum
	static QAD_Timer_State getState(QAD_Timer_Periph eTimer) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].eState;
 80039e2:	f7ff ffd1 	bl	8003988 <_ZN12QAD_TimerMgr3getEv>
 80039e6:	4601      	mov	r1, r0
 80039e8:	79fa      	ldrb	r2, [r7, #7]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3301      	adds	r3, #1
 80039f6:	781b      	ldrb	r3, [r3, #0]
	}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>:
	}

	//Used to retrieve an instance for a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the instance for. Member of QAD_Timer_Periph
	//Returns TIM_TypeDef, as defined in stm32f411xe.h
	static TIM_TypeDef* getInstance(QAD_Timer_Periph eTimer) {
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	4603      	mov	r3, r0
 8003a08:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].pInstance;
 8003a0a:	f7ff ffbd 	bl	8003988 <_ZN12QAD_TimerMgr3getEv>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	79fa      	ldrb	r2, [r7, #7]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	681b      	ldr	r3, [r3, #0]
	}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
	//Management Methods

	//Used to register a Timer peripheral as being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected Timer is already in use
	static QA_Result registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	460a      	mov	r2, r1
 8003a32:	71fb      	strb	r3, [r7, #7]
 8003a34:	4613      	mov	r3, r2
 8003a36:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerTimer(eTimer, eState);
 8003a38:	f7ff ffa6 	bl	8003988 <_ZN12QAD_TimerMgr3getEv>
 8003a3c:	79ba      	ldrb	r2, [r7, #6]
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	4619      	mov	r1, r3
 8003a42:	f001 f8df 	bl	8004c04 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>
 8003a46:	4603      	mov	r3, r0
	}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>:

	//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	static void deregisterTimer(QAD_Timer_Periph eTimer) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterTimer(eTimer);
 8003a5a:	f7ff ff95 	bl	8003988 <_ZN12QAD_TimerMgr3getEv>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	4619      	mov	r1, r3
 8003a64:	4610      	mov	r0, r2
 8003a66:	f001 f8f8 	bl	8004c5a <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>
	}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to enable the clock for
	static void enableClock(QAD_Timer_Periph eTimer) {
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4603      	mov	r3, r0
 8003a7a:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eTimer);
 8003a7c:	f7ff ff84 	bl	8003988 <_ZN12QAD_TimerMgr3getEv>
 8003a80:	4602      	mov	r2, r0
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f001 f8fe 	bl	8004c88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>
	}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>:

	//Used to disable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to disable the clock for
	static void disableClock(QAD_Timer_Periph eTimer) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eTimer);
 8003a9e:	f7ff ff73 	bl	8003988 <_ZN12QAD_TimerMgr3getEv>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	79fb      	ldrb	r3, [r7, #7]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	f001 f9ef 	bl	8004e8c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>
	}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <_ZN7QAD_ADC11imp_handlerEv>:
	//-----------------------
	//QAD_ADC Handler Methods

//QAD_ADC::imp_handler
//QAD_ADC Handler Method
void QAD_ADC::imp_handler(void) {
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]

	//Check for overrun error
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_OVR)) {
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	bf0c      	ite	eq
 8003acc:	2301      	moveq	r3, #1
 8003ace:	2300      	movne	r3, #0
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <_ZN7QAD_ADC11imp_handlerEv+0x36>
		imp_stop();
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f952 	bl	8003d80 <_ZN7QAD_ADC8imp_stopEv>
		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_OVR);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	f06f 0220 	mvn.w	r2, #32
 8003ae4:	601a      	str	r2, [r3, #0]
		imp_start();
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f83a 	bl	8003b60 <_ZN7QAD_ADC9imp_startEv>
	}

	//Check for end of conversion
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_EOC)) {
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	bf0c      	ite	eq
 8003afa:	2301      	moveq	r3, #1
 8003afc:	2300      	movne	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d028      	beq.n	8003b56 <_ZN7QAD_ADC11imp_handlerEv+0xa0>

		m_uData[m_uDataIdx] = m_sADCHandle.Instance->DR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003b10:	b291      	uxth	r1, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	33cc      	adds	r3, #204	; 0xcc
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	4413      	add	r3, r2
 8003b1a:	460a      	mov	r2, r1
 8003b1c:	80da      	strh	r2, [r3, #6]
		if (m_uDataIdx >= (m_uChannelCount-1))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003b24:	461a      	mov	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	db04      	blt.n	8003b3c <_ZN7QAD_ADC11imp_handlerEv+0x86>
			m_uDataIdx = 0; else
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8003b3a:	e007      	b.n	8003b4c <_ZN7QAD_ADC11imp_handlerEv+0x96>
			m_uDataIdx++;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003b42:	3301      	adds	r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_EOC);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f06f 0202 	mvn.w	r2, #2
 8003b54:	601a      	str	r2, [r3, #0]
	}
}
 8003b56:	bf00      	nop
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <_ZN7QAD_ADC9imp_startEv>:
	//-----------------------
	//QAD_ADC Control Methods

//QAD_ADC::imp_start
//QAD_ADC Control Method
QA_Result QAD_ADC::imp_start(void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	; 0x30
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	if ((m_eState) || (!m_uChannelCount))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d104      	bne.n	8003b7a <_ZN7QAD_ADC9imp_startEv+0x1a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <_ZN7QAD_ADC9imp_startEv+0x1e>
		return QA_Fail;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0f9      	b.n	8003d72 <_ZN7QAD_ADC9imp_startEv+0x212>

	//Initialize ADC
	m_sADCHandle.Instance                   = ADC1;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a7e      	ldr	r2, [pc, #504]	; (8003d7c <_ZN7QAD_ADC9imp_startEv+0x21c>)
 8003b82:	655a      	str	r2, [r3, #84]	; 0x54
	m_sADCHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b8a:	659a      	str	r2, [r3, #88]	; 0x58
	m_sADCHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sADCHandle.Init.ScanConvMode          = ENABLE;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	665a      	str	r2, [r3, #100]	; 0x64
	m_sADCHandle.Init.ContinuousConvMode    = DISABLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sADCHandle.Init.DiscontinuousConvMode = DISABLE;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sADCHandle.Init.NbrOfDiscConversion   = 0;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	679a      	str	r2, [r3, #120]	; 0x78
	m_sADCHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sADCHandle.Init.ExternalTrigConv      = imp_getTrigger();
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f933 	bl	8003e24 <_ZN7QAD_ADC14imp_getTriggerEv>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sADCHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	661a      	str	r2, [r3, #96]	; 0x60
	m_sADCHandle.Init.NbrOfConversion       = m_uChannelCount;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	671a      	str	r2, [r3, #112]	; 0x70
	m_sADCHandle.Init.DMAContinuousRequests = ENABLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	m_sADCHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_ADC_Init(&m_sADCHandle) != HAL_OK) {
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3354      	adds	r3, #84	; 0x54
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd fc2b 	bl	8001444 <HAL_ADC_Init>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf14      	ite	ne
 8003bf4:	2301      	movne	r3, #1
 8003bf6:	2300      	moveq	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d004      	beq.n	8003c08 <_ZN7QAD_ADC9imp_startEv+0xa8>
		imp_stop();
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f8be 	bl	8003d80 <_ZN7QAD_ADC8imp_stopEv>
		return QA_Fail;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0b4      	b.n	8003d72 <_ZN7QAD_ADC9imp_startEv+0x212>
	}

	//Channel GPIO Configuration
	GPIO_InitTypeDef GPIO_Init = {0};
 8003c08:	f107 0318 	add.w	r3, r7, #24
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
 8003c10:	605a      	str	r2, [r3, #4]
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode  = GPIO_MODE_ANALOG;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Pull  = GPIO_NOPULL;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	623b      	str	r3, [r7, #32]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003c20:	2300      	movs	r3, #0
 8003c22:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003c30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d22e      	bcs.n	8003c96 <_ZN7QAD_ADC9imp_startEv+0x136>
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	330a      	adds	r3, #10
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	4413      	add	r3, r2
 8003c44:	3304      	adds	r3, #4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b11      	cmp	r3, #17
 8003c4a:	d109      	bne.n	8003c60 <_ZN7QAD_ADC9imp_startEv+0x100>
				(m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVBat)) {
 8003c4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	330a      	adds	r3, #10
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	4413      	add	r3, r2
 8003c58:	3304      	adds	r3, #4
 8003c5a:	681b      	ldr	r3, [r3, #0]
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003c5c:	2b12      	cmp	r3, #18
 8003c5e:	d014      	beq.n	8003c8a <_ZN7QAD_ADC9imp_startEv+0x12a>
			GPIO_Init.Pin       = m_sChannels[i].uPin;
 8003c60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	4413      	add	r3, r2
 8003c6a:	33a0      	adds	r3, #160	; 0xa0
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 8003c70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	4413      	add	r3, r2
 8003c7a:	339c      	adds	r3, #156	; 0x9c
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f107 0218 	add.w	r2, r7, #24
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe f8d5 	bl	8001e34 <HAL_GPIO_Init>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c94:	e7c9      	b.n	8003c2a <_ZN7QAD_ADC9imp_startEv+0xca>
		}
	}


	//Channel Configuration
	ADC_ChannelConfTypeDef  ADCChannel_Init = {0};
 8003c96:	f107 0308 	add.w	r3, r7, #8
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	609a      	str	r2, [r3, #8]
 8003ca2:	60da      	str	r2, [r3, #12]
	ADCChannel_Init.Offset        = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003cb4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d230      	bcs.n	8003d1e <_ZN7QAD_ADC9imp_startEv+0x1be>
		ADCChannel_Init.Channel       = m_sChannels[i].eChannel;
 8003cbc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	330a      	adds	r3, #10
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	4413      	add	r3, r2
 8003cc8:	3304      	adds	r3, #4
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60bb      	str	r3, [r7, #8]
		ADCChannel_Init.Rank          = i+1;
 8003cce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]
		ADCChannel_Init.SamplingTime = m_sChannels[i].eSamplingTime;
 8003cd6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	330a      	adds	r3, #10
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&m_sADCHandle, &ADCChannel_Init) != HAL_OK) {
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3354      	adds	r3, #84	; 0x54
 8003cec:	f107 0208 	add.w	r2, r7, #8
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd fd2c 	bl	8001750 <HAL_ADC_ConfigChannel>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <_ZN7QAD_ADC9imp_startEv+0x1b2>
			imp_stop();
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f839 	bl	8003d80 <_ZN7QAD_ADC8imp_stopEv>
			return QA_Fail;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e02f      	b.n	8003d72 <_ZN7QAD_ADC9imp_startEv+0x212>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003d12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d16:	3301      	adds	r3, #1
 8003d18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d1c:	e7c7      	b.n	8003cae <_ZN7QAD_ADC9imp_startEv+0x14e>
		}

	}

	//Clear Data
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003d24:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d28:	2b0f      	cmp	r3, #15
 8003d2a:	d80d      	bhi.n	8003d48 <_ZN7QAD_ADC9imp_startEv+0x1e8>
		m_uData[i] = 0;
 8003d2c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	33cc      	adds	r3, #204	; 0xcc
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	4413      	add	r3, r2
 8003d38:	2200      	movs	r2, #0
 8003d3a:	80da      	strh	r2, [r3, #6]
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003d3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d40:	3301      	adds	r3, #1
 8003d42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003d46:	e7ed      	b.n	8003d24 <_ZN7QAD_ADC9imp_startEv+0x1c4>
	m_uDataIdx = 0;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

	//Enable ADC IRQ
	HAL_ADC_Start_IT(&m_sADCHandle);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3354      	adds	r3, #84	; 0x54
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fd fbff 	bl	8001558 <HAL_ADC_Start_IT>
	__HAL_TIM_ENABLE(&m_sTIMHandle);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]

	//Set States
	m_eState = QA_Active;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3730      	adds	r7, #48	; 0x30
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40012000 	.word	0x40012000

08003d80 <_ZN7QAD_ADC8imp_stopEv>:


//QAD_ADC::imp_stop
//QAD_ADC Control Method
void QAD_ADC::imp_stop(void) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]

	//Disable ADC IRQ
	__HAL_TIM_DISABLE(&m_sTIMHandle);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d014      	beq.n	8003dcc <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	f240 4344 	movw	r3, #1092	; 0x444
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d007      	beq.n	8003dcc <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f022 0201 	bic.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&m_sADCHandle);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3354      	adds	r3, #84	; 0x54
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7fd fc7f 	bl	80016d4 <HAL_ADC_Stop_IT>

	//GPIO Deinitialization
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d212      	bcs.n	8003e0c <_ZN7QAD_ADC8imp_stopEv+0x8c>
		HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	4413      	add	r3, r2
 8003dee:	339c      	adds	r3, #156	; 0x9c
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	7bfb      	ldrb	r3, [r7, #15]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	4413      	add	r3, r2
 8003dfa:	33a0      	adds	r3, #160	; 0xa0
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7fe f99c 	bl	800213c <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
 8003e06:	3301      	adds	r3, #1
 8003e08:	73fb      	strb	r3, [r7, #15]
 8003e0a:	e7e6      	b.n	8003dda <_ZN7QAD_ADC8imp_stopEv+0x5a>
	}

	//Deinitialize ADC
	HAL_ADC_DeInit(&m_sADCHandle);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3354      	adds	r3, #84	; 0x54
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd fb5a 	bl	80014ca <HAL_ADC_DeInit>

	//Set States
	m_eState = QA_Inactive;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	705a      	strb	r2, [r3, #1]
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZN7QAD_ADC14imp_getTriggerEv>:
	//--------------------
	//QAD_ADC Tool Methods

//QAD_ADC::imp_getTrigger
//QAD_ADC Tool Method
uint32_t QAD_ADC::imp_getTrigger(void) {
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
	uint32_t uTrigger;
	switch (m_eTimer) {
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	789b      	ldrb	r3, [r3, #2]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d002      	beq.n	8003e3a <_ZN7QAD_ADC14imp_getTriggerEv+0x16>
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d004      	beq.n	8003e42 <_ZN7QAD_ADC14imp_getTriggerEv+0x1e>
 8003e38:	e007      	b.n	8003e4a <_ZN7QAD_ADC14imp_getTriggerEv+0x26>
		case QAD_Timer2:
			uTrigger = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003e3a:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003e3e:	60fb      	str	r3, [r7, #12]
			break;
 8003e40:	e006      	b.n	8003e50 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		case QAD_Timer3:
			uTrigger = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003e42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e46:	60fb      	str	r3, [r7, #12]
			break;
 8003e48:	e002      	b.n	8003e50 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		default:
			uTrigger = 0xFFFFFFFF;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e4e:	60fb      	str	r3, [r7, #12]
	}
	return uTrigger;
 8003e50:	68fb      	ldr	r3, [r7, #12]
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	809a      	strh	r2, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	719a      	strb	r2, [r3, #6]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f841 	bl	8003f18 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	889b      	ldrh	r3, [r3, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7fe fa26 	bl	8002304 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	741a      	strb	r2, [r3, #16]
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b082      	sub	sp, #8
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	889b      	ldrh	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f7fe fa13 	bl	8002304 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	741a      	strb	r2, [r3, #16]
}
 8003ee4:	bf00      	nop
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7c1b      	ldrb	r3, [r3, #16]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d107      	bne.n	8003f10 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff ffe0 	bl	8003ec6 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8003f06:	e003      	b.n	8003f10 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff ffc9 	bl	8003ea0 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8003f0e:	bf00      	nop
	}
}
 8003f10:	bf00      	nop
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	889b      	ldrh	r3, [r3, #4]
 8003f34:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	799b      	ldrb	r3, [r3, #6]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8003f3e:	2311      	movs	r3, #17
 8003f40:	e000      	b.n	8003f44 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8003f42:	2301      	movs	r3, #1
 8003f44:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f107 020c 	add.w	r2, r7, #12
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fd ff69 	bl	8001e34 <HAL_GPIO_Init>
}
 8003f62:	bf00      	nop
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>:
	static uint8_t getChannels(QAD_Timer_Periph eTimer) {
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b082      	sub	sp, #8
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].uChannels;
 8003f74:	f7ff fd08 	bl	8003988 <_ZN12QAD_TimerMgr3getEv>
 8003f78:	4601      	mov	r1, r0
 8003f7a:	79fa      	ldrb	r2, [r7, #7]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	440b      	add	r3, r1
 8003f86:	3309      	adds	r3, #9
 8003f88:	781b      	ldrb	r3, [r3, #0]
	}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZN7QAD_PWM4initEv>:
//QAD_PWM::init
//QAD_PWM Initialization Method
//
//Used to initialize the PWM driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_PWM::init(void) {
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]

	//Check if selected Timer peripheral is currently available
  if (QAD_TimerMgr::getState(m_eTimer))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	789b      	ldrb	r3, [r3, #2]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f7ff fd1a 	bl	80039d8 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	bf14      	ite	ne
 8003faa:	2301      	movne	r3, #1
 8003fac:	2300      	moveq	r3, #0
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <_ZN7QAD_PWM4initEv+0x26>
  	return QA_Error_PeriphBusy;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e013      	b.n	8003fe0 <_ZN7QAD_PWM4initEv+0x4e>

  //Register Timer peripheral as now being in use
  QAD_TimerMgr::registerTimer(m_eTimer, QAD_Timer_InUse_PWM);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	789b      	ldrb	r3, [r3, #2]
 8003fbc:	2103      	movs	r1, #3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fd32 	bl	8003a28 <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>

  //Initialize the Timer peripheral
  QA_Result eRes = periphInit();
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f899 	bl	80040fc <_ZN7QAD_PWM10periphInitEv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister the Timer peripheral
  if (eRes)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <_ZN7QAD_PWM4initEv+0x4c>
  	QAD_TimerMgr::deregisterTimer(m_eTimer);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	789b      	ldrb	r3, [r3, #2]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fd39 	bl	8003a50 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>

  //Return initialization result
  return eRes;
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN7QAD_PWM5startEv>:

//QAD_PWM::start
//QAD_PWM Control Method
//
//Starts the PWM driver
void QAD_PWM::start(void) {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]

	//Iterate through the number of channels supported by the specific timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	789b      	ldrb	r3, [r3, #2]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f7ff ffb6 	bl	8003f6a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	7bfb      	ldrb	r3, [r7, #15]
 8004004:	4293      	cmp	r3, r2
 8004006:	bf34      	ite	cc
 8004008:	2301      	movcc	r3, #1
 800400a:	2300      	movcs	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d019      	beq.n	8004046 <_ZN7QAD_PWM5startEv+0x5e>

		//If channel is set to active then start PWM on that channel
		if (m_sChannels[i].eActive)
 8004012:	7bfa      	ldrb	r2, [r7, #15]
 8004014:	6879      	ldr	r1, [r7, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	4413      	add	r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3354      	adds	r3, #84	; 0x54
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <_ZN7QAD_PWM5startEv+0x56>
			HAL_TIM_PWM_Start(&m_sHandle, m_uChannelSelect[i]);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1d18      	adds	r0, r3, #4
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	3320      	adds	r3, #32
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4619      	mov	r1, r3
 800403a:	f7fe fea9 	bl	8002d90 <HAL_TIM_PWM_Start>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	3301      	adds	r3, #1
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e7d6      	b.n	8003ff4 <_ZN7QAD_PWM5startEv+0xc>
	}

	//Set PWM driver state to active
	m_eState = QA_Active;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	705a      	strb	r2, [r3, #1]
}
 800404c:	bf00      	nop
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>:
//QAD_PWM Control Method
//
//Sets the current PWM value for a specific channel
//eChannel - The PWM channel to set the value for. A member of QAD_PWM_Channel as defined in QAD_PWM.hpp
//uVal     - The PWM value to set. This value should not be larger than the timer period set within the driver initialization structure
void QAD_PWM::setPWMVal(QAD_PWM_Channel eChannel, uint16_t uVal) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
 8004060:	4613      	mov	r3, r2
 8004062:	803b      	strh	r3, [r7, #0]

	//Return if the selected channel is higher than the number of channels supported by the selected timer peripheral
  if (eChannel >= QAD_TimerMgr::getChannels(m_eTimer))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	789b      	ldrb	r3, [r3, #2]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff7e 	bl	8003f6a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 800406e:	4603      	mov	r3, r0
 8004070:	461a      	mov	r2, r3
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	4293      	cmp	r3, r2
 8004076:	bf2c      	ite	cs
 8004078:	2301      	movcs	r3, #1
 800407a:	2300      	movcc	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d12b      	bne.n	80040da <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x86>
  	return;

  //Set new PWM value to compare register for selected channel of timer peripheral
  __HAL_TIM_SET_COMPARE(&m_sHandle, m_uChannelSelect[eChannel], uVal);
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	3320      	adds	r3, #32
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d104      	bne.n	800409c <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x48>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	883a      	ldrh	r2, [r7, #0]
 8004098:	635a      	str	r2, [r3, #52]	; 0x34
 800409a:	e01f      	b.n	80040dc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 800409c:	78fb      	ldrb	r3, [r7, #3]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	3320      	adds	r3, #32
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	4413      	add	r3, r2
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d104      	bne.n	80040b6 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x62>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	883a      	ldrh	r2, [r7, #0]
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38
 80040b4:	e012      	b.n	80040dc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 80040b6:	78fb      	ldrb	r3, [r7, #3]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	3320      	adds	r3, #32
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d104      	bne.n	80040d0 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x7c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	883a      	ldrh	r2, [r7, #0]
 80040cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80040ce:	e005      	b.n	80040dc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	883a      	ldrh	r2, [r7, #0]
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
 80040d8:	e000      	b.n	80040dc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
  	return;
 80040da:	bf00      	nop
}
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <_ZN7QAD_PWM9getPeriodEv>:

//QAD_PWM::getPeriod
//QAD_PWM Control Method
//
//Returns the current timer period value
uint16_t QAD_PWM::getPeriod(void) {
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
	return m_uPeriod;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ee:	b29b      	uxth	r3, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <_ZN7QAD_PWM10periphInitEv>:
//
//Used to initialize the GPIOs, timer peripheral clock, the timer peripheral itself and the respective PWM channels
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral and clock
//are all in the uninitialized state.
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_PWM::periphInit(void) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b090      	sub	sp, #64	; 0x40
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]

	//Init GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8004104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode     = GPIO_MODE_AF_PP;      //Set pin to Alternate Function - Push/Pull mode
 8004114:	2302      	movs	r3, #2
 8004116:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_Init.Pull     = GPIO_NOPULL;          //Disable pull-up and pull-down resistors
 8004118:	2300      	movs	r3, #0
 800411a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init.Speed    = GPIO_SPEED_FREQ_HIGH; //Set pin output speed to high
 800411c:	2302      	movs	r3, #2
 800411e:	637b      	str	r3, [r7, #52]	; 0x34

	//Iterate through specific GPIOs per channel and initialize each in turn
	//Will only iterate through the number of channels supported by the specific timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004120:	2300      	movs	r3, #0
 8004122:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	789b      	ldrb	r3, [r3, #2]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ff1d 	bl	8003f6a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 8004130:	4603      	mov	r3, r0
 8004132:	461a      	mov	r2, r3
 8004134:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004138:	4293      	cmp	r3, r2
 800413a:	bf34      	ite	cc
 800413c:	2301      	movcc	r3, #1
 800413e:	2300      	movcs	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d037      	beq.n	80041b6 <_ZN7QAD_PWM10periphInitEv+0xba>

		//If channel is set to be active then initialize GPIO pin
		if (m_sChannels[i].eActive) {
 8004146:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800414a:	6879      	ldr	r1, [r7, #4]
 800414c:	4613      	mov	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	3354      	adds	r3, #84	; 0x54
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d025      	beq.n	80041aa <_ZN7QAD_PWM10periphInitEv+0xae>
			GPIO_Init.Pin         = m_sChannels[i].uPin; //Set pin number
 800415e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004162:	6879      	ldr	r1, [r7, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	335c      	adds	r3, #92	; 0x5c
 8004170:	881b      	ldrh	r3, [r3, #0]
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_Init.Alternate   = m_sChannels[i].uAF;  //Set alternate function to suit required timer peripheral
 8004174:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	335e      	adds	r3, #94	; 0x5e
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	63bb      	str	r3, [r7, #56]	; 0x38
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 800418a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	3358      	adds	r3, #88	; 0x58
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fd fe45 	bl	8001e34 <HAL_GPIO_Init>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80041aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80041ae:	3301      	adds	r3, #1
 80041b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80041b4:	e7b7      	b.n	8004126 <_ZN7QAD_PWM10periphInitEv+0x2a>
		}
	}

	//Enable Timer Clock
	QAD_TimerMgr::enableClock(m_eTimer);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	789b      	ldrb	r3, [r3, #2]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fc59 	bl	8003a72 <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>

	//Init Timer PWM Mode
	m_sHandle.Instance                     = QAD_TimerMgr::getInstance(m_eTimer);  //Set instance for required timer peripheral
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	789b      	ldrb	r3, [r3, #2]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff fc1b 	bl	8003a00 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>
 80041ca:	4602      	mov	r2, r0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.Prescaler               = m_uPrescaler;                         //Set timer prescaler
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.Period                  = m_uPeriod;                            //Set timer counter period
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.CounterMode             = TIM_COUNTERMODE_UP;                   //Set counter mode to up
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.ClockDivision           = TIM_CLOCKDIVISION_DIV1;               //Unused
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.RepetitionCounter       = 0x0;                                  //
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.AutoReloadPreload       = TIM_AUTORELOAD_PRELOAD_ENABLE;        //Enable preload of the timer's auto-reload register
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2280      	movs	r2, #128	; 0x80
 80041f6:	61da      	str	r2, [r3, #28]

  //Initialize Timer in PWM mode, performing a partial deinitialization if the initialization fails
  if (HAL_TIM_PWM_Init(&m_sHandle) != HAL_OK) {
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3304      	adds	r3, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe fd0f 	bl	8002c20 <HAL_TIM_PWM_Init>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	bf14      	ite	ne
 8004208:	2301      	movne	r3, #1
 800420a:	2300      	moveq	r3, #0
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d005      	beq.n	800421e <_ZN7QAD_PWM10periphInitEv+0x122>
		periphDeinit(DeinitPartial);
 8004212:	2100      	movs	r1, #0
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f863 	bl	80042e0 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800421a:	2301      	movs	r3, #1
 800421c:	e05c      	b.n	80042d8 <_ZN7QAD_PWM10periphInitEv+0x1dc>
	}

	//Init PWM Channels
	TIM_OC_InitTypeDef TIM_OC_Init;
	//Iterate through number of channels supported by selected timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 800421e:	2300      	movs	r3, #0
 8004220:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	789b      	ldrb	r3, [r3, #2]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fe9e 	bl	8003f6a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 800422e:	4603      	mov	r3, r0
 8004230:	461a      	mov	r2, r3
 8004232:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004236:	4293      	cmp	r3, r2
 8004238:	bf34      	ite	cc
 800423a:	2301      	movcc	r3, #1
 800423c:	2300      	movcs	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d042      	beq.n	80042ca <_ZN7QAD_PWM10periphInitEv+0x1ce>
		//If channel is set to active then initialize PWM channel
		if (m_sChannels[i].eActive) {
 8004244:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4413      	add	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	3354      	adds	r3, #84	; 0x54
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d030      	beq.n	80042be <_ZN7QAD_PWM10periphInitEv+0x1c2>
			TIM_OC_Init = {0};
 800425c:	f107 030c 	add.w	r3, r7, #12
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	609a      	str	r2, [r3, #8]
 8004268:	60da      	str	r2, [r3, #12]
 800426a:	611a      	str	r2, [r3, #16]
 800426c:	615a      	str	r2, [r3, #20]
 800426e:	619a      	str	r2, [r3, #24]
			TIM_OC_Init.OCMode        = TIM_OCMODE_PWM1;        //Set Output Compare mode to PWM1
 8004270:	2360      	movs	r3, #96	; 0x60
 8004272:	60fb      	str	r3, [r7, #12]
			TIM_OC_Init.OCIdleState   = TIM_OCIDLESTATE_SET;    //Set Output Compare Idle State to Set
 8004274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004278:	623b      	str	r3, [r7, #32]
			TIM_OC_Init.Pulse         = 0;                      //
 800427a:	2300      	movs	r3, #0
 800427c:	613b      	str	r3, [r7, #16]
			TIM_OC_Init.OCPolarity    = TIM_OCPOLARITY_HIGH;    //Set Output Compare Polarity to High
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
			TIM_OC_Init.OCFastMode    = TIM_OCFAST_ENABLE;      //Enable Output Compare Fast Mode
 8004282:	2304      	movs	r3, #4
 8004284:	61fb      	str	r3, [r7, #28]

			//Configure PWM Channel, performing a full deinitialization if the configuration fails
			if (HAL_TIM_PWM_ConfigChannel(&m_sHandle, &TIM_OC_Init, m_uChannelSelect[i]) != HAL_OK) {
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	1d18      	adds	r0, r3, #4
 800428a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	3320      	adds	r3, #32
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	f107 030c 	add.w	r3, r7, #12
 800429c:	4619      	mov	r1, r3
 800429e:	f7fe fe27 	bl	8002ef0 <HAL_TIM_PWM_ConfigChannel>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d005      	beq.n	80042be <_ZN7QAD_PWM10periphInitEv+0x1c2>
				periphDeinit(DeinitFull);
 80042b2:	2101      	movs	r1, #1
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f000 f813 	bl	80042e0 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>
				return QA_Fail;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e00c      	b.n	80042d8 <_ZN7QAD_PWM10periphInitEv+0x1dc>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80042be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80042c2:	3301      	adds	r3, #1
 80042c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80042c8:	e7ac      	b.n	8004224 <_ZN7QAD_PWM10periphInitEv+0x128>
			}
		}
	}

	//Set Driver States
	m_eInitState = QA_Initialized; //Set driver state as initialized
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
	m_eState     = QA_Inactive;    //Set driver as currently inactive
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3740      	adds	r7, #64	; 0x40
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, timer peripheral clock and the timer peripheral itself
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_PWM::periphDeinit(QAD_PWM::DeinitMode eDeinitMode) {
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]

	//Check if a full deinitialization is required
	if (eDeinitMode) {
 80042ec:	78fb      	ldrb	r3, [r7, #3]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d009      	beq.n	8004306 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x26>

		//Deinitialize Timer Peripheral
		HAL_TIM_PWM_DeInit(&m_sHandle);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fce1 	bl	8002cbe <HAL_TIM_PWM_DeInit>

		//Disable Timer Clock
		QAD_TimerMgr::disableClock(m_eTimer);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	789b      	ldrb	r3, [r3, #2]
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff fbc7 	bl	8003a94 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>

	}

	//Deinitialize GPIOs
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	789b      	ldrb	r3, [r3, #2]
 800430e:	4618      	mov	r0, r3
 8004310:	f7ff fe2b 	bl	8003f6a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	7bfb      	ldrb	r3, [r7, #15]
 800431a:	4293      	cmp	r3, r2
 800431c:	bf34      	ite	cc
 800431e:	2301      	movcc	r3, #1
 8004320:	2300      	movcs	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d023      	beq.n	8004370 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x90>
		if (m_sChannels[i].eActive)
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4613      	mov	r3, r2
 800432e:	005b      	lsls	r3, r3, #1
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	3354      	adds	r3, #84	; 0x54
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d014      	beq.n	8004368 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x88>
			HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 800433e:	7bfa      	ldrb	r2, [r7, #15]
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	440b      	add	r3, r1
 800434c:	3358      	adds	r3, #88	; 0x58
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	7bfa      	ldrb	r2, [r7, #15]
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	4613      	mov	r3, r2
 8004356:	005b      	lsls	r3, r3, #1
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	335c      	adds	r3, #92	; 0x5c
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	4619      	mov	r1, r3
 8004364:	f7fd feea 	bl	800213c <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	3301      	adds	r3, #1
 800436c:	73fb      	strb	r3, [r7, #15]
 800436e:	e7cc      	b.n	800430a <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x2a>
	}

	//Set Driver States
	m_eState     = QA_Inactive;        //Set driver as currently inactive
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	705a      	strb	r2, [r3, #1]
	m_eInitState = QA_NotInitialized;  //Set driver state as not initialized
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	701a      	strb	r2, [r3, #0]
}
 800437c:	bf00      	nop
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <_ZN7QAD_RGB4initEv>:
  //------------------------------
  //QAD_RGB Initialization Methods

//QAD_RGB::init
//QAD_RGB Initialization Method
QA_Result QAD_RGB::init(void) {
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]

	//Set Color
	setColor();
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f819 	bl	80043c4 <_ZN7QAD_RGB8setColorEv>

	//Set Driver States
	m_eInitState = QA_Initialized;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]

	//Return
	return QA_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <_ZN7QAD_RGB13setBrightnessEh>:
}


//QAD_RGB::setBrightness
//QAD_RGB Control Method
void QAD_RGB::setBrightness(uint8_t uBrightness) {
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70fb      	strb	r3, [r7, #3]

	m_uBrightness = uBrightness;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	739a      	strb	r2, [r3, #14]
	setColor();
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f805 	bl	80043c4 <_ZN7QAD_RGB8setColorEv>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <_ZN7QAD_RGB8setColorEv>:
	//------------------------------
	//QAD_RGB Private Control Method

//QAD_RGB::setColor
//QAD_RGB Private Control Method
void QAD_RGB::setColor(void) {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

	uint16_t uPeriod = m_cPWM->getPeriod();
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff fe86 	bl	80040e2 <_ZN7QAD_PWM9getPeriodEv>
 80043d6:	4603      	mov	r3, r0
 80043d8:	83fb      	strh	r3, [r7, #30]

	float fInc = uPeriod / 255.0f;
 80043da:	8bfb      	ldrh	r3, [r7, #30]
 80043dc:	ee07 3a90 	vmov	s15, r3
 80043e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043e4:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004528 <_ZN7QAD_RGB8setColorEv+0x164>
 80043e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ec:	edc7 7a06 	vstr	s15, [r7, #24]

	float fBrightness = (m_uBrightness / 255.0f) * fInc;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7b9b      	ldrb	r3, [r3, #14]
 80043f4:	ee07 3a90 	vmov	s15, r3
 80043f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043fc:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8004528 <_ZN7QAD_RGB8setColorEv+0x164>
 8004400:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004404:	ed97 7a06 	vldr	s14, [r7, #24]
 8004408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440c:	edc7 7a05 	vstr	s15, [r7, #20]

	float fRed   = m_uRed * fBrightness;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7adb      	ldrb	r3, [r3, #11]
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004424:	edc7 7a04 	vstr	s15, [r7, #16]
	float fGreen = m_uGreen * fBrightness;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	7b1b      	ldrb	r3, [r3, #12]
 800442c:	ee07 3a90 	vmov	s15, r3
 8004430:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004434:	ed97 7a05 	vldr	s14, [r7, #20]
 8004438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443c:	edc7 7a03 	vstr	s15, [r7, #12]
	float fBlue  = m_uBlue * fBrightness;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	7b5b      	ldrb	r3, [r3, #13]
 8004444:	ee07 3a90 	vmov	s15, r3
 8004448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800444c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004454:	edc7 7a02 	vstr	s15, [r7, #8]

	m_cPWM->setPWMVal(m_eRedChannel, m_bInvert ? uPeriod - fRed : fRed);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6858      	ldr	r0, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7a19      	ldrb	r1, [r3, #8]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7bdb      	ldrb	r3, [r3, #15]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00e      	beq.n	8004486 <_ZN7QAD_RGB8setColorEv+0xc2>
 8004468:	8bfb      	ldrh	r3, [r7, #30]
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004472:	edd7 7a04 	vldr	s15, [r7, #16]
 8004476:	ee77 7a67 	vsub.f32	s15, s14, s15
 800447a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800447e:	ee17 3a90 	vmov	r3, s15
 8004482:	b29b      	uxth	r3, r3
 8004484:	e006      	b.n	8004494 <_ZN7QAD_RGB8setColorEv+0xd0>
 8004486:	edd7 7a04 	vldr	s15, [r7, #16]
 800448a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800448e:	ee17 3a90 	vmov	r3, s15
 8004492:	b29b      	uxth	r3, r3
 8004494:	461a      	mov	r2, r3
 8004496:	f7ff fddd 	bl	8004054 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>
	m_cPWM->setPWMVal(m_eGreenChannel, m_bInvert ? uPeriod - fGreen : fGreen);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6858      	ldr	r0, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	7a59      	ldrb	r1, [r3, #9]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	7bdb      	ldrb	r3, [r3, #15]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00e      	beq.n	80044c8 <_ZN7QAD_RGB8setColorEv+0x104>
 80044aa:	8bfb      	ldrh	r3, [r7, #30]
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80044b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c0:	ee17 3a90 	vmov	r3, s15
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	e006      	b.n	80044d6 <_ZN7QAD_RGB8setColorEv+0x112>
 80044c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80044cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d0:	ee17 3a90 	vmov	r3, s15
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	461a      	mov	r2, r3
 80044d8:	f7ff fdbc 	bl	8004054 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>
	m_cPWM->setPWMVal(m_eBlueChannel, m_bInvert ? uPeriod - fBlue : fBlue);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6858      	ldr	r0, [r3, #4]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	7a99      	ldrb	r1, [r3, #10]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	7bdb      	ldrb	r3, [r3, #15]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <_ZN7QAD_RGB8setColorEv+0x146>
 80044ec:	8bfb      	ldrh	r3, [r7, #30]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80044fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004502:	ee17 3a90 	vmov	r3, s15
 8004506:	b29b      	uxth	r3, r3
 8004508:	e006      	b.n	8004518 <_ZN7QAD_RGB8setColorEv+0x154>
 800450a:	edd7 7a02 	vldr	s15, [r7, #8]
 800450e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004512:	ee17 3a90 	vmov	r3, s15
 8004516:	b29b      	uxth	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	f7ff fd9b 	bl	8004054 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>

}
 800451e:	bf00      	nop
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	437f0000 	.word	0x437f0000

0800452c <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8004530:	4b10      	ldr	r3, [pc, #64]	; (8004574 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	f3bf 8f5b 	dmb	ish
 8004538:	b2db      	uxtb	r3, r3
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	bf0c      	ite	eq
 8004542:	2301      	moveq	r3, #1
 8004544:	2300      	movne	r3, #0
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d010      	beq.n	800456e <_ZN11QAD_UARTMgr3getEv+0x42>
 800454c:	4809      	ldr	r0, [pc, #36]	; (8004574 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800454e:	f001 f8fd 	bl	800574c <__cxa_guard_acquire>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf14      	ite	ne
 8004558:	2301      	movne	r3, #1
 800455a:	2300      	moveq	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <_ZN11QAD_UARTMgr3getEv+0x42>
 8004562:	4805      	ldr	r0, [pc, #20]	; (8004578 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8004564:	f000 fcf2 	bl	8004f4c <_ZN11QAD_UARTMgrC1Ev>
 8004568:	4802      	ldr	r0, [pc, #8]	; (8004574 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800456a:	f001 f8fb 	bl	8005764 <__cxa_guard_release>
		return instance;
 800456e:	4b02      	ldr	r3, [pc, #8]	; (8004578 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	20000330 	.word	0x20000330
 8004578:	2000030c 	.word	0x2000030c

0800457c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 800458c:	2302      	movs	r3, #2
 800458e:	e00a      	b.n	80045a6 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8004590:	f7ff ffcc 	bl	800452c <_ZN11QAD_UARTMgr3getEv>
 8004594:	4601      	mov	r1, r0
 8004596:	79fa      	ldrb	r2, [r7, #7]
 8004598:	4613      	mov	r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	3301      	adds	r3, #1
 80045a4:	781b      	ldrb	r3, [r3, #0]
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4603      	mov	r3, r0
 80045b6:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80045b8:	79fb      	ldrb	r3, [r7, #7]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	e00a      	b.n	80045d8 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 80045c2:	f7ff ffb3 	bl	800452c <_ZN11QAD_UARTMgr3getEv>
 80045c6:	4601      	mov	r1, r0
 80045c8:	79fa      	ldrb	r2, [r7, #7]
 80045ca:	4613      	mov	r3, r2
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3304      	adds	r3, #4
 80045d6:	681b      	ldr	r3, [r3, #0]
	}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	4603      	mov	r3, r0
 80045e8:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d902      	bls.n	80045f6 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 80045f0:	f06f 0309 	mvn.w	r3, #9
 80045f4:	e00b      	b.n	800460e <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 80045f6:	f7ff ff99 	bl	800452c <_ZN11QAD_UARTMgr3getEv>
 80045fa:	4601      	mov	r1, r0
 80045fc:	79fa      	ldrb	r2, [r7, #7]
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	3308      	adds	r3, #8
 800460a:	f993 3000 	ldrsb.w	r3, [r3]
	}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	4603      	mov	r3, r0
 800461e:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 8004620:	f7ff ff84 	bl	800452c <_ZN11QAD_UARTMgr3getEv>
 8004624:	4602      	mov	r2, r0
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f000 fcce 	bl	8004fcc <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 8004630:	4603      	mov	r3, r0
	}
 8004632:	4618      	mov	r0, r3
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8004644:	f7ff ff72 	bl	800452c <_ZN11QAD_UARTMgr3getEv>
 8004648:	4602      	mov	r2, r0
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fce5 	bl	800501e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8004666:	f7ff ff61 	bl	800452c <_ZN11QAD_UARTMgr3getEv>
 800466a:	4602      	mov	r2, r0
 800466c:	79fb      	ldrb	r3, [r7, #7]
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f000 fcef 	bl	8005054 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8004676:	bf00      	nop
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 800467e:	b580      	push	{r7, lr}
 8004680:	b082      	sub	sp, #8
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8004688:	f7ff ff50 	bl	800452c <_ZN11QAD_UARTMgr3getEv>
 800468c:	4602      	mov	r2, r0
 800468e:	79fb      	ldrb	r3, [r7, #7]
 8004690:	4619      	mov	r1, r3
 8004692:	4610      	mov	r0, r2
 8004694:	f000 fd4c 	bl	8005130 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	785b      	ldrb	r3, [r3, #1]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff ff65 	bl	800457c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 80046c2:	2302      	movs	r3, #2
 80046c4:	e012      	b.n	80046ec <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	785b      	ldrb	r3, [r3, #1]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7ff ffa3 	bl	8004616 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f8a7 	bl	8004824 <_ZN8QAD_UART10periphInitEv>
 80046d6:	4603      	mov	r3, r0
 80046d8:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff ffa8 	bl	800463a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d009      	beq.n	8004718 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 8004704:	2101      	movs	r1, #1
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f924 	bl	8004954 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	785b      	ldrb	r3, [r3, #1]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff92 	bl	800463a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8004716:	e000      	b.n	800471a <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8004718:	bf00      	nop
}
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	331c      	adds	r3, #28
}
 800472c:	4618      	mov	r0, r3
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	68da      	ldr	r2, [r3, #12]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800474e:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69db      	ldr	r3, [r3, #28]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800477a:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f042 0220 	orr.w	r2, r2, #32
 80047a6:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f022 0220 	bic.w	r2, r2, #32
 80047d2:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	605a      	str	r2, [r3, #4]
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	b2db      	uxtb	r3, r3
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800482c:	f107 030c 	add.w	r3, r7, #12
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	609a      	str	r2, [r3, #8]
 8004838:	60da      	str	r2, [r3, #12]
 800483a:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8a1b      	ldrh	r3, [r3, #16]
 8004840:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8004842:	2302      	movs	r3, #2
 8004844:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 800484a:	2303      	movs	r3, #3
 800484c:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	7c9b      	ldrb	r3, [r3, #18]
 8004852:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f107 020c 	add.w	r2, r7, #12
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f7fd fae8 	bl	8001e34 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	8b1b      	ldrh	r3, [r3, #24]
 8004868:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 800486a:	2302      	movs	r3, #2
 800486c:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 800486e:	2301      	movs	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8004872:	2303      	movs	r3, #3
 8004874:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	7e9b      	ldrb	r3, [r3, #26]
 800487a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	695b      	ldr	r3, [r3, #20]
 8004880:	f107 020c 	add.w	r2, r7, #12
 8004884:	4611      	mov	r1, r2
 8004886:	4618      	mov	r0, r3
 8004888:	f7fd fad4 	bl	8001e34 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	4618      	mov	r0, r3
 8004892:	f7ff fee3 	bl	800465c <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fe87 	bl	80045ae <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	220c      	movs	r2, #12
 80048c4:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	331c      	adds	r3, #28
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fdfd 	bl	80034d6 <HAL_UART_Init>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 80048ec:	2100      	movs	r1, #0
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f830 	bl	8004954 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e029      	b.n	800494c <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69db      	ldr	r3, [r3, #28]
 8004902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	4618      	mov	r0, r3
 800490e:	f7ff fe67 	bl	80045e0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004912:	4603      	mov	r3, r0
 8004914:	4618      	mov	r0, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7a1b      	ldrb	r3, [r3, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	4619      	mov	r1, r3
 800491e:	f7fd fa44 	bl	8001daa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	785b      	ldrb	r3, [r3, #1]
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fe5a 	bl	80045e0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800492c:	4603      	mov	r3, r0
 800492e:	4618      	mov	r0, r3
 8004930:	f7fd fa57 	bl	8001de2 <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	460b      	mov	r3, r1
 800495e:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01b      	beq.n	800499e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff fefc 	bl	8004764 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff25 	bl	80047bc <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	785b      	ldrb	r3, [r3, #1]
 8004976:	4618      	mov	r0, r3
 8004978:	f7ff fe32 	bl	80045e0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800497c:	4603      	mov	r3, r0
 800497e:	4618      	mov	r0, r3
 8004980:	f7fd fa3d 	bl	8001dfe <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	68da      	ldr	r2, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004992:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	331c      	adds	r3, #28
 8004998:	4618      	mov	r0, r3
 800499a:	f7fe fde9 	bl	8003570 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	785b      	ldrb	r3, [r3, #1]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fe6b 	bl	800467e <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695a      	ldr	r2, [r3, #20]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8b1b      	ldrh	r3, [r3, #24]
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7fd fbc2 	bl	800213c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8a1b      	ldrh	r3, [r3, #16]
 80049c0:	4619      	mov	r1, r3
 80049c2:	4610      	mov	r0, r2
 80049c4:	f7fd fbba 	bl	800213c <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	701a      	strb	r2, [r3, #0]
}
 80049de:	bf00      	nop
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <_ZN12QAD_TimerMgrC1Ev>:
//QAD_TimerMgr::QAD_TimerMgr
//QAD_TimerMgr Constructor
//
//Fills out details for the system's Tiemr peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
QAD_TimerMgr::QAD_TimerMgr() {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	2b07      	cmp	r3, #7
 80049f8:	d830      	bhi.n	8004a5c <_ZN12QAD_TimerMgrC1Ev+0x74>
  	m_sTimers[i].eState   = QAD_Timer_Unused;
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	6879      	ldr	r1, [r7, #4]
 80049fe:	4613      	mov	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	3301      	adds	r3, #1
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bEncoder = (i < QAD_Timer9);
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b04      	cmp	r3, #4
 8004a14:	bf94      	ite	ls
 8004a16:	2301      	movls	r3, #1
 8004a18:	2300      	movhi	r3, #0
 8004a1a:	b2d8      	uxtb	r0, r3
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	440b      	add	r3, r1
 8004a28:	330a      	adds	r3, #10
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bADC     = ((i == QAD_Timer2) || (i == QAD_Timer3));
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d002      	beq.n	8004a3a <_ZN12QAD_TimerMgrC1Ev+0x52>
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d101      	bne.n	8004a3e <_ZN12QAD_TimerMgrC1Ev+0x56>
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	e000      	b.n	8004a40 <_ZN12QAD_TimerMgrC1Ev+0x58>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	440b      	add	r3, r1
 8004a4e:	330b      	adds	r3, #11
 8004a50:	4602      	mov	r2, r0
 8004a52:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	3301      	adds	r3, #1
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e7cb      	b.n	80049f4 <_ZN12QAD_TimerMgrC1Ev+0xc>
  }

  //Set Timer Periph ID
  m_sTimers[QAD_Timer1].eTimer  = QAD_Timer1;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
  m_sTimers[QAD_Timer2].eTimer  = QAD_Timer2;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	751a      	strb	r2, [r3, #20]
  m_sTimers[QAD_Timer3].eTimer  = QAD_Timer3;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  m_sTimers[QAD_Timer4].eTimer  = QAD_Timer4;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2203      	movs	r2, #3
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  m_sTimers[QAD_Timer5].eTimer  = QAD_Timer5;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  m_sTimers[QAD_Timer9].eTimer  = QAD_Timer9;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2205      	movs	r2, #5
 8004a84:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  m_sTimers[QAD_Timer10].eTimer = QAD_Timer10;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2206      	movs	r2, #6
 8004a8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  m_sTimers[QAD_Timer11].eTimer = QAD_Timer11;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2207      	movs	r2, #7
 8004a94:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	//Set clock speeds
	m_sTimers[QAD_Timer1].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 8004a98:	f7fe f8ae 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	605a      	str	r2, [r3, #4]
	m_sTimers[QAD_Timer2].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004aa2:	f7fe f895 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	005a      	lsls	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	619a      	str	r2, [r3, #24]
	m_sTimers[QAD_Timer3].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004aae:	f7fe f88f 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	005a      	lsls	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sTimers[QAD_Timer4].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004aba:	f7fe f889 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	005a      	lsls	r2, r3, #1
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	641a      	str	r2, [r3, #64]	; 0x40
	m_sTimers[QAD_Timer5].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004ac6:	f7fe f883 	bl	8002bd0 <HAL_RCC_GetPCLK1Freq>
 8004aca:	4603      	mov	r3, r0
 8004acc:	005a      	lsls	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	655a      	str	r2, [r3, #84]	; 0x54
	m_sTimers[QAD_Timer9].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 8004ad2:	f7fe f891 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	669a      	str	r2, [r3, #104]	; 0x68
	m_sTimers[QAD_Timer10].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7fe f88c 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sTimers[QAD_Timer11].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 8004ae6:	f7fe f887 	bl	8002bf8 <HAL_RCC_GetPCLK2Freq>
 8004aea:	4602      	mov	r2, r0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//Set types
	m_sTimers[QAD_Timer1].eType  = QAD_Timer_16bit;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	721a      	strb	r2, [r3, #8]
	m_sTimers[QAD_Timer2].eType  = QAD_Timer_32bit;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	771a      	strb	r2, [r3, #28]
	m_sTimers[QAD_Timer3].eType  = QAD_Timer_16bit;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sTimers[QAD_Timer4].eType  = QAD_Timer_16bit;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sTimers[QAD_Timer5].eType  = QAD_Timer_32bit;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	m_sTimers[QAD_Timer9].eType  = QAD_Timer_16bit;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sTimers[QAD_Timer10].eType = QAD_Timer_16bit;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	m_sTimers[QAD_Timer11].eType = QAD_Timer_16bit;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

	//Set channel counts
	m_sTimers[QAD_Timer1].uChannels  = 4;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2204      	movs	r2, #4
 8004b32:	725a      	strb	r2, [r3, #9]
	m_sTimers[QAD_Timer2].uChannels  = 4;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2204      	movs	r2, #4
 8004b38:	775a      	strb	r2, [r3, #29]
	m_sTimers[QAD_Timer3].uChannels  = 4;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2204      	movs	r2, #4
 8004b3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	m_sTimers[QAD_Timer4].uChannels  = 4;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2204      	movs	r2, #4
 8004b46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	m_sTimers[QAD_Timer5].uChannels  = 4;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2204      	movs	r2, #4
 8004b4e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	m_sTimers[QAD_Timer9].uChannels  = 2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2202      	movs	r2, #2
 8004b56:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	m_sTimers[QAD_Timer10].uChannels = 1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	m_sTimers[QAD_Timer11].uChannels = 1;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	//Set Instances
	m_sTimers[QAD_Timer1].pInstance  = TIM1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <_ZN12QAD_TimerMgrC1Ev+0x200>)
 8004b6e:	60da      	str	r2, [r3, #12]
	m_sTimers[QAD_Timer2].pInstance  = TIM2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b76:	621a      	str	r2, [r3, #32]
	m_sTimers[QAD_Timer3].pInstance  = TIM3;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <_ZN12QAD_TimerMgrC1Ev+0x204>)
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34
	m_sTimers[QAD_Timer4].pInstance  = TIM4;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <_ZN12QAD_TimerMgrC1Ev+0x208>)
 8004b82:	649a      	str	r2, [r3, #72]	; 0x48
	m_sTimers[QAD_Timer5].pInstance  = TIM5;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a1b      	ldr	r2, [pc, #108]	; (8004bf4 <_ZN12QAD_TimerMgrC1Ev+0x20c>)
 8004b88:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sTimers[QAD_Timer9].pInstance  = TIM9;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a1a      	ldr	r2, [pc, #104]	; (8004bf8 <_ZN12QAD_TimerMgrC1Ev+0x210>)
 8004b8e:	671a      	str	r2, [r3, #112]	; 0x70
	m_sTimers[QAD_Timer10].pInstance = TIM10;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <_ZN12QAD_TimerMgrC1Ev+0x214>)
 8004b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	m_sTimers[QAD_Timer11].pInstance = TIM11;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a19      	ldr	r2, [pc, #100]	; (8004c00 <_ZN12QAD_TimerMgrC1Ev+0x218>)
 8004b9c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	//Set Update IRQs
	m_sTimers[QAD_Timer1].eIRQ_Update  = TIM1_UP_TIM10_IRQn;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2219      	movs	r2, #25
 8004ba4:	741a      	strb	r2, [r3, #16]
	m_sTimers[QAD_Timer2].eIRQ_Update  = TIM2_IRQn;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	221c      	movs	r2, #28
 8004baa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sTimers[QAD_Timer3].eIRQ_Update  = TIM3_IRQn;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	221d      	movs	r2, #29
 8004bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sTimers[QAD_Timer4].eIRQ_Update  = TIM4_IRQn;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	221e      	movs	r2, #30
 8004bba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	m_sTimers[QAD_Timer5].eIRQ_Update  = TIM5_IRQn;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2232      	movs	r2, #50	; 0x32
 8004bc2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_sTimers[QAD_Timer9].eIRQ_Update  = TIM1_BRK_TIM9_IRQn;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2218      	movs	r2, #24
 8004bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sTimers[QAD_Timer10].eIRQ_Update = TIM1_UP_TIM10_IRQn;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2219      	movs	r2, #25
 8004bd2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	m_sTimers[QAD_Timer11].eIRQ_Update = TIM1_TRG_COM_TIM11_IRQn;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	221a      	movs	r2, #26
 8004bda:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

}
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40010000 	.word	0x40010000
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40000c00 	.word	0x40000c00
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800

08004c04 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
//         QAD_Timer_InUse_PWM     - Specifies timer as being used to generate PWM signals
//         QAD_Timer_InUse_ADC     - Specifies timer as being used to trigger ADC conversions
//Returns QA_OK if registration is successful.
//        QA_Fail if eState is set to QAD_Timer_Unused.
//        QA_Error_PeriphBusy if selected Timer is already in use
QA_Result QAD_TimerMgr::imp_registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	70fb      	strb	r3, [r7, #3]
 8004c10:	4613      	mov	r3, r2
 8004c12:	70bb      	strb	r3, [r7, #2]
  if (m_sTimers[eTimer].eState)
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3301      	adds	r3, #1
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x2a>
  	return QA_Error_PeriphBusy;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e00f      	b.n	8004c4e <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  if (!eState)
 8004c2e:	78bb      	ldrb	r3, [r7, #2]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x34>
  	return QA_Fail;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e00a      	b.n	8004c4e <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  m_sTimers[eTimer].eState = eState;
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	3301      	adds	r3, #1
 8004c48:	78ba      	ldrb	r2, [r7, #2]
 8004c4a:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>:
//QAD_TimerMgr Management Method
//
//To be called from static method registerTimer()
//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
//eTimer - The Timer peripheral to be deregistered. A member of QAD_Timer_Periph
void QAD_TimerMgr::imp_deregisterTimer(QAD_Timer_Periph eTimer) {
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	460b      	mov	r3, r1
 8004c64:	70fb      	strb	r3, [r7, #3]
  m_sTimers[eTimer].eState = QAD_Timer_Unused;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4413      	add	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	3301      	adds	r3, #1
 8004c76:	2200      	movs	r2, #0
 8004c78:	701a      	strb	r2, [r3, #0]
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by enableClock()
//Used to enable the clock for a specific Timer peripheral
//eTimer - the Timer peripheral to enable the clock for
void QAD_TimerMgr::imp_enableClock(QAD_Timer_Periph eTimer) {
 8004c88:	b480      	push	{r7}
 8004c8a:	b08b      	sub	sp, #44	; 0x2c
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	460b      	mov	r3, r1
 8004c92:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 8004c94:	78fb      	ldrb	r3, [r7, #3]
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	f200 80ef 	bhi.w	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
 8004c9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ca4 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1c>)
 8004c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca2:	bf00      	nop
 8004ca4:	08004cc9 	.word	0x08004cc9
 8004ca8:	08004cff 	.word	0x08004cff
 8004cac:	08004d35 	.word	0x08004d35
 8004cb0:	08004d6b 	.word	0x08004d6b
 8004cb4:	08004da1 	.word	0x08004da1
 8004cb8:	08004dd7 	.word	0x08004dd7
 8004cbc:	08004e0d 	.word	0x08004e0d
 8004cc0:	08004e43 	.word	0x08004e43
 8004cc4:	08004e79 	.word	0x08004e79
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_ENABLE();
 8004cc8:	2300      	movs	r3, #0
 8004cca:	627b      	str	r3, [r7, #36]	; 0x24
 8004ccc:	4b6e      	ldr	r3, [pc, #440]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd0:	4a6d      	ldr	r2, [pc, #436]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004cd2:	f043 0301 	orr.w	r3, r3, #1
 8004cd6:	6453      	str	r3, [r2, #68]	; 0x44
 8004cd8:	4b6b      	ldr	r3, [pc, #428]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cdc:	f003 0301 	and.w	r3, r3, #1
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_TIM1_FORCE_RESET();
 8004ce4:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	4a67      	ldr	r2, [pc, #412]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004cea:	f043 0301 	orr.w	r3, r3, #1
 8004cee:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_TIM1_RELEASE_RESET();
 8004cf0:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	4a64      	ldr	r2, [pc, #400]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004cfc:	e0bd      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	623b      	str	r3, [r7, #32]
 8004d02:	4b61      	ldr	r3, [pc, #388]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4a60      	ldr	r2, [pc, #384]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0e:	4b5e      	ldr	r3, [pc, #376]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	623b      	str	r3, [r7, #32]
 8004d18:	6a3b      	ldr	r3, [r7, #32]
			__HAL_RCC_TIM2_FORCE_RESET();
 8004d1a:	4b5b      	ldr	r3, [pc, #364]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
 8004d1e:	4a5a      	ldr	r2, [pc, #360]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM2_RELEASE_RESET();
 8004d26:	4b58      	ldr	r3, [pc, #352]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d28:	6a1b      	ldr	r3, [r3, #32]
 8004d2a:	4a57      	ldr	r2, [pc, #348]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d2c:	f023 0301 	bic.w	r3, r3, #1
 8004d30:	6213      	str	r3, [r2, #32]
      break;
 8004d32:	e0a2      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_ENABLE();
 8004d34:	2300      	movs	r3, #0
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	4b53      	ldr	r3, [pc, #332]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	4a52      	ldr	r2, [pc, #328]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d3e:	f043 0302 	orr.w	r3, r3, #2
 8004d42:	6413      	str	r3, [r2, #64]	; 0x40
 8004d44:	4b50      	ldr	r3, [pc, #320]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
			__HAL_RCC_TIM3_FORCE_RESET();
 8004d50:	4b4d      	ldr	r3, [pc, #308]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	4a4c      	ldr	r2, [pc, #304]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d56:	f043 0302 	orr.w	r3, r3, #2
 8004d5a:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM3_RELEASE_RESET();
 8004d5c:	4b4a      	ldr	r3, [pc, #296]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d5e:	6a1b      	ldr	r3, [r3, #32]
 8004d60:	4a49      	ldr	r2, [pc, #292]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d62:	f023 0302 	bic.w	r3, r3, #2
 8004d66:	6213      	str	r3, [r2, #32]
      break;
 8004d68:	e087      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_ENABLE();
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	4b46      	ldr	r3, [pc, #280]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	4a45      	ldr	r2, [pc, #276]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d74:	f043 0304 	orr.w	r3, r3, #4
 8004d78:	6413      	str	r3, [r2, #64]	; 0x40
 8004d7a:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	69bb      	ldr	r3, [r7, #24]
			__HAL_RCC_TIM4_FORCE_RESET();
 8004d86:	4b40      	ldr	r3, [pc, #256]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4a3f      	ldr	r2, [pc, #252]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d8c:	f043 0304 	orr.w	r3, r3, #4
 8004d90:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM4_RELEASE_RESET();
 8004d92:	4b3d      	ldr	r3, [pc, #244]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	4a3c      	ldr	r2, [pc, #240]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d98:	f023 0304 	bic.w	r3, r3, #4
 8004d9c:	6213      	str	r3, [r2, #32]
      break;
 8004d9e:	e06c      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_ENABLE();
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004daa:	f043 0308 	orr.w	r3, r3, #8
 8004dae:	6413      	str	r3, [r2, #64]	; 0x40
 8004db0:	4b35      	ldr	r3, [pc, #212]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	697b      	ldr	r3, [r7, #20]
			__HAL_RCC_TIM5_FORCE_RESET();
 8004dbc:	4b32      	ldr	r3, [pc, #200]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dc2:	f043 0308 	orr.w	r3, r3, #8
 8004dc6:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM5_RELEASE_RESET();
 8004dc8:	4b2f      	ldr	r3, [pc, #188]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	4a2e      	ldr	r2, [pc, #184]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dce:	f023 0308 	bic.w	r3, r3, #8
 8004dd2:	6213      	str	r3, [r2, #32]
      break;
 8004dd4:	e051      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	613b      	str	r3, [r7, #16]
 8004dda:	4b2b      	ldr	r3, [pc, #172]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	4a2a      	ldr	r2, [pc, #168]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6453      	str	r3, [r2, #68]	; 0x44
 8004de6:	4b28      	ldr	r3, [pc, #160]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_TIM9_FORCE_RESET();
 8004df2:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	4a24      	ldr	r2, [pc, #144]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM9_RELEASE_RESET();
 8004dfe:	4b22      	ldr	r3, [pc, #136]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	4a21      	ldr	r2, [pc, #132]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e08:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004e0a:	e036      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_ENABLE();
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]
 8004e10:	4b1d      	ldr	r3, [pc, #116]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e14:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1a:	6453      	str	r3, [r2, #68]	; 0x44
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
			__HAL_RCC_TIM10_FORCE_RESET();
 8004e28:	4b17      	ldr	r3, [pc, #92]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	4a16      	ldr	r2, [pc, #88]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e32:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM10_RELEASE_RESET();
 8004e34:	4b14      	ldr	r3, [pc, #80]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e3e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004e40:	e01b      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	4a0f      	ldr	r2, [pc, #60]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e50:	6453      	str	r3, [r2, #68]	; 0x44
 8004e52:	4b0d      	ldr	r3, [pc, #52]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
			__HAL_RCC_TIM11_FORCE_RESET();
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	4a09      	ldr	r2, [pc, #36]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e68:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM11_RELEASE_RESET();
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	4a06      	ldr	r2, [pc, #24]	; (8004e88 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e74:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004e76:	e000      	b.n	8004e7a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_TimerNone):
    	break;
 8004e78:	bf00      	nop
  }
}
 8004e7a:	bf00      	nop
 8004e7c:	372c      	adds	r7, #44	; 0x2c
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800

08004e8c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by disableClock()
//Used to disable the clock for a specific Timer peripheral
//eTimer - The timer peripheral to disable the clock for
void QAD_TimerMgr::imp_disableClock(QAD_Timer_Periph eTimer) {
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 8004e98:	78fb      	ldrb	r3, [r7, #3]
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d84d      	bhi.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0x18>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004ed7 	.word	0x08004ed7
 8004eac:	08004ee5 	.word	0x08004ee5
 8004eb0:	08004ef3 	.word	0x08004ef3
 8004eb4:	08004f01 	.word	0x08004f01
 8004eb8:	08004f0f 	.word	0x08004f0f
 8004ebc:	08004f1d 	.word	0x08004f1d
 8004ec0:	08004f2b 	.word	0x08004f2b
 8004ec4:	08004f39 	.word	0x08004f39
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_DISABLE();
 8004ec8:	4b1f      	ldr	r3, [pc, #124]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	4a1e      	ldr	r2, [pc, #120]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004ed4:	e031      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_DISABLE();
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004ee2:	e02a      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_DISABLE();
 8004ee4:	4b18      	ldr	r3, [pc, #96]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004eea:	f023 0302 	bic.w	r3, r3, #2
 8004eee:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004ef0:	e023      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_DISABLE();
 8004ef2:	4b15      	ldr	r3, [pc, #84]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004ef8:	f023 0304 	bic.w	r3, r3, #4
 8004efc:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004efe:	e01c      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_DISABLE();
 8004f00:	4b11      	ldr	r3, [pc, #68]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	4a10      	ldr	r2, [pc, #64]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f06:	f023 0308 	bic.w	r3, r3, #8
 8004f0a:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004f0c:	e015      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_DISABLE();
 8004f0e:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	4a0d      	ldr	r2, [pc, #52]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f18:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004f1a:	e00e      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_DISABLE();
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f20:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f22:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f26:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004f28:	e007      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_DISABLE();
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	4a06      	ldr	r2, [pc, #24]	; (8004f48 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f34:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004f36:	e000      	b.n	8004f3a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_TimerNone):
    	break;
 8004f38:	bf00      	nop
  }
}
 8004f3a:	bf00      	nop
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40023800 	.word	0x40023800

08004f4c <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004f54:	2300      	movs	r3, #0
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d80d      	bhi.n	8004f7a <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8004f5e:	7bfa      	ldrb	r2, [r7, #15]
 8004f60:	6879      	ldr	r1, [r7, #4]
 8004f62:	4613      	mov	r3, r2
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	3301      	adds	r3, #1
 8004f76:	73fb      	strb	r3, [r7, #15]
 8004f78:	e7ee      	b.n	8004f58 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	; (8004fc0 <_ZN11QAD_UARTMgrC1Ev+0x74>)
 8004f90:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <_ZN11QAD_UARTMgrC1Ev+0x78>)
 8004f96:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a0b      	ldr	r2, [pc, #44]	; (8004fc8 <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 8004f9c:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2225      	movs	r2, #37	; 0x25
 8004fa2:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2226      	movs	r2, #38	; 0x26
 8004fa8:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2247      	movs	r2, #71	; 0x47
 8004fae:	f883 2020 	strb.w	r2, [r3, #32]

}
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3714      	adds	r7, #20
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40011000 	.word	0x40011000
 8004fc4:	40004400 	.word	0x40004400
 8004fc8:	40011400 	.word	0x40011400

08004fcc <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8004fd8:	78fb      	ldrb	r3, [r7, #3]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e017      	b.n	8005012 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8004fe2:	78fa      	ldrb	r2, [r7, #3]
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d001      	beq.n	8004ffc <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	e00a      	b.n	8005012 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3301      	adds	r3, #1
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	460b      	mov	r3, r1
 8005028:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800502a:	78fb      	ldrb	r3, [r7, #3]
 800502c:	2b02      	cmp	r3, #2
 800502e:	d80a      	bhi.n	8005046 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3301      	adds	r3, #1
 8005040:	2200      	movs	r2, #0
 8005042:	701a      	strb	r2, [r3, #0]
 8005044:	e000      	b.n	8005048 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8005046:	bf00      	nop
}
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
	...

08005054 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	2b03      	cmp	r3, #3
 8005064:	d85c      	bhi.n	8005120 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 8005066:	a201      	add	r2, pc, #4	; (adr r2, 800506c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 8005068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800506c:	0800507d 	.word	0x0800507d
 8005070:	080050b3 	.word	0x080050b3
 8005074:	080050e9 	.word	0x080050e9
 8005078:	0800511f 	.word	0x0800511f
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
 8005080:	4b2a      	ldr	r3, [pc, #168]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005084:	4a29      	ldr	r2, [pc, #164]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005086:	f043 0310 	orr.w	r3, r3, #16
 800508a:	6453      	str	r3, [r2, #68]	; 0x44
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	617b      	str	r3, [r7, #20]
 8005096:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 8005098:	4b24      	ldr	r3, [pc, #144]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	4a23      	ldr	r2, [pc, #140]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800509e:	f043 0310 	orr.w	r3, r3, #16
 80050a2:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 80050a4:	4b21      	ldr	r3, [pc, #132]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	4a20      	ldr	r2, [pc, #128]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050aa:	f023 0310 	bic.w	r3, r3, #16
 80050ae:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 80050b0:	e036      	b.n	8005120 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	4b1d      	ldr	r3, [pc, #116]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	4a1c      	ldr	r2, [pc, #112]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050c0:	6413      	str	r3, [r2, #64]	; 0x40
 80050c2:	4b1a      	ldr	r3, [pc, #104]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	613b      	str	r3, [r7, #16]
 80050cc:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050d8:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 80050da:	4b14      	ldr	r3, [pc, #80]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050e4:	6213      	str	r3, [r2, #32]
      break;
 80050e6:	e01b      	b.n	8005120 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	4a0e      	ldr	r2, [pc, #56]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050f2:	f043 0320 	orr.w	r3, r3, #32
 80050f6:	6453      	str	r3, [r2, #68]	; 0x44
 80050f8:	4b0c      	ldr	r3, [pc, #48]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 8005104:	4b09      	ldr	r3, [pc, #36]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	4a08      	ldr	r2, [pc, #32]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800510a:	f043 0320 	orr.w	r3, r3, #32
 800510e:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8005110:	4b06      	ldr	r3, [pc, #24]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	4a05      	ldr	r2, [pc, #20]	; (800512c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005116:	f023 0320 	bic.w	r3, r3, #32
 800511a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800511c:	e000      	b.n	8005120 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 800511e:	bf00      	nop
  }
}
 8005120:	bf00      	nop
 8005122:	371c      	adds	r7, #28
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr
 800512c:	40023800 	.word	0x40023800

08005130 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	460b      	mov	r3, r1
 800513a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b03      	cmp	r3, #3
 8005140:	d820      	bhi.n	8005184 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	08005159 	.word	0x08005159
 800514c:	08005167 	.word	0x08005167
 8005150:	08005175 	.word	0x08005175
 8005154:	08005183 	.word	0x08005183
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8005158:	4b0d      	ldr	r3, [pc, #52]	; (8005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800515e:	f023 0310 	bic.w	r3, r3, #16
 8005162:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8005164:	e00e      	b.n	8005184 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8005166:	4b0a      	ldr	r3, [pc, #40]	; (8005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800516c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8005172:	e007      	b.n	8005184 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8005174:	4b06      	ldr	r3, [pc, #24]	; (8005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005178:	4a05      	ldr	r2, [pc, #20]	; (8005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800517a:	f023 0320 	bic.w	r3, r3, #32
 800517e:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8005180:	e000      	b.n	8005184 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 8005182:	bf00      	nop
  }
}
 8005184:	bf00      	nop
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40023800 	.word	0x40023800

08005194 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7b1b      	ldrb	r3, [r3, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	e010      	b.n	80051cc <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6839      	ldr	r1, [r7, #0]
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	4798      	blx	r3
 80051b6:	4603      	mov	r3, r0
 80051b8:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	e003      	b.n	80051cc <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3710      	adds	r7, #16
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3308      	adds	r3, #8
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	6839      	ldr	r1, [r7, #0]
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
}
 80051ec:	bf00      	nop
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 80051fe:	6838      	ldr	r0, [r7, #0]
 8005200:	f7fa ffea 	bl	80001d8 <strlen>
 8005204:	4603      	mov	r3, r0
 8005206:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8005208:	2300      	movs	r3, #0
 800520a:	81fb      	strh	r3, [r7, #14]
 800520c:	89fa      	ldrh	r2, [r7, #14]
 800520e:	89bb      	ldrh	r3, [r7, #12]
 8005210:	429a      	cmp	r2, r3
 8005212:	d20f      	bcs.n	8005234 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f000 f837 	bl	800528c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800521e:	89fb      	ldrh	r3, [r7, #14]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	4413      	add	r3, r2
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	f000 f9e1 	bl	80055ee <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800522c:	89fb      	ldrh	r3, [r7, #14]
 800522e:	3301      	adds	r3, #1
 8005230:	81fb      	strh	r3, [r7, #14]
 8005232:	e7eb      	b.n	800520c <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f827 	bl	800528c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800523e:	4603      	mov	r3, r0
 8005240:	210d      	movs	r1, #13
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f9d3 	bl	80055ee <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	330c      	adds	r3, #12
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	4798      	blx	r3
}
 8005254:	bf00      	nop
 8005256:	3710      	adds	r7, #16
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3304      	adds	r3, #4
 8005268:	4618      	mov	r0, r3
 800526a:	f000 f80f 	bl	800528c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800526e:	4603      	mov	r3, r0
 8005270:	210d      	movs	r1, #13
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f9bb 	bl	80055ee <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	330c      	adds	r3, #12
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	4798      	blx	r3
}
 8005284:	bf00      	nop
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
	return get();
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f805 	bl	80052a4 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 800529a:	4603      	mov	r3, r0
      }
 800529c:	4618      	mov	r0, r3
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 f805 	bl	80052be <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80052b4:	4603      	mov	r3, r0
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f806 	bl	80052da <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80052ce:	4603      	mov	r3, r0
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80052da:	b580      	push	{r7, lr}
 80052dc:	b082      	sub	sp, #8
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 f805 	bl	80052f4 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 f805 	bl	800530c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8005302:	4603      	mov	r3, r0
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4618      	mov	r0, r3
 8005318:	f000 f805 	bl	8005326 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 800531c:	4603      	mov	r3, r0
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3314      	adds	r3, #20
 800534a:	4618      	mov	r0, r3
 800534c:	f000 f8e4 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005350:	4603      	mov	r3, r0
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff f9a4 	bl	80046a0 <_ZN8QAD_UART4initEv>
 8005358:	4603      	mov	r3, r0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3314      	adds	r3, #20
 800536e:	4618      	mov	r0, r3
 8005370:	f000 f8d2 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005374:	4603      	mov	r3, r0
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f9bc 	bl	80046f4 <_ZN8QAD_UART6deinitEv>
}
 800537c:	bf00      	nop
 800537e:	3708      	adds	r7, #8
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 8005384:	b590      	push	{r4, r7, lr}
 8005386:	b095      	sub	sp, #84	; 0x54
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3314      	adds	r3, #20
 8005392:	4618      	mov	r0, r3
 8005394:	f000 f8c0 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005398:	4603      	mov	r3, r0
 800539a:	4618      	mov	r0, r3
 800539c:	f7ff f9c0 	bl	8004720 <_ZN8QAD_UART9getHandleEv>
 80053a0:	4602      	mov	r2, r0
 80053a2:	f107 0308 	add.w	r3, r7, #8
 80053a6:	4611      	mov	r1, r2
 80053a8:	2244      	movs	r2, #68	; 0x44
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fa48 	bl	8005840 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0320 	and.w	r3, r3, #32
 80053b8:	2b20      	cmp	r3, #32
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01f      	beq.n	8005406 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	3314      	adds	r3, #20
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f8a4 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80053d0:	4603      	mov	r3, r0
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff fa18 	bl	8004808 <_ZN8QAD_UART6dataRXEv>
 80053d8:	4603      	mov	r3, r0
 80053da:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	7b9b      	ldrb	r3, [r3, #14]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00b      	beq.n	80053fe <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	3308      	adds	r3, #8
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff ff4e 	bl	800528c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80053f0:	4602      	mov	r2, r0
 80053f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053f6:	4619      	mov	r1, r3
 80053f8:	4610      	mov	r0, r2
 80053fa:	f000 f8f8 	bl	80055ee <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	f06f 0220 	mvn.w	r2, #32
 8005404:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b80      	cmp	r3, #128	; 0x80
 8005410:	bf0c      	ite	eq
 8005412:	2301      	moveq	r3, #1
 8005414:	2300      	movne	r3, #0
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d035      	beq.n	8005488 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3304      	adds	r3, #4
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff ff33 	bl	800528c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005426:	4603      	mov	r3, r0
 8005428:	4618      	mov	r0, r3
 800542a:	f000 f8cd 	bl	80055c8 <_ZN14QAT_FIFOBuffer5emptyEv>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d014      	beq.n	8005468 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3314      	adds	r3, #20
 8005442:	4618      	mov	r0, r3
 8005444:	f000 f868 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005448:	4604      	mov	r4, r0
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3304      	adds	r3, #4
 800544e:	4618      	mov	r0, r3
 8005450:	f7ff ff1c 	bl	800528c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005454:	4603      	mov	r3, r0
 8005456:	4618      	mov	r0, r3
 8005458:	f000 f8ed 	bl	8005636 <_ZN14QAT_FIFOBuffer3popEv>
 800545c:	4603      	mov	r3, r0
 800545e:	4619      	mov	r1, r3
 8005460:	4620      	mov	r0, r4
 8005462:	f7ff f9c1 	bl	80047e8 <_ZN8QAD_UART6dataTXEh>
 8005466:	e00b      	b.n	8005480 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3314      	adds	r3, #20
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f853 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005472:	4603      	mov	r3, r0
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff f975 	bl	8004764 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005486:	601a      	str	r2, [r3, #0]
  }
}
 8005488:	bf00      	nop
 800548a:	3754      	adds	r7, #84	; 0x54
 800548c:	46bd      	mov	sp, r7
 800548e:	bd90      	pop	{r4, r7, pc}

08005490 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	3314      	adds	r3, #20
 800549c:	4618      	mov	r0, r3
 800549e:	f000 f83b 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80054a2:	4603      	mov	r3, r0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff f947 	bl	8004738 <_ZN8QAD_UART7startTXEv>
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b082      	sub	sp, #8
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3314      	adds	r3, #20
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f82a 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff f94c 	bl	8004764 <_ZN8QAD_UART6stopTXEv>
}
 80054cc:	bf00      	nop
 80054ce:	3708      	adds	r7, #8
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3314      	adds	r3, #20
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f819 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff f951 	bl	8004790 <_ZN8QAD_UART7startRXEv>
}
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	3314      	adds	r3, #20
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f808 	bl	8005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005508:	4603      	mov	r3, r0
 800550a:	4618      	mov	r0, r3
 800550c:	f7ff f956 	bl	80047bc <_ZN8QAD_UART6stopRXEv>
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
	return get();
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f805 	bl	8005530 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8005526:	4603      	mov	r3, r0
      }
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4618      	mov	r0, r3
 800553c:	f000 f805 	bl	800554a <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8005540:	4603      	mov	r3, r0
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f806 	bl	8005566 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800555a:	4603      	mov	r3, r0
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f805 	bl	8005580 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005576:	4603      	mov	r3, r0
 8005578:	4618      	mov	r0, r3
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f805 	bl	8005598 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 800558e:	4603      	mov	r3, r0
 8005590:	4618      	mov	r0, r3
 8005592:	3708      	adds	r7, #8
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 f805 	bl	80055b2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}

080055b2 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80055b2:	b480      	push	{r7}
 80055b4:	b083      	sub	sp, #12
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	88da      	ldrh	r2, [r3, #6]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	891b      	ldrh	r3, [r3, #8]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d101      	bne.n	80055e0 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	460b      	mov	r3, r1
 80055f8:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	891b      	ldrh	r3, [r3, #8]
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f000 f847 	bl	8005696 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8005608:	4602      	mov	r2, r0
 800560a:	78fb      	ldrb	r3, [r7, #3]
 800560c:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	889a      	ldrh	r2, [r3, #4]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	891b      	ldrh	r3, [r3, #8]
 8005616:	429a      	cmp	r2, r3
 8005618:	d906      	bls.n	8005628 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	891b      	ldrh	r3, [r3, #8]
 800561e:	3301      	adds	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8005626:	e002      	b.n	800562e <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	811a      	strh	r2, [r3, #8]
}
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8005636:	b580      	push	{r7, lr}
 8005638:	b084      	sub	sp, #16
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff ffc2 	bl	80055c8 <_ZN14QAT_FIFOBuffer5emptyEv>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d01b      	beq.n	800568c <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	88db      	ldrh	r3, [r3, #6]
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f000 f81a 	bl	8005696 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8005662:	4603      	mov	r3, r0
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	889a      	ldrh	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	88db      	ldrh	r3, [r3, #6]
 8005670:	429a      	cmp	r2, r3
 8005672:	d906      	bls.n	8005682 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	88db      	ldrh	r3, [r3, #6]
 8005678:	3301      	adds	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	80da      	strh	r2, [r3, #6]
 8005680:	e002      	b.n	8005688 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	80da      	strh	r2, [r3, #6]
		return uData;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	e000      	b.n	800568e <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f807 	bl	80056b4 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80056a6:	4602      	mov	r2, r0
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	4413      	add	r3, r2
      }
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b082      	sub	sp, #8
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f805 	bl	80056ce <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80056c4:	4603      	mov	r3, r0
 80056c6:	4618      	mov	r0, r3
 80056c8:	3708      	adds	r7, #8
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}

080056ce <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80056ce:	b580      	push	{r7, lr}
 80056d0:	b082      	sub	sp, #8
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 f806 	bl	80056ea <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80056de:	4603      	mov	r3, r0
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f805 	bl	8005704 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80056fa:	4603      	mov	r3, r0
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f805 	bl	800571c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8005712:	4603      	mov	r3, r0
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f805 	bl	8005736 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800572c:	4603      	mov	r3, r0
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <__cxa_guard_acquire>:
 800574c:	6803      	ldr	r3, [r0, #0]
 800574e:	07db      	lsls	r3, r3, #31
 8005750:	d406      	bmi.n	8005760 <__cxa_guard_acquire+0x14>
 8005752:	7843      	ldrb	r3, [r0, #1]
 8005754:	b103      	cbz	r3, 8005758 <__cxa_guard_acquire+0xc>
 8005756:	deff      	udf	#255	; 0xff
 8005758:	2301      	movs	r3, #1
 800575a:	7043      	strb	r3, [r0, #1]
 800575c:	4618      	mov	r0, r3
 800575e:	4770      	bx	lr
 8005760:	2000      	movs	r0, #0
 8005762:	4770      	bx	lr

08005764 <__cxa_guard_release>:
 8005764:	2301      	movs	r3, #1
 8005766:	6003      	str	r3, [r0, #0]
 8005768:	4770      	bx	lr

0800576a <_Znwj>:
 800576a:	2801      	cmp	r0, #1
 800576c:	bf38      	it	cc
 800576e:	2001      	movcc	r0, #1
 8005770:	b510      	push	{r4, lr}
 8005772:	4604      	mov	r4, r0
 8005774:	4620      	mov	r0, r4
 8005776:	f000 f85b 	bl	8005830 <malloc>
 800577a:	b930      	cbnz	r0, 800578a <_Znwj+0x20>
 800577c:	f000 f81e 	bl	80057bc <_ZSt15get_new_handlerv>
 8005780:	b908      	cbnz	r0, 8005786 <_Znwj+0x1c>
 8005782:	f000 f823 	bl	80057cc <abort>
 8005786:	4780      	blx	r0
 8005788:	e7f4      	b.n	8005774 <_Znwj+0xa>
 800578a:	bd10      	pop	{r4, pc}

0800578c <_Znaj>:
 800578c:	f7ff bfed 	b.w	800576a <_Znwj>

08005790 <__cxa_pure_virtual>:
 8005790:	b508      	push	{r3, lr}
 8005792:	f000 f80d 	bl	80057b0 <_ZSt9terminatev>

08005796 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005796:	b508      	push	{r3, lr}
 8005798:	4780      	blx	r0
 800579a:	f000 f817 	bl	80057cc <abort>
	...

080057a0 <_ZSt13get_terminatev>:
 80057a0:	4b02      	ldr	r3, [pc, #8]	; (80057ac <_ZSt13get_terminatev+0xc>)
 80057a2:	6818      	ldr	r0, [r3, #0]
 80057a4:	f3bf 8f5b 	dmb	ish
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	2000000c 	.word	0x2000000c

080057b0 <_ZSt9terminatev>:
 80057b0:	b508      	push	{r3, lr}
 80057b2:	f7ff fff5 	bl	80057a0 <_ZSt13get_terminatev>
 80057b6:	f7ff ffee 	bl	8005796 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080057bc <_ZSt15get_new_handlerv>:
 80057bc:	4b02      	ldr	r3, [pc, #8]	; (80057c8 <_ZSt15get_new_handlerv+0xc>)
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	f3bf 8f5b 	dmb	ish
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	20000334 	.word	0x20000334

080057cc <abort>:
 80057cc:	b508      	push	{r3, lr}
 80057ce:	2006      	movs	r0, #6
 80057d0:	f000 f8de 	bl	8005990 <raise>
 80057d4:	2001      	movs	r0, #1
 80057d6:	f7fb fd93 	bl	8001300 <_exit>
	...

080057dc <__errno>:
 80057dc:	4b01      	ldr	r3, [pc, #4]	; (80057e4 <__errno+0x8>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	20000010 	.word	0x20000010

080057e8 <__libc_init_array>:
 80057e8:	b570      	push	{r4, r5, r6, lr}
 80057ea:	4d0d      	ldr	r5, [pc, #52]	; (8005820 <__libc_init_array+0x38>)
 80057ec:	4c0d      	ldr	r4, [pc, #52]	; (8005824 <__libc_init_array+0x3c>)
 80057ee:	1b64      	subs	r4, r4, r5
 80057f0:	10a4      	asrs	r4, r4, #2
 80057f2:	2600      	movs	r6, #0
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d109      	bne.n	800580c <__libc_init_array+0x24>
 80057f8:	4d0b      	ldr	r5, [pc, #44]	; (8005828 <__libc_init_array+0x40>)
 80057fa:	4c0c      	ldr	r4, [pc, #48]	; (800582c <__libc_init_array+0x44>)
 80057fc:	f000 f8f2 	bl	80059e4 <_init>
 8005800:	1b64      	subs	r4, r4, r5
 8005802:	10a4      	asrs	r4, r4, #2
 8005804:	2600      	movs	r6, #0
 8005806:	42a6      	cmp	r6, r4
 8005808:	d105      	bne.n	8005816 <__libc_init_array+0x2e>
 800580a:	bd70      	pop	{r4, r5, r6, pc}
 800580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005810:	4798      	blx	r3
 8005812:	3601      	adds	r6, #1
 8005814:	e7ee      	b.n	80057f4 <__libc_init_array+0xc>
 8005816:	f855 3b04 	ldr.w	r3, [r5], #4
 800581a:	4798      	blx	r3
 800581c:	3601      	adds	r6, #1
 800581e:	e7f2      	b.n	8005806 <__libc_init_array+0x1e>
 8005820:	08005af0 	.word	0x08005af0
 8005824:	08005af0 	.word	0x08005af0
 8005828:	08005af0 	.word	0x08005af0
 800582c:	08005af4 	.word	0x08005af4

08005830 <malloc>:
 8005830:	4b02      	ldr	r3, [pc, #8]	; (800583c <malloc+0xc>)
 8005832:	4601      	mov	r1, r0
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	f000 b819 	b.w	800586c <_malloc_r>
 800583a:	bf00      	nop
 800583c:	20000010 	.word	0x20000010

08005840 <memcpy>:
 8005840:	440a      	add	r2, r1
 8005842:	4291      	cmp	r1, r2
 8005844:	f100 33ff 	add.w	r3, r0, #4294967295
 8005848:	d100      	bne.n	800584c <memcpy+0xc>
 800584a:	4770      	bx	lr
 800584c:	b510      	push	{r4, lr}
 800584e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005852:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005856:	4291      	cmp	r1, r2
 8005858:	d1f9      	bne.n	800584e <memcpy+0xe>
 800585a:	bd10      	pop	{r4, pc}

0800585c <memset>:
 800585c:	4402      	add	r2, r0
 800585e:	4603      	mov	r3, r0
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	f803 1b01 	strb.w	r1, [r3], #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <_malloc_r>:
 800586c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586e:	1ccd      	adds	r5, r1, #3
 8005870:	f025 0503 	bic.w	r5, r5, #3
 8005874:	3508      	adds	r5, #8
 8005876:	2d0c      	cmp	r5, #12
 8005878:	bf38      	it	cc
 800587a:	250c      	movcc	r5, #12
 800587c:	2d00      	cmp	r5, #0
 800587e:	4606      	mov	r6, r0
 8005880:	db01      	blt.n	8005886 <_malloc_r+0x1a>
 8005882:	42a9      	cmp	r1, r5
 8005884:	d903      	bls.n	800588e <_malloc_r+0x22>
 8005886:	230c      	movs	r3, #12
 8005888:	6033      	str	r3, [r6, #0]
 800588a:	2000      	movs	r0, #0
 800588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588e:	f000 f89b 	bl	80059c8 <__malloc_lock>
 8005892:	4921      	ldr	r1, [pc, #132]	; (8005918 <_malloc_r+0xac>)
 8005894:	680a      	ldr	r2, [r1, #0]
 8005896:	4614      	mov	r4, r2
 8005898:	b99c      	cbnz	r4, 80058c2 <_malloc_r+0x56>
 800589a:	4f20      	ldr	r7, [pc, #128]	; (800591c <_malloc_r+0xb0>)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	b923      	cbnz	r3, 80058aa <_malloc_r+0x3e>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4630      	mov	r0, r6
 80058a4:	f000 f83c 	bl	8005920 <_sbrk_r>
 80058a8:	6038      	str	r0, [r7, #0]
 80058aa:	4629      	mov	r1, r5
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 f837 	bl	8005920 <_sbrk_r>
 80058b2:	1c43      	adds	r3, r0, #1
 80058b4:	d123      	bne.n	80058fe <_malloc_r+0x92>
 80058b6:	230c      	movs	r3, #12
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	4630      	mov	r0, r6
 80058bc:	f000 f88a 	bl	80059d4 <__malloc_unlock>
 80058c0:	e7e3      	b.n	800588a <_malloc_r+0x1e>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	1b5b      	subs	r3, r3, r5
 80058c6:	d417      	bmi.n	80058f8 <_malloc_r+0x8c>
 80058c8:	2b0b      	cmp	r3, #11
 80058ca:	d903      	bls.n	80058d4 <_malloc_r+0x68>
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	441c      	add	r4, r3
 80058d0:	6025      	str	r5, [r4, #0]
 80058d2:	e004      	b.n	80058de <_malloc_r+0x72>
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	42a2      	cmp	r2, r4
 80058d8:	bf0c      	ite	eq
 80058da:	600b      	streq	r3, [r1, #0]
 80058dc:	6053      	strne	r3, [r2, #4]
 80058de:	4630      	mov	r0, r6
 80058e0:	f000 f878 	bl	80059d4 <__malloc_unlock>
 80058e4:	f104 000b 	add.w	r0, r4, #11
 80058e8:	1d23      	adds	r3, r4, #4
 80058ea:	f020 0007 	bic.w	r0, r0, #7
 80058ee:	1ac2      	subs	r2, r0, r3
 80058f0:	d0cc      	beq.n	800588c <_malloc_r+0x20>
 80058f2:	1a1b      	subs	r3, r3, r0
 80058f4:	50a3      	str	r3, [r4, r2]
 80058f6:	e7c9      	b.n	800588c <_malloc_r+0x20>
 80058f8:	4622      	mov	r2, r4
 80058fa:	6864      	ldr	r4, [r4, #4]
 80058fc:	e7cc      	b.n	8005898 <_malloc_r+0x2c>
 80058fe:	1cc4      	adds	r4, r0, #3
 8005900:	f024 0403 	bic.w	r4, r4, #3
 8005904:	42a0      	cmp	r0, r4
 8005906:	d0e3      	beq.n	80058d0 <_malloc_r+0x64>
 8005908:	1a21      	subs	r1, r4, r0
 800590a:	4630      	mov	r0, r6
 800590c:	f000 f808 	bl	8005920 <_sbrk_r>
 8005910:	3001      	adds	r0, #1
 8005912:	d1dd      	bne.n	80058d0 <_malloc_r+0x64>
 8005914:	e7cf      	b.n	80058b6 <_malloc_r+0x4a>
 8005916:	bf00      	nop
 8005918:	20000338 	.word	0x20000338
 800591c:	2000033c 	.word	0x2000033c

08005920 <_sbrk_r>:
 8005920:	b538      	push	{r3, r4, r5, lr}
 8005922:	4d06      	ldr	r5, [pc, #24]	; (800593c <_sbrk_r+0x1c>)
 8005924:	2300      	movs	r3, #0
 8005926:	4604      	mov	r4, r0
 8005928:	4608      	mov	r0, r1
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	f7fb fcf2 	bl	8001314 <_sbrk>
 8005930:	1c43      	adds	r3, r0, #1
 8005932:	d102      	bne.n	800593a <_sbrk_r+0x1a>
 8005934:	682b      	ldr	r3, [r5, #0]
 8005936:	b103      	cbz	r3, 800593a <_sbrk_r+0x1a>
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	bd38      	pop	{r3, r4, r5, pc}
 800593c:	20000344 	.word	0x20000344

08005940 <_raise_r>:
 8005940:	291f      	cmp	r1, #31
 8005942:	b538      	push	{r3, r4, r5, lr}
 8005944:	4604      	mov	r4, r0
 8005946:	460d      	mov	r5, r1
 8005948:	d904      	bls.n	8005954 <_raise_r+0x14>
 800594a:	2316      	movs	r3, #22
 800594c:	6003      	str	r3, [r0, #0]
 800594e:	f04f 30ff 	mov.w	r0, #4294967295
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005956:	b112      	cbz	r2, 800595e <_raise_r+0x1e>
 8005958:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800595c:	b94b      	cbnz	r3, 8005972 <_raise_r+0x32>
 800595e:	4620      	mov	r0, r4
 8005960:	f000 f830 	bl	80059c4 <_getpid_r>
 8005964:	462a      	mov	r2, r5
 8005966:	4601      	mov	r1, r0
 8005968:	4620      	mov	r0, r4
 800596a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800596e:	f000 b817 	b.w	80059a0 <_kill_r>
 8005972:	2b01      	cmp	r3, #1
 8005974:	d00a      	beq.n	800598c <_raise_r+0x4c>
 8005976:	1c59      	adds	r1, r3, #1
 8005978:	d103      	bne.n	8005982 <_raise_r+0x42>
 800597a:	2316      	movs	r3, #22
 800597c:	6003      	str	r3, [r0, #0]
 800597e:	2001      	movs	r0, #1
 8005980:	e7e7      	b.n	8005952 <_raise_r+0x12>
 8005982:	2400      	movs	r4, #0
 8005984:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005988:	4628      	mov	r0, r5
 800598a:	4798      	blx	r3
 800598c:	2000      	movs	r0, #0
 800598e:	e7e0      	b.n	8005952 <_raise_r+0x12>

08005990 <raise>:
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <raise+0xc>)
 8005992:	4601      	mov	r1, r0
 8005994:	6818      	ldr	r0, [r3, #0]
 8005996:	f7ff bfd3 	b.w	8005940 <_raise_r>
 800599a:	bf00      	nop
 800599c:	20000010 	.word	0x20000010

080059a0 <_kill_r>:
 80059a0:	b538      	push	{r3, r4, r5, lr}
 80059a2:	4d07      	ldr	r5, [pc, #28]	; (80059c0 <_kill_r+0x20>)
 80059a4:	2300      	movs	r3, #0
 80059a6:	4604      	mov	r4, r0
 80059a8:	4608      	mov	r0, r1
 80059aa:	4611      	mov	r1, r2
 80059ac:	602b      	str	r3, [r5, #0]
 80059ae:	f7fb fc97 	bl	80012e0 <_kill>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	d102      	bne.n	80059bc <_kill_r+0x1c>
 80059b6:	682b      	ldr	r3, [r5, #0]
 80059b8:	b103      	cbz	r3, 80059bc <_kill_r+0x1c>
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	bd38      	pop	{r3, r4, r5, pc}
 80059be:	bf00      	nop
 80059c0:	20000344 	.word	0x20000344

080059c4 <_getpid_r>:
 80059c4:	f7fb bc84 	b.w	80012d0 <_getpid>

080059c8 <__malloc_lock>:
 80059c8:	4801      	ldr	r0, [pc, #4]	; (80059d0 <__malloc_lock+0x8>)
 80059ca:	f000 b809 	b.w	80059e0 <__retarget_lock_acquire_recursive>
 80059ce:	bf00      	nop
 80059d0:	2000034c 	.word	0x2000034c

080059d4 <__malloc_unlock>:
 80059d4:	4801      	ldr	r0, [pc, #4]	; (80059dc <__malloc_unlock+0x8>)
 80059d6:	f000 b804 	b.w	80059e2 <__retarget_lock_release_recursive>
 80059da:	bf00      	nop
 80059dc:	2000034c 	.word	0x2000034c

080059e0 <__retarget_lock_acquire_recursive>:
 80059e0:	4770      	bx	lr

080059e2 <__retarget_lock_release_recursive>:
 80059e2:	4770      	bx	lr

080059e4 <_init>:
 80059e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e6:	bf00      	nop
 80059e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ea:	bc08      	pop	{r3}
 80059ec:	469e      	mov	lr, r3
 80059ee:	4770      	bx	lr

080059f0 <_fini>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	bf00      	nop
 80059f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f6:	bc08      	pop	{r3}
 80059f8:	469e      	mov	lr, r3
 80059fa:	4770      	bx	lr
