
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08005870  08005870  00015870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005998  08005998  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a0  080059a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a0  080059a0  000159a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059a4  080059a4  000159a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000074  08005a1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005a1c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00018cb2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002e5c2  00000000  00000000  00038d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005dad  00000000  00000000  00067318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  0006d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aa727  00000000  00000000  0006e490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001290  00000000  00000000  00118bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001eb17  00000000  00000000  00119e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013895f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a40  00000000  00000000  001389b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005858 	.word	0x08005858

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005858 	.word	0x08005858

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000588:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800058c:	480d      	ldr	r0, [pc, #52]	; (80005c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800058e:	490e      	ldr	r1, [pc, #56]	; (80005c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000590:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005a4:	4c0b      	ldr	r4, [pc, #44]	; (80005d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005b2:	f000 febb 	bl	800132c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b6:	f004 fca9 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ba:	f000 fa7f 	bl	8000abc <main>
  bx  lr    
 80005be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80005c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80005cc:	080059a8 	.word	0x080059a8
  ldr r2, =_sbss
 80005d0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80005d4:	2000034c 	.word	0x2000034c

080005d8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <DMA1_Stream0_IRQHandler>
	...

080005dc <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b098      	sub	sp, #96	; 0x60
 80005e0:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005e2:	4b6a      	ldr	r3, [pc, #424]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a69      	ldr	r2, [pc, #420]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ec:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 80005ee:	4b67      	ldr	r3, [pc, #412]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a66      	ldr	r2, [pc, #408]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f8:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005fa:	4b64      	ldr	r3, [pc, #400]	; (800078c <_Z16SystemInitializev+0x1b0>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a63      	ldr	r2, [pc, #396]	; (800078c <_Z16SystemInitializev+0x1b0>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000604:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000606:	2003      	movs	r0, #3
 8000608:	f001 fb9a 	bl	8001d40 <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800060c:	2000      	movs	r0, #0
 800060e:	f000 fe9f 	bl	8001350 <HAL_InitTick>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	bf14      	ite	ne
 8000618:	2301      	movne	r3, #1
 800061a:	2300      	moveq	r3, #0
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 8000622:	2301      	movs	r3, #1
 8000624:	e0ad      	b.n	8000782 <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	4b59      	ldr	r3, [pc, #356]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	4a58      	ldr	r2, [pc, #352]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000634:	6413      	str	r3, [r2, #64]	; 0x40
 8000636:	4b56      	ldr	r3, [pc, #344]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	61bb      	str	r3, [r7, #24]
 8000640:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
 8000646:	4b53      	ldr	r3, [pc, #332]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a52      	ldr	r2, [pc, #328]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 800064c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000650:	6013      	str	r3, [r2, #0]
 8000652:	4b50      	ldr	r3, [pc, #320]	; (8000794 <_Z16SystemInitializev+0x1b8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 100MHz clock
  //NOTE: HSE Oscillator provided on STM32F411RE Nucleo 64 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 800065e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f004 fc8a 	bl	8004f80 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 800066c:	2301      	movs	r3, #1
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 8000670:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 8000676:	2302      	movs	r3, #2
 8000678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 800067a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 8000684:	2332      	movs	r3, #50	; 0x32
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 8000688:	2302      	movs	r3, #2
 800068a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 800068c:	2304      	movs	r3, #4
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 8000690:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fe25 	bl	80022e4 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	bf14      	ite	ne
 80006a0:	2301      	movne	r3, #1
 80006a2:	2300      	moveq	r3, #0
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 80006aa:	2301      	movs	r3, #1
 80006ac:	e069      	b.n	8000782 <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a36      	ldr	r2, [pc, #216]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 80006da:	230f      	movs	r3, #15
 80006dc:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 80006de:	2302      	movs	r3, #2
 80006e0:	623b      	str	r3, [r7, #32]

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 80006e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 100MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 80006ec:	2300      	movs	r3, #0
 80006ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2104      	movs	r1, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 f86c 	bl	80027d4 <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	bf14      	ite	ne
 8000702:	2301      	movne	r3, #1
 8000704:	2300      	moveq	r3, #0
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 800070c:	2301      	movs	r3, #1
 800070e:	e038      	b.n	8000782 <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2300      	movs	r3, #0
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800071a:	f043 0301 	orr.w	r3, r3, #1
 800071e:	6313      	str	r3, [r2, #48]	; 0x30
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000724:	f003 0301 	and.w	r3, r3, #1
 8000728:	60fb      	str	r3, [r7, #12]
 800072a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000734:	4a16      	ldr	r2, [pc, #88]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000736:	f043 0302 	orr.w	r3, r3, #2
 800073a:	6313      	str	r3, [r2, #48]	; 0x30
 800073c:	4b14      	ldr	r3, [pc, #80]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000740:	f003 0302 	and.w	r3, r3, #2
 8000744:	60bb      	str	r3, [r7, #8]
 8000746:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	4b10      	ldr	r3, [pc, #64]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000752:	f043 0304 	orr.w	r3, r3, #4
 8000756:	6313      	str	r3, [r2, #48]	; 0x30
 8000758:	4b0d      	ldr	r3, [pc, #52]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800076a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076c:	4a08      	ldr	r2, [pc, #32]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	6313      	str	r3, [r2, #48]	; 0x30
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <_Z16SystemInitializev+0x1b4>)
 8000776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000778:	f003 0308 	and.w	r3, r3, #8
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 8000780:	2300      	movs	r3, #0
}
 8000782:	4618      	mov	r0, r3
 8000784:	3760      	adds	r7, #96	; 0x60
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023c00 	.word	0x40023c00
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <_ZN7QAD_ADCC1Ev>:
	uint8_t                 m_uDataIdx;


	//-----------
	//Constructor
	QAD_ADC() :
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_sTIMHandle({0}),
		m_sADCHandle({0}),
		m_uChannelCount(0) {}
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2200      	movs	r2, #0
 80007aa:	705a      	strb	r2, [r3, #1]
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	330c      	adds	r3, #12
 80007b0:	2248      	movs	r2, #72	; 0x48
 80007b2:	2100      	movs	r1, #0
 80007b4:	4618      	mov	r0, r3
 80007b6:	f004 fbe3 	bl	8004f80 <memset>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3354      	adds	r3, #84	; 0x54
 80007be:	2248      	movs	r2, #72	; 0x48
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fbdc 	bl	8004f80 <memset>
 80007c8:	230f      	movs	r3, #15
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	db01      	blt.n	80007d2 <_ZN7QAD_ADCC1Ev+0x3a>
 80007ce:	3b01      	subs	r3, #1
 80007d0:	e7fb      	b.n	80007ca <_ZN7QAD_ADCC1Ev+0x32>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2200      	movs	r2, #0
 80007d6:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN7QAD_ADC3getEv>:


	  //-----------------
	  //Singleton Methods

	static QAD_ADC& get(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
		static QAD_ADC instance;
 80007e8:	4b10      	ldr	r3, [pc, #64]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f3bf 8f5b 	dmb	ish
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	bf0c      	ite	eq
 80007fa:	2301      	moveq	r3, #1
 80007fc:	2300      	movne	r3, #0
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d010      	beq.n	8000826 <_ZN7QAD_ADC3getEv+0x42>
 8000804:	4809      	ldr	r0, [pc, #36]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 8000806:	f004 fb33 	bl	8004e70 <__cxa_guard_acquire>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d005      	beq.n	8000826 <_ZN7QAD_ADC3getEv+0x42>
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <_ZN7QAD_ADC3getEv+0x4c>)
 800081c:	f7ff ffbc 	bl	8000798 <_ZN7QAD_ADCC1Ev>
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <_ZN7QAD_ADC3getEv+0x48>)
 8000822:	f004 fb31 	bl	8004e88 <__cxa_guard_release>
		return instance;
 8000826:	4b02      	ldr	r3, [pc, #8]	; (8000830 <_ZN7QAD_ADC3getEv+0x4c>)
	}
 8000828:	4618      	mov	r0, r3
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000250 	.word	0x20000250
 8000830:	20000090 	.word	0x20000090

08000834 <_ZN7QAD_ADC7handlerEv>:


	  //--------------
	  //Handler Method

	static void handler(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
		get().imp_handler();
 8000838:	f7ff ffd4 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 800083c:	4603      	mov	r3, r0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 ff6c 	bl	800371c <_ZN7QAD_ADC11imp_handlerEv>
	}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  while (1) {}
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  while (1) {}
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  while (1) {}
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  while (1) {}
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800089c:	f000 fd88 	bl	80013b0 <HAL_IncTick>
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Function
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <USART2_IRQHandler+0x14>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f004 f822 	bl	80048f8 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000258 	.word	0x20000258

080008bc <ADC_IRQHandler>:


//ADC_IRQHandler
//Interrupt Handler Function
void ADC_IRQHandler(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  QAD_ADC::handler();
 80008c0:	f7ff ffb8 	bl	8000834 <_ZN7QAD_ADC7handlerEv>
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_ZN7QAD_ADC4initER18QAD_ADC_InitStruct>:
	static QA_Result init(QAD_ADC_InitStruct& sInit) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
		return get().imp_init(sInit);
 80008d0:	f7ff ff88 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 80008d4:	4603      	mov	r3, r0
 80008d6:	6879      	ldr	r1, [r7, #4]
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 fe3c 	bl	8003556 <_ZN7QAD_ADC8imp_initER18QAD_ADC_InitStruct>
 80008de:	4603      	mov	r3, r0
	}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <_ZN7QAD_ADC5startEv>:


	  //---------------
	  //Control Methods

  static QA_Result start(void) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  	return get().imp_start();
 80008ec:	f7ff ff7a 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 ff52 	bl	800379c <_ZN7QAD_ADC9imp_startEv>
 80008f8:	4603      	mov	r3, r0
  }
 80008fa:	4618      	mov	r0, r3
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_ZN7QAD_ADC10addChannelER19QAD_ADC_ChannelData>:

  static void stop(void) {
  	get().imp_stop();
  }

  static void addChannel(QAD_ADC_ChannelData& sChannel) {
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
    get().imp_addChannel(sChannel);
 8000906:	f7ff ff6d 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 800090a:	4603      	mov	r3, r0
 800090c:	6879      	ldr	r1, [r7, #4]
 800090e:	4618      	mov	r0, r3
 8000910:	f003 f8a6 	bl	8003a60 <_ZN7QAD_ADC14imp_addChannelER19QAD_ADC_ChannelData>
  }
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <_ZN7QAD_ADC15getChannelCountEv>:

  static void removeChannel(QAD_ADC_PeriphChannel eChannel) {
  	get().imp_removeChannelPeriph(eChannel);
  }

  static uint8_t getChannelCount(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  	return get().m_uChannelCount;
 8000920:	f7ff ff60 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 8000924:	4603      	mov	r3, r0
 8000926:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
  }
 800092a:	4618      	mov	r0, r3
 800092c:	bd80      	pop	{r7, pc}

0800092e <_ZN7QAD_ADC7getDataEh>:

	static uint16_t getData(QAD_ADC_PeriphChannel eChannel) {
		return get().imp_getDataPeriph(eChannel);
	}

	static uint16_t getData(uint8_t uChannel) {
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
		return get().imp_getDataIdx(uChannel);
 8000938:	f7ff ff54 	bl	80007e4 <_ZN7QAD_ADC3getEv>
 800093c:	4602      	mov	r2, r0
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	4619      	mov	r1, r3
 8000942:	4610      	mov	r0, r2
 8000944:	f003 f8c0 	bl	8003ac8 <_ZN7QAD_ADC14imp_getDataIdxEh>
 8000948:	4603      	mov	r3, r0
	}
 800094a:	4618      	mov	r0, r3
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000952:	b580      	push	{r7, lr}
 8000954:	b082      	sub	sp, #8
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]
 800095a:	460b      	mov	r3, r1
 800095c:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fa39 	bl	8000ddc <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	887a      	ldrh	r2, [r7, #2]
 800096e:	809a      	strh	r2, [r3, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	80da      	strh	r2, [r3, #6]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2200      	movs	r2, #0
 800097a:	811a      	strh	r2, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	4608      	mov	r0, r1
 8000992:	4611      	mov	r1, r2
 8000994:	461a      	mov	r2, r3
 8000996:	4603      	mov	r3, r0
 8000998:	817b      	strh	r3, [r7, #10]
 800099a:	460b      	mov	r3, r1
 800099c:	813b      	strh	r3, [r7, #8]
 800099e:	4613      	mov	r3, r2
 80009a0:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3304      	adds	r3, #4
 80009ac:	f107 020a 	add.w	r2, r7, #10
 80009b0:	4611      	mov	r1, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fa2e 	bl	8000e14 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3308      	adds	r3, #8
 80009bc:	f107 0208 	add.w	r2, r7, #8
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fa26 	bl	8000e14 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	2200      	movs	r2, #0
 80009cc:	731a      	strb	r2, [r3, #12]
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	2200      	movs	r2, #0
 80009d2:	735a      	strb	r2, [r3, #13]
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2200      	movs	r2, #0
 80009d8:	739a      	strb	r2, [r3, #14]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	79fa      	ldrb	r2, [r7, #7]
 80009de:	73da      	strb	r2, [r3, #15]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	0800590c 	.word	0x0800590c

080009f0 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	2200      	movs	r2, #0
 80009fe:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	769a      	strb	r2, [r3, #26]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2225      	movs	r2, #37	; 0x25
 8000a4c:	76da      	strb	r2, [r3, #27]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	331c      	adds	r3, #28
 8000a52:	2244      	movs	r2, #68	; 0x44
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 fa92 	bl	8004f80 <memset>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	8b99      	ldrh	r1, [r3, #28]
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	8bda      	ldrh	r2, [r3, #30]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f7ff ff7b 	bl	8000988 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000a92:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	741a      	strb	r2, [r3, #16]
 8000aa0:	683a      	ldr	r2, [r7, #0]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f9ce 	bl	8000e4a <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	08005948 	.word	0x08005948

08000abc <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b0d7      	sub	sp, #348	; 0x15c
 8000ac0:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000ac2:	f7ff fd8b 	bl	80005dc <_Z16SystemInitializev>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	bf14      	ite	ne
 8000acc:	2301      	movne	r3, #1
 8000ace:	2300      	moveq	r3, #0
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d000      	beq.n	8000ad8 <main+0x1c>
		while (1) {}
 8000ad6:	e7fe      	b.n	8000ad6 <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000ad8:	2014      	movs	r0, #20
 8000ada:	f004 f9d8 	bl	8004e8e <_Znwj>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461c      	mov	r4, r3
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	49b4      	ldr	r1, [pc, #720]	; (8000db8 <main+0x2fc>)
 8000ae6:	4620      	mov	r0, r4
 8000ae8:	f003 f82c 	bl	8003b44 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000aec:	4bb3      	ldr	r3, [pc, #716]	; (8000dbc <main+0x300>)
 8000aee:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000af0:	2301      	movs	r3, #1
 8000af2:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000af6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000afa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000afe:	2308      	movs	r3, #8
 8000b00:	f887 3124 	strb.w	r3, [r7, #292]	; 0x124
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000b04:	4bac      	ldr	r3, [pc, #688]	; (8000db8 <main+0x2fc>)
 8000b06:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000b10:	2307      	movs	r3, #7
 8000b12:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000b16:	4ba8      	ldr	r3, [pc, #672]	; (8000db8 <main+0x2fc>)
 8000b18:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000b22:	2307      	movs	r3, #7
 8000b24:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000b28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b2c:	f8a7 3138 	strh.w	r3, [r7, #312]	; 0x138
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	f8a7 313a 	strh.w	r3, [r7, #314]	; 0x13a

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000b38:	2018      	movs	r0, #24
 8000b3a:	f004 f9a8 	bl	8004e8e <_Znwj>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461c      	mov	r4, r3
 8000b42:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000b46:	4619      	mov	r1, r3
 8000b48:	4620      	mov	r0, r4
 8000b4a:	f7ff ff95 	bl	8000a78 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000b4e:	4b9c      	ldr	r3, [pc, #624]	; (8000dc0 <main+0x304>)
 8000b50:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000b52:	4b9b      	ldr	r3, [pc, #620]	; (8000dc0 <main+0x304>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fead 	bl	80048b8 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	bf0c      	ite	eq
 8000b64:	2301      	moveq	r3, #1
 8000b66:	2300      	movne	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d005      	beq.n	8000b7a <main+0xbe>
  	GPIO_UserLED->on();
 8000b6e:	4b93      	ldr	r3, [pc, #588]	; (8000dbc <main+0x300>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f807 	bl	8003b86 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000b78:	e7fe      	b.n	8000b78 <main+0xbc>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000b7a:	4b91      	ldr	r3, [pc, #580]	; (8000dc0 <main+0x304>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 fefe 	bl	8004980 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000b84:	4b8e      	ldr	r3, [pc, #568]	; (8000dc0 <main+0x304>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	498e      	ldr	r1, [pc, #568]	; (8000dc4 <main+0x308>)
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f003 fec4 	bl	8004918 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  //----------
  //ADC Driver

    //Setup ADC Driver
  QAD_ADC_InitStruct sADCInit;
  sADCInit.eTimer = QAD_Timer2;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f887 3110 	strb.w	r3, [r7, #272]	; 0x110
  sADCInit.uTimer_Prescaler = 5000;
 8000b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  sADCInit.uTimer_Period    = 500;
 8000b9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ba2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

  if (QAD_ADC::init(sADCInit)) {
 8000ba6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fe8c 	bl	80008c8 <_ZN7QAD_ADC4initER18QAD_ADC_InitStruct>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d00b      	beq.n	8000bd8 <main+0x11c>
  	UART_STLink->txStringCR("ADC: Initialization Failed");
 8000bc0:	4b7f      	ldr	r3, [pc, #508]	; (8000dc0 <main+0x304>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4980      	ldr	r1, [pc, #512]	; (8000dc8 <main+0x30c>)
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 fea6 	bl	8004918 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED->on();
 8000bcc:	4b7b      	ldr	r3, [pc, #492]	; (8000dbc <main+0x300>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f002 ffd8 	bl	8003b86 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000bd6:	e7fe      	b.n	8000bd6 <main+0x11a>
  }
  UART_STLink->txStringCR("ADC: Initialized");
 8000bd8:	4b79      	ldr	r3, [pc, #484]	; (8000dc0 <main+0x304>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	497b      	ldr	r1, [pc, #492]	; (8000dcc <main+0x310>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f003 fe9a 	bl	8004918 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

    //Setup Channels
  QAD_ADC_ChannelData sADCChannel = {0};
 8000be4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]

  sADCChannel.pGPIO           = GPIOA;
 8000bf2:	4b71      	ldr	r3, [pc, #452]	; (8000db8 <main+0x2fc>)
 8000bf4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  sADCChannel.uPin            = GPIO_PIN_0;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
  sADCChannel.eChannel        = QAD_ADC_PeriphChannel0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  sADCChannel.eSamplingTime   = QAD_ADC_PeriphSamplingTime_56Cycles;
 8000c04:	2303      	movs	r3, #3
 8000c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  QAD_ADC::addChannel(sADCChannel);
 8000c0a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fe75 	bl	80008fe <_ZN7QAD_ADC10addChannelER19QAD_ADC_ChannelData>

  sADCChannel.pGPIO           = GPIOA;
 8000c14:	4b68      	ldr	r3, [pc, #416]	; (8000db8 <main+0x2fc>)
 8000c16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  sADCChannel.uPin            = GPIO_PIN_1;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
  sADCChannel.eChannel        = QAD_ADC_PeriphChannel1;
 8000c20:	2301      	movs	r3, #1
 8000c22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  sADCChannel.eSamplingTime   = QAD_ADC_PeriphSamplingTime_56Cycles;
 8000c26:	2303      	movs	r3, #3
 8000c28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  QAD_ADC::addChannel(sADCChannel);
 8000c2c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fe64 	bl	80008fe <_ZN7QAD_ADC10addChannelER19QAD_ADC_ChannelData>

  sADCChannel.pGPIO           = GPIOA;
 8000c36:	4b60      	ldr	r3, [pc, #384]	; (8000db8 <main+0x2fc>)
 8000c38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  sADCChannel.uPin            = GPIO_PIN_4;
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
  sADCChannel.eChannel        = QAD_ADC_PeriphChannel4;
 8000c42:	2304      	movs	r3, #4
 8000c44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  sADCChannel.eSamplingTime   = QAD_ADC_PeriphSamplingTime_56Cycles;
 8000c48:	2303      	movs	r3, #3
 8000c4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  QAD_ADC::addChannel(sADCChannel);
 8000c4e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe53 	bl	80008fe <_ZN7QAD_ADC10addChannelER19QAD_ADC_ChannelData>

    //Start ADC Driver
  if (QAD_ADC::start()) {
 8000c58:	f7ff fe46 	bl	80008e8 <_ZN7QAD_ADC5startEv>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	bf14      	ite	ne
 8000c62:	2301      	movne	r3, #1
 8000c64:	2300      	moveq	r3, #0
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d00b      	beq.n	8000c84 <main+0x1c8>
  	UART_STLink->txStringCR("ADC: Unable to start driver");
 8000c6c:	4b54      	ldr	r3, [pc, #336]	; (8000dc0 <main+0x304>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4957      	ldr	r1, [pc, #348]	; (8000dd0 <main+0x314>)
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 fe50 	bl	8004918 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED->on();
 8000c78:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <main+0x300>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 ff82 	bl	8003b86 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000c82:	e7fe      	b.n	8000c82 <main+0x1c6>
  }
  UART_STLink->txStringCR("ADC: Driver started");
 8000c84:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <main+0x304>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4952      	ldr	r1, [pc, #328]	; (8000dd4 <main+0x318>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fe44 	bl	8004918 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000c90:	f000 fba2 	bl	80013d8 <HAL_GetTick>
 8000c94:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
	uint32_t uOldTick = uNewTick;
 8000c98:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000c9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

  //Create task timing variables
	uint32_t uADCUpdateTicks = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	uint32_t uHeartbeatTicks = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000cac:	f000 fb94 	bl	80013d8 <HAL_GetTick>
 8000cb0:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000cb4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8000cb8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d01e      	beq.n	8000cfe <main+0x242>
    	uOldTick = uNewTick;
 8000cc0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8000cc4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    	uNewTick = uCurTick;
 8000cc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000ccc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000cd0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000cd4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d208      	bcs.n	8000cee <main+0x232>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000cdc:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000ce0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000cec:	e00a      	b.n	8000d04 <main+0x248>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000cee:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8000cf2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cf6:	1ad3      	subs	r3, r2, r3
 8000cf8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000cfc:	e002      	b.n	8000d04 <main+0x248>
    	}

    } else {
    	uTicks = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    }


    //ADC Update
    uADCUpdateTicks += uTicks;
 8000d04:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000d08:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d0c:	4413      	add	r3, r2
 8000d0e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    if (uADCUpdateTicks >= QA_FT_ADCUpdateTickThreshold) {
 8000d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d1a:	d335      	bcc.n	8000d88 <main+0x2cc>

    	char strData[256];
    	for (uint8_t i=0; i<QAD_ADC::getChannelCount(); i++) {
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8000d22:	f7ff fdfb 	bl	800091c <_ZN7QAD_ADC15getChannelCountEv>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	bf34      	ite	cc
 8000d32:	2301      	movcc	r3, #1
 8000d34:	2300      	movcs	r3, #0
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d01a      	beq.n	8000d72 <main+0x2b6>
    	  sprintf(strData, "ADC Channel %u: %u", i, QAD_ADC::getData(i));
 8000d3c:	f897 4147 	ldrb.w	r4, [r7, #327]	; 0x147
 8000d40:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fdf2 	bl	800092e <_ZN7QAD_ADC7getDataEh>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	4622      	mov	r2, r4
 8000d50:	4921      	ldr	r1, [pc, #132]	; (8000dd8 <main+0x31c>)
 8000d52:	f004 fa1b 	bl	800518c <siprintf>
    	  UART_STLink->txStringCR(strData);
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <main+0x304>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	463b      	mov	r3, r7
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4610      	mov	r0, r2
 8000d62:	f003 fdd9 	bl	8004918 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
    	for (uint8_t i=0; i<QAD_ADC::getChannelCount(); i++) {
 8000d66:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 8000d70:	e7d7      	b.n	8000d22 <main+0x266>
    	}
    	UART_STLink->txCR();
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <main+0x304>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f003 fe02 	bl	8004980 <_ZN19QAS_Serial_Dev_Base4txCREv>

    	uADCUpdateTicks -= QA_FT_ADCUpdateTickThreshold;
 8000d7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8000d80:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8000d84:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000d88:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000d8c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000d90:	4413      	add	r3, r2
 8000d92:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000d96:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000d9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d9e:	d385      	bcc.n	8000cac <main+0x1f0>
    	GPIO_UserLED->toggle();
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <main+0x300>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f002 ff14 	bl	8003bd2 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset hearbeat ticks
 8000daa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000dae:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000db2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    }

	}
 8000db6:	e779      	b.n	8000cac <main+0x1f0>
 8000db8:	40020000 	.word	0x40020000
 8000dbc:	20000254 	.word	0x20000254
 8000dc0:	20000258 	.word	0x20000258
 8000dc4:	08005870 	.word	0x08005870
 8000dc8:	08005890 	.word	0x08005890
 8000dcc:	080058ac 	.word	0x080058ac
 8000dd0:	080058c0 	.word	0x080058c0
 8000dd4:	080058dc 	.word	0x080058dc
 8000dd8:	080058f0 	.word	0x080058f0

08000ddc <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000de6:	683c      	ldr	r4, [r7, #0]
 8000de8:	4620      	mov	r0, r4
 8000dea:	f004 f861 	bl	8004eb0 <_Znaj>
 8000dee:	4603      	mov	r3, r0
 8000df0:	4618      	mov	r0, r3
 8000df2:	4602      	mov	r2, r0
 8000df4:	1e63      	subs	r3, r4, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db04      	blt.n	8000e04 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	7011      	strb	r1, [r2, #0]
 8000dfe:	3201      	adds	r2, #1
 8000e00:	3b01      	subs	r3, #1
 8000e02:	e7f8      	b.n	8000df6 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000e04:	4601      	mov	r1, r0
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f839 	bl	8000e7e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000e1e:	6838      	ldr	r0, [r7, #0]
 8000e20:	f000 f849 	bl	8000eb6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000e24:	4603      	mov	r3, r0
 8000e26:	881c      	ldrh	r4, [r3, #0]
 8000e28:	200c      	movs	r0, #12
 8000e2a:	f004 f830 	bl	8004e8e <_Znwj>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461d      	mov	r5, r3
 8000e32:	4621      	mov	r1, r4
 8000e34:	4628      	mov	r0, r5
 8000e36:	f7ff fd8c 	bl	8000952 <_ZN14QAT_FIFOBufferC1Et>
 8000e3a:	4629      	mov	r1, r5
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f000 f845 	bl	8000ecc <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bdb0      	pop	{r4, r5, r7, pc}

08000e4a <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000e4a:	b5b0      	push	{r4, r5, r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
 8000e52:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f000 f855 	bl	8000f04 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e5a:	4605      	mov	r5, r0
 8000e5c:	2064      	movs	r0, #100	; 0x64
 8000e5e:	f004 f816 	bl	8004e8e <_Znwj>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461c      	mov	r4, r3
 8000e66:	4629      	mov	r1, r5
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f7ff fdc1 	bl	80009f0 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000e6e:	4621      	mov	r1, r4
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f000 f852 	bl	8000f1a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bdb0      	pop	{r4, r5, r7, pc}

08000e7e <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6839      	ldr	r1, [r7, #0]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f860 	bl	8000f52 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f867 	bl	8000f7a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000eac:	4603      	mov	r3, r0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f85a 	bl	8000f94 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f861 	bl	8000fbc <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4618      	mov	r0, r3
 8000efe:	3708      	adds	r7, #8
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	b082      	sub	sp, #8
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6839      	ldr	r1, [r7, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f854 	bl	8000fd6 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f85b 	bl	8000ffe <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f85a 	bl	8001018 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff99 	bl	8000e9c <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 f854 	bl	8001032 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f852 	bl	800104a <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff9f 	bl	8000eea <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f000 f84c 	bl	8001064 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	6039      	str	r1, [r7, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 f84a 	bl	800107c <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ffa5 	bl	8000f38 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	f000 f844 	bl	8001096 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4618      	mov	r0, r3
 8001024:	f000 f843 	bl	80010ae <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 f847 	bl	80010ce <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8001040:	4603      	mov	r3, r0
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 800104a:	b580      	push	{r7, lr}
 800104c:	b082      	sub	sp, #8
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	f000 f847 	bl	80010e8 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f84b 	bl	8001108 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8001072:	4603      	mov	r3, r0
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f84b 	bl	8001122 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f84f 	bl	8001142 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f000 f850 	bl	800115c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f858 	bl	8001174 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f859 	bl	8001190 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 80010de:	4603      	mov	r3, r0
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f858 	bl	80011a6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f860 	bl	80011be <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f861 	bl	80011da <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8001118:	4603      	mov	r3, r0
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 f860 	bl	80011f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4618      	mov	r0, r3
 8001134:	f000 f868 	bl	8001208 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f869 	bl	8001224 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 8001152:	4603      	mov	r3, r0
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f868 	bl	800123a <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f84e 	bl	8001250 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f834 	bl	8001266 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 800123a:	b480      	push	{r7}
 800123c:	b083      	sub	sp, #12
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4618      	mov	r0, r3
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	return 1;
 8001280:	2301      	movs	r3, #1
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_kill>:

int _kill(int pid, int sig)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001296:	f003 fe33 	bl	8004f00 <__errno>
 800129a:	4603      	mov	r3, r0
 800129c:	2216      	movs	r2, #22
 800129e:	601a      	str	r2, [r3, #0]
	return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <_exit>:

void _exit (int status)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ffe7 	bl	800128c <_kill>
	while (1) {}		/* Make sure we hang here */
 80012be:	e7fe      	b.n	80012be <_exit+0x12>

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	; (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	; (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	; (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	; (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f003 fe06 	bl	8004f00 <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	; (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	; (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20020000 	.word	0x20020000
 8001320:	00000400 	.word	0x00000400
 8001324:	2000025c 	.word	0x2000025c
 8001328:	20000350 	.word	0x20000350

0800132c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	; (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x54>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <HAL_InitTick+0x58>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001366:	fbb3 f3f1 	udiv	r3, r3, r1
 800136a:	fbb2 f3f3 	udiv	r3, r2, r3
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fd29 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e00e      	b.n	800139c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b0f      	cmp	r3, #15
 8001382:	d80a      	bhi.n	800139a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	2200      	movs	r2, #0
 8001386:	6879      	ldr	r1, [r7, #4]
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 fce3 	bl	8001d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4a06      	ldr	r2, [pc, #24]	; (80013ac <HAL_InitTick+0x5c>)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
}
 800139c:	4618      	mov	r0, r3
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000000 	.word	0x20000000
 80013a8:	20000008 	.word	0x20000008
 80013ac:	20000004 	.word	0x20000004

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008
 80013d4:	20000338 	.word	0x20000338

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000338 	.word	0x20000338

080013f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e033      	b.n	800146e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f863 	bl	80014da <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001436:	f023 0302 	bic.w	r3, r3, #2
 800143a:	f043 0202 	orr.w	r2, r3, #2
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f000 fa8c 	bl	8001960 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f023 0303 	bic.w	r3, r3, #3
 8001456:	f043 0201 	orr.w	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
 800145e:	e001      	b.n	8001464 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b084      	sub	sp, #16
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e022      	b.n	80014d2 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f043 0202 	orr.w	r2, r3, #2
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0201 	bic.w	r2, r2, #1
 80014a6:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d108      	bne.n	80014c8 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f000 f819 	bl	80014ee <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_ADC_MspDeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001516:	2b01      	cmp	r3, #1
 8001518:	d101      	bne.n	800151e <HAL_ADC_Start_IT+0x1a>
 800151a:	2302      	movs	r3, #2
 800151c:	e0a1      	b.n	8001662 <HAL_ADC_Start_IT+0x15e>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	2b01      	cmp	r3, #1
 8001532:	d018      	beq.n	8001566 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001544:	4b4a      	ldr	r3, [pc, #296]	; (8001670 <HAL_ADC_Start_IT+0x16c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <HAL_ADC_Start_IT+0x170>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	0c9a      	lsrs	r2, r3, #18
 8001550:	4613      	mov	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001558:	e002      	b.n	8001560 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	3b01      	subs	r3, #1
 800155e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f9      	bne.n	800155a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b01      	cmp	r3, #1
 8001572:	d169      	bne.n	8001648 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800157c:	f023 0301 	bic.w	r3, r3, #1
 8001580:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001592:	2b00      	cmp	r3, #0
 8001594:	d007      	beq.n	80015a6 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800159e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015b2:	d106      	bne.n	80015c2 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	f023 0206 	bic.w	r2, r3, #6
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
 80015c0:	e002      	b.n	80015c8 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <HAL_ADC_Start_IT+0x174>)
 80015d2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015dc:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015ec:	f043 0320 	orr.w	r3, r3, #32
 80015f0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 031f 	and.w	r3, r3, #31
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d129      	bne.n	8001660 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	e020      	b.n	8001660 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_ADC_Start_IT+0x178>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d11b      	bne.n	8001660 <HAL_ADC_Start_IT+0x15c>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d114      	bne.n	8001660 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	e00b      	b.n	8001660 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	f043 0210 	orr.w	r2, r3, #16
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001658:	f043 0201 	orr.w	r2, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20000000 	.word	0x20000000
 8001674:	431bde83 	.word	0x431bde83
 8001678:	40012300 	.word	0x40012300
 800167c:	40012000 	.word	0x40012000

08001680 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_ADC_Stop_IT+0x16>
 8001692:	2302      	movs	r3, #2
 8001694:	e02b      	b.n	80016ee <HAL_ADC_Stop_IT+0x6e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d113      	bne.n	80016e4 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6812      	ldr	r2, [r2, #0]
 80016c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016ca:	f023 0320 	bic.w	r3, r3, #32
 80016ce:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d8:	f023 0301 	bic.w	r3, r3, #1
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001706:	2300      	movs	r3, #0
 8001708:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1c>
 8001714:	2302      	movs	r3, #2
 8001716:	e113      	b.n	8001940 <HAL_ADC_ConfigChannel+0x244>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b09      	cmp	r3, #9
 8001726:	d925      	bls.n	8001774 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68d9      	ldr	r1, [r3, #12]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b29b      	uxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	3b1e      	subs	r3, #30
 800173e:	2207      	movs	r2, #7
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43da      	mvns	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68d9      	ldr	r1, [r3, #12]
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	b29b      	uxth	r3, r3
 800175e:	4618      	mov	r0, r3
 8001760:	4603      	mov	r3, r0
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	4403      	add	r3, r0
 8001766:	3b1e      	subs	r3, #30
 8001768:	409a      	lsls	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	e022      	b.n	80017ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6919      	ldr	r1, [r3, #16]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	2207      	movs	r2, #7
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6919      	ldr	r1, [r3, #16]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	4618      	mov	r0, r3
 80017aa:	4603      	mov	r3, r0
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4403      	add	r3, r0
 80017b0:	409a      	lsls	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d824      	bhi.n	800180c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	3b05      	subs	r3, #5
 80017d4:	221f      	movs	r2, #31
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	400a      	ands	r2, r1
 80017e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b05      	subs	r3, #5
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
 800180a:	e04c      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d824      	bhi.n	800185e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4613      	mov	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	4413      	add	r3, r2
 8001824:	3b23      	subs	r3, #35	; 0x23
 8001826:	221f      	movs	r2, #31
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43da      	mvns	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	400a      	ands	r2, r1
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	b29b      	uxth	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b23      	subs	r3, #35	; 0x23
 8001850:	fa00 f203 	lsl.w	r2, r0, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
 800185c:	e023      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	3b41      	subs	r3, #65	; 0x41
 8001870:	221f      	movs	r2, #31
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	400a      	ands	r2, r1
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	4618      	mov	r0, r3
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	3b41      	subs	r3, #65	; 0x41
 800189a:	fa00 f203 	lsl.w	r2, r0, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	430a      	orrs	r2, r1
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <HAL_ADC_ConfigChannel+0x250>)
 80018a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a28      	ldr	r2, [pc, #160]	; (8001950 <HAL_ADC_ConfigChannel+0x254>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d10f      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d8>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b12      	cmp	r3, #18
 80018ba:	d10b      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a1d      	ldr	r2, [pc, #116]	; (8001950 <HAL_ADC_ConfigChannel+0x254>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d12b      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x23a>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1c      	ldr	r2, [pc, #112]	; (8001954 <HAL_ADC_ConfigChannel+0x258>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d003      	beq.n	80018f0 <HAL_ADC_ConfigChannel+0x1f4>
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b11      	cmp	r3, #17
 80018ee:	d122      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_ADC_ConfigChannel+0x258>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d111      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_ADC_ConfigChannel+0x25c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_ADC_ConfigChannel+0x260>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9a      	lsrs	r2, r3, #18
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001928:	e002      	b.n	8001930 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3b01      	subs	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40012300 	.word	0x40012300
 8001950:	40012000 	.word	0x40012000
 8001954:	10000012 	.word	0x10000012
 8001958:	20000000 	.word	0x20000000
 800195c:	431bde83 	.word	0x431bde83

08001960 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001968:	4b79      	ldr	r3, [pc, #484]	; (8001b50 <ADC_Init+0x1f0>)
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	431a      	orrs	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001994:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6859      	ldr	r1, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	021a      	lsls	r2, r3, #8
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6859      	ldr	r1, [r3, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f2:	4a58      	ldr	r2, [pc, #352]	; (8001b54 <ADC_Init+0x1f4>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	689a      	ldr	r2, [r3, #8]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6899      	ldr	r1, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6899      	ldr	r1, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
 8001a3c:	e00f      	b.n	8001a5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689a      	ldr	r2, [r3, #8]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a5c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0202 	bic.w	r2, r2, #2
 8001a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	6899      	ldr	r1, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	7e1b      	ldrb	r3, [r3, #24]
 8001a78:	005a      	lsls	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d01b      	beq.n	8001ac4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a9a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aaa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6859      	ldr	r1, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	035a      	lsls	r2, r3, #13
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]
 8001ac2:	e007      	b.n	8001ad4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ad2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	051a      	lsls	r2, r3, #20
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6899      	ldr	r1, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b16:	025a      	lsls	r2, r3, #9
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	029a      	lsls	r2, r3, #10
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40012300 	.word	0x40012300
 8001b54:	0f000001 	.word	0x0f000001

08001b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b6e:	68ba      	ldr	r2, [r7, #8]
 8001b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b74:	4013      	ands	r3, r2
 8001b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b8a:	4a04      	ldr	r2, [pc, #16]	; (8001b9c <__NVIC_SetPriorityGrouping+0x44>)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	60d3      	str	r3, [r2, #12]
}
 8001b90:	bf00      	nop
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba4:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	f003 0307 	and.w	r3, r3, #7
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	db0b      	blt.n	8001be6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	f003 021f 	and.w	r2, r3, #31
 8001bd4:	4907      	ldr	r1, [pc, #28]	; (8001bf4 <__NVIC_EnableIRQ+0x38>)
 8001bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bda:	095b      	lsrs	r3, r3, #5
 8001bdc:	2001      	movs	r0, #1
 8001bde:	fa00 f202 	lsl.w	r2, r0, r2
 8001be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	e000e100 	.word	0xe000e100

08001bf8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db12      	blt.n	8001c30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	490a      	ldr	r1, [pc, #40]	; (8001c3c <__NVIC_DisableIRQ+0x44>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	3320      	adds	r3, #32
 8001c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c24:	f3bf 8f4f 	dsb	sy
}
 8001c28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c2a:	f3bf 8f6f 	isb	sy
}
 8001c2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100

08001c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	db0a      	blt.n	8001c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	b2da      	uxtb	r2, r3
 8001c58:	490c      	ldr	r1, [pc, #48]	; (8001c8c <__NVIC_SetPriority+0x4c>)
 8001c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5e:	0112      	lsls	r2, r2, #4
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	440b      	add	r3, r1
 8001c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c68:	e00a      	b.n	8001c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <__NVIC_SetPriority+0x50>)
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	3b04      	subs	r3, #4
 8001c78:	0112      	lsls	r2, r2, #4
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	761a      	strb	r2, [r3, #24]
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000e100 	.word	0xe000e100
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b089      	sub	sp, #36	; 0x24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f1c3 0307 	rsb	r3, r3, #7
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2304      	movcs	r3, #4
 8001cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	3304      	adds	r3, #4
 8001cba:	2b06      	cmp	r3, #6
 8001cbc:	d902      	bls.n	8001cc4 <NVIC_EncodePriority+0x30>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b03      	subs	r3, #3
 8001cc2:	e000      	b.n	8001cc6 <NVIC_EncodePriority+0x32>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	401a      	ands	r2, r3
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce6:	43d9      	mvns	r1, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cec:	4313      	orrs	r3, r2
         );
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3724      	adds	r7, #36	; 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3b01      	subs	r3, #1
 8001d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d0c:	d301      	bcc.n	8001d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00f      	b.n	8001d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <SysTick_Config+0x40>)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f7ff ff8e 	bl	8001c40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <SysTick_Config+0x40>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <SysTick_Config+0x40>)
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	e000e010 	.word	0xe000e010

08001d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7ff ff05 	bl	8001b58 <__NVIC_SetPriorityGrouping>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b086      	sub	sp, #24
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
 8001d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d68:	f7ff ff1a 	bl	8001ba0 <__NVIC_GetPriorityGrouping>
 8001d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f7ff ff8e 	bl	8001c94 <NVIC_EncodePriority>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff ff5d 	bl	8001c40 <__NVIC_SetPriority>
}
 8001d86:	bf00      	nop
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b082      	sub	sp, #8
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff0d 	bl	8001bbc <__NVIC_EnableIRQ>
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff1d 	bl	8001bf8 <__NVIC_DisableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff94 	bl	8001cfc <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
 8001dfa:	e159      	b.n	80020b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8148 	bne.w	80020aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d005      	beq.n	8001e32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d130      	bne.n	8001e94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	2203      	movs	r2, #3
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e68:	2201      	movs	r2, #1
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 0201 	and.w	r2, r3, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b03      	cmp	r3, #3
 8001e9e:	d017      	beq.n	8001ed0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	689a      	ldr	r2, [r3, #8]
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d123      	bne.n	8001f24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	08da      	lsrs	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3208      	adds	r2, #8
 8001ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	08da      	lsrs	r2, r3, #3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3208      	adds	r2, #8
 8001f1e:	69b9      	ldr	r1, [r7, #24]
 8001f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	2203      	movs	r2, #3
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0203 	and.w	r2, r3, #3
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 80a2 	beq.w	80020aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_GPIO_Init+0x2e8>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	4a56      	ldr	r2, [pc, #344]	; (80020c8 <HAL_GPIO_Init+0x2e8>)
 8001f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f74:	6453      	str	r3, [r2, #68]	; 0x44
 8001f76:	4b54      	ldr	r3, [pc, #336]	; (80020c8 <HAL_GPIO_Init+0x2e8>)
 8001f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	60fb      	str	r3, [r7, #12]
 8001f80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f82:	4a52      	ldr	r2, [pc, #328]	; (80020cc <HAL_GPIO_Init+0x2ec>)
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	089b      	lsrs	r3, r3, #2
 8001f88:	3302      	adds	r3, #2
 8001f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	220f      	movs	r2, #15
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	; (80020d0 <HAL_GPIO_Init+0x2f0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d019      	beq.n	8001fe2 <HAL_GPIO_Init+0x202>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a48      	ldr	r2, [pc, #288]	; (80020d4 <HAL_GPIO_Init+0x2f4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0x1fe>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a47      	ldr	r2, [pc, #284]	; (80020d8 <HAL_GPIO_Init+0x2f8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00d      	beq.n	8001fda <HAL_GPIO_Init+0x1fa>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a46      	ldr	r2, [pc, #280]	; (80020dc <HAL_GPIO_Init+0x2fc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d007      	beq.n	8001fd6 <HAL_GPIO_Init+0x1f6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a45      	ldr	r2, [pc, #276]	; (80020e0 <HAL_GPIO_Init+0x300>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_GPIO_Init+0x1f2>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	e008      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e006      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e004      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e002      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e000      	b.n	8001fe4 <HAL_GPIO_Init+0x204>
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	69fa      	ldr	r2, [r7, #28]
 8001fe6:	f002 0203 	and.w	r2, r2, #3
 8001fea:	0092      	lsls	r2, r2, #2
 8001fec:	4093      	lsls	r3, r2
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ff4:	4935      	ldr	r1, [pc, #212]	; (80020cc <HAL_GPIO_Init+0x2ec>)
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <HAL_GPIO_Init+0x304>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002026:	4a2f      	ldr	r2, [pc, #188]	; (80020e4 <HAL_GPIO_Init+0x304>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_GPIO_Init+0x304>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002050:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <HAL_GPIO_Init+0x304>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_GPIO_Init+0x304>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a1a      	ldr	r2, [pc, #104]	; (80020e4 <HAL_GPIO_Init+0x304>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <HAL_GPIO_Init+0x304>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a0f      	ldr	r2, [pc, #60]	; (80020e4 <HAL_GPIO_Init+0x304>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3301      	adds	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	2b0f      	cmp	r3, #15
 80020b4:	f67f aea2 	bls.w	8001dfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40013800 	.word	0x40013800
 80020d0:	40020000 	.word	0x40020000
 80020d4:	40020400 	.word	0x40020400
 80020d8:	40020800 	.word	0x40020800
 80020dc:	40020c00 	.word	0x40020c00
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40013c00 	.word	0x40013c00

080020e8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	e0bb      	b.n	800227c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002104:	2201      	movs	r2, #1
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4013      	ands	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	429a      	cmp	r2, r3
 800211c:	f040 80ab 	bne.w	8002276 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002120:	4a5c      	ldr	r2, [pc, #368]	; (8002294 <HAL_GPIO_DeInit+0x1ac>)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	089b      	lsrs	r3, r3, #2
 8002126:	3302      	adds	r3, #2
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0303 	and.w	r3, r3, #3
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a54      	ldr	r2, [pc, #336]	; (8002298 <HAL_GPIO_DeInit+0x1b0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_GPIO_DeInit+0x96>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a53      	ldr	r2, [pc, #332]	; (800229c <HAL_GPIO_DeInit+0x1b4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d013      	beq.n	800217a <HAL_GPIO_DeInit+0x92>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_GPIO_DeInit+0x1b8>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00d      	beq.n	8002176 <HAL_GPIO_DeInit+0x8e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a51      	ldr	r2, [pc, #324]	; (80022a4 <HAL_GPIO_DeInit+0x1bc>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <HAL_GPIO_DeInit+0x8a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a50      	ldr	r2, [pc, #320]	; (80022a8 <HAL_GPIO_DeInit+0x1c0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_GPIO_DeInit+0x86>
 800216a:	2304      	movs	r3, #4
 800216c:	e008      	b.n	8002180 <HAL_GPIO_DeInit+0x98>
 800216e:	2307      	movs	r3, #7
 8002170:	e006      	b.n	8002180 <HAL_GPIO_DeInit+0x98>
 8002172:	2303      	movs	r3, #3
 8002174:	e004      	b.n	8002180 <HAL_GPIO_DeInit+0x98>
 8002176:	2302      	movs	r3, #2
 8002178:	e002      	b.n	8002180 <HAL_GPIO_DeInit+0x98>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <HAL_GPIO_DeInit+0x98>
 800217e:	2300      	movs	r3, #0
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	f002 0203 	and.w	r2, r2, #3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4093      	lsls	r3, r2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	429a      	cmp	r2, r3
 800218e:	d132      	bne.n	80021f6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002190:	4b46      	ldr	r3, [pc, #280]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	43db      	mvns	r3, r3
 8002198:	4944      	ldr	r1, [pc, #272]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 800219a:	4013      	ands	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800219e:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	43db      	mvns	r3, r3
 80021a6:	4941      	ldr	r1, [pc, #260]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80021ac:	4b3f      	ldr	r3, [pc, #252]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	493d      	ldr	r1, [pc, #244]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80021ba:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	493a      	ldr	r1, [pc, #232]	; (80022ac <HAL_GPIO_DeInit+0x1c4>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	220f      	movs	r2, #15
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80021d8:	4a2e      	ldr	r2, [pc, #184]	; (8002294 <HAL_GPIO_DeInit+0x1ac>)
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	089b      	lsrs	r3, r3, #2
 80021de:	3302      	adds	r3, #2
 80021e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	43da      	mvns	r2, r3
 80021e8:	482a      	ldr	r0, [pc, #168]	; (8002294 <HAL_GPIO_DeInit+0x1ac>)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	089b      	lsrs	r3, r3, #2
 80021ee:	400a      	ands	r2, r1
 80021f0:	3302      	adds	r3, #2
 80021f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2103      	movs	r1, #3
 8002200:	fa01 f303 	lsl.w	r3, r1, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	401a      	ands	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43db      	mvns	r3, r3
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	08d2      	lsrs	r2, r2, #3
 800222c:	4019      	ands	r1, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2103      	movs	r1, #3
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	2101      	movs	r1, #1
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	fa01 f303 	lsl.w	r3, r1, r3
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2103      	movs	r1, #3
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	401a      	ands	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	3301      	adds	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	f67f af40 	bls.w	8002104 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	371c      	adds	r7, #28
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	40013800 	.word	0x40013800
 8002298:	40020000 	.word	0x40020000
 800229c:	40020400 	.word	0x40020400
 80022a0:	40020800 	.word	0x40020800
 80022a4:	40020c00 	.word	0x40020c00
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40013c00 	.word	0x40013c00

080022b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	807b      	strh	r3, [r7, #2]
 80022bc:	4613      	mov	r3, r2
 80022be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022c0:	787b      	ldrb	r3, [r7, #1]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022c6:	887a      	ldrh	r2, [r7, #2]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022cc:	e003      	b.n	80022d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	041a      	lsls	r2, r3, #16
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	619a      	str	r2, [r3, #24]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e264      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d075      	beq.n	80023ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	4ba3      	ldr	r3, [pc, #652]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00c      	beq.n	8002328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4ba0      	ldr	r3, [pc, #640]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d112      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b9d      	ldr	r3, [pc, #628]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002326:	d10b      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4b99      	ldr	r3, [pc, #612]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05b      	beq.n	80023ec <HAL_RCC_OscConfig+0x108>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d157      	bne.n	80023ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e23f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x74>
 800234a:	4b91      	ldr	r3, [pc, #580]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a90      	ldr	r2, [pc, #576]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a8a      	ldr	r2, [pc, #552]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b88      	ldr	r3, [pc, #544]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a87      	ldr	r2, [pc, #540]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 800237c:	4b84      	ldr	r3, [pc, #528]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a83      	ldr	r2, [pc, #524]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a80      	ldr	r2, [pc, #512]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f81c 	bl	80013d8 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff f818 	bl	80013d8 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e204      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b76      	ldr	r3, [pc, #472]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xc0>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff f808 	bl	80013d8 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff f804 	bl	80013d8 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1f0      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0xe8>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	4b65      	ldr	r3, [pc, #404]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b5f      	ldr	r3, [pc, #380]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b5c      	ldr	r3, [pc, #368]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1c4      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b56      	ldr	r3, [pc, #344]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4952      	ldr	r1, [pc, #328]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_OscConfig+0x2b0>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe ffbd 	bl	80013d8 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe ffb9 	bl	80013d8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1a5      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b46      	ldr	r3, [pc, #280]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4940      	ldr	r1, [pc, #256]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_OscConfig+0x2b0>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe ff9c 	bl	80013d8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe ff98 	bl	80013d8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e184      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b36      	ldr	r3, [pc, #216]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d030      	beq.n	8002530 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe ff7c 	bl	80013d8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe ff78 	bl	80013d8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e164      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x200>
 8002502:	e015      	b.n	8002530 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x2b4>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe ff65 	bl	80013d8 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe ff61 	bl	80013d8 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e14d      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002528:	f003 0302 	and.w	r3, r3, #2
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0304 	and.w	r3, r3, #4
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80a0 	beq.w	800267e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d10f      	bne.n	800256e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	; 0x40
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_RCC_OscConfig+0x2ac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800256a:	2301      	movs	r3, #1
 800256c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d121      	bne.n	80025be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a07      	ldr	r2, [pc, #28]	; (800259c <HAL_RCC_OscConfig+0x2b8>)
 8002580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002584:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002586:	f7fe ff27 	bl	80013d8 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258c:	e011      	b.n	80025b2 <HAL_RCC_OscConfig+0x2ce>
 800258e:	bf00      	nop
 8002590:	40023800 	.word	0x40023800
 8002594:	42470000 	.word	0x42470000
 8002598:	42470e80 	.word	0x42470e80
 800259c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a0:	f7fe ff1a 	bl	80013d8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e106      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b2:	4b85      	ldr	r3, [pc, #532]	; (80027c8 <HAL_RCC_OscConfig+0x4e4>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d106      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2f0>
 80025c6:	4b81      	ldr	r3, [pc, #516]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a80      	ldr	r2, [pc, #512]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x312>
 80025dc:	4b7b      	ldr	r3, [pc, #492]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a7a      	ldr	r2, [pc, #488]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	4b78      	ldr	r3, [pc, #480]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a77      	ldr	r2, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x32a>
 80025f6:	4b75      	ldr	r3, [pc, #468]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a74      	ldr	r2, [pc, #464]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	4b72      	ldr	r3, [pc, #456]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a71      	ldr	r2, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fedf 	bl	80013d8 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fedb 	bl	80013d8 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0c5      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b65      	ldr	r3, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x33a>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002642:	f7fe fec9 	bl	80013d8 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fec5 	bl	80013d8 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0af      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a55      	ldr	r2, [pc, #340]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 809b 	beq.w	80027be <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d05c      	beq.n	800274e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d141      	bne.n	8002720 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b4c      	ldr	r3, [pc, #304]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fe99 	bl	80013d8 <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fe95 	bl	80013d8 <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e081      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026bc:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d6:	019b      	lsls	r3, r3, #6
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
 80026e4:	431a      	orrs	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	061b      	lsls	r3, r3, #24
 80026ec:	4937      	ldr	r1, [pc, #220]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f2:	4b37      	ldr	r3, [pc, #220]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fe6e 	bl	80013d8 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7fe fe6a 	bl	80013d8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e056      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x41c>
 800271e:	e04e      	b.n	80027be <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7fe fe57 	bl	80013d8 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272e:	f7fe fe53 	bl	80013d8 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e03f      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002740:	4b22      	ldr	r3, [pc, #136]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x44a>
 800274c:	e037      	b.n	80027be <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e032      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <HAL_RCC_OscConfig+0x4e8>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d028      	beq.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d121      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d11a      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800278a:	4013      	ands	r3, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002790:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	085b      	lsrs	r3, r3, #1
 80027a2:	3b01      	subs	r3, #1
 80027a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d107      	bne.n	80027ba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40007000 	.word	0x40007000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470060 	.word	0x42470060

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cc      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90c      	bls.n	8002810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d044      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d003      	beq.n	8002892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e067      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4934      	ldr	r1, [pc, #208]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fd88 	bl	80013d8 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fd84 	bl	80013d8 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d20c      	bcs.n	800291c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4602      	mov	r2, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	5ccb      	ldrb	r3, [r1, r3]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fce8 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	08005928 	.word	0x08005928
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	2300      	movs	r3, #0
 80029b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b8:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d00d      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x40>
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	f200 80bd 	bhi.w	8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x3a>
 80029d2:	e0b7      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b61      	ldr	r3, [pc, #388]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80029d6:	60bb      	str	r3, [r7, #8]
       break;
 80029d8:	e0b7      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029da:	4b61      	ldr	r3, [pc, #388]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80029dc:	60bb      	str	r3, [r7, #8]
      break;
 80029de:	e0b4      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e0:	4b5d      	ldr	r3, [pc, #372]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ea:	4b5b      	ldr	r3, [pc, #364]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d04d      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b58      	ldr	r3, [pc, #352]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	461a      	mov	r2, r3
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	ea02 0800 	and.w	r8, r2, r0
 8002a0e:	ea03 0901 	and.w	r9, r3, r1
 8002a12:	4640      	mov	r0, r8
 8002a14:	4649      	mov	r1, r9
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	014b      	lsls	r3, r1, #5
 8002a20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002a24:	0142      	lsls	r2, r0, #5
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	ebb0 0008 	subs.w	r0, r0, r8
 8002a2e:	eb61 0109 	sbc.w	r1, r1, r9
 8002a32:	f04f 0200 	mov.w	r2, #0
 8002a36:	f04f 0300 	mov.w	r3, #0
 8002a3a:	018b      	lsls	r3, r1, #6
 8002a3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a40:	0182      	lsls	r2, r0, #6
 8002a42:	1a12      	subs	r2, r2, r0
 8002a44:	eb63 0301 	sbc.w	r3, r3, r1
 8002a48:	f04f 0000 	mov.w	r0, #0
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	00d9      	lsls	r1, r3, #3
 8002a52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a56:	00d0      	lsls	r0, r2, #3
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	eb12 0208 	adds.w	r2, r2, r8
 8002a60:	eb43 0309 	adc.w	r3, r3, r9
 8002a64:	f04f 0000 	mov.w	r0, #0
 8002a68:	f04f 0100 	mov.w	r1, #0
 8002a6c:	0259      	lsls	r1, r3, #9
 8002a6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002a72:	0250      	lsls	r0, r2, #9
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	461a      	mov	r2, r3
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f7fd fc04 	bl	8000290 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	e04a      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a92:	4b31      	ldr	r3, [pc, #196]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	099b      	lsrs	r3, r3, #6
 8002a98:	461a      	mov	r2, r3
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aa2:	f04f 0100 	mov.w	r1, #0
 8002aa6:	ea02 0400 	and.w	r4, r2, r0
 8002aaa:	ea03 0501 	and.w	r5, r3, r1
 8002aae:	4620      	mov	r0, r4
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	014b      	lsls	r3, r1, #5
 8002abc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ac0:	0142      	lsls	r2, r0, #5
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	1b00      	subs	r0, r0, r4
 8002ac8:	eb61 0105 	sbc.w	r1, r1, r5
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	018b      	lsls	r3, r1, #6
 8002ad6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ada:	0182      	lsls	r2, r0, #6
 8002adc:	1a12      	subs	r2, r2, r0
 8002ade:	eb63 0301 	sbc.w	r3, r3, r1
 8002ae2:	f04f 0000 	mov.w	r0, #0
 8002ae6:	f04f 0100 	mov.w	r1, #0
 8002aea:	00d9      	lsls	r1, r3, #3
 8002aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002af0:	00d0      	lsls	r0, r2, #3
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	1912      	adds	r2, r2, r4
 8002af8:	eb45 0303 	adc.w	r3, r5, r3
 8002afc:	f04f 0000 	mov.w	r0, #0
 8002b00:	f04f 0100 	mov.w	r1, #0
 8002b04:	0299      	lsls	r1, r3, #10
 8002b06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b0a:	0290      	lsls	r0, r2, #10
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	461a      	mov	r2, r3
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f7fd fbb8 	bl	8000290 <__aeabi_uldivmod>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4613      	mov	r3, r2
 8002b26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	0c1b      	lsrs	r3, r3, #16
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	3301      	adds	r3, #1
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	60bb      	str	r3, [r7, #8]
      break;
 8002b42:	e002      	b.n	8002b4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002b46:	60bb      	str	r3, [r7, #8]
      break;
 8002b48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	00f42400 	.word	0x00f42400
 8002b60:	007a1200 	.word	0x007a1200

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b80:	f7ff fff0 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	0a9b      	lsrs	r3, r3, #10
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	4903      	ldr	r1, [pc, #12]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	08005938 	.word	0x08005938

08002ba4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba8:	f7ff ffdc 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0b5b      	lsrs	r3, r3, #13
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	08005938 	.word	0x08005938

08002bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e041      	b.n	8002c62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d106      	bne.n	8002bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f88d 	bl	8002d12 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f000 f896 	bl	8002d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2202      	movs	r2, #2
 8002c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a1a      	ldr	r2, [r3, #32]
 8002c80:	f241 1311 	movw	r3, #4369	; 0x1111
 8002c84:	4013      	ands	r3, r2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <HAL_TIM_Base_DeInit+0x40>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	f240 4344 	movw	r3, #1092	; 0x444
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d107      	bne.n	8002caa <HAL_TIM_Base_DeInit+0x40>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f83b 	bl	8002d26 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a34      	ldr	r2, [pc, #208]	; (8002e20 <TIM_Base_SetConfig+0xe4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00f      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d5a:	d00b      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a31      	ldr	r2, [pc, #196]	; (8002e24 <TIM_Base_SetConfig+0xe8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d007      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a30      	ldr	r2, [pc, #192]	; (8002e28 <TIM_Base_SetConfig+0xec>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <TIM_Base_SetConfig+0x38>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_Base_SetConfig+0xf0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d108      	bne.n	8002d86 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <TIM_Base_SetConfig+0xe4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d94:	d017      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a22      	ldr	r2, [pc, #136]	; (8002e24 <TIM_Base_SetConfig+0xe8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a21      	ldr	r2, [pc, #132]	; (8002e28 <TIM_Base_SetConfig+0xec>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00f      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a20      	ldr	r2, [pc, #128]	; (8002e2c <TIM_Base_SetConfig+0xf0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d00b      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a1f      	ldr	r2, [pc, #124]	; (8002e30 <TIM_Base_SetConfig+0xf4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d007      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <TIM_Base_SetConfig+0xf8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d003      	beq.n	8002dc6 <TIM_Base_SetConfig+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <TIM_Base_SetConfig+0xfc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d108      	bne.n	8002dd8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a08      	ldr	r2, [pc, #32]	; (8002e20 <TIM_Base_SetConfig+0xe4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d103      	bne.n	8002e0c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	615a      	str	r2, [r3, #20]
}
 8002e12:	bf00      	nop
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40010000 	.word	0x40010000
 8002e24:	40000400 	.word	0x40000400
 8002e28:	40000800 	.word	0x40000800
 8002e2c:	40000c00 	.word	0x40000c00
 8002e30:	40014000 	.word	0x40014000
 8002e34:	40014400 	.word	0x40014400
 8002e38:	40014800 	.word	0x40014800

08002e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e050      	b.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a1c      	ldr	r2, [pc, #112]	; (8002f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d018      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea0:	d013      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a18      	ldr	r2, [pc, #96]	; (8002f08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d00e      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a16      	ldr	r2, [pc, #88]	; (8002f0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d009      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d004      	beq.n	8002eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d10c      	bne.n	8002ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	40010000 	.word	0x40010000
 8002f08:	40000400 	.word	0x40000400
 8002f0c:	40000800 	.word	0x40000800
 8002f10:	40000c00 	.word	0x40000c00
 8002f14:	40014000 	.word	0x40014000

08002f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e03f      	b.n	8002faa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f866 	bl	8003010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2224      	movs	r2, #36	; 0x24
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f86b 	bl	8003038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695a      	ldr	r2, [r3, #20]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e021      	b.n	8003008 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	; 0x24
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fda:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f821 	bl	8003024 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800303c:	b09f      	sub	sp, #124	; 0x7c
 800303e:	af00      	add	r7, sp, #0
 8003040:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	68d9      	ldr	r1, [r3, #12]
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	ea40 0301 	orr.w	r3, r0, r1
 8003058:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	431a      	orrs	r2, r3
 8003064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	431a      	orrs	r2, r3
 800306a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	4313      	orrs	r3, r2
 8003070:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800307c:	f021 010c 	bic.w	r1, r1, #12
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003086:	430b      	orrs	r3, r1
 8003088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695b      	ldr	r3, [r3, #20]
 8003090:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003096:	6999      	ldr	r1, [r3, #24]
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	ea40 0301 	orr.w	r3, r0, r1
 80030a0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4bc5      	ldr	r3, [pc, #788]	; (80033bc <UART_SetConfig+0x384>)
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d004      	beq.n	80030b6 <UART_SetConfig+0x7e>
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4bc3      	ldr	r3, [pc, #780]	; (80033c0 <UART_SetConfig+0x388>)
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d103      	bne.n	80030be <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030b6:	f7ff fd75 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80030ba:	6778      	str	r0, [r7, #116]	; 0x74
 80030bc:	e002      	b.n	80030c4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030be:	f7ff fd5d 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80030c2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030cc:	f040 80b6 	bne.w	800323c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d2:	461c      	mov	r4, r3
 80030d4:	f04f 0500 	mov.w	r5, #0
 80030d8:	4622      	mov	r2, r4
 80030da:	462b      	mov	r3, r5
 80030dc:	1891      	adds	r1, r2, r2
 80030de:	6439      	str	r1, [r7, #64]	; 0x40
 80030e0:	415b      	adcs	r3, r3
 80030e2:	647b      	str	r3, [r7, #68]	; 0x44
 80030e4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030e8:	1912      	adds	r2, r2, r4
 80030ea:	eb45 0303 	adc.w	r3, r5, r3
 80030ee:	f04f 0000 	mov.w	r0, #0
 80030f2:	f04f 0100 	mov.w	r1, #0
 80030f6:	00d9      	lsls	r1, r3, #3
 80030f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030fc:	00d0      	lsls	r0, r2, #3
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	1911      	adds	r1, r2, r4
 8003104:	6639      	str	r1, [r7, #96]	; 0x60
 8003106:	416b      	adcs	r3, r5
 8003108:	667b      	str	r3, [r7, #100]	; 0x64
 800310a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	1891      	adds	r1, r2, r2
 8003116:	63b9      	str	r1, [r7, #56]	; 0x38
 8003118:	415b      	adcs	r3, r3
 800311a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800311c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003120:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003124:	f7fd f8b4 	bl	8000290 <__aeabi_uldivmod>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4ba5      	ldr	r3, [pc, #660]	; (80033c4 <UART_SetConfig+0x38c>)
 800312e:	fba3 2302 	umull	r2, r3, r3, r2
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	011e      	lsls	r6, r3, #4
 8003136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003138:	461c      	mov	r4, r3
 800313a:	f04f 0500 	mov.w	r5, #0
 800313e:	4622      	mov	r2, r4
 8003140:	462b      	mov	r3, r5
 8003142:	1891      	adds	r1, r2, r2
 8003144:	6339      	str	r1, [r7, #48]	; 0x30
 8003146:	415b      	adcs	r3, r3
 8003148:	637b      	str	r3, [r7, #52]	; 0x34
 800314a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800314e:	1912      	adds	r2, r2, r4
 8003150:	eb45 0303 	adc.w	r3, r5, r3
 8003154:	f04f 0000 	mov.w	r0, #0
 8003158:	f04f 0100 	mov.w	r1, #0
 800315c:	00d9      	lsls	r1, r3, #3
 800315e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003162:	00d0      	lsls	r0, r2, #3
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	1911      	adds	r1, r2, r4
 800316a:	65b9      	str	r1, [r7, #88]	; 0x58
 800316c:	416b      	adcs	r3, r5
 800316e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	461a      	mov	r2, r3
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	1891      	adds	r1, r2, r2
 800317c:	62b9      	str	r1, [r7, #40]	; 0x28
 800317e:	415b      	adcs	r3, r3
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003186:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800318a:	f7fd f881 	bl	8000290 <__aeabi_uldivmod>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4b8c      	ldr	r3, [pc, #560]	; (80033c4 <UART_SetConfig+0x38c>)
 8003194:	fba3 1302 	umull	r1, r3, r3, r2
 8003198:	095b      	lsrs	r3, r3, #5
 800319a:	2164      	movs	r1, #100	; 0x64
 800319c:	fb01 f303 	mul.w	r3, r1, r3
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	3332      	adds	r3, #50	; 0x32
 80031a6:	4a87      	ldr	r2, [pc, #540]	; (80033c4 <UART_SetConfig+0x38c>)
 80031a8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b4:	441e      	add	r6, r3
 80031b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031b8:	4618      	mov	r0, r3
 80031ba:	f04f 0100 	mov.w	r1, #0
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	1894      	adds	r4, r2, r2
 80031c4:	623c      	str	r4, [r7, #32]
 80031c6:	415b      	adcs	r3, r3
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ce:	1812      	adds	r2, r2, r0
 80031d0:	eb41 0303 	adc.w	r3, r1, r3
 80031d4:	f04f 0400 	mov.w	r4, #0
 80031d8:	f04f 0500 	mov.w	r5, #0
 80031dc:	00dd      	lsls	r5, r3, #3
 80031de:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031e2:	00d4      	lsls	r4, r2, #3
 80031e4:	4622      	mov	r2, r4
 80031e6:	462b      	mov	r3, r5
 80031e8:	1814      	adds	r4, r2, r0
 80031ea:	653c      	str	r4, [r7, #80]	; 0x50
 80031ec:	414b      	adcs	r3, r1
 80031ee:	657b      	str	r3, [r7, #84]	; 0x54
 80031f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	461a      	mov	r2, r3
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	1891      	adds	r1, r2, r2
 80031fc:	61b9      	str	r1, [r7, #24]
 80031fe:	415b      	adcs	r3, r3
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003206:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800320a:	f7fd f841 	bl	8000290 <__aeabi_uldivmod>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4b6c      	ldr	r3, [pc, #432]	; (80033c4 <UART_SetConfig+0x38c>)
 8003214:	fba3 1302 	umull	r1, r3, r3, r2
 8003218:	095b      	lsrs	r3, r3, #5
 800321a:	2164      	movs	r1, #100	; 0x64
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	3332      	adds	r3, #50	; 0x32
 8003226:	4a67      	ldr	r2, [pc, #412]	; (80033c4 <UART_SetConfig+0x38c>)
 8003228:	fba2 2303 	umull	r2, r3, r2, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	f003 0207 	and.w	r2, r3, #7
 8003232:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4432      	add	r2, r6
 8003238:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800323a:	e0b9      	b.n	80033b0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800323c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323e:	461c      	mov	r4, r3
 8003240:	f04f 0500 	mov.w	r5, #0
 8003244:	4622      	mov	r2, r4
 8003246:	462b      	mov	r3, r5
 8003248:	1891      	adds	r1, r2, r2
 800324a:	6139      	str	r1, [r7, #16]
 800324c:	415b      	adcs	r3, r3
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003254:	1912      	adds	r2, r2, r4
 8003256:	eb45 0303 	adc.w	r3, r5, r3
 800325a:	f04f 0000 	mov.w	r0, #0
 800325e:	f04f 0100 	mov.w	r1, #0
 8003262:	00d9      	lsls	r1, r3, #3
 8003264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003268:	00d0      	lsls	r0, r2, #3
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	eb12 0804 	adds.w	r8, r2, r4
 8003272:	eb43 0905 	adc.w	r9, r3, r5
 8003276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4618      	mov	r0, r3
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	008b      	lsls	r3, r1, #2
 800328a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800328e:	0082      	lsls	r2, r0, #2
 8003290:	4640      	mov	r0, r8
 8003292:	4649      	mov	r1, r9
 8003294:	f7fc fffc 	bl	8000290 <__aeabi_uldivmod>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <UART_SetConfig+0x38c>)
 800329e:	fba3 2302 	umull	r2, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	011e      	lsls	r6, r3, #4
 80032a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a8:	4618      	mov	r0, r3
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	1894      	adds	r4, r2, r2
 80032b4:	60bc      	str	r4, [r7, #8]
 80032b6:	415b      	adcs	r3, r3
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032be:	1812      	adds	r2, r2, r0
 80032c0:	eb41 0303 	adc.w	r3, r1, r3
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	f04f 0500 	mov.w	r5, #0
 80032cc:	00dd      	lsls	r5, r3, #3
 80032ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032d2:	00d4      	lsls	r4, r2, #3
 80032d4:	4622      	mov	r2, r4
 80032d6:	462b      	mov	r3, r5
 80032d8:	1814      	adds	r4, r2, r0
 80032da:	64bc      	str	r4, [r7, #72]	; 0x48
 80032dc:	414b      	adcs	r3, r1
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	008b      	lsls	r3, r1, #2
 80032f4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032f8:	0082      	lsls	r2, r0, #2
 80032fa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032fe:	f7fc ffc7 	bl	8000290 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4b2f      	ldr	r3, [pc, #188]	; (80033c4 <UART_SetConfig+0x38c>)
 8003308:	fba3 1302 	umull	r1, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	2164      	movs	r1, #100	; 0x64
 8003310:	fb01 f303 	mul.w	r3, r1, r3
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	011b      	lsls	r3, r3, #4
 8003318:	3332      	adds	r3, #50	; 0x32
 800331a:	4a2a      	ldr	r2, [pc, #168]	; (80033c4 <UART_SetConfig+0x38c>)
 800331c:	fba2 2303 	umull	r2, r3, r2, r3
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003326:	441e      	add	r6, r3
 8003328:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332a:	4618      	mov	r0, r3
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	1894      	adds	r4, r2, r2
 8003336:	603c      	str	r4, [r7, #0]
 8003338:	415b      	adcs	r3, r3
 800333a:	607b      	str	r3, [r7, #4]
 800333c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003340:	1812      	adds	r2, r2, r0
 8003342:	eb41 0303 	adc.w	r3, r1, r3
 8003346:	f04f 0400 	mov.w	r4, #0
 800334a:	f04f 0500 	mov.w	r5, #0
 800334e:	00dd      	lsls	r5, r3, #3
 8003350:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003354:	00d4      	lsls	r4, r2, #3
 8003356:	4622      	mov	r2, r4
 8003358:	462b      	mov	r3, r5
 800335a:	eb12 0a00 	adds.w	sl, r2, r0
 800335e:	eb43 0b01 	adc.w	fp, r3, r1
 8003362:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	4618      	mov	r0, r3
 8003368:	f04f 0100 	mov.w	r1, #0
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	008b      	lsls	r3, r1, #2
 8003376:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800337a:	0082      	lsls	r2, r0, #2
 800337c:	4650      	mov	r0, sl
 800337e:	4659      	mov	r1, fp
 8003380:	f7fc ff86 	bl	8000290 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4b0e      	ldr	r3, [pc, #56]	; (80033c4 <UART_SetConfig+0x38c>)
 800338a:	fba3 1302 	umull	r1, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2164      	movs	r1, #100	; 0x64
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	3332      	adds	r3, #50	; 0x32
 800339c:	4a09      	ldr	r2, [pc, #36]	; (80033c4 <UART_SetConfig+0x38c>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4432      	add	r2, r6
 80033ae:	609a      	str	r2, [r3, #8]
}
 80033b0:	bf00      	nop
 80033b2:	377c      	adds	r7, #124	; 0x7c
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	40011000 	.word	0x40011000
 80033c0:	40011400 	.word	0x40011400
 80033c4:	51eb851f 	.word	0x51eb851f

080033c8 <_ZN12QAD_TimerMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_TimerMgr& get(void) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
		static QAD_TimerMgr instance;
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <_ZN12QAD_TimerMgr3getEv+0x48>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	f3bf 8f5b 	dmb	ish
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	bf0c      	ite	eq
 80033de:	2301      	moveq	r3, #1
 80033e0:	2300      	movne	r3, #0
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d010      	beq.n	800340a <_ZN12QAD_TimerMgr3getEv+0x42>
 80033e8:	4809      	ldr	r0, [pc, #36]	; (8003410 <_ZN12QAD_TimerMgr3getEv+0x48>)
 80033ea:	f001 fd41 	bl	8004e70 <__cxa_guard_acquire>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	bf14      	ite	ne
 80033f4:	2301      	movne	r3, #1
 80033f6:	2300      	moveq	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d005      	beq.n	800340a <_ZN12QAD_TimerMgr3getEv+0x42>
 80033fe:	4805      	ldr	r0, [pc, #20]	; (8003414 <_ZN12QAD_TimerMgr3getEv+0x4c>)
 8003400:	f000 fe84 	bl	800410c <_ZN12QAD_TimerMgrC1Ev>
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <_ZN12QAD_TimerMgr3getEv+0x48>)
 8003406:	f001 fd3f 	bl	8004e88 <__cxa_guard_release>
		return instance;
 800340a:	4b02      	ldr	r3, [pc, #8]	; (8003414 <_ZN12QAD_TimerMgr3getEv+0x4c>)
	}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	20000300 	.word	0x20000300
 8003414:	20000260 	.word	0x20000260

08003418 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>:
  //Data Methods

	//Used to retrieve the current state of a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the state for. Member of QAD_Timer_Periph
	//Returns member of QAD_TimerState enum
	static QAD_Timer_State getState(QAD_Timer_Periph eTimer) {
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	4603      	mov	r3, r0
 8003420:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].eState;
 8003422:	f7ff ffd1 	bl	80033c8 <_ZN12QAD_TimerMgr3getEv>
 8003426:	4601      	mov	r1, r0
 8003428:	79fa      	ldrb	r2, [r7, #7]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3301      	adds	r3, #1
 8003436:	781b      	ldrb	r3, [r3, #0]
	}
 8003438:	4618      	mov	r0, r3
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZN12QAD_TimerMgr6getADCE16QAD_Timer_Periph>:
	}

	//Used to retrieve whether a particular Tiemr peripheral has triggering support for ADC conversions
	//eTimer - The Timer peripheral to retrieve the ADC support for. Member of QAD_Timer_Periph
	//Returns true if the timer has ADC conversion triggering support, or false if not supported
	static bool getADC(QAD_Timer_Periph eTimer) {
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].bADC;
 800344a:	f7ff ffbd 	bl	80033c8 <_ZN12QAD_TimerMgr3getEv>
 800344e:	4601      	mov	r1, r0
 8003450:	79fa      	ldrb	r2, [r7, #7]
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	330b      	adds	r3, #11
 800345e:	781b      	ldrb	r3, [r3, #0]
	}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>:

	//Used to retrieve an instance for a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the instance for. Member of QAD_Timer_Periph
	//Returns TIM_TypeDef, as defined in stm32f411xe.h
	static TIM_TypeDef* getInstance(QAD_Timer_Periph eTimer) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].pInstance;
 8003472:	f7ff ffa9 	bl	80033c8 <_ZN12QAD_TimerMgr3getEv>
 8003476:	4601      	mov	r1, r0
 8003478:	79fa      	ldrb	r2, [r7, #7]
 800347a:	4613      	mov	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	330c      	adds	r3, #12
 8003486:	681b      	ldr	r3, [r3, #0]
	}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
	//Management Methods

	//Used to register a Timer peripheral as being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected Timer is already in use
	static QA_Result registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	460a      	mov	r2, r1
 800349a:	71fb      	strb	r3, [r7, #7]
 800349c:	4613      	mov	r3, r2
 800349e:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerTimer(eTimer, eState);
 80034a0:	f7ff ff92 	bl	80033c8 <_ZN12QAD_TimerMgr3getEv>
 80034a4:	79ba      	ldrb	r2, [r7, #6]
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	4619      	mov	r1, r3
 80034aa:	f000 ff3d 	bl	8004328 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>
 80034ae:	4603      	mov	r3, r0
	}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>:

	//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	static void deregisterTimer(QAD_Timer_Periph eTimer) {
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterTimer(eTimer);
 80034c2:	f7ff ff81 	bl	80033c8 <_ZN12QAD_TimerMgr3getEv>
 80034c6:	4602      	mov	r2, r0
 80034c8:	79fb      	ldrb	r3, [r7, #7]
 80034ca:	4619      	mov	r1, r3
 80034cc:	4610      	mov	r0, r2
 80034ce:	f000 ff56 	bl	800437e <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>
	}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to enable the clock for
	static void enableClock(QAD_Timer_Periph eTimer) {
 80034da:	b580      	push	{r7, lr}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	4603      	mov	r3, r0
 80034e2:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eTimer);
 80034e4:	f7ff ff70 	bl	80033c8 <_ZN12QAD_TimerMgr3getEv>
 80034e8:	4602      	mov	r2, r0
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	4619      	mov	r1, r3
 80034ee:	4610      	mov	r0, r2
 80034f0:	f000 ff5c 	bl	80043ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>
	}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>:

	//Used to disable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to disable the clock for
	static void disableClock(QAD_Timer_Periph eTimer) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eTimer);
 8003506:	f7ff ff5f 	bl	80033c8 <_ZN12QAD_TimerMgr3getEv>
 800350a:	4602      	mov	r2, r0
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f001 f84d 	bl	80045b0 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>
	}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_ZN19QAD_ADC_ChannelDataaSERKS_>:
	QAD_ADC_ChannelData& operator=(const QAD_ADC_ChannelData& other) {
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	6039      	str	r1, [r7, #0]
		pGPIO         = other.pGPIO;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	601a      	str	r2, [r3, #0]
		uPin          = other.uPin;
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	889a      	ldrh	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	809a      	strh	r2, [r3, #4]
		eChannel      = other.eChannel;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	609a      	str	r2, [r3, #8]
		eSamplingTime = other.eSamplingTime;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	60da      	str	r2, [r3, #12]
		return *this;
 8003548:	687b      	ldr	r3, [r7, #4]
	}
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <_ZN7QAD_ADC8imp_initER18QAD_ADC_InitStruct>:
  //------------------------------
  //QAD_ADC Initialization Methods

//QAD_ADC::imp_init
//QAD_ADC Initialization Method
QA_Result QAD_ADC::imp_init(QAD_ADC_InitStruct& sInit) {
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
	m_eTimer           = sInit.eTimer;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	709a      	strb	r2, [r3, #2]
	m_uTimer_Prescaler = sInit.uTimer_Prescaler;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	605a      	str	r2, [r3, #4]
	m_uTimer_Period    = sInit.uTimer_Period;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	609a      	str	r2, [r3, #8]

	if (!QAD_TimerMgr::getADC(m_eTimer)) {
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	789b      	ldrb	r3, [r3, #2]
 800357c:	4618      	mov	r0, r3
 800357e:	f7ff ff5f 	bl	8003440 <_ZN12QAD_TimerMgr6getADCE16QAD_Timer_Periph>
 8003582:	4603      	mov	r3, r0
 8003584:	f083 0301 	eor.w	r3, r3, #1
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <_ZN7QAD_ADC8imp_initER18QAD_ADC_InitStruct+0x3c>
		return QA_Error_PeriphNotSupported;
 800358e:	2303      	movs	r3, #3
 8003590:	e023      	b.n	80035da <_ZN7QAD_ADC8imp_initER18QAD_ADC_InitStruct+0x84>
	}

  if (QAD_TimerMgr::getState(m_eTimer))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	789b      	ldrb	r3, [r3, #2]
 8003596:	4618      	mov	r0, r3
 8003598:	f7ff ff3e 	bl	8003418 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	bf14      	ite	ne
 80035a2:	2301      	movne	r3, #1
 80035a4:	2300      	moveq	r3, #0
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <_ZN7QAD_ADC8imp_initER18QAD_ADC_InitStruct+0x5a>
  	return QA_Error_PeriphBusy;
 80035ac:	2302      	movs	r3, #2
 80035ae:	e014      	b.n	80035da <_ZN7QAD_ADC8imp_initER18QAD_ADC_InitStruct+0x84>

  QAD_TimerMgr::registerTimer(m_eTimer, QAD_Timer_InUse_ADC);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	789b      	ldrb	r3, [r3, #2]
 80035b4:	2104      	movs	r1, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff6a 	bl	8003490 <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>
  QA_Result eRes = imp_periphInit(sInit);
 80035bc:	6839      	ldr	r1, [r7, #0]
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f810 	bl	80035e4 <_ZN7QAD_ADC14imp_periphInitER18QAD_ADC_InitStruct>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]

  if (eRes)
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d004      	beq.n	80035d8 <_ZN7QAD_ADC8imp_initER18QAD_ADC_InitStruct+0x82>
  	QAD_TimerMgr::deregisterTimer(m_eTimer);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	789b      	ldrb	r3, [r3, #2]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff70 	bl	80034b8 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>
  return eRes;
 80035d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <_ZN7QAD_ADC14imp_periphInitER18QAD_ADC_InitStruct>:
	//-----------------------------------------
	//QAD_ADC Peripheral Initialization Methods

//QAD_ADC::imp_periphInit
//QAD_ADC Peripheral Initialization Method
QA_Result QAD_ADC::imp_periphInit(QAD_ADC_InitStruct& sInit) {
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]

	//Enable Timer Clock
	QAD_TimerMgr::enableClock(m_eTimer);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	789b      	ldrb	r3, [r3, #2]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff71 	bl	80034da <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>

	//Initialize Timer
	m_sTIMHandle.Instance               = QAD_TimerMgr::getInstance(m_eTimer);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	789b      	ldrb	r3, [r3, #2]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff33 	bl	8003468 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>
 8003602:	4602      	mov	r2, r0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	60da      	str	r2, [r3, #12]
	m_sTIMHandle.Init.Prescaler         = m_uTimer_Prescaler;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	611a      	str	r2, [r3, #16]
	m_sTIMHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	615a      	str	r2, [r3, #20]
	m_sTIMHandle.Init.Period            = m_uTimer_Period;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	619a      	str	r2, [r3, #24]
	m_sTIMHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	61da      	str	r2, [r3, #28]
	m_sTIMHandle.Init.RepetitionCounter = 0x0;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
	m_sTIMHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_TIM_Base_Init(&m_sTIMHandle) != HAL_OK) {
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	330c      	adds	r3, #12
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fac9 	bl	8002bcc <HAL_TIM_Base_Init>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <_ZN7QAD_ADC14imp_periphInitER18QAD_ADC_InitStruct+0x72>
		imp_periphDeinit(DeinitPartial);
 800364a:	2100      	movs	r1, #0
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 f835 	bl	80036bc <_ZN7QAD_ADC16imp_periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8003652:	2301      	movs	r3, #1
 8003654:	e02b      	b.n	80036ae <_ZN7QAD_ADC14imp_periphInitER18QAD_ADC_InitStruct+0xca>
	}

	//Setup Timer Trigger
	TIM_MasterConfigTypeDef MC_Init = {0};
 8003656:	f107 0310 	add.w	r3, r7, #16
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
	MC_Init.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003660:	2320      	movs	r3, #32
 8003662:	613b      	str	r3, [r7, #16]
	HAL_TIMEx_MasterConfigSynchronization(&m_sTIMHandle, &MC_Init);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	330c      	adds	r3, #12
 8003668:	f107 0210 	add.w	r2, r7, #16
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fbe4 	bl	8002e3c <HAL_TIMEx_MasterConfigSynchronization>

	//Enable ADC Clock
	__HAL_RCC_ADC1_CLK_ENABLE();
 8003674:	2300      	movs	r3, #0
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <_ZN7QAD_ADC14imp_periphInitER18QAD_ADC_InitStruct+0xd4>)
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	4a0e      	ldr	r2, [pc, #56]	; (80036b8 <_ZN7QAD_ADC14imp_periphInitER18QAD_ADC_InitStruct+0xd4>)
 800367e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003682:	6453      	str	r3, [r2, #68]	; 0x44
 8003684:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <_ZN7QAD_ADC14imp_periphInitER18QAD_ADC_InitStruct+0xd4>)
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]

	//Enable ADC IRQ
	HAL_NVIC_SetPriority(ADC_IRQn, QAD_IRQPRIORITY_ADC, 0x00);
 8003690:	2200      	movs	r2, #0
 8003692:	210a      	movs	r1, #10
 8003694:	2012      	movs	r0, #18
 8003696:	f7fe fb5e 	bl	8001d56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 800369a:	2012      	movs	r0, #18
 800369c:	f7fe fb77 	bl	8001d8e <HAL_NVIC_EnableIRQ>

	//Set States
	m_eInitState = QA_Initialized;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
	m_eState     = QA_Inactive;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3718      	adds	r7, #24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800

080036bc <_ZN7QAD_ADC16imp_periphDeinitENS_10DeinitModeE>:


//QAD_ADC::imp_periphDeinit
//QAD_ADC Peripheral Initialization Method
void QAD_ADC::imp_periphDeinit(QAD_ADC::DeinitMode eMode) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]

	if (m_eState) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <_ZN7QAD_ADC16imp_periphDeinitENS_10DeinitModeE+0x1a>
		imp_stop();
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f973 	bl	80039bc <_ZN7QAD_ADC8imp_stopEv>
	}

	//Full Deinitialization
	if (eMode) {
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00d      	beq.n	80036f8 <_ZN7QAD_ADC16imp_periphDeinitENS_10DeinitModeE+0x3c>

		//Disable ADC IRQ
		HAL_NVIC_EnableIRQ(ADC_IRQn);
 80036dc:	2012      	movs	r0, #18
 80036de:	f7fe fb56 	bl	8001d8e <HAL_NVIC_EnableIRQ>

		//Disable ADC Clock
		__HAL_RCC_ADC1_CLK_DISABLE();
 80036e2:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <_ZN7QAD_ADC16imp_periphDeinitENS_10DeinitModeE+0x5c>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	4a0c      	ldr	r2, [pc, #48]	; (8003718 <_ZN7QAD_ADC16imp_periphDeinitENS_10DeinitModeE+0x5c>)
 80036e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ec:	6453      	str	r3, [r2, #68]	; 0x44

		//Deinit Timer
		HAL_TIM_Base_DeInit(&m_sTIMHandle);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	330c      	adds	r3, #12
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fab9 	bl	8002c6a <HAL_TIM_Base_DeInit>

	}

	//Disable Timer Clock
	QAD_TimerMgr::disableClock(m_eTimer);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	789b      	ldrb	r3, [r3, #2]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fefd 	bl	80034fc <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>

	//Set States
	m_eInitState = QA_NotInitialized;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
	m_eState     = QA_Inactive;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	705a      	strb	r2, [r3, #1]

}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40023800 	.word	0x40023800

0800371c <_ZN7QAD_ADC11imp_handlerEv>:
	//-----------------------
	//QAD_ADC Handler Methods

//QAD_ADC::imp_handler
//QAD_ADC Handler Method
void QAD_ADC::imp_handler(void) {
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_EOC)) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d028      	beq.n	800378e <_ZN7QAD_ADC11imp_handlerEv+0x72>

		m_uData[m_uDataIdx] = m_sADCHandle.Instance->DR;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003748:	b291      	uxth	r1, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	33cc      	adds	r3, #204	; 0xcc
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	4413      	add	r3, r2
 8003752:	460a      	mov	r2, r1
 8003754:	80da      	strh	r2, [r3, #6]
		if (m_uDataIdx >= (m_uChannelCount-1))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800375c:	461a      	mov	r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003764:	3b01      	subs	r3, #1
 8003766:	429a      	cmp	r2, r3
 8003768:	db04      	blt.n	8003774 <_ZN7QAD_ADC11imp_handlerEv+0x58>
			m_uDataIdx = 0; else
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8003772:	e007      	b.n	8003784 <_ZN7QAD_ADC11imp_handlerEv+0x68>
			m_uDataIdx++;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800377a:	3301      	adds	r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_EOC);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003788:	f06f 0202 	mvn.w	r2, #2
 800378c:	601a      	str	r2, [r3, #0]
	}
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
	...

0800379c <_ZN7QAD_ADC9imp_startEv>:
	//-----------------------
	//QAD_ADC Control Methods

//QAD_ADC::imp_start
//QAD_ADC Control Method
QA_Result QAD_ADC::imp_start(void) {
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	; 0x30
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
	if ((m_eState) || (!m_uChannelCount))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d104      	bne.n	80037b6 <_ZN7QAD_ADC9imp_startEv+0x1a>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <_ZN7QAD_ADC9imp_startEv+0x1e>
		return QA_Fail;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0f9      	b.n	80039ae <_ZN7QAD_ADC9imp_startEv+0x212>

	//Initialize ADC
	m_sADCHandle.Instance                   = ADC1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a7e      	ldr	r2, [pc, #504]	; (80039b8 <_ZN7QAD_ADC9imp_startEv+0x21c>)
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
	m_sADCHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037c6:	659a      	str	r2, [r3, #88]	; 0x58
	m_sADCHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sADCHandle.Init.ScanConvMode          = ENABLE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	665a      	str	r2, [r3, #100]	; 0x64
	m_sADCHandle.Init.ContinuousConvMode    = DISABLE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sADCHandle.Init.DiscontinuousConvMode = DISABLE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sADCHandle.Init.NbrOfDiscConversion   = 0;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	679a      	str	r2, [r3, #120]	; 0x78
	m_sADCHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sADCHandle.Init.ExternalTrigConv      = imp_getTrigger();
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f988 	bl	8003b0a <_ZN7QAD_ADC14imp_getTriggerEv>
 80037fa:	4602      	mov	r2, r0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sADCHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	661a      	str	r2, [r3, #96]	; 0x60
	m_sADCHandle.Init.NbrOfConversion       = m_uChannelCount;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800380c:	461a      	mov	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	671a      	str	r2, [r3, #112]	; 0x70
	m_sADCHandle.Init.DMAContinuousRequests = ENABLE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	m_sADCHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_ADC_Init(&m_sADCHandle) != HAL_OK) {
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3354      	adds	r3, #84	; 0x54
 8003824:	4618      	mov	r0, r3
 8003826:	f7fd fde3 	bl	80013f0 <HAL_ADC_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d004      	beq.n	8003844 <_ZN7QAD_ADC9imp_startEv+0xa8>
		imp_stop();
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f000 f8be 	bl	80039bc <_ZN7QAD_ADC8imp_stopEv>
		return QA_Fail;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b4      	b.n	80039ae <_ZN7QAD_ADC9imp_startEv+0x212>
	}

	//Channel GPIO Configuration
	GPIO_InitTypeDef GPIO_Init = {0};
 8003844:	f107 0318 	add.w	r3, r7, #24
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode  = GPIO_MODE_ANALOG;
 8003854:	2303      	movs	r3, #3
 8003856:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Pull  = GPIO_NOPULL;
 8003858:	2300      	movs	r3, #0
 800385a:	623b      	str	r3, [r7, #32]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 800385c:	2300      	movs	r3, #0
 800385e:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003860:	2300      	movs	r3, #0
 8003862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800386c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003870:	429a      	cmp	r2, r3
 8003872:	d22e      	bcs.n	80038d2 <_ZN7QAD_ADC9imp_startEv+0x136>
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003874:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	330a      	adds	r3, #10
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	4413      	add	r3, r2
 8003880:	3304      	adds	r3, #4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b11      	cmp	r3, #17
 8003886:	d109      	bne.n	800389c <_ZN7QAD_ADC9imp_startEv+0x100>
				(m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVBat)) {
 8003888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	330a      	adds	r3, #10
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	4413      	add	r3, r2
 8003894:	3304      	adds	r3, #4
 8003896:	681b      	ldr	r3, [r3, #0]
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003898:	2b12      	cmp	r3, #18
 800389a:	d014      	beq.n	80038c6 <_ZN7QAD_ADC9imp_startEv+0x12a>
			GPIO_Init.Pin       = m_sChannels[i].uPin;
 800389c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	4413      	add	r3, r2
 80038a6:	33a0      	adds	r3, #160	; 0xa0
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 80038ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	4413      	add	r3, r2
 80038b6:	339c      	adds	r3, #156	; 0x9c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f107 0218 	add.w	r2, r7, #24
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7fe fa8d 	bl	8001de0 <HAL_GPIO_Init>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80038c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038ca:	3301      	adds	r3, #1
 80038cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80038d0:	e7c9      	b.n	8003866 <_ZN7QAD_ADC9imp_startEv+0xca>
		}
	}


	//Channel Configuration
	ADC_ChannelConfTypeDef  ADCChannel_Init = {0};
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	609a      	str	r2, [r3, #8]
 80038de:	60da      	str	r2, [r3, #12]
	ADCChannel_Init.Offset        = 0;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80038e4:	2300      	movs	r3, #0
 80038e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80038f0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d230      	bcs.n	800395a <_ZN7QAD_ADC9imp_startEv+0x1be>
		ADCChannel_Init.Channel       = m_sChannels[i].eChannel;
 80038f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	330a      	adds	r3, #10
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	4413      	add	r3, r2
 8003904:	3304      	adds	r3, #4
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	60bb      	str	r3, [r7, #8]
		ADCChannel_Init.Rank          = i+1;
 800390a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800390e:	3301      	adds	r3, #1
 8003910:	60fb      	str	r3, [r7, #12]
		ADCChannel_Init.SamplingTime = m_sChannels[i].eSamplingTime;
 8003912:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	330a      	adds	r3, #10
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	4413      	add	r3, r2
 800391e:	3308      	adds	r3, #8
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&m_sADCHandle, &ADCChannel_Init) != HAL_OK) {
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	3354      	adds	r3, #84	; 0x54
 8003928:	f107 0208 	add.w	r2, r7, #8
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f7fd fee4 	bl	80016fc <HAL_ADC_ConfigChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	bf14      	ite	ne
 800393a:	2301      	movne	r3, #1
 800393c:	2300      	moveq	r3, #0
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <_ZN7QAD_ADC9imp_startEv+0x1b2>
			imp_stop();
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f839 	bl	80039bc <_ZN7QAD_ADC8imp_stopEv>
			return QA_Fail;
 800394a:	2301      	movs	r3, #1
 800394c:	e02f      	b.n	80039ae <_ZN7QAD_ADC9imp_startEv+0x212>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800394e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003952:	3301      	adds	r3, #1
 8003954:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003958:	e7c7      	b.n	80038ea <_ZN7QAD_ADC9imp_startEv+0x14e>
		}

	}

	//Clear Data
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 800395a:	2300      	movs	r3, #0
 800395c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003960:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003964:	2b0f      	cmp	r3, #15
 8003966:	d80d      	bhi.n	8003984 <_ZN7QAD_ADC9imp_startEv+0x1e8>
		m_uData[i] = 0;
 8003968:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	33cc      	adds	r3, #204	; 0xcc
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	4413      	add	r3, r2
 8003974:	2200      	movs	r2, #0
 8003976:	80da      	strh	r2, [r3, #6]
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003978:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800397c:	3301      	adds	r3, #1
 800397e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003982:	e7ed      	b.n	8003960 <_ZN7QAD_ADC9imp_startEv+0x1c4>
	m_uDataIdx = 0;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

	//Enable ADC IRQ
	HAL_ADC_Start_IT(&m_sADCHandle);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3354      	adds	r3, #84	; 0x54
 8003990:	4618      	mov	r0, r3
 8003992:	f7fd fdb7 	bl	8001504 <HAL_ADC_Start_IT>
	__HAL_TIM_ENABLE(&m_sTIMHandle);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

	//Set States
	m_eState = QA_Active;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3730      	adds	r7, #48	; 0x30
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	40012000 	.word	0x40012000

080039bc <_ZN7QAD_ADC8imp_stopEv>:


//QAD_ADC::imp_stop
//QAD_ADC Control Method
void QAD_ADC::imp_stop(void) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

	//Disable ADC IRQ
	__HAL_TIM_DISABLE(&m_sTIMHandle);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	6a1a      	ldr	r2, [r3, #32]
 80039ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d014      	beq.n	8003a08 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	6a1a      	ldr	r2, [r3, #32]
 80039e4:	f240 4344 	movw	r3, #1092	; 0x444
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	bf0c      	ite	eq
 80039ee:	2301      	moveq	r3, #1
 80039f0:	2300      	movne	r3, #0
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&m_sADCHandle);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3354      	adds	r3, #84	; 0x54
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fe37 	bl	8001680 <HAL_ADC_Stop_IT>

	//GPIO Deinitialization
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d212      	bcs.n	8003a48 <_ZN7QAD_ADC8imp_stopEv+0x8c>
		HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	011b      	lsls	r3, r3, #4
 8003a28:	4413      	add	r3, r2
 8003a2a:	339c      	adds	r3, #156	; 0x9c
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4413      	add	r3, r2
 8003a36:	33a0      	adds	r3, #160	; 0xa0
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	f7fe fb54 	bl	80020e8 <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	3301      	adds	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e7e6      	b.n	8003a16 <_ZN7QAD_ADC8imp_stopEv+0x5a>
	}

	//Deinitialize ADC
	HAL_ADC_DeInit(&m_sADCHandle);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3354      	adds	r3, #84	; 0x54
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7fd fd12 	bl	8001476 <HAL_ADC_DeInit>

	//Set States
	m_eState = QA_Inactive;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
}
 8003a58:	bf00      	nop
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <_ZN7QAD_ADC14imp_addChannelER19QAD_ADC_ChannelData>:


//QAD_ADC::imp_addChannel
//QAD_ADC Control Method
void QAD_ADC::imp_addChannel(QAD_ADC_ChannelData& sChannel) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]

	if (m_uChannelCount >= 16)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d825      	bhi.n	8003ac0 <_ZN7QAD_ADC14imp_addChannelER19QAD_ADC_ChannelData+0x60>
		return;

	//Check if ADC is running
  bool bStarted = false;
 8003a74:	2300      	movs	r3, #0
 8003a76:	73fb      	strb	r3, [r7, #15]
  if (m_eState) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d004      	beq.n	8003a8a <_ZN7QAD_ADC14imp_addChannelER19QAD_ADC_ChannelData+0x2a>
  	bStarted = true;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
  	imp_stop();
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7ff ff99 	bl	80039bc <_ZN7QAD_ADC8imp_stopEv>
  }

  //Update Channel Data
  m_sChannels[m_uChannelCount] = sChannel;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	3398      	adds	r3, #152	; 0x98
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4413      	add	r3, r2
 8003a98:	3304      	adds	r3, #4
 8003a9a:	6839      	ldr	r1, [r7, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff fd3e 	bl	800351e <_ZN19QAD_ADC_ChannelDataaSERKS_>
  m_uChannelCount++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c

  //Restart ADC if required
  if (bStarted) {
 8003ab2:	7bfb      	ldrb	r3, [r7, #15]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d004      	beq.n	8003ac2 <_ZN7QAD_ADC14imp_addChannelER19QAD_ADC_ChannelData+0x62>
  	imp_start();
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f7ff fe6f 	bl	800379c <_ZN7QAD_ADC9imp_startEv>
 8003abe:	e000      	b.n	8003ac2 <_ZN7QAD_ADC14imp_addChannelER19QAD_ADC_ChannelData+0x62>
		return;
 8003ac0:	bf00      	nop
  }
}
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <_ZN7QAD_ADC14imp_getDataIdxEh>:
}


//QAD_ADC::imp_getDataIdx
//QAD_ADC Data Method
uint16_t QAD_ADC::imp_getDataIdx(uint8_t uChannel) {
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	70fb      	strb	r3, [r7, #3]
	if (!m_uChannelCount)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <_ZN7QAD_ADC14imp_getDataIdxEh+0x1a>
		return 0;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e00d      	b.n	8003afe <_ZN7QAD_ADC14imp_getDataIdxEh+0x36>

	if (uChannel <= m_uChannelCount)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d806      	bhi.n	8003afc <_ZN7QAD_ADC14imp_getDataIdxEh+0x34>
		return m_uData[uChannel];
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	33cc      	adds	r3, #204	; 0xcc
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	88db      	ldrh	r3, [r3, #6]
 8003afa:	e000      	b.n	8003afe <_ZN7QAD_ADC14imp_getDataIdxEh+0x36>

	return 0;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_ZN7QAD_ADC14imp_getTriggerEv>:
	//--------------------
	//QAD_ADC Tool Methods

//QAD_ADC::imp_getTrigger
//QAD_ADC Tool Method
uint32_t QAD_ADC::imp_getTrigger(void) {
 8003b0a:	b480      	push	{r7}
 8003b0c:	b085      	sub	sp, #20
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
	uint32_t uTrigger;
	switch (m_eTimer) {
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	789b      	ldrb	r3, [r3, #2]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d002      	beq.n	8003b20 <_ZN7QAD_ADC14imp_getTriggerEv+0x16>
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d004      	beq.n	8003b28 <_ZN7QAD_ADC14imp_getTriggerEv+0x1e>
 8003b1e:	e007      	b.n	8003b30 <_ZN7QAD_ADC14imp_getTriggerEv+0x26>
		case QAD_Timer2:
			uTrigger = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003b20:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003b24:	60fb      	str	r3, [r7, #12]
			break;
 8003b26:	e006      	b.n	8003b36 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		case QAD_Timer3:
			uTrigger = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003b28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b2c:	60fb      	str	r3, [r7, #12]
			break;
 8003b2e:	e002      	b.n	8003b36 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		default:
			uTrigger = 0xFFFFFFFF;
 8003b30:	f04f 33ff 	mov.w	r3, #4294967295
 8003b34:	60fb      	str	r3, [r7, #12]
	}
	return uTrigger;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	809a      	strh	r2, [r3, #4]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	719a      	strb	r2, [r3, #6]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f841 	bl	8003bfe <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}

08003b86 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b082      	sub	sp, #8
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	889b      	ldrh	r3, [r3, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	4619      	mov	r1, r3
 8003b9a:	f7fe fb89 	bl	80022b0 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	741a      	strb	r2, [r3, #16]
}
 8003ba4:	bf00      	nop
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	889b      	ldrh	r3, [r3, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7fe fb76 	bl	80022b0 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	741a      	strb	r2, [r3, #16]
}
 8003bca:	bf00      	nop
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b082      	sub	sp, #8
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7c1b      	ldrb	r3, [r3, #16]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d005      	beq.n	8003bee <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d107      	bne.n	8003bf6 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff ffe0 	bl	8003bac <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8003bec:	e003      	b.n	8003bf6 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff ffc9 	bl	8003b86 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8003bf4:	bf00      	nop
	}
}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b088      	sub	sp, #32
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003c06:	f107 030c 	add.w	r3, r7, #12
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	889b      	ldrh	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	799b      	ldrb	r3, [r3, #6]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8003c24:	2311      	movs	r3, #17
 8003c26:	e000      	b.n	8003c2a <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f107 020c 	add.w	r2, r7, #12
 8003c40:	4611      	mov	r1, r2
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7fe f8cc 	bl	8001de0 <HAL_GPIO_Init>
}
 8003c48:	bf00      	nop
 8003c4a:	3720      	adds	r7, #32
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	f3bf 8f5b 	dmb	ish
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <_ZN11QAD_UARTMgr3getEv+0x42>
 8003c70:	4809      	ldr	r0, [pc, #36]	; (8003c98 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8003c72:	f001 f8fd 	bl	8004e70 <__cxa_guard_acquire>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	bf14      	ite	ne
 8003c7c:	2301      	movne	r3, #1
 8003c7e:	2300      	moveq	r3, #0
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <_ZN11QAD_UARTMgr3getEv+0x42>
 8003c86:	4805      	ldr	r0, [pc, #20]	; (8003c9c <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8003c88:	f000 fcf2 	bl	8004670 <_ZN11QAD_UARTMgrC1Ev>
 8003c8c:	4802      	ldr	r0, [pc, #8]	; (8003c98 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8003c8e:	f001 f8fb 	bl	8004e88 <__cxa_guard_release>
		return instance;
 8003c92:	4b02      	ldr	r3, [pc, #8]	; (8003c9c <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	20000328 	.word	0x20000328
 8003c9c:	20000304 	.word	0x20000304

08003ca0 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003caa:	79fb      	ldrb	r3, [r7, #7]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e00a      	b.n	8003cca <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8003cb4:	f7ff ffcc 	bl	8003c50 <_ZN11QAD_UARTMgr3getEv>
 8003cb8:	4601      	mov	r1, r0
 8003cba:	79fa      	ldrb	r2, [r7, #7]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	4413      	add	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	781b      	ldrb	r3, [r3, #0]
	}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	4603      	mov	r3, r0
 8003cda:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003cdc:	79fb      	ldrb	r3, [r7, #7]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	e00a      	b.n	8003cfc <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8003ce6:	f7ff ffb3 	bl	8003c50 <_ZN11QAD_UARTMgr3getEv>
 8003cea:	4601      	mov	r1, r0
 8003cec:	79fa      	ldrb	r2, [r7, #7]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	440b      	add	r3, r1
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	681b      	ldr	r3, [r3, #0]
	}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d902      	bls.n	8003d1a <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8003d14:	f06f 0309 	mvn.w	r3, #9
 8003d18:	e00b      	b.n	8003d32 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8003d1a:	f7ff ff99 	bl	8003c50 <_ZN11QAD_UARTMgr3getEv>
 8003d1e:	4601      	mov	r1, r0
 8003d20:	79fa      	ldrb	r2, [r7, #7]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b082      	sub	sp, #8
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 8003d44:	f7ff ff84 	bl	8003c50 <_ZN11QAD_UARTMgr3getEv>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	79fb      	ldrb	r3, [r7, #7]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4610      	mov	r0, r2
 8003d50:	f000 fcce 	bl	80046f0 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 8003d54:	4603      	mov	r3, r0
	}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}

08003d5e <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	4603      	mov	r3, r0
 8003d66:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8003d68:	f7ff ff72 	bl	8003c50 <_ZN11QAD_UARTMgr3getEv>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	79fb      	ldrb	r3, [r7, #7]
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 fce5 	bl	8004742 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8003d8a:	f7ff ff61 	bl	8003c50 <_ZN11QAD_UARTMgr3getEv>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	4619      	mov	r1, r3
 8003d94:	4610      	mov	r0, r2
 8003d96:	f000 fcef 	bl	8004778 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	4603      	mov	r3, r0
 8003daa:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8003dac:	f7ff ff50 	bl	8003c50 <_ZN11QAD_UARTMgr3getEv>
 8003db0:	4602      	mov	r2, r0
 8003db2:	79fb      	ldrb	r3, [r7, #7]
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 fd4c 	bl	8004854 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	785b      	ldrb	r3, [r3, #1]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff ff65 	bl	8003ca0 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	bf14      	ite	ne
 8003ddc:	2301      	movne	r3, #1
 8003dde:	2300      	moveq	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8003de6:	2302      	movs	r3, #2
 8003de8:	e012      	b.n	8003e10 <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	785b      	ldrb	r3, [r3, #1]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff ffa3 	bl	8003d3a <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f8a7 	bl	8003f48 <_ZN8QAD_UART10periphInitEv>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d004      	beq.n	8003e0e <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff ffa8 	bl	8003d5e <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3710      	adds	r7, #16
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 8003e28:	2101      	movs	r1, #1
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f924 	bl	8004078 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	785b      	ldrb	r3, [r3, #1]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7ff ff92 	bl	8003d5e <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8003e3a:	e000      	b.n	8003e3e <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8003e3c:	bf00      	nop
}
 8003e3e:	3708      	adds	r7, #8
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	331c      	adds	r3, #28
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69db      	ldr	r3, [r3, #28]
 8003e6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e72:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8003e7c:	bf00      	nop
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e9e:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f042 0220 	orr.w	r2, r2, #32
 8003eca:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f022 0220 	bic.w	r2, r2, #32
 8003ef6:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	78fa      	ldrb	r2, [r7, #3]
 8003f1e:	605a      	str	r2, [r3, #4]
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	b2db      	uxtb	r3, r3
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	370c      	adds	r7, #12
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003f50:	f107 030c 	add.w	r3, r7, #12
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8a1b      	ldrh	r3, [r3, #16]
 8003f64:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8003f66:	2302      	movs	r3, #2
 8003f68:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8003f6e:	2303      	movs	r3, #3
 8003f70:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	7c9b      	ldrb	r3, [r3, #18]
 8003f76:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f107 020c 	add.w	r2, r7, #12
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd ff2c 	bl	8001de0 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	8b1b      	ldrh	r3, [r3, #24]
 8003f8c:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8003f8e:	2302      	movs	r3, #2
 8003f90:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8003f92:	2301      	movs	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8003f96:	2303      	movs	r3, #3
 8003f98:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7e9b      	ldrb	r3, [r3, #26]
 8003f9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f107 020c 	add.w	r2, r7, #12
 8003fa8:	4611      	mov	r1, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fd ff18 	bl	8001de0 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff fee3 	bl	8003d80 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fe87 	bl	8003cd2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	220c      	movs	r2, #12
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	331c      	adds	r3, #28
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe ff8c 	bl	8002f18 <HAL_UART_Init>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8004010:	2100      	movs	r1, #0
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f830 	bl	8004078 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8004018:	2301      	movs	r3, #1
 800401a:	e029      	b.n	8004070 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800402a:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fe67 	bl	8003d04 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004036:	4603      	mov	r3, r0
 8004038:	4618      	mov	r0, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7a1b      	ldrb	r3, [r3, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	4619      	mov	r1, r3
 8004042:	f7fd fe88 	bl	8001d56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	785b      	ldrb	r3, [r3, #1]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fe5a 	bl	8003d04 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004050:	4603      	mov	r3, r0
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fe9b 	bl	8001d8e <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3720      	adds	r7, #32
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d01b      	beq.n	80040c2 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fefc 	bl	8003e88 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff25 	bl	8003ee0 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fe32 	bl	8003d04 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80040a0:	4603      	mov	r3, r0
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7fd fe81 	bl	8001daa <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b6:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	331c      	adds	r3, #28
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe ff78 	bl	8002fb2 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	785b      	ldrb	r3, [r3, #1]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fe6b 	bl	8003da2 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	8b1b      	ldrh	r3, [r3, #24]
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f7fe f806 	bl	80020e8 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8a1b      	ldrh	r3, [r3, #16]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f7fd fffe 	bl	80020e8 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	701a      	strb	r2, [r3, #0]
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <_ZN12QAD_TimerMgrC1Ev>:
//QAD_TimerMgr::QAD_TimerMgr
//QAD_TimerMgr Constructor
//
//Fills out details for the system's Tiemr peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
QAD_TimerMgr::QAD_TimerMgr() {
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 8004114:	2300      	movs	r3, #0
 8004116:	73fb      	strb	r3, [r7, #15]
 8004118:	7bfb      	ldrb	r3, [r7, #15]
 800411a:	2b07      	cmp	r3, #7
 800411c:	d830      	bhi.n	8004180 <_ZN12QAD_TimerMgrC1Ev+0x74>
  	m_sTimers[i].eState   = QAD_Timer_Unused;
 800411e:	7bfa      	ldrb	r2, [r7, #15]
 8004120:	6879      	ldr	r1, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	3301      	adds	r3, #1
 800412e:	2200      	movs	r2, #0
 8004130:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bEncoder = (i < QAD_Timer9);
 8004132:	7bfa      	ldrb	r2, [r7, #15]
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b04      	cmp	r3, #4
 8004138:	bf94      	ite	ls
 800413a:	2301      	movls	r3, #1
 800413c:	2300      	movhi	r3, #0
 800413e:	b2d8      	uxtb	r0, r3
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	330a      	adds	r3, #10
 800414e:	4602      	mov	r2, r0
 8004150:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bADC     = ((i == QAD_Timer2) || (i == QAD_Timer3));
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d002      	beq.n	800415e <_ZN12QAD_TimerMgrC1Ev+0x52>
 8004158:	7bfb      	ldrb	r3, [r7, #15]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d101      	bne.n	8004162 <_ZN12QAD_TimerMgrC1Ev+0x56>
 800415e:	2001      	movs	r0, #1
 8004160:	e000      	b.n	8004164 <_ZN12QAD_TimerMgrC1Ev+0x58>
 8004162:	2000      	movs	r0, #0
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	330b      	adds	r3, #11
 8004174:	4602      	mov	r2, r0
 8004176:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	3301      	adds	r3, #1
 800417c:	73fb      	strb	r3, [r7, #15]
 800417e:	e7cb      	b.n	8004118 <_ZN12QAD_TimerMgrC1Ev+0xc>
  }

  //Set Timer Periph ID
  m_sTimers[QAD_Timer1].eTimer  = QAD_Timer1;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
  m_sTimers[QAD_Timer2].eTimer  = QAD_Timer2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	751a      	strb	r2, [r3, #20]
  m_sTimers[QAD_Timer3].eTimer  = QAD_Timer3;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  m_sTimers[QAD_Timer4].eTimer  = QAD_Timer4;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2203      	movs	r2, #3
 8004198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  m_sTimers[QAD_Timer5].eTimer  = QAD_Timer5;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2204      	movs	r2, #4
 80041a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  m_sTimers[QAD_Timer9].eTimer  = QAD_Timer9;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2205      	movs	r2, #5
 80041a8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  m_sTimers[QAD_Timer10].eTimer = QAD_Timer10;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2206      	movs	r2, #6
 80041b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  m_sTimers[QAD_Timer11].eTimer = QAD_Timer11;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2207      	movs	r2, #7
 80041b8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	//Set clock speeds
	m_sTimers[QAD_Timer1].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 80041bc:	f7fe fcf2 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80041c0:	4602      	mov	r2, r0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	605a      	str	r2, [r3, #4]
	m_sTimers[QAD_Timer2].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 80041c6:	f7fe fcd9 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80041ca:	4603      	mov	r3, r0
 80041cc:	005a      	lsls	r2, r3, #1
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	619a      	str	r2, [r3, #24]
	m_sTimers[QAD_Timer3].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 80041d2:	f7fe fcd3 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80041d6:	4603      	mov	r3, r0
 80041d8:	005a      	lsls	r2, r3, #1
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sTimers[QAD_Timer4].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 80041de:	f7fe fccd 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80041e2:	4603      	mov	r3, r0
 80041e4:	005a      	lsls	r2, r3, #1
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40
	m_sTimers[QAD_Timer5].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 80041ea:	f7fe fcc7 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 80041ee:	4603      	mov	r3, r0
 80041f0:	005a      	lsls	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
	m_sTimers[QAD_Timer9].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 80041f6:	f7fe fcd5 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	669a      	str	r2, [r3, #104]	; 0x68
	m_sTimers[QAD_Timer10].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 8004200:	f7fe fcd0 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 8004204:	4602      	mov	r2, r0
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sTimers[QAD_Timer11].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 800420a:	f7fe fccb 	bl	8002ba4 <HAL_RCC_GetPCLK2Freq>
 800420e:	4602      	mov	r2, r0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//Set types
	m_sTimers[QAD_Timer1].eType  = QAD_Timer_16bit;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	721a      	strb	r2, [r3, #8]
	m_sTimers[QAD_Timer2].eType  = QAD_Timer_32bit;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	771a      	strb	r2, [r3, #28]
	m_sTimers[QAD_Timer3].eType  = QAD_Timer_16bit;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sTimers[QAD_Timer4].eType  = QAD_Timer_16bit;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sTimers[QAD_Timer5].eType  = QAD_Timer_32bit;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	m_sTimers[QAD_Timer9].eType  = QAD_Timer_16bit;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sTimers[QAD_Timer10].eType = QAD_Timer_16bit;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	m_sTimers[QAD_Timer11].eType = QAD_Timer_16bit;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

	//Set channel counts
	m_sTimers[QAD_Timer1].uChannels  = 4;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2204      	movs	r2, #4
 8004256:	725a      	strb	r2, [r3, #9]
	m_sTimers[QAD_Timer2].uChannels  = 4;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2204      	movs	r2, #4
 800425c:	775a      	strb	r2, [r3, #29]
	m_sTimers[QAD_Timer3].uChannels  = 4;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2204      	movs	r2, #4
 8004262:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	m_sTimers[QAD_Timer4].uChannels  = 4;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2204      	movs	r2, #4
 800426a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	m_sTimers[QAD_Timer5].uChannels  = 4;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2204      	movs	r2, #4
 8004272:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	m_sTimers[QAD_Timer9].uChannels  = 2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2202      	movs	r2, #2
 800427a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	m_sTimers[QAD_Timer10].uChannels = 1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	m_sTimers[QAD_Timer11].uChannels = 1;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	//Set Instances
	m_sTimers[QAD_Timer1].pInstance  = TIM1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a1e      	ldr	r2, [pc, #120]	; (800430c <_ZN12QAD_TimerMgrC1Ev+0x200>)
 8004292:	60da      	str	r2, [r3, #12]
	m_sTimers[QAD_Timer2].pInstance  = TIM2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800429a:	621a      	str	r2, [r3, #32]
	m_sTimers[QAD_Timer3].pInstance  = TIM3;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <_ZN12QAD_TimerMgrC1Ev+0x204>)
 80042a0:	635a      	str	r2, [r3, #52]	; 0x34
	m_sTimers[QAD_Timer4].pInstance  = TIM4;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a1b      	ldr	r2, [pc, #108]	; (8004314 <_ZN12QAD_TimerMgrC1Ev+0x208>)
 80042a6:	649a      	str	r2, [r3, #72]	; 0x48
	m_sTimers[QAD_Timer5].pInstance  = TIM5;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a1b      	ldr	r2, [pc, #108]	; (8004318 <_ZN12QAD_TimerMgrC1Ev+0x20c>)
 80042ac:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sTimers[QAD_Timer9].pInstance  = TIM9;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a1a      	ldr	r2, [pc, #104]	; (800431c <_ZN12QAD_TimerMgrC1Ev+0x210>)
 80042b2:	671a      	str	r2, [r3, #112]	; 0x70
	m_sTimers[QAD_Timer10].pInstance = TIM10;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1a      	ldr	r2, [pc, #104]	; (8004320 <_ZN12QAD_TimerMgrC1Ev+0x214>)
 80042b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	m_sTimers[QAD_Timer11].pInstance = TIM11;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a19      	ldr	r2, [pc, #100]	; (8004324 <_ZN12QAD_TimerMgrC1Ev+0x218>)
 80042c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	//Set Update IRQs
	m_sTimers[QAD_Timer1].eIRQ_Update  = TIM1_UP_TIM10_IRQn;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2219      	movs	r2, #25
 80042c8:	741a      	strb	r2, [r3, #16]
	m_sTimers[QAD_Timer2].eIRQ_Update  = TIM2_IRQn;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	221c      	movs	r2, #28
 80042ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sTimers[QAD_Timer3].eIRQ_Update  = TIM3_IRQn;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	221d      	movs	r2, #29
 80042d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sTimers[QAD_Timer4].eIRQ_Update  = TIM4_IRQn;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	221e      	movs	r2, #30
 80042de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	m_sTimers[QAD_Timer5].eIRQ_Update  = TIM5_IRQn;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2232      	movs	r2, #50	; 0x32
 80042e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_sTimers[QAD_Timer9].eIRQ_Update  = TIM1_BRK_TIM9_IRQn;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2218      	movs	r2, #24
 80042ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sTimers[QAD_Timer10].eIRQ_Update = TIM1_UP_TIM10_IRQn;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2219      	movs	r2, #25
 80042f6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	m_sTimers[QAD_Timer11].eIRQ_Update = TIM1_TRG_COM_TIM11_IRQn;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	221a      	movs	r2, #26
 80042fe:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

}
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40010000 	.word	0x40010000
 8004310:	40000400 	.word	0x40000400
 8004314:	40000800 	.word	0x40000800
 8004318:	40000c00 	.word	0x40000c00
 800431c:	40014000 	.word	0x40014000
 8004320:	40014400 	.word	0x40014400
 8004324:	40014800 	.word	0x40014800

08004328 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
//         QAD_Timer_InUse_PWM     - Specifies timer as being used to generate PWM signals
//         QAD_Timer_InUse_ADC     - Specifies timer as being used to trigger ADC conversions
//Returns QA_OK if registration is successful.
//        QA_Fail if eState is set to QAD_Timer_Unused.
//        QA_Error_PeriphBusy if selected Timer is already in use
QA_Result QAD_TimerMgr::imp_registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
 8004334:	4613      	mov	r3, r2
 8004336:	70bb      	strb	r3, [r7, #2]
  if (m_sTimers[eTimer].eState)
 8004338:	78fa      	ldrb	r2, [r7, #3]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3301      	adds	r3, #1
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x2a>
  	return QA_Error_PeriphBusy;
 800434e:	2302      	movs	r3, #2
 8004350:	e00f      	b.n	8004372 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  if (!eState)
 8004352:	78bb      	ldrb	r3, [r7, #2]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d101      	bne.n	800435c <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x34>
  	return QA_Fail;
 8004358:	2301      	movs	r3, #1
 800435a:	e00a      	b.n	8004372 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  m_sTimers[eTimer].eState = eState;
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	3301      	adds	r3, #1
 800436c:	78ba      	ldrb	r2, [r7, #2]
 800436e:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	370c      	adds	r7, #12
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr

0800437e <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>:
//QAD_TimerMgr Management Method
//
//To be called from static method registerTimer()
//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
//eTimer - The Timer peripheral to be deregistered. A member of QAD_Timer_Periph
void QAD_TimerMgr::imp_deregisterTimer(QAD_Timer_Periph eTimer) {
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
  m_sTimers[eTimer].eState = QAD_Timer_Unused;
 800438a:	78fa      	ldrb	r2, [r7, #3]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3301      	adds	r3, #1
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by enableClock()
//Used to enable the clock for a specific Timer peripheral
//eTimer - the Timer peripheral to enable the clock for
void QAD_TimerMgr::imp_enableClock(QAD_Timer_Periph eTimer) {
 80043ac:	b480      	push	{r7}
 80043ae:	b08b      	sub	sp, #44	; 0x2c
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	f200 80ef 	bhi.w	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
 80043c0:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1c>)
 80043c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c6:	bf00      	nop
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	08004423 	.word	0x08004423
 80043d0:	08004459 	.word	0x08004459
 80043d4:	0800448f 	.word	0x0800448f
 80043d8:	080044c5 	.word	0x080044c5
 80043dc:	080044fb 	.word	0x080044fb
 80043e0:	08004531 	.word	0x08004531
 80043e4:	08004567 	.word	0x08004567
 80043e8:	0800459d 	.word	0x0800459d
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_ENABLE();
 80043ec:	2300      	movs	r3, #0
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
 80043f0:	4b6e      	ldr	r3, [pc, #440]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	4a6d      	ldr	r2, [pc, #436]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	6453      	str	r3, [r2, #68]	; 0x44
 80043fc:	4b6b      	ldr	r3, [pc, #428]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80043fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	627b      	str	r3, [r7, #36]	; 0x24
 8004406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_TIM1_FORCE_RESET();
 8004408:	4b68      	ldr	r3, [pc, #416]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	4a67      	ldr	r2, [pc, #412]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_TIM1_RELEASE_RESET();
 8004414:	4b65      	ldr	r3, [pc, #404]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	4a64      	ldr	r2, [pc, #400]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004420:	e0bd      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	4b61      	ldr	r3, [pc, #388]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4a60      	ldr	r2, [pc, #384]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6413      	str	r3, [r2, #64]	; 0x40
 8004432:	4b5e      	ldr	r3, [pc, #376]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	6a3b      	ldr	r3, [r7, #32]
			__HAL_RCC_TIM2_FORCE_RESET();
 800443e:	4b5b      	ldr	r3, [pc, #364]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	4a5a      	ldr	r2, [pc, #360]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM2_RELEASE_RESET();
 800444a:	4b58      	ldr	r3, [pc, #352]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800444c:	6a1b      	ldr	r3, [r3, #32]
 800444e:	4a57      	ldr	r2, [pc, #348]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6213      	str	r3, [r2, #32]
      break;
 8004456:	e0a2      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_ENABLE();
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	4b53      	ldr	r3, [pc, #332]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	4a52      	ldr	r2, [pc, #328]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004462:	f043 0302 	orr.w	r3, r3, #2
 8004466:	6413      	str	r3, [r2, #64]	; 0x40
 8004468:	4b50      	ldr	r3, [pc, #320]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	69fb      	ldr	r3, [r7, #28]
			__HAL_RCC_TIM3_FORCE_RESET();
 8004474:	4b4d      	ldr	r3, [pc, #308]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800447a:	f043 0302 	orr.w	r3, r3, #2
 800447e:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM3_RELEASE_RESET();
 8004480:	4b4a      	ldr	r3, [pc, #296]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	4a49      	ldr	r2, [pc, #292]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004486:	f023 0302 	bic.w	r3, r3, #2
 800448a:	6213      	str	r3, [r2, #32]
      break;
 800448c:	e087      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_ENABLE();
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
 8004492:	4b46      	ldr	r3, [pc, #280]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	4a45      	ldr	r2, [pc, #276]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6413      	str	r3, [r2, #64]	; 0x40
 800449e:	4b43      	ldr	r3, [pc, #268]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	69bb      	ldr	r3, [r7, #24]
			__HAL_RCC_TIM4_FORCE_RESET();
 80044aa:	4b40      	ldr	r3, [pc, #256]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	4a3f      	ldr	r2, [pc, #252]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044b0:	f043 0304 	orr.w	r3, r3, #4
 80044b4:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM4_RELEASE_RESET();
 80044b6:	4b3d      	ldr	r3, [pc, #244]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	6213      	str	r3, [r2, #32]
      break;
 80044c2:	e06c      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_ENABLE();
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]
 80044c8:	4b38      	ldr	r3, [pc, #224]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044cc:	4a37      	ldr	r2, [pc, #220]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044ce:	f043 0308 	orr.w	r3, r3, #8
 80044d2:	6413      	str	r3, [r2, #64]	; 0x40
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
			__HAL_RCC_TIM5_FORCE_RESET();
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	4a31      	ldr	r2, [pc, #196]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044e6:	f043 0308 	orr.w	r3, r3, #8
 80044ea:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM5_RELEASE_RESET();
 80044ec:	4b2f      	ldr	r3, [pc, #188]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	4a2e      	ldr	r2, [pc, #184]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80044f2:	f023 0308 	bic.w	r3, r3, #8
 80044f6:	6213      	str	r3, [r2, #32]
      break;
 80044f8:	e051      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	613b      	str	r3, [r7, #16]
 80044fe:	4b2b      	ldr	r3, [pc, #172]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004502:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6453      	str	r3, [r2, #68]	; 0x44
 800450a:	4b28      	ldr	r3, [pc, #160]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800450c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_TIM9_FORCE_RESET();
 8004516:	4b25      	ldr	r3, [pc, #148]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	4a24      	ldr	r2, [pc, #144]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800451c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004520:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM9_RELEASE_RESET();
 8004522:	4b22      	ldr	r3, [pc, #136]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	4a21      	ldr	r2, [pc, #132]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800452c:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800452e:	e036      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_ENABLE();
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	4a1c      	ldr	r2, [pc, #112]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800453a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453e:	6453      	str	r3, [r2, #68]	; 0x44
 8004540:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	68fb      	ldr	r3, [r7, #12]
			__HAL_RCC_TIM10_FORCE_RESET();
 800454c:	4b17      	ldr	r3, [pc, #92]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	4a16      	ldr	r2, [pc, #88]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004556:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM10_RELEASE_RESET();
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	4a13      	ldr	r2, [pc, #76]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800455e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004562:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004564:	e01b      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_ENABLE();
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
 800456a:	4b10      	ldr	r3, [pc, #64]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a0f      	ldr	r2, [pc, #60]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
			__HAL_RCC_TIM11_FORCE_RESET();
 8004582:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	4a09      	ldr	r2, [pc, #36]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458c:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM11_RELEASE_RESET();
 800458e:	4b07      	ldr	r3, [pc, #28]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	4a06      	ldr	r2, [pc, #24]	; (80045ac <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004598:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800459a:	e000      	b.n	800459e <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_TimerNone):
    	break;
 800459c:	bf00      	nop
  }
}
 800459e:	bf00      	nop
 80045a0:	372c      	adds	r7, #44	; 0x2c
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40023800 	.word	0x40023800

080045b0 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by disableClock()
//Used to disable the clock for a specific Timer peripheral
//eTimer - The timer peripheral to disable the clock for
void QAD_TimerMgr::imp_disableClock(QAD_Timer_Periph eTimer) {
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 80045bc:	78fb      	ldrb	r3, [r7, #3]
 80045be:	2b08      	cmp	r3, #8
 80045c0:	d84d      	bhi.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0x18>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	080045ed 	.word	0x080045ed
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	08004609 	.word	0x08004609
 80045d4:	08004617 	.word	0x08004617
 80045d8:	08004625 	.word	0x08004625
 80045dc:	08004633 	.word	0x08004633
 80045e0:	08004641 	.word	0x08004641
 80045e4:	0800464f 	.word	0x0800464f
 80045e8:	0800465d 	.word	0x0800465d
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_DISABLE();
 80045ec:	4b1f      	ldr	r3, [pc, #124]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80045ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80045f2:	f023 0301 	bic.w	r3, r3, #1
 80045f6:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80045f8:	e031      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_DISABLE();
 80045fa:	4b1c      	ldr	r3, [pc, #112]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	4a1b      	ldr	r2, [pc, #108]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004606:	e02a      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_DISABLE();
 8004608:	4b18      	ldr	r3, [pc, #96]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 800460a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460c:	4a17      	ldr	r2, [pc, #92]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 800460e:	f023 0302 	bic.w	r3, r3, #2
 8004612:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004614:	e023      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_DISABLE();
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a14      	ldr	r2, [pc, #80]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 800461c:	f023 0304 	bic.w	r3, r3, #4
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004622:	e01c      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_DISABLE();
 8004624:	4b11      	ldr	r3, [pc, #68]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004628:	4a10      	ldr	r2, [pc, #64]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 800462a:	f023 0308 	bic.w	r3, r3, #8
 800462e:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004630:	e015      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_DISABLE();
 8004632:	4b0e      	ldr	r3, [pc, #56]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	4a0d      	ldr	r2, [pc, #52]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800463c:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800463e:	e00e      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_DISABLE();
 8004640:	4b0a      	ldr	r3, [pc, #40]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004644:	4a09      	ldr	r2, [pc, #36]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004646:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800464a:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800464c:	e007      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_DISABLE();
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004652:	4a06      	ldr	r2, [pc, #24]	; (800466c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004654:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004658:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800465a:	e000      	b.n	800465e <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_TimerNone):
    	break;
 800465c:	bf00      	nop
  }
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004678:	2300      	movs	r3, #0
 800467a:	73fb      	strb	r3, [r7, #15]
 800467c:	7bfb      	ldrb	r3, [r7, #15]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d80d      	bhi.n	800469e <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8004682:	7bfa      	ldrb	r2, [r7, #15]
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3301      	adds	r3, #1
 8004692:	2200      	movs	r2, #0
 8004694:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004696:	7bfb      	ldrb	r3, [r7, #15]
 8004698:	3301      	adds	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e7ee      	b.n	800467c <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2202      	movs	r2, #2
 80046ae:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <_ZN11QAD_UARTMgrC1Ev+0x74>)
 80046b4:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a0b      	ldr	r2, [pc, #44]	; (80046e8 <_ZN11QAD_UARTMgrC1Ev+0x78>)
 80046ba:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 80046c0:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2225      	movs	r2, #37	; 0x25
 80046c6:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2226      	movs	r2, #38	; 0x26
 80046cc:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2247      	movs	r2, #71	; 0x47
 80046d2:	f883 2020 	strb.w	r2, [r3, #32]

}
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4618      	mov	r0, r3
 80046da:	3714      	adds	r7, #20
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	40011000 	.word	0x40011000
 80046e8:	40004400 	.word	0x40004400
 80046ec:	40011400 	.word	0x40011400

080046f0 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8004702:	2301      	movs	r3, #1
 8004704:	e017      	b.n	8004736 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	4413      	add	r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	3301      	adds	r3, #1
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 800471c:	2302      	movs	r3, #2
 800471e:	e00a      	b.n	8004736 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3301      	adds	r3, #1
 8004730:	2201      	movs	r2, #1
 8004732:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8004742:	b480      	push	{r7}
 8004744:	b083      	sub	sp, #12
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d80a      	bhi.n	800476a <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4413      	add	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	3301      	adds	r3, #1
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
 8004768:	e000      	b.n	800476c <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 800476a:	bf00      	nop
}
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
	...

08004778 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	460b      	mov	r3, r1
 8004782:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	2b03      	cmp	r3, #3
 8004788:	d85c      	bhi.n	8004844 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a1 	.word	0x080047a1
 8004794:	080047d7 	.word	0x080047d7
 8004798:	0800480d 	.word	0x0800480d
 800479c:	08004843 	.word	0x08004843
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 80047a0:	2300      	movs	r3, #0
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a8:	4a29      	ldr	r2, [pc, #164]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047aa:	f043 0310 	orr.w	r3, r3, #16
 80047ae:	6453      	str	r3, [r2, #68]	; 0x44
 80047b0:	4b27      	ldr	r3, [pc, #156]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	617b      	str	r3, [r7, #20]
 80047ba:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	4a23      	ldr	r2, [pc, #140]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047c2:	f043 0310 	orr.w	r3, r3, #16
 80047c6:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 80047c8:	4b21      	ldr	r3, [pc, #132]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	4a20      	ldr	r2, [pc, #128]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047ce:	f023 0310 	bic.w	r3, r3, #16
 80047d2:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 80047d4:	e036      	b.n	8004844 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	4a1c      	ldr	r2, [pc, #112]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047e4:	6413      	str	r3, [r2, #64]	; 0x40
 80047e6:	4b1a      	ldr	r3, [pc, #104]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4a16      	ldr	r2, [pc, #88]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80047f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fc:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	4a13      	ldr	r2, [pc, #76]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004804:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004808:	6213      	str	r3, [r2, #32]
      break;
 800480a:	e01b      	b.n	8004844 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004814:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004816:	f043 0320 	orr.w	r3, r3, #32
 800481a:	6453      	str	r3, [r2, #68]	; 0x44
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800482e:	f043 0320 	orr.w	r3, r3, #32
 8004832:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	4a05      	ldr	r2, [pc, #20]	; (8004850 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800483a:	f023 0320 	bic.w	r3, r3, #32
 800483e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004840:	e000      	b.n	8004844 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 8004842:	bf00      	nop
  }
}
 8004844:	bf00      	nop
 8004846:	371c      	adds	r7, #28
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	40023800 	.word	0x40023800

08004854 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	2b03      	cmp	r3, #3
 8004864:	d820      	bhi.n	80048a8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	0800487d 	.word	0x0800487d
 8004870:	0800488b 	.word	0x0800488b
 8004874:	08004899 	.word	0x08004899
 8004878:	080048a7 	.word	0x080048a7
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	4a0c      	ldr	r2, [pc, #48]	; (80048b4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004882:	f023 0310 	bic.w	r3, r3, #16
 8004886:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004888:	e00e      	b.n	80048a8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8004890:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004894:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004896:	e007      	b.n	80048a8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8004898:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	4a05      	ldr	r2, [pc, #20]	; (80048b4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800489e:	f023 0320 	bic.w	r3, r3, #32
 80048a2:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80048a4:	e000      	b.n	80048a8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 80048a6:	bf00      	nop
  }
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40023800 	.word	0x40023800

080048b8 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	7b1b      	ldrb	r3, [r3, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e010      	b.n	80048f0 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	4603      	mov	r3, r0
 80048dc:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 80048de:	7bfb      	ldrb	r3, [r7, #15]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	e003      	b.n	80048f0 <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3308      	adds	r3, #8
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6839      	ldr	r1, [r7, #0]
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	4798      	blx	r3
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8004922:	6838      	ldr	r0, [r7, #0]
 8004924:	f7fb fc5c 	bl	80001e0 <strlen>
 8004928:	4603      	mov	r3, r0
 800492a:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800492c:	2300      	movs	r3, #0
 800492e:	81fb      	strh	r3, [r7, #14]
 8004930:	89fa      	ldrh	r2, [r7, #14]
 8004932:	89bb      	ldrh	r3, [r7, #12]
 8004934:	429a      	cmp	r2, r3
 8004936:	d20f      	bcs.n	8004958 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4618      	mov	r0, r3
 800493e:	f000 f837 	bl	80049b0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004942:	89fb      	ldrh	r3, [r7, #14]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	4413      	add	r3, r2
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	4619      	mov	r1, r3
 800494c:	f000 f9e1 	bl	8004d12 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8004950:	89fb      	ldrh	r3, [r7, #14]
 8004952:	3301      	adds	r3, #1
 8004954:	81fb      	strh	r3, [r7, #14]
 8004956:	e7eb      	b.n	8004930 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	3304      	adds	r3, #4
 800495c:	4618      	mov	r0, r3
 800495e:	f000 f827 	bl	80049b0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004962:	4603      	mov	r3, r0
 8004964:	210d      	movs	r1, #13
 8004966:	4618      	mov	r0, r3
 8004968:	f000 f9d3 	bl	8004d12 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	330c      	adds	r3, #12
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	4798      	blx	r3
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	3304      	adds	r3, #4
 800498c:	4618      	mov	r0, r3
 800498e:	f000 f80f 	bl	80049b0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004992:	4603      	mov	r3, r0
 8004994:	210d      	movs	r1, #13
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f9bb 	bl	8004d12 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	4798      	blx	r3
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
	return get();
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f805 	bl	80049c8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 80049be:	4603      	mov	r3, r0
      }
 80049c0:	4618      	mov	r0, r3
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f805 	bl	80049e2 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80049d8:	4603      	mov	r3, r0
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 f806 	bl	80049fe <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80049f2:	4603      	mov	r3, r0
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 f805 	bl	8004a18 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b082      	sub	sp, #8
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f805 	bl	8004a30 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f805 	bl	8004a4a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}

08004a4a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004a4a:	b480      	push	{r7}
 8004a4c:	b083      	sub	sp, #12
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3314      	adds	r3, #20
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f8e4 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004a74:	4603      	mov	r3, r0
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff f9a4 	bl	8003dc4 <_ZN8QAD_UART4initEv>
 8004a7c:	4603      	mov	r3, r0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3314      	adds	r3, #20
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f8d2 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff f9bc 	bl	8003e18 <_ZN8QAD_UART6deinitEv>
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b095      	sub	sp, #84	; 0x54
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	3314      	adds	r3, #20
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f8c0 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004abc:	4603      	mov	r3, r0
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff f9c0 	bl	8003e44 <_ZN8QAD_UART9getHandleEv>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	f107 0308 	add.w	r3, r7, #8
 8004aca:	4611      	mov	r1, r2
 8004acc:	2244      	movs	r2, #68	; 0x44
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fa48 	bl	8004f64 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0320 	and.w	r3, r3, #32
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d01f      	beq.n	8004b2a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3314      	adds	r3, #20
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 f8a4 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004af4:	4603      	mov	r3, r0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff fa18 	bl	8003f2c <_ZN8QAD_UART6dataRXEv>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	7b9b      	ldrb	r3, [r3, #14]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00b      	beq.n	8004b22 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	3308      	adds	r3, #8
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff ff4e 	bl	80049b0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004b14:	4602      	mov	r2, r0
 8004b16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	4610      	mov	r0, r2
 8004b1e:	f000 f8f8 	bl	8004d12 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	f06f 0220 	mvn.w	r2, #32
 8004b28:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b32:	2b80      	cmp	r3, #128	; 0x80
 8004b34:	bf0c      	ite	eq
 8004b36:	2301      	moveq	r3, #1
 8004b38:	2300      	movne	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d035      	beq.n	8004bac <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3304      	adds	r3, #4
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff ff33 	bl	80049b0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 f8cd 	bl	8004cec <_ZN14QAT_FIFOBuffer5emptyEv>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf0c      	ite	eq
 8004b58:	2301      	moveq	r3, #1
 8004b5a:	2300      	movne	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d014      	beq.n	8004b8c <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3314      	adds	r3, #20
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 f868 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff ff1c 	bl	80049b0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f8ed 	bl	8004d5a <_ZN14QAT_FIFOBuffer3popEv>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4619      	mov	r1, r3
 8004b84:	4620      	mov	r0, r4
 8004b86:	f7ff f9c1 	bl	8003f0c <_ZN8QAD_UART6dataTXEh>
 8004b8a:	e00b      	b.n	8004ba4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3314      	adds	r3, #20
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 f853 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004b96:	4603      	mov	r3, r0
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff f975 	bl	8003e88 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004baa:	601a      	str	r2, [r3, #0]
  }
}
 8004bac:	bf00      	nop
 8004bae:	3754      	adds	r7, #84	; 0x54
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd90      	pop	{r4, r7, pc}

08004bb4 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3314      	adds	r3, #20
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 f83b 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff f947 	bl	8003e5c <_ZN8QAD_UART7startTXEv>
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	3314      	adds	r3, #20
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f82a 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff f94c 	bl	8003e88 <_ZN8QAD_UART6stopTXEv>
}
 8004bf0:	bf00      	nop
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3314      	adds	r3, #20
 8004c04:	4618      	mov	r0, r3
 8004c06:	f000 f819 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff f951 	bl	8003eb4 <_ZN8QAD_UART7startRXEv>
}
 8004c12:	bf00      	nop
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b082      	sub	sp, #8
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	3314      	adds	r3, #20
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f808 	bl	8004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff f956 	bl	8003ee0 <_ZN8QAD_UART6stopRXEv>
}
 8004c34:	bf00      	nop
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	return get();
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f805 	bl	8004c54 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8004c4a:	4603      	mov	r3, r0
      }
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 f805 	bl	8004c6e <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4618      	mov	r0, r3
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f806 	bl	8004c8a <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	3708      	adds	r7, #8
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b082      	sub	sp, #8
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 f805 	bl	8004ca4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f805 	bl	8004cbc <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f805 	bl	8004cd6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004cd6:	b480      	push	{r7}
 8004cd8:	b083      	sub	sp, #12
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	88da      	ldrh	r2, [r3, #6]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	891b      	ldrh	r3, [r3, #8]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d101      	bne.n	8004d04 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b082      	sub	sp, #8
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	891b      	ldrh	r3, [r3, #8]
 8004d24:	4619      	mov	r1, r3
 8004d26:	4610      	mov	r0, r2
 8004d28:	f000 f847 	bl	8004dba <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	78fb      	ldrb	r3, [r7, #3]
 8004d30:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	889a      	ldrh	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	891b      	ldrh	r3, [r3, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d906      	bls.n	8004d4c <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	891b      	ldrh	r3, [r3, #8]
 8004d42:	3301      	adds	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8004d4a:	e002      	b.n	8004d52 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	811a      	strh	r2, [r3, #8]
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff ffc2 	bl	8004cec <_ZN14QAT_FIFOBuffer5emptyEv>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01b      	beq.n	8004db0 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	88db      	ldrh	r3, [r3, #6]
 8004d7e:	4619      	mov	r1, r3
 8004d80:	4610      	mov	r0, r2
 8004d82:	f000 f81a 	bl	8004dba <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8004d86:	4603      	mov	r3, r0
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	889a      	ldrh	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	88db      	ldrh	r3, [r3, #6]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d906      	bls.n	8004da6 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	88db      	ldrh	r3, [r3, #6]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	80da      	strh	r2, [r3, #6]
 8004da4:	e002      	b.n	8004dac <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	80da      	strh	r2, [r3, #6]
		return uData;
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	e000      	b.n	8004db2 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	6039      	str	r1, [r7, #0]
	return get()[__i];
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f807 	bl	8004dd8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	4413      	add	r3, r2
      }
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f805 	bl	8004df2 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 f806 	bl	8004e0e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8004e02:	4603      	mov	r3, r0
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f805 	bl	8004e28 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4618      	mov	r0, r3
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f805 	bl	8004e40 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8004e36:	4603      	mov	r3, r0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f805 	bl	8004e5a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4618      	mov	r0, r3
 8004e54:	3708      	adds	r7, #8
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <__cxa_guard_acquire>:
 8004e70:	6803      	ldr	r3, [r0, #0]
 8004e72:	07db      	lsls	r3, r3, #31
 8004e74:	d406      	bmi.n	8004e84 <__cxa_guard_acquire+0x14>
 8004e76:	7843      	ldrb	r3, [r0, #1]
 8004e78:	b103      	cbz	r3, 8004e7c <__cxa_guard_acquire+0xc>
 8004e7a:	deff      	udf	#255	; 0xff
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	7043      	strb	r3, [r0, #1]
 8004e80:	4618      	mov	r0, r3
 8004e82:	4770      	bx	lr
 8004e84:	2000      	movs	r0, #0
 8004e86:	4770      	bx	lr

08004e88 <__cxa_guard_release>:
 8004e88:	2301      	movs	r3, #1
 8004e8a:	6003      	str	r3, [r0, #0]
 8004e8c:	4770      	bx	lr

08004e8e <_Znwj>:
 8004e8e:	2801      	cmp	r0, #1
 8004e90:	bf38      	it	cc
 8004e92:	2001      	movcc	r0, #1
 8004e94:	b510      	push	{r4, lr}
 8004e96:	4604      	mov	r4, r0
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 f85b 	bl	8004f54 <malloc>
 8004e9e:	b930      	cbnz	r0, 8004eae <_Znwj+0x20>
 8004ea0:	f000 f81e 	bl	8004ee0 <_ZSt15get_new_handlerv>
 8004ea4:	b908      	cbnz	r0, 8004eaa <_Znwj+0x1c>
 8004ea6:	f000 f823 	bl	8004ef0 <abort>
 8004eaa:	4780      	blx	r0
 8004eac:	e7f4      	b.n	8004e98 <_Znwj+0xa>
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <_Znaj>:
 8004eb0:	f7ff bfed 	b.w	8004e8e <_Znwj>

08004eb4 <__cxa_pure_virtual>:
 8004eb4:	b508      	push	{r3, lr}
 8004eb6:	f000 f80d 	bl	8004ed4 <_ZSt9terminatev>

08004eba <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004eba:	b508      	push	{r3, lr}
 8004ebc:	4780      	blx	r0
 8004ebe:	f000 f817 	bl	8004ef0 <abort>
	...

08004ec4 <_ZSt13get_terminatev>:
 8004ec4:	4b02      	ldr	r3, [pc, #8]	; (8004ed0 <_ZSt13get_terminatev+0xc>)
 8004ec6:	6818      	ldr	r0, [r3, #0]
 8004ec8:	f3bf 8f5b 	dmb	ish
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	2000000c 	.word	0x2000000c

08004ed4 <_ZSt9terminatev>:
 8004ed4:	b508      	push	{r3, lr}
 8004ed6:	f7ff fff5 	bl	8004ec4 <_ZSt13get_terminatev>
 8004eda:	f7ff ffee 	bl	8004eba <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08004ee0 <_ZSt15get_new_handlerv>:
 8004ee0:	4b02      	ldr	r3, [pc, #8]	; (8004eec <_ZSt15get_new_handlerv+0xc>)
 8004ee2:	6818      	ldr	r0, [r3, #0]
 8004ee4:	f3bf 8f5b 	dmb	ish
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	2000032c 	.word	0x2000032c

08004ef0 <abort>:
 8004ef0:	b508      	push	{r3, lr}
 8004ef2:	2006      	movs	r0, #6
 8004ef4:	f000 f92e 	bl	8005154 <raise>
 8004ef8:	2001      	movs	r0, #1
 8004efa:	f7fc f9d7 	bl	80012ac <_exit>
	...

08004f00 <__errno>:
 8004f00:	4b01      	ldr	r3, [pc, #4]	; (8004f08 <__errno+0x8>)
 8004f02:	6818      	ldr	r0, [r3, #0]
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000010 	.word	0x20000010

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4d0d      	ldr	r5, [pc, #52]	; (8004f44 <__libc_init_array+0x38>)
 8004f10:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f12:	1b64      	subs	r4, r4, r5
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	2600      	movs	r6, #0
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	4d0b      	ldr	r5, [pc, #44]	; (8004f4c <__libc_init_array+0x40>)
 8004f1e:	4c0c      	ldr	r4, [pc, #48]	; (8004f50 <__libc_init_array+0x44>)
 8004f20:	f000 fc9a 	bl	8005858 <_init>
 8004f24:	1b64      	subs	r4, r4, r5
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	2600      	movs	r6, #0
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	080059a0 	.word	0x080059a0
 8004f48:	080059a0 	.word	0x080059a0
 8004f4c:	080059a0 	.word	0x080059a0
 8004f50:	080059a4 	.word	0x080059a4

08004f54 <malloc>:
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <malloc+0xc>)
 8004f56:	4601      	mov	r1, r0
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f000 b869 	b.w	8005030 <_malloc_r>
 8004f5e:	bf00      	nop
 8004f60:	20000010 	.word	0x20000010

08004f64 <memcpy>:
 8004f64:	440a      	add	r2, r1
 8004f66:	4291      	cmp	r1, r2
 8004f68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f6c:	d100      	bne.n	8004f70 <memcpy+0xc>
 8004f6e:	4770      	bx	lr
 8004f70:	b510      	push	{r4, lr}
 8004f72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f7a:	4291      	cmp	r1, r2
 8004f7c:	d1f9      	bne.n	8004f72 <memcpy+0xe>
 8004f7e:	bd10      	pop	{r4, pc}

08004f80 <memset>:
 8004f80:	4402      	add	r2, r0
 8004f82:	4603      	mov	r3, r0
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d100      	bne.n	8004f8a <memset+0xa>
 8004f88:	4770      	bx	lr
 8004f8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004f8e:	e7f9      	b.n	8004f84 <memset+0x4>

08004f90 <_free_r>:
 8004f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f92:	2900      	cmp	r1, #0
 8004f94:	d048      	beq.n	8005028 <_free_r+0x98>
 8004f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9a:	9001      	str	r0, [sp, #4]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8004fa2:	bfb8      	it	lt
 8004fa4:	18e4      	addlt	r4, r4, r3
 8004fa6:	f000 f911 	bl	80051cc <__malloc_lock>
 8004faa:	4a20      	ldr	r2, [pc, #128]	; (800502c <_free_r+0x9c>)
 8004fac:	9801      	ldr	r0, [sp, #4]
 8004fae:	6813      	ldr	r3, [r2, #0]
 8004fb0:	4615      	mov	r5, r2
 8004fb2:	b933      	cbnz	r3, 8004fc2 <_free_r+0x32>
 8004fb4:	6063      	str	r3, [r4, #4]
 8004fb6:	6014      	str	r4, [r2, #0]
 8004fb8:	b003      	add	sp, #12
 8004fba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fbe:	f000 b90b 	b.w	80051d8 <__malloc_unlock>
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	d90b      	bls.n	8004fde <_free_r+0x4e>
 8004fc6:	6821      	ldr	r1, [r4, #0]
 8004fc8:	1862      	adds	r2, r4, r1
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	bf04      	itt	eq
 8004fce:	681a      	ldreq	r2, [r3, #0]
 8004fd0:	685b      	ldreq	r3, [r3, #4]
 8004fd2:	6063      	str	r3, [r4, #4]
 8004fd4:	bf04      	itt	eq
 8004fd6:	1852      	addeq	r2, r2, r1
 8004fd8:	6022      	streq	r2, [r4, #0]
 8004fda:	602c      	str	r4, [r5, #0]
 8004fdc:	e7ec      	b.n	8004fb8 <_free_r+0x28>
 8004fde:	461a      	mov	r2, r3
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	b10b      	cbz	r3, 8004fe8 <_free_r+0x58>
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	d9fa      	bls.n	8004fde <_free_r+0x4e>
 8004fe8:	6811      	ldr	r1, [r2, #0]
 8004fea:	1855      	adds	r5, r2, r1
 8004fec:	42a5      	cmp	r5, r4
 8004fee:	d10b      	bne.n	8005008 <_free_r+0x78>
 8004ff0:	6824      	ldr	r4, [r4, #0]
 8004ff2:	4421      	add	r1, r4
 8004ff4:	1854      	adds	r4, r2, r1
 8004ff6:	42a3      	cmp	r3, r4
 8004ff8:	6011      	str	r1, [r2, #0]
 8004ffa:	d1dd      	bne.n	8004fb8 <_free_r+0x28>
 8004ffc:	681c      	ldr	r4, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	6053      	str	r3, [r2, #4]
 8005002:	4421      	add	r1, r4
 8005004:	6011      	str	r1, [r2, #0]
 8005006:	e7d7      	b.n	8004fb8 <_free_r+0x28>
 8005008:	d902      	bls.n	8005010 <_free_r+0x80>
 800500a:	230c      	movs	r3, #12
 800500c:	6003      	str	r3, [r0, #0]
 800500e:	e7d3      	b.n	8004fb8 <_free_r+0x28>
 8005010:	6825      	ldr	r5, [r4, #0]
 8005012:	1961      	adds	r1, r4, r5
 8005014:	428b      	cmp	r3, r1
 8005016:	bf04      	itt	eq
 8005018:	6819      	ldreq	r1, [r3, #0]
 800501a:	685b      	ldreq	r3, [r3, #4]
 800501c:	6063      	str	r3, [r4, #4]
 800501e:	bf04      	itt	eq
 8005020:	1949      	addeq	r1, r1, r5
 8005022:	6021      	streq	r1, [r4, #0]
 8005024:	6054      	str	r4, [r2, #4]
 8005026:	e7c7      	b.n	8004fb8 <_free_r+0x28>
 8005028:	b003      	add	sp, #12
 800502a:	bd30      	pop	{r4, r5, pc}
 800502c:	20000330 	.word	0x20000330

08005030 <_malloc_r>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	1ccd      	adds	r5, r1, #3
 8005034:	f025 0503 	bic.w	r5, r5, #3
 8005038:	3508      	adds	r5, #8
 800503a:	2d0c      	cmp	r5, #12
 800503c:	bf38      	it	cc
 800503e:	250c      	movcc	r5, #12
 8005040:	2d00      	cmp	r5, #0
 8005042:	4606      	mov	r6, r0
 8005044:	db01      	blt.n	800504a <_malloc_r+0x1a>
 8005046:	42a9      	cmp	r1, r5
 8005048:	d903      	bls.n	8005052 <_malloc_r+0x22>
 800504a:	230c      	movs	r3, #12
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	2000      	movs	r0, #0
 8005050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005052:	f000 f8bb 	bl	80051cc <__malloc_lock>
 8005056:	4921      	ldr	r1, [pc, #132]	; (80050dc <_malloc_r+0xac>)
 8005058:	680a      	ldr	r2, [r1, #0]
 800505a:	4614      	mov	r4, r2
 800505c:	b99c      	cbnz	r4, 8005086 <_malloc_r+0x56>
 800505e:	4f20      	ldr	r7, [pc, #128]	; (80050e0 <_malloc_r+0xb0>)
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	b923      	cbnz	r3, 800506e <_malloc_r+0x3e>
 8005064:	4621      	mov	r1, r4
 8005066:	4630      	mov	r0, r6
 8005068:	f000 f83c 	bl	80050e4 <_sbrk_r>
 800506c:	6038      	str	r0, [r7, #0]
 800506e:	4629      	mov	r1, r5
 8005070:	4630      	mov	r0, r6
 8005072:	f000 f837 	bl	80050e4 <_sbrk_r>
 8005076:	1c43      	adds	r3, r0, #1
 8005078:	d123      	bne.n	80050c2 <_malloc_r+0x92>
 800507a:	230c      	movs	r3, #12
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	4630      	mov	r0, r6
 8005080:	f000 f8aa 	bl	80051d8 <__malloc_unlock>
 8005084:	e7e3      	b.n	800504e <_malloc_r+0x1e>
 8005086:	6823      	ldr	r3, [r4, #0]
 8005088:	1b5b      	subs	r3, r3, r5
 800508a:	d417      	bmi.n	80050bc <_malloc_r+0x8c>
 800508c:	2b0b      	cmp	r3, #11
 800508e:	d903      	bls.n	8005098 <_malloc_r+0x68>
 8005090:	6023      	str	r3, [r4, #0]
 8005092:	441c      	add	r4, r3
 8005094:	6025      	str	r5, [r4, #0]
 8005096:	e004      	b.n	80050a2 <_malloc_r+0x72>
 8005098:	6863      	ldr	r3, [r4, #4]
 800509a:	42a2      	cmp	r2, r4
 800509c:	bf0c      	ite	eq
 800509e:	600b      	streq	r3, [r1, #0]
 80050a0:	6053      	strne	r3, [r2, #4]
 80050a2:	4630      	mov	r0, r6
 80050a4:	f000 f898 	bl	80051d8 <__malloc_unlock>
 80050a8:	f104 000b 	add.w	r0, r4, #11
 80050ac:	1d23      	adds	r3, r4, #4
 80050ae:	f020 0007 	bic.w	r0, r0, #7
 80050b2:	1ac2      	subs	r2, r0, r3
 80050b4:	d0cc      	beq.n	8005050 <_malloc_r+0x20>
 80050b6:	1a1b      	subs	r3, r3, r0
 80050b8:	50a3      	str	r3, [r4, r2]
 80050ba:	e7c9      	b.n	8005050 <_malloc_r+0x20>
 80050bc:	4622      	mov	r2, r4
 80050be:	6864      	ldr	r4, [r4, #4]
 80050c0:	e7cc      	b.n	800505c <_malloc_r+0x2c>
 80050c2:	1cc4      	adds	r4, r0, #3
 80050c4:	f024 0403 	bic.w	r4, r4, #3
 80050c8:	42a0      	cmp	r0, r4
 80050ca:	d0e3      	beq.n	8005094 <_malloc_r+0x64>
 80050cc:	1a21      	subs	r1, r4, r0
 80050ce:	4630      	mov	r0, r6
 80050d0:	f000 f808 	bl	80050e4 <_sbrk_r>
 80050d4:	3001      	adds	r0, #1
 80050d6:	d1dd      	bne.n	8005094 <_malloc_r+0x64>
 80050d8:	e7cf      	b.n	800507a <_malloc_r+0x4a>
 80050da:	bf00      	nop
 80050dc:	20000330 	.word	0x20000330
 80050e0:	20000334 	.word	0x20000334

080050e4 <_sbrk_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4d06      	ldr	r5, [pc, #24]	; (8005100 <_sbrk_r+0x1c>)
 80050e8:	2300      	movs	r3, #0
 80050ea:	4604      	mov	r4, r0
 80050ec:	4608      	mov	r0, r1
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	f7fc f8e6 	bl	80012c0 <_sbrk>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_sbrk_r+0x1a>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_sbrk_r+0x1a>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	2000033c 	.word	0x2000033c

08005104 <_raise_r>:
 8005104:	291f      	cmp	r1, #31
 8005106:	b538      	push	{r3, r4, r5, lr}
 8005108:	4604      	mov	r4, r0
 800510a:	460d      	mov	r5, r1
 800510c:	d904      	bls.n	8005118 <_raise_r+0x14>
 800510e:	2316      	movs	r3, #22
 8005110:	6003      	str	r3, [r0, #0]
 8005112:	f04f 30ff 	mov.w	r0, #4294967295
 8005116:	bd38      	pop	{r3, r4, r5, pc}
 8005118:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800511a:	b112      	cbz	r2, 8005122 <_raise_r+0x1e>
 800511c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005120:	b94b      	cbnz	r3, 8005136 <_raise_r+0x32>
 8005122:	4620      	mov	r0, r4
 8005124:	f000 f830 	bl	8005188 <_getpid_r>
 8005128:	462a      	mov	r2, r5
 800512a:	4601      	mov	r1, r0
 800512c:	4620      	mov	r0, r4
 800512e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005132:	f000 b817 	b.w	8005164 <_kill_r>
 8005136:	2b01      	cmp	r3, #1
 8005138:	d00a      	beq.n	8005150 <_raise_r+0x4c>
 800513a:	1c59      	adds	r1, r3, #1
 800513c:	d103      	bne.n	8005146 <_raise_r+0x42>
 800513e:	2316      	movs	r3, #22
 8005140:	6003      	str	r3, [r0, #0]
 8005142:	2001      	movs	r0, #1
 8005144:	e7e7      	b.n	8005116 <_raise_r+0x12>
 8005146:	2400      	movs	r4, #0
 8005148:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800514c:	4628      	mov	r0, r5
 800514e:	4798      	blx	r3
 8005150:	2000      	movs	r0, #0
 8005152:	e7e0      	b.n	8005116 <_raise_r+0x12>

08005154 <raise>:
 8005154:	4b02      	ldr	r3, [pc, #8]	; (8005160 <raise+0xc>)
 8005156:	4601      	mov	r1, r0
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	f7ff bfd3 	b.w	8005104 <_raise_r>
 800515e:	bf00      	nop
 8005160:	20000010 	.word	0x20000010

08005164 <_kill_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4d07      	ldr	r5, [pc, #28]	; (8005184 <_kill_r+0x20>)
 8005168:	2300      	movs	r3, #0
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	4611      	mov	r1, r2
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f7fc f88b 	bl	800128c <_kill>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d102      	bne.n	8005180 <_kill_r+0x1c>
 800517a:	682b      	ldr	r3, [r5, #0]
 800517c:	b103      	cbz	r3, 8005180 <_kill_r+0x1c>
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	bd38      	pop	{r3, r4, r5, pc}
 8005182:	bf00      	nop
 8005184:	2000033c 	.word	0x2000033c

08005188 <_getpid_r>:
 8005188:	f7fc b878 	b.w	800127c <_getpid>

0800518c <siprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b500      	push	{lr}
 8005190:	b09c      	sub	sp, #112	; 0x70
 8005192:	ab1d      	add	r3, sp, #116	; 0x74
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9006      	str	r0, [sp, #24]
 8005198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800519c:	4809      	ldr	r0, [pc, #36]	; (80051c4 <siprintf+0x38>)
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	9104      	str	r1, [sp, #16]
 80051a2:	4909      	ldr	r1, [pc, #36]	; (80051c8 <siprintf+0x3c>)
 80051a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	a902      	add	r1, sp, #8
 80051b0:	f000 f874 	bl	800529c <_svfiprintf_r>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	b01c      	add	sp, #112	; 0x70
 80051bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c0:	b003      	add	sp, #12
 80051c2:	4770      	bx	lr
 80051c4:	20000010 	.word	0x20000010
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <__malloc_lock>:
 80051cc:	4801      	ldr	r0, [pc, #4]	; (80051d4 <__malloc_lock+0x8>)
 80051ce:	f000 baf9 	b.w	80057c4 <__retarget_lock_acquire_recursive>
 80051d2:	bf00      	nop
 80051d4:	20000344 	.word	0x20000344

080051d8 <__malloc_unlock>:
 80051d8:	4801      	ldr	r0, [pc, #4]	; (80051e0 <__malloc_unlock+0x8>)
 80051da:	f000 baf4 	b.w	80057c6 <__retarget_lock_release_recursive>
 80051de:	bf00      	nop
 80051e0:	20000344 	.word	0x20000344

080051e4 <__ssputs_r>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	688e      	ldr	r6, [r1, #8]
 80051ea:	429e      	cmp	r6, r3
 80051ec:	4682      	mov	sl, r0
 80051ee:	460c      	mov	r4, r1
 80051f0:	4690      	mov	r8, r2
 80051f2:	461f      	mov	r7, r3
 80051f4:	d838      	bhi.n	8005268 <__ssputs_r+0x84>
 80051f6:	898a      	ldrh	r2, [r1, #12]
 80051f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051fc:	d032      	beq.n	8005264 <__ssputs_r+0x80>
 80051fe:	6825      	ldr	r5, [r4, #0]
 8005200:	6909      	ldr	r1, [r1, #16]
 8005202:	eba5 0901 	sub.w	r9, r5, r1
 8005206:	6965      	ldr	r5, [r4, #20]
 8005208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800520c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005210:	3301      	adds	r3, #1
 8005212:	444b      	add	r3, r9
 8005214:	106d      	asrs	r5, r5, #1
 8005216:	429d      	cmp	r5, r3
 8005218:	bf38      	it	cc
 800521a:	461d      	movcc	r5, r3
 800521c:	0553      	lsls	r3, r2, #21
 800521e:	d531      	bpl.n	8005284 <__ssputs_r+0xa0>
 8005220:	4629      	mov	r1, r5
 8005222:	f7ff ff05 	bl	8005030 <_malloc_r>
 8005226:	4606      	mov	r6, r0
 8005228:	b950      	cbnz	r0, 8005240 <__ssputs_r+0x5c>
 800522a:	230c      	movs	r3, #12
 800522c:	f8ca 3000 	str.w	r3, [sl]
 8005230:	89a3      	ldrh	r3, [r4, #12]
 8005232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005236:	81a3      	strh	r3, [r4, #12]
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005240:	6921      	ldr	r1, [r4, #16]
 8005242:	464a      	mov	r2, r9
 8005244:	f7ff fe8e 	bl	8004f64 <memcpy>
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	81a3      	strh	r3, [r4, #12]
 8005254:	6126      	str	r6, [r4, #16]
 8005256:	6165      	str	r5, [r4, #20]
 8005258:	444e      	add	r6, r9
 800525a:	eba5 0509 	sub.w	r5, r5, r9
 800525e:	6026      	str	r6, [r4, #0]
 8005260:	60a5      	str	r5, [r4, #8]
 8005262:	463e      	mov	r6, r7
 8005264:	42be      	cmp	r6, r7
 8005266:	d900      	bls.n	800526a <__ssputs_r+0x86>
 8005268:	463e      	mov	r6, r7
 800526a:	4632      	mov	r2, r6
 800526c:	6820      	ldr	r0, [r4, #0]
 800526e:	4641      	mov	r1, r8
 8005270:	f000 faaa 	bl	80057c8 <memmove>
 8005274:	68a3      	ldr	r3, [r4, #8]
 8005276:	6822      	ldr	r2, [r4, #0]
 8005278:	1b9b      	subs	r3, r3, r6
 800527a:	4432      	add	r2, r6
 800527c:	60a3      	str	r3, [r4, #8]
 800527e:	6022      	str	r2, [r4, #0]
 8005280:	2000      	movs	r0, #0
 8005282:	e7db      	b.n	800523c <__ssputs_r+0x58>
 8005284:	462a      	mov	r2, r5
 8005286:	f000 fab9 	bl	80057fc <_realloc_r>
 800528a:	4606      	mov	r6, r0
 800528c:	2800      	cmp	r0, #0
 800528e:	d1e1      	bne.n	8005254 <__ssputs_r+0x70>
 8005290:	6921      	ldr	r1, [r4, #16]
 8005292:	4650      	mov	r0, sl
 8005294:	f7ff fe7c 	bl	8004f90 <_free_r>
 8005298:	e7c7      	b.n	800522a <__ssputs_r+0x46>
	...

0800529c <_svfiprintf_r>:
 800529c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a0:	4698      	mov	r8, r3
 80052a2:	898b      	ldrh	r3, [r1, #12]
 80052a4:	061b      	lsls	r3, r3, #24
 80052a6:	b09d      	sub	sp, #116	; 0x74
 80052a8:	4607      	mov	r7, r0
 80052aa:	460d      	mov	r5, r1
 80052ac:	4614      	mov	r4, r2
 80052ae:	d50e      	bpl.n	80052ce <_svfiprintf_r+0x32>
 80052b0:	690b      	ldr	r3, [r1, #16]
 80052b2:	b963      	cbnz	r3, 80052ce <_svfiprintf_r+0x32>
 80052b4:	2140      	movs	r1, #64	; 0x40
 80052b6:	f7ff febb 	bl	8005030 <_malloc_r>
 80052ba:	6028      	str	r0, [r5, #0]
 80052bc:	6128      	str	r0, [r5, #16]
 80052be:	b920      	cbnz	r0, 80052ca <_svfiprintf_r+0x2e>
 80052c0:	230c      	movs	r3, #12
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	f04f 30ff 	mov.w	r0, #4294967295
 80052c8:	e0d1      	b.n	800546e <_svfiprintf_r+0x1d2>
 80052ca:	2340      	movs	r3, #64	; 0x40
 80052cc:	616b      	str	r3, [r5, #20]
 80052ce:	2300      	movs	r3, #0
 80052d0:	9309      	str	r3, [sp, #36]	; 0x24
 80052d2:	2320      	movs	r3, #32
 80052d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80052dc:	2330      	movs	r3, #48	; 0x30
 80052de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005488 <_svfiprintf_r+0x1ec>
 80052e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80052e6:	f04f 0901 	mov.w	r9, #1
 80052ea:	4623      	mov	r3, r4
 80052ec:	469a      	mov	sl, r3
 80052ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052f2:	b10a      	cbz	r2, 80052f8 <_svfiprintf_r+0x5c>
 80052f4:	2a25      	cmp	r2, #37	; 0x25
 80052f6:	d1f9      	bne.n	80052ec <_svfiprintf_r+0x50>
 80052f8:	ebba 0b04 	subs.w	fp, sl, r4
 80052fc:	d00b      	beq.n	8005316 <_svfiprintf_r+0x7a>
 80052fe:	465b      	mov	r3, fp
 8005300:	4622      	mov	r2, r4
 8005302:	4629      	mov	r1, r5
 8005304:	4638      	mov	r0, r7
 8005306:	f7ff ff6d 	bl	80051e4 <__ssputs_r>
 800530a:	3001      	adds	r0, #1
 800530c:	f000 80aa 	beq.w	8005464 <_svfiprintf_r+0x1c8>
 8005310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005312:	445a      	add	r2, fp
 8005314:	9209      	str	r2, [sp, #36]	; 0x24
 8005316:	f89a 3000 	ldrb.w	r3, [sl]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80a2 	beq.w	8005464 <_svfiprintf_r+0x1c8>
 8005320:	2300      	movs	r3, #0
 8005322:	f04f 32ff 	mov.w	r2, #4294967295
 8005326:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800532a:	f10a 0a01 	add.w	sl, sl, #1
 800532e:	9304      	str	r3, [sp, #16]
 8005330:	9307      	str	r3, [sp, #28]
 8005332:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005336:	931a      	str	r3, [sp, #104]	; 0x68
 8005338:	4654      	mov	r4, sl
 800533a:	2205      	movs	r2, #5
 800533c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005340:	4851      	ldr	r0, [pc, #324]	; (8005488 <_svfiprintf_r+0x1ec>)
 8005342:	f7fa ff55 	bl	80001f0 <memchr>
 8005346:	9a04      	ldr	r2, [sp, #16]
 8005348:	b9d8      	cbnz	r0, 8005382 <_svfiprintf_r+0xe6>
 800534a:	06d0      	lsls	r0, r2, #27
 800534c:	bf44      	itt	mi
 800534e:	2320      	movmi	r3, #32
 8005350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005354:	0711      	lsls	r1, r2, #28
 8005356:	bf44      	itt	mi
 8005358:	232b      	movmi	r3, #43	; 0x2b
 800535a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800535e:	f89a 3000 	ldrb.w	r3, [sl]
 8005362:	2b2a      	cmp	r3, #42	; 0x2a
 8005364:	d015      	beq.n	8005392 <_svfiprintf_r+0xf6>
 8005366:	9a07      	ldr	r2, [sp, #28]
 8005368:	4654      	mov	r4, sl
 800536a:	2000      	movs	r0, #0
 800536c:	f04f 0c0a 	mov.w	ip, #10
 8005370:	4621      	mov	r1, r4
 8005372:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005376:	3b30      	subs	r3, #48	; 0x30
 8005378:	2b09      	cmp	r3, #9
 800537a:	d94e      	bls.n	800541a <_svfiprintf_r+0x17e>
 800537c:	b1b0      	cbz	r0, 80053ac <_svfiprintf_r+0x110>
 800537e:	9207      	str	r2, [sp, #28]
 8005380:	e014      	b.n	80053ac <_svfiprintf_r+0x110>
 8005382:	eba0 0308 	sub.w	r3, r0, r8
 8005386:	fa09 f303 	lsl.w	r3, r9, r3
 800538a:	4313      	orrs	r3, r2
 800538c:	9304      	str	r3, [sp, #16]
 800538e:	46a2      	mov	sl, r4
 8005390:	e7d2      	b.n	8005338 <_svfiprintf_r+0x9c>
 8005392:	9b03      	ldr	r3, [sp, #12]
 8005394:	1d19      	adds	r1, r3, #4
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	9103      	str	r1, [sp, #12]
 800539a:	2b00      	cmp	r3, #0
 800539c:	bfbb      	ittet	lt
 800539e:	425b      	neglt	r3, r3
 80053a0:	f042 0202 	orrlt.w	r2, r2, #2
 80053a4:	9307      	strge	r3, [sp, #28]
 80053a6:	9307      	strlt	r3, [sp, #28]
 80053a8:	bfb8      	it	lt
 80053aa:	9204      	strlt	r2, [sp, #16]
 80053ac:	7823      	ldrb	r3, [r4, #0]
 80053ae:	2b2e      	cmp	r3, #46	; 0x2e
 80053b0:	d10c      	bne.n	80053cc <_svfiprintf_r+0x130>
 80053b2:	7863      	ldrb	r3, [r4, #1]
 80053b4:	2b2a      	cmp	r3, #42	; 0x2a
 80053b6:	d135      	bne.n	8005424 <_svfiprintf_r+0x188>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	1d1a      	adds	r2, r3, #4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	9203      	str	r2, [sp, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bfb8      	it	lt
 80053c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80053c8:	3402      	adds	r4, #2
 80053ca:	9305      	str	r3, [sp, #20]
 80053cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005498 <_svfiprintf_r+0x1fc>
 80053d0:	7821      	ldrb	r1, [r4, #0]
 80053d2:	2203      	movs	r2, #3
 80053d4:	4650      	mov	r0, sl
 80053d6:	f7fa ff0b 	bl	80001f0 <memchr>
 80053da:	b140      	cbz	r0, 80053ee <_svfiprintf_r+0x152>
 80053dc:	2340      	movs	r3, #64	; 0x40
 80053de:	eba0 000a 	sub.w	r0, r0, sl
 80053e2:	fa03 f000 	lsl.w	r0, r3, r0
 80053e6:	9b04      	ldr	r3, [sp, #16]
 80053e8:	4303      	orrs	r3, r0
 80053ea:	3401      	adds	r4, #1
 80053ec:	9304      	str	r3, [sp, #16]
 80053ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053f2:	4826      	ldr	r0, [pc, #152]	; (800548c <_svfiprintf_r+0x1f0>)
 80053f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053f8:	2206      	movs	r2, #6
 80053fa:	f7fa fef9 	bl	80001f0 <memchr>
 80053fe:	2800      	cmp	r0, #0
 8005400:	d038      	beq.n	8005474 <_svfiprintf_r+0x1d8>
 8005402:	4b23      	ldr	r3, [pc, #140]	; (8005490 <_svfiprintf_r+0x1f4>)
 8005404:	bb1b      	cbnz	r3, 800544e <_svfiprintf_r+0x1b2>
 8005406:	9b03      	ldr	r3, [sp, #12]
 8005408:	3307      	adds	r3, #7
 800540a:	f023 0307 	bic.w	r3, r3, #7
 800540e:	3308      	adds	r3, #8
 8005410:	9303      	str	r3, [sp, #12]
 8005412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005414:	4433      	add	r3, r6
 8005416:	9309      	str	r3, [sp, #36]	; 0x24
 8005418:	e767      	b.n	80052ea <_svfiprintf_r+0x4e>
 800541a:	fb0c 3202 	mla	r2, ip, r2, r3
 800541e:	460c      	mov	r4, r1
 8005420:	2001      	movs	r0, #1
 8005422:	e7a5      	b.n	8005370 <_svfiprintf_r+0xd4>
 8005424:	2300      	movs	r3, #0
 8005426:	3401      	adds	r4, #1
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	4619      	mov	r1, r3
 800542c:	f04f 0c0a 	mov.w	ip, #10
 8005430:	4620      	mov	r0, r4
 8005432:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005436:	3a30      	subs	r2, #48	; 0x30
 8005438:	2a09      	cmp	r2, #9
 800543a:	d903      	bls.n	8005444 <_svfiprintf_r+0x1a8>
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0c5      	beq.n	80053cc <_svfiprintf_r+0x130>
 8005440:	9105      	str	r1, [sp, #20]
 8005442:	e7c3      	b.n	80053cc <_svfiprintf_r+0x130>
 8005444:	fb0c 2101 	mla	r1, ip, r1, r2
 8005448:	4604      	mov	r4, r0
 800544a:	2301      	movs	r3, #1
 800544c:	e7f0      	b.n	8005430 <_svfiprintf_r+0x194>
 800544e:	ab03      	add	r3, sp, #12
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	462a      	mov	r2, r5
 8005454:	4b0f      	ldr	r3, [pc, #60]	; (8005494 <_svfiprintf_r+0x1f8>)
 8005456:	a904      	add	r1, sp, #16
 8005458:	4638      	mov	r0, r7
 800545a:	f3af 8000 	nop.w
 800545e:	1c42      	adds	r2, r0, #1
 8005460:	4606      	mov	r6, r0
 8005462:	d1d6      	bne.n	8005412 <_svfiprintf_r+0x176>
 8005464:	89ab      	ldrh	r3, [r5, #12]
 8005466:	065b      	lsls	r3, r3, #25
 8005468:	f53f af2c 	bmi.w	80052c4 <_svfiprintf_r+0x28>
 800546c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800546e:	b01d      	add	sp, #116	; 0x74
 8005470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005474:	ab03      	add	r3, sp, #12
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	462a      	mov	r2, r5
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <_svfiprintf_r+0x1f8>)
 800547c:	a904      	add	r1, sp, #16
 800547e:	4638      	mov	r0, r7
 8005480:	f000 f87a 	bl	8005578 <_printf_i>
 8005484:	e7eb      	b.n	800545e <_svfiprintf_r+0x1c2>
 8005486:	bf00      	nop
 8005488:	08005964 	.word	0x08005964
 800548c:	0800596e 	.word	0x0800596e
 8005490:	00000000 	.word	0x00000000
 8005494:	080051e5 	.word	0x080051e5
 8005498:	0800596a 	.word	0x0800596a

0800549c <_printf_common>:
 800549c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054a0:	4616      	mov	r6, r2
 80054a2:	4699      	mov	r9, r3
 80054a4:	688a      	ldr	r2, [r1, #8]
 80054a6:	690b      	ldr	r3, [r1, #16]
 80054a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80054ac:	4293      	cmp	r3, r2
 80054ae:	bfb8      	it	lt
 80054b0:	4613      	movlt	r3, r2
 80054b2:	6033      	str	r3, [r6, #0]
 80054b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054b8:	4607      	mov	r7, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	b10a      	cbz	r2, 80054c2 <_printf_common+0x26>
 80054be:	3301      	adds	r3, #1
 80054c0:	6033      	str	r3, [r6, #0]
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	0699      	lsls	r1, r3, #26
 80054c6:	bf42      	ittt	mi
 80054c8:	6833      	ldrmi	r3, [r6, #0]
 80054ca:	3302      	addmi	r3, #2
 80054cc:	6033      	strmi	r3, [r6, #0]
 80054ce:	6825      	ldr	r5, [r4, #0]
 80054d0:	f015 0506 	ands.w	r5, r5, #6
 80054d4:	d106      	bne.n	80054e4 <_printf_common+0x48>
 80054d6:	f104 0a19 	add.w	sl, r4, #25
 80054da:	68e3      	ldr	r3, [r4, #12]
 80054dc:	6832      	ldr	r2, [r6, #0]
 80054de:	1a9b      	subs	r3, r3, r2
 80054e0:	42ab      	cmp	r3, r5
 80054e2:	dc26      	bgt.n	8005532 <_printf_common+0x96>
 80054e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054e8:	1e13      	subs	r3, r2, #0
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	bf18      	it	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	0692      	lsls	r2, r2, #26
 80054f2:	d42b      	bmi.n	800554c <_printf_common+0xb0>
 80054f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054f8:	4649      	mov	r1, r9
 80054fa:	4638      	mov	r0, r7
 80054fc:	47c0      	blx	r8
 80054fe:	3001      	adds	r0, #1
 8005500:	d01e      	beq.n	8005540 <_printf_common+0xa4>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	68e5      	ldr	r5, [r4, #12]
 8005506:	6832      	ldr	r2, [r6, #0]
 8005508:	f003 0306 	and.w	r3, r3, #6
 800550c:	2b04      	cmp	r3, #4
 800550e:	bf08      	it	eq
 8005510:	1aad      	subeq	r5, r5, r2
 8005512:	68a3      	ldr	r3, [r4, #8]
 8005514:	6922      	ldr	r2, [r4, #16]
 8005516:	bf0c      	ite	eq
 8005518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800551c:	2500      	movne	r5, #0
 800551e:	4293      	cmp	r3, r2
 8005520:	bfc4      	itt	gt
 8005522:	1a9b      	subgt	r3, r3, r2
 8005524:	18ed      	addgt	r5, r5, r3
 8005526:	2600      	movs	r6, #0
 8005528:	341a      	adds	r4, #26
 800552a:	42b5      	cmp	r5, r6
 800552c:	d11a      	bne.n	8005564 <_printf_common+0xc8>
 800552e:	2000      	movs	r0, #0
 8005530:	e008      	b.n	8005544 <_printf_common+0xa8>
 8005532:	2301      	movs	r3, #1
 8005534:	4652      	mov	r2, sl
 8005536:	4649      	mov	r1, r9
 8005538:	4638      	mov	r0, r7
 800553a:	47c0      	blx	r8
 800553c:	3001      	adds	r0, #1
 800553e:	d103      	bne.n	8005548 <_printf_common+0xac>
 8005540:	f04f 30ff 	mov.w	r0, #4294967295
 8005544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005548:	3501      	adds	r5, #1
 800554a:	e7c6      	b.n	80054da <_printf_common+0x3e>
 800554c:	18e1      	adds	r1, r4, r3
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	2030      	movs	r0, #48	; 0x30
 8005552:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005556:	4422      	add	r2, r4
 8005558:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800555c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005560:	3302      	adds	r3, #2
 8005562:	e7c7      	b.n	80054f4 <_printf_common+0x58>
 8005564:	2301      	movs	r3, #1
 8005566:	4622      	mov	r2, r4
 8005568:	4649      	mov	r1, r9
 800556a:	4638      	mov	r0, r7
 800556c:	47c0      	blx	r8
 800556e:	3001      	adds	r0, #1
 8005570:	d0e6      	beq.n	8005540 <_printf_common+0xa4>
 8005572:	3601      	adds	r6, #1
 8005574:	e7d9      	b.n	800552a <_printf_common+0x8e>
	...

08005578 <_printf_i>:
 8005578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800557c:	460c      	mov	r4, r1
 800557e:	4691      	mov	r9, r2
 8005580:	7e27      	ldrb	r7, [r4, #24]
 8005582:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005584:	2f78      	cmp	r7, #120	; 0x78
 8005586:	4680      	mov	r8, r0
 8005588:	469a      	mov	sl, r3
 800558a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800558e:	d807      	bhi.n	80055a0 <_printf_i+0x28>
 8005590:	2f62      	cmp	r7, #98	; 0x62
 8005592:	d80a      	bhi.n	80055aa <_printf_i+0x32>
 8005594:	2f00      	cmp	r7, #0
 8005596:	f000 80d8 	beq.w	800574a <_printf_i+0x1d2>
 800559a:	2f58      	cmp	r7, #88	; 0x58
 800559c:	f000 80a3 	beq.w	80056e6 <_printf_i+0x16e>
 80055a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80055a8:	e03a      	b.n	8005620 <_printf_i+0xa8>
 80055aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80055ae:	2b15      	cmp	r3, #21
 80055b0:	d8f6      	bhi.n	80055a0 <_printf_i+0x28>
 80055b2:	a001      	add	r0, pc, #4	; (adr r0, 80055b8 <_printf_i+0x40>)
 80055b4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80055b8:	08005611 	.word	0x08005611
 80055bc:	08005625 	.word	0x08005625
 80055c0:	080055a1 	.word	0x080055a1
 80055c4:	080055a1 	.word	0x080055a1
 80055c8:	080055a1 	.word	0x080055a1
 80055cc:	080055a1 	.word	0x080055a1
 80055d0:	08005625 	.word	0x08005625
 80055d4:	080055a1 	.word	0x080055a1
 80055d8:	080055a1 	.word	0x080055a1
 80055dc:	080055a1 	.word	0x080055a1
 80055e0:	080055a1 	.word	0x080055a1
 80055e4:	08005731 	.word	0x08005731
 80055e8:	08005655 	.word	0x08005655
 80055ec:	08005713 	.word	0x08005713
 80055f0:	080055a1 	.word	0x080055a1
 80055f4:	080055a1 	.word	0x080055a1
 80055f8:	08005753 	.word	0x08005753
 80055fc:	080055a1 	.word	0x080055a1
 8005600:	08005655 	.word	0x08005655
 8005604:	080055a1 	.word	0x080055a1
 8005608:	080055a1 	.word	0x080055a1
 800560c:	0800571b 	.word	0x0800571b
 8005610:	680b      	ldr	r3, [r1, #0]
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	600a      	str	r2, [r1, #0]
 8005618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800561c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005620:	2301      	movs	r3, #1
 8005622:	e0a3      	b.n	800576c <_printf_i+0x1f4>
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	6808      	ldr	r0, [r1, #0]
 8005628:	062e      	lsls	r6, r5, #24
 800562a:	f100 0304 	add.w	r3, r0, #4
 800562e:	d50a      	bpl.n	8005646 <_printf_i+0xce>
 8005630:	6805      	ldr	r5, [r0, #0]
 8005632:	600b      	str	r3, [r1, #0]
 8005634:	2d00      	cmp	r5, #0
 8005636:	da03      	bge.n	8005640 <_printf_i+0xc8>
 8005638:	232d      	movs	r3, #45	; 0x2d
 800563a:	426d      	negs	r5, r5
 800563c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005640:	485e      	ldr	r0, [pc, #376]	; (80057bc <_printf_i+0x244>)
 8005642:	230a      	movs	r3, #10
 8005644:	e019      	b.n	800567a <_printf_i+0x102>
 8005646:	f015 0f40 	tst.w	r5, #64	; 0x40
 800564a:	6805      	ldr	r5, [r0, #0]
 800564c:	600b      	str	r3, [r1, #0]
 800564e:	bf18      	it	ne
 8005650:	b22d      	sxthne	r5, r5
 8005652:	e7ef      	b.n	8005634 <_printf_i+0xbc>
 8005654:	680b      	ldr	r3, [r1, #0]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	1d18      	adds	r0, r3, #4
 800565a:	6008      	str	r0, [r1, #0]
 800565c:	0628      	lsls	r0, r5, #24
 800565e:	d501      	bpl.n	8005664 <_printf_i+0xec>
 8005660:	681d      	ldr	r5, [r3, #0]
 8005662:	e002      	b.n	800566a <_printf_i+0xf2>
 8005664:	0669      	lsls	r1, r5, #25
 8005666:	d5fb      	bpl.n	8005660 <_printf_i+0xe8>
 8005668:	881d      	ldrh	r5, [r3, #0]
 800566a:	4854      	ldr	r0, [pc, #336]	; (80057bc <_printf_i+0x244>)
 800566c:	2f6f      	cmp	r7, #111	; 0x6f
 800566e:	bf0c      	ite	eq
 8005670:	2308      	moveq	r3, #8
 8005672:	230a      	movne	r3, #10
 8005674:	2100      	movs	r1, #0
 8005676:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800567a:	6866      	ldr	r6, [r4, #4]
 800567c:	60a6      	str	r6, [r4, #8]
 800567e:	2e00      	cmp	r6, #0
 8005680:	bfa2      	ittt	ge
 8005682:	6821      	ldrge	r1, [r4, #0]
 8005684:	f021 0104 	bicge.w	r1, r1, #4
 8005688:	6021      	strge	r1, [r4, #0]
 800568a:	b90d      	cbnz	r5, 8005690 <_printf_i+0x118>
 800568c:	2e00      	cmp	r6, #0
 800568e:	d04d      	beq.n	800572c <_printf_i+0x1b4>
 8005690:	4616      	mov	r6, r2
 8005692:	fbb5 f1f3 	udiv	r1, r5, r3
 8005696:	fb03 5711 	mls	r7, r3, r1, r5
 800569a:	5dc7      	ldrb	r7, [r0, r7]
 800569c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80056a0:	462f      	mov	r7, r5
 80056a2:	42bb      	cmp	r3, r7
 80056a4:	460d      	mov	r5, r1
 80056a6:	d9f4      	bls.n	8005692 <_printf_i+0x11a>
 80056a8:	2b08      	cmp	r3, #8
 80056aa:	d10b      	bne.n	80056c4 <_printf_i+0x14c>
 80056ac:	6823      	ldr	r3, [r4, #0]
 80056ae:	07df      	lsls	r7, r3, #31
 80056b0:	d508      	bpl.n	80056c4 <_printf_i+0x14c>
 80056b2:	6923      	ldr	r3, [r4, #16]
 80056b4:	6861      	ldr	r1, [r4, #4]
 80056b6:	4299      	cmp	r1, r3
 80056b8:	bfde      	ittt	le
 80056ba:	2330      	movle	r3, #48	; 0x30
 80056bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80056c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80056c4:	1b92      	subs	r2, r2, r6
 80056c6:	6122      	str	r2, [r4, #16]
 80056c8:	f8cd a000 	str.w	sl, [sp]
 80056cc:	464b      	mov	r3, r9
 80056ce:	aa03      	add	r2, sp, #12
 80056d0:	4621      	mov	r1, r4
 80056d2:	4640      	mov	r0, r8
 80056d4:	f7ff fee2 	bl	800549c <_printf_common>
 80056d8:	3001      	adds	r0, #1
 80056da:	d14c      	bne.n	8005776 <_printf_i+0x1fe>
 80056dc:	f04f 30ff 	mov.w	r0, #4294967295
 80056e0:	b004      	add	sp, #16
 80056e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056e6:	4835      	ldr	r0, [pc, #212]	; (80057bc <_printf_i+0x244>)
 80056e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	680e      	ldr	r6, [r1, #0]
 80056f0:	061f      	lsls	r7, r3, #24
 80056f2:	f856 5b04 	ldr.w	r5, [r6], #4
 80056f6:	600e      	str	r6, [r1, #0]
 80056f8:	d514      	bpl.n	8005724 <_printf_i+0x1ac>
 80056fa:	07d9      	lsls	r1, r3, #31
 80056fc:	bf44      	itt	mi
 80056fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005702:	6023      	strmi	r3, [r4, #0]
 8005704:	b91d      	cbnz	r5, 800570e <_printf_i+0x196>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	f023 0320 	bic.w	r3, r3, #32
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	2310      	movs	r3, #16
 8005710:	e7b0      	b.n	8005674 <_printf_i+0xfc>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	f043 0320 	orr.w	r3, r3, #32
 8005718:	6023      	str	r3, [r4, #0]
 800571a:	2378      	movs	r3, #120	; 0x78
 800571c:	4828      	ldr	r0, [pc, #160]	; (80057c0 <_printf_i+0x248>)
 800571e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005722:	e7e3      	b.n	80056ec <_printf_i+0x174>
 8005724:	065e      	lsls	r6, r3, #25
 8005726:	bf48      	it	mi
 8005728:	b2ad      	uxthmi	r5, r5
 800572a:	e7e6      	b.n	80056fa <_printf_i+0x182>
 800572c:	4616      	mov	r6, r2
 800572e:	e7bb      	b.n	80056a8 <_printf_i+0x130>
 8005730:	680b      	ldr	r3, [r1, #0]
 8005732:	6826      	ldr	r6, [r4, #0]
 8005734:	6960      	ldr	r0, [r4, #20]
 8005736:	1d1d      	adds	r5, r3, #4
 8005738:	600d      	str	r5, [r1, #0]
 800573a:	0635      	lsls	r5, r6, #24
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	d501      	bpl.n	8005744 <_printf_i+0x1cc>
 8005740:	6018      	str	r0, [r3, #0]
 8005742:	e002      	b.n	800574a <_printf_i+0x1d2>
 8005744:	0671      	lsls	r1, r6, #25
 8005746:	d5fb      	bpl.n	8005740 <_printf_i+0x1c8>
 8005748:	8018      	strh	r0, [r3, #0]
 800574a:	2300      	movs	r3, #0
 800574c:	6123      	str	r3, [r4, #16]
 800574e:	4616      	mov	r6, r2
 8005750:	e7ba      	b.n	80056c8 <_printf_i+0x150>
 8005752:	680b      	ldr	r3, [r1, #0]
 8005754:	1d1a      	adds	r2, r3, #4
 8005756:	600a      	str	r2, [r1, #0]
 8005758:	681e      	ldr	r6, [r3, #0]
 800575a:	6862      	ldr	r2, [r4, #4]
 800575c:	2100      	movs	r1, #0
 800575e:	4630      	mov	r0, r6
 8005760:	f7fa fd46 	bl	80001f0 <memchr>
 8005764:	b108      	cbz	r0, 800576a <_printf_i+0x1f2>
 8005766:	1b80      	subs	r0, r0, r6
 8005768:	6060      	str	r0, [r4, #4]
 800576a:	6863      	ldr	r3, [r4, #4]
 800576c:	6123      	str	r3, [r4, #16]
 800576e:	2300      	movs	r3, #0
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005774:	e7a8      	b.n	80056c8 <_printf_i+0x150>
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	4632      	mov	r2, r6
 800577a:	4649      	mov	r1, r9
 800577c:	4640      	mov	r0, r8
 800577e:	47d0      	blx	sl
 8005780:	3001      	adds	r0, #1
 8005782:	d0ab      	beq.n	80056dc <_printf_i+0x164>
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	079b      	lsls	r3, r3, #30
 8005788:	d413      	bmi.n	80057b2 <_printf_i+0x23a>
 800578a:	68e0      	ldr	r0, [r4, #12]
 800578c:	9b03      	ldr	r3, [sp, #12]
 800578e:	4298      	cmp	r0, r3
 8005790:	bfb8      	it	lt
 8005792:	4618      	movlt	r0, r3
 8005794:	e7a4      	b.n	80056e0 <_printf_i+0x168>
 8005796:	2301      	movs	r3, #1
 8005798:	4632      	mov	r2, r6
 800579a:	4649      	mov	r1, r9
 800579c:	4640      	mov	r0, r8
 800579e:	47d0      	blx	sl
 80057a0:	3001      	adds	r0, #1
 80057a2:	d09b      	beq.n	80056dc <_printf_i+0x164>
 80057a4:	3501      	adds	r5, #1
 80057a6:	68e3      	ldr	r3, [r4, #12]
 80057a8:	9903      	ldr	r1, [sp, #12]
 80057aa:	1a5b      	subs	r3, r3, r1
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	dcf2      	bgt.n	8005796 <_printf_i+0x21e>
 80057b0:	e7eb      	b.n	800578a <_printf_i+0x212>
 80057b2:	2500      	movs	r5, #0
 80057b4:	f104 0619 	add.w	r6, r4, #25
 80057b8:	e7f5      	b.n	80057a6 <_printf_i+0x22e>
 80057ba:	bf00      	nop
 80057bc:	08005975 	.word	0x08005975
 80057c0:	08005986 	.word	0x08005986

080057c4 <__retarget_lock_acquire_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <__retarget_lock_release_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <memmove>:
 80057c8:	4288      	cmp	r0, r1
 80057ca:	b510      	push	{r4, lr}
 80057cc:	eb01 0402 	add.w	r4, r1, r2
 80057d0:	d902      	bls.n	80057d8 <memmove+0x10>
 80057d2:	4284      	cmp	r4, r0
 80057d4:	4623      	mov	r3, r4
 80057d6:	d807      	bhi.n	80057e8 <memmove+0x20>
 80057d8:	1e43      	subs	r3, r0, #1
 80057da:	42a1      	cmp	r1, r4
 80057dc:	d008      	beq.n	80057f0 <memmove+0x28>
 80057de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80057e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80057e6:	e7f8      	b.n	80057da <memmove+0x12>
 80057e8:	4402      	add	r2, r0
 80057ea:	4601      	mov	r1, r0
 80057ec:	428a      	cmp	r2, r1
 80057ee:	d100      	bne.n	80057f2 <memmove+0x2a>
 80057f0:	bd10      	pop	{r4, pc}
 80057f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057fa:	e7f7      	b.n	80057ec <memmove+0x24>

080057fc <_realloc_r>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	4607      	mov	r7, r0
 8005800:	4614      	mov	r4, r2
 8005802:	460e      	mov	r6, r1
 8005804:	b921      	cbnz	r1, 8005810 <_realloc_r+0x14>
 8005806:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800580a:	4611      	mov	r1, r2
 800580c:	f7ff bc10 	b.w	8005030 <_malloc_r>
 8005810:	b922      	cbnz	r2, 800581c <_realloc_r+0x20>
 8005812:	f7ff fbbd 	bl	8004f90 <_free_r>
 8005816:	4625      	mov	r5, r4
 8005818:	4628      	mov	r0, r5
 800581a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800581c:	f000 f814 	bl	8005848 <_malloc_usable_size_r>
 8005820:	42a0      	cmp	r0, r4
 8005822:	d20f      	bcs.n	8005844 <_realloc_r+0x48>
 8005824:	4621      	mov	r1, r4
 8005826:	4638      	mov	r0, r7
 8005828:	f7ff fc02 	bl	8005030 <_malloc_r>
 800582c:	4605      	mov	r5, r0
 800582e:	2800      	cmp	r0, #0
 8005830:	d0f2      	beq.n	8005818 <_realloc_r+0x1c>
 8005832:	4631      	mov	r1, r6
 8005834:	4622      	mov	r2, r4
 8005836:	f7ff fb95 	bl	8004f64 <memcpy>
 800583a:	4631      	mov	r1, r6
 800583c:	4638      	mov	r0, r7
 800583e:	f7ff fba7 	bl	8004f90 <_free_r>
 8005842:	e7e9      	b.n	8005818 <_realloc_r+0x1c>
 8005844:	4635      	mov	r5, r6
 8005846:	e7e7      	b.n	8005818 <_realloc_r+0x1c>

08005848 <_malloc_usable_size_r>:
 8005848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800584c:	1f18      	subs	r0, r3, #4
 800584e:	2b00      	cmp	r3, #0
 8005850:	bfbc      	itt	lt
 8005852:	580b      	ldrlt	r3, [r1, r0]
 8005854:	18c0      	addlt	r0, r0, r3
 8005856:	4770      	bx	lr

08005858 <_init>:
 8005858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585a:	bf00      	nop
 800585c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585e:	bc08      	pop	{r3}
 8005860:	469e      	mov	lr, r3
 8005862:	4770      	bx	lr

08005864 <_fini>:
 8005864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005866:	bf00      	nop
 8005868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800586a:	bc08      	pop	{r3}
 800586c:	469e      	mov	lr, r3
 800586e:	4770      	bx	lr
