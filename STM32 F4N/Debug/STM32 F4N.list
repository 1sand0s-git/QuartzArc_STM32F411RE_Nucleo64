
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005a5c  08005a5c  00015a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b4c  08005b4c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b4c  08005b4c  00015b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b54  08005b54  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  08005bd0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005bd0  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00018814  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002fa93  00000000  00000000  000388b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000060e5  00000000  00000000  0006834b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  0006e430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aa835  00000000  00000000  0006f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001220  00000000  00000000  00119fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001edf3  00000000  00000000  0011b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139fe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000561c  00000000  00000000  0013a038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005a44 	.word	0x08005a44

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005a44 	.word	0x08005a44

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e6:	490e      	ldr	r1, [pc, #56]	; (8000520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004fc:	4c0b      	ldr	r4, [pc, #44]	; (800052c <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800050a:	f000 ff4b 	bl	80013a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f005 f99b 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000512:	f000 faf1 	bl	8000af8 <main>
  bx  lr    
 8000516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000524:	08005b5c 	.word	0x08005b5c
  ldr r2, =_sbss
 8000528:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800052c:	20000354 	.word	0x20000354

08000530 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <DMA1_Stream0_IRQHandler>
	...

08000534 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b098      	sub	sp, #96	; 0x60
 8000538:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a69      	ldr	r2, [pc, #420]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000544:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000546:	4b67      	ldr	r3, [pc, #412]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a66      	ldr	r2, [pc, #408]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800054c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000550:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000552:	4b64      	ldr	r3, [pc, #400]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a63      	ldr	r2, [pc, #396]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	2003      	movs	r0, #3
 8000560:	f001 fc4e 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000564:	2000      	movs	r0, #0
 8000566:	f000 ff2f 	bl	80013c8 <HAL_InitTick>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 800057a:	2301      	movs	r3, #1
 800057c:	e0ad      	b.n	80006da <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a58      	ldr	r2, [pc, #352]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b53      	ldr	r3, [pc, #332]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a52      	ldr	r2, [pc, #328]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 100MHz clock
  //NOTE: HSE Oscillator provided on STM32F411RE Nucleo 64 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80005b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 f97c 	bl	80058bc <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80005c4:	2301      	movs	r3, #1
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 80005dc:	2332      	movs	r3, #50	; 0x32
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 80005e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fed9 	bl	80023a4 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 8000602:	2301      	movs	r3, #1
 8000604:	e069      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000614:	6453      	str	r3, [r2, #68]	; 0x44
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000632:	230f      	movs	r3, #15
 8000634:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 8000636:	2302      	movs	r3, #2
 8000638:	623b      	str	r3, [r7, #32]

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 100MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f002 f920 	bl	8002894 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 8000664:	2301      	movs	r3, #1
 8000666:	e038      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6313      	str	r3, [r2, #48]	; 0x30
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023c00 	.word	0x40023c00
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_ZN7QAD_ADCC1Ev>:
	uint8_t                 m_uDataIdx;


	//-----------
	//Constructor
	QAD_ADC() :
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_sTIMHandle({0}),
		m_sADCHandle({0}),
		m_uChannelCount(0) {}
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	705a      	strb	r2, [r3, #1]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	330c      	adds	r3, #12
 8000708:	2248      	movs	r2, #72	; 0x48
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f005 f8d5 	bl	80058bc <memset>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3354      	adds	r3, #84	; 0x54
 8000716:	2248      	movs	r2, #72	; 0x48
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f005 f8ce 	bl	80058bc <memset>
 8000720:	230f      	movs	r3, #15
 8000722:	2b00      	cmp	r3, #0
 8000724:	db01      	blt.n	800072a <_ZN7QAD_ADCC1Ev+0x3a>
 8000726:	3b01      	subs	r3, #1
 8000728:	e7fb      	b.n	8000722 <_ZN7QAD_ADCC1Ev+0x32>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN7QAD_ADC3getEv>:


	  //-----------------
	  //Singleton Methods

	static QAD_ADC& get(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
		static QAD_ADC instance;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f3bf 8f5b 	dmb	ish
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d010      	beq.n	800077e <_ZN7QAD_ADC3getEv+0x42>
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 800075e:	f005 f825 	bl	80057ac <__cxa_guard_acquire>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d005      	beq.n	800077e <_ZN7QAD_ADC3getEv+0x42>
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <_ZN7QAD_ADC3getEv+0x4c>)
 8000774:	f7ff ffbc 	bl	80006f0 <_ZN7QAD_ADCC1Ev>
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 800077a:	f005 f823 	bl	80057c4 <__cxa_guard_release>
		return instance;
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <_ZN7QAD_ADC3getEv+0x4c>)
	}
 8000780:	4618      	mov	r0, r3
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000250 	.word	0x20000250
 8000788:	20000090 	.word	0x20000090

0800078c <_ZN7QAD_ADC7handlerEv>:


	  //--------------
	  //Handler Method

	static void handler(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
		get().imp_handler();
 8000790:	f7ff ffd4 	bl	800073c <_ZN7QAD_ADC3getEv>
 8000794:	4603      	mov	r3, r0
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f9c3 	bl	8003b22 <_ZN7QAD_ADC11imp_handlerEv>
	}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HardFault_Handler+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 fba7 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0xe>
 80007c0:	20000254 	.word	0x20000254

080007c4 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <MemManage_Handler+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 fb9d 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007d2:	e7fe      	b.n	80007d2 <MemManage_Handler+0xe>
 80007d4:	20000254 	.word	0x20000254

080007d8 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <BusFault_Handler+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fb93 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0xe>
 80007e8:	20000254 	.word	0x20000254

080007ec <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <UsageFault_Handler+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 fb89 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007fa:	e7fe      	b.n	80007fa <UsageFault_Handler+0xe>
 80007fc:	20000254 	.word	0x20000254

08000800 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800082e:	f000 fdfb 	bl	8001428 <HAL_IncTick>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Function
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <USART2_IRQHandler+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f004 fcf6 	bl	8005234 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000258 	.word	0x20000258

08000850 <ADC_IRQHandler>:


//ADC_IRQHandler
//Interrupt Handler Function
void ADC_IRQHandler(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  QAD_ADC::handler();
 8000854:	f7ff ff9a 	bl	800078c <_ZN7QAD_ADC7handlerEv>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN26QAD_PWM_Channel_InitStructaSERKS_>:
	uint8_t        uAF;      //Alternate function used to connect the GPIO pin to the respective timer peripheral


	//Assignment operator definition to allow easy copying of channel data from QAD_PWM_InitStruct to
	//members of m_sChannels array in QAD_PWM driver class
	QAD_PWM_Channel_InitStruct& operator=(const QAD_PWM_Channel_InitStruct& other) {
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
		eActive   = other.eActive;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	781a      	ldrb	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	701a      	strb	r2, [r3, #0]
		pGPIO     = other.pGPIO;
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685a      	ldr	r2, [r3, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	605a      	str	r2, [r3, #4]
		uPin      = other.uPin;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	891a      	ldrh	r2, [r3, #8]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	811a      	strh	r2, [r3, #8]
		uAF       = other.uAF;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	7a9a      	ldrb	r2, [r3, #10]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	729a      	strb	r2, [r3, #10]
		return *this;
 8000886:	687b      	ldr	r3, [r7, #4]
	}
 8000888:	4618      	mov	r0, r3
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct>:
  //--------------------------
	//Constructors / Destructors

  QAD_PWM() = delete;                   //Delete the default class constructor, as we need an initialization structure to be provided on class creation

  QAD_PWM(QAD_PWM_InitStruct& sInit) :  //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	6039      	str	r1, [r7, #0]
  	m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_eTimer(sInit.eTimer),
		m_sHandle({0}),
		m_uPrescaler(sInit.uPrescaler),
		m_uPeriod(sInit.uPeriod) {
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2200      	movs	r2, #0
 80008a2:	701a      	strb	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	705a      	strb	r2, [r3, #1]
		m_eTimer(sInit.eTimer),
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	781a      	ldrb	r2, [r3, #0]
		m_uPeriod(sInit.uPeriod) {
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	709a      	strb	r2, [r3, #2]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	3304      	adds	r3, #4
 80008b6:	2248      	movs	r2, #72	; 0x48
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fffe 	bl	80058bc <memset>
		m_uPrescaler(sInit.uPrescaler),
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685a      	ldr	r2, [r3, #4]
		m_uPeriod(sInit.uPeriod) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	651a      	str	r2, [r3, #80]	; 0x50
 80008d0:	2303      	movs	r3, #3
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db01      	blt.n	80008da <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x46>
 80008d6:	3b01      	subs	r3, #1
 80008d8:	e7fb      	b.n	80008d2 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x3e>

  	//Copy channel specific data from initialization structure to m_sChannels array in QAD_PWM class
  	for (uint8_t i=0; i<QAD_PWM_CHANNEL_COUNT; i++) {
 80008da:	2300      	movs	r3, #0
 80008dc:	73fb      	strb	r3, [r7, #15]
 80008de:	7bfb      	ldrb	r3, [r7, #15]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d818      	bhi.n	8000916 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x82>
  		m_sChannels[i] = sInit.sChannels[i];
 80008e4:	7bfa      	ldrb	r2, [r7, #15]
 80008e6:	4613      	mov	r3, r2
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	4413      	add	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	3350      	adds	r3, #80	; 0x50
 80008f0:	687a      	ldr	r2, [r7, #4]
 80008f2:	4413      	add	r3, r2
 80008f4:	1d18      	adds	r0, r3, #4
 80008f6:	7bfa      	ldrb	r2, [r7, #15]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	3308      	adds	r3, #8
 8000902:	683a      	ldr	r2, [r7, #0]
 8000904:	4413      	add	r3, r2
 8000906:	3304      	adds	r3, #4
 8000908:	4619      	mov	r1, r3
 800090a:	f7ff ffa7 	bl	800085c <_ZN26QAD_PWM_Channel_InitStructaSERKS_>
  	for (uint8_t i=0; i<QAD_PWM_CHANNEL_COUNT; i++) {
 800090e:	7bfb      	ldrb	r3, [r7, #15]
 8000910:	3301      	adds	r3, #1
 8000912:	73fb      	strb	r3, [r7, #15]
 8000914:	e7e3      	b.n	80008de <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x4a>
  	}

  	//Fill out m_uChannelSelect array with TIM_Channel defines
  	m_uChannelSelect[QAD_PWM_Channel_1] = TIM_CHANNEL_1;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2200      	movs	r2, #0
 800091a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	m_uChannelSelect[QAD_PWM_Channel_2] = TIM_CHANNEL_2;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2204      	movs	r2, #4
 8000922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	m_uChannelSelect[QAD_PWM_Channel_3] = TIM_CHANNEL_3;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2208      	movs	r2, #8
 800092a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  	m_uChannelSelect[QAD_PWM_Channel_4] = TIM_CHANNEL_4;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	220c      	movs	r2, #12
 8000932:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	4618      	mov	r0, r3
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <_ZN9QAD_ServoC1ER20QAD_Servo_InitStruct>:

	//------------
	//Constructors
	QAD_Servo() = delete;

	QAD_Servo(QAD_Servo_InitStruct& sInit) :
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
		m_cPWM(sInit.cPWM),
		m_eChannel(sInit.eChannel),
		m_uCenter(sInit.uCenter),
		m_uMin(sInit.uMin),
		m_uMax(sInit.uMax),
	  m_uCurrent(sInit.uCurrent) {};
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
		m_cPWM(sInit.cPWM),
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	681a      	ldr	r2, [r3, #0]
	  m_uCurrent(sInit.uCurrent) {};
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	605a      	str	r2, [r3, #4]
		m_eChannel(sInit.eChannel),
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	791a      	ldrb	r2, [r3, #4]
	  m_uCurrent(sInit.uCurrent) {};
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	721a      	strb	r2, [r3, #8]
		m_uCenter(sInit.uCenter),
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689a      	ldr	r2, [r3, #8]
	  m_uCurrent(sInit.uCurrent) {};
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	60da      	str	r2, [r3, #12]
		m_uMin(sInit.uMin),
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	68da      	ldr	r2, [r3, #12]
	  m_uCurrent(sInit.uCurrent) {};
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	611a      	str	r2, [r3, #16]
		m_uMax(sInit.uMax),
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	691a      	ldr	r2, [r3, #16]
	  m_uCurrent(sInit.uCurrent) {};
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	615a      	str	r2, [r3, #20]
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	695a      	ldr	r2, [r3, #20]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	619a      	str	r2, [r3, #24]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 800098e:	b580      	push	{r7, lr}
 8000990:	b082      	sub	sp, #8
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	460b      	mov	r3, r1
 8000998:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 800099a:	887a      	ldrh	r2, [r7, #2]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4611      	mov	r1, r2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 fa57 	bl	8000e54 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	887a      	ldrh	r2, [r7, #2]
 80009aa:	809a      	strh	r2, [r3, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2200      	movs	r2, #0
 80009b0:	80da      	strh	r2, [r3, #6]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	811a      	strh	r2, [r3, #8]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	4608      	mov	r0, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	461a      	mov	r2, r3
 80009d2:	4603      	mov	r3, r0
 80009d4:	817b      	strh	r3, [r7, #10]
 80009d6:	460b      	mov	r3, r1
 80009d8:	813b      	strh	r3, [r7, #8]
 80009da:	4613      	mov	r3, r2
 80009dc:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3304      	adds	r3, #4
 80009e8:	f107 020a 	add.w	r2, r7, #10
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 fa4c 	bl	8000e8c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3308      	adds	r3, #8
 80009f8:	f107 0208 	add.w	r2, r7, #8
 80009fc:	4611      	mov	r1, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fa44 	bl	8000e8c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2200      	movs	r2, #0
 8000a08:	731a      	strb	r2, [r3, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	735a      	strb	r2, [r3, #13]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2200      	movs	r2, #0
 8000a14:	739a      	strb	r2, [r3, #14]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	73da      	strb	r2, [r3, #15]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	08005af4 	.word	0x08005af4

08000a2c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	769a      	strb	r2, [r3, #26]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2225      	movs	r2, #37	; 0x25
 8000a88:	76da      	strb	r2, [r3, #27]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	331c      	adds	r3, #28
 8000a8e:	2244      	movs	r2, #68	; 0x44
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f004 ff12 	bl	80058bc <memset>
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	8b99      	ldrh	r1, [r3, #28]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	8bda      	ldrh	r2, [r3, #30]
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f7ff ff7b 	bl	80009c4 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000ace:	4a09      	ldr	r2, [pc, #36]	; (8000af4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	741a      	strb	r2, [r3, #16]
 8000adc:	683a      	ldr	r2, [r7, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3314      	adds	r3, #20
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f9ec 	bl	8000ec2 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08005b30 	.word	0x08005b30

08000af8 <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000af8:	b590      	push	{r4, r7, lr}
 8000afa:	b0a5      	sub	sp, #148	; 0x94
 8000afc:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000afe:	f7ff fd19 	bl	8000534 <_Z16SystemInitializev>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d000      	beq.n	8000b14 <main+0x1c>
		while (1) {}
 8000b12:	e7fe      	b.n	8000b12 <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000b14:	2014      	movs	r0, #20
 8000b16:	f004 fe58 	bl	80057ca <_Znwj>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461c      	mov	r4, r3
 8000b1e:	2220      	movs	r2, #32
 8000b20:	49c2      	ldr	r1, [pc, #776]	; (8000e2c <main+0x334>)
 8000b22:	4620      	mov	r0, r4
 8000b24:	f003 f9d1 	bl	8003eca <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000b28:	4bc1      	ldr	r3, [pc, #772]	; (8000e30 <main+0x338>)
 8000b2a:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000b32:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b36:	65bb      	str	r3, [r7, #88]	; 0x58
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000b38:	2308      	movs	r3, #8
 8000b3a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000b3e:	4bbb      	ldr	r3, [pc, #748]	; (8000e2c <main+0x334>)
 8000b40:	663b      	str	r3, [r7, #96]	; 0x60
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000b42:	2304      	movs	r3, #4
 8000b44:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000b48:	2307      	movs	r3, #7
 8000b4a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000b4e:	4bb7      	ldr	r3, [pc, #732]	; (8000e2c <main+0x334>)
 8000b50:	66bb      	str	r3, [r7, #104]	; 0x68
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000b52:	2308      	movs	r3, #8
 8000b54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000b58:	2307      	movs	r3, #7
 8000b5a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000b5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b62:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000b66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000b6e:	2018      	movs	r0, #24
 8000b70:	f004 fe2b 	bl	80057ca <_Znwj>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461c      	mov	r4, r3
 8000b78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4620      	mov	r0, r4
 8000b80:	f7ff ff98 	bl	8000ab4 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000b84:	4bab      	ldr	r3, [pc, #684]	; (8000e34 <main+0x33c>)
 8000b86:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000b88:	4baa      	ldr	r3, [pc, #680]	; (8000e34 <main+0x33c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f004 fb30 	bl	80051f4 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d005      	beq.n	8000bb0 <main+0xb8>
  	GPIO_UserLED->on();
 8000ba4:	4ba2      	ldr	r3, [pc, #648]	; (8000e30 <main+0x338>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 f9af 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000bae:	e7fe      	b.n	8000bae <main+0xb6>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000bb0:	4ba0      	ldr	r3, [pc, #640]	; (8000e34 <main+0x33c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 fb81 	bl	80052bc <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000bba:	4b9e      	ldr	r3, [pc, #632]	; (8000e34 <main+0x33c>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	499e      	ldr	r1, [pc, #632]	; (8000e38 <main+0x340>)
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f004 fb47 	bl	8005254 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //--------------------------
  //--------------------------
  //Setup PWM Driver for Servo
  QAD_PWM_InitStruct PWM_Init;
  PWM_Init.eTimer     = QAD_Timer2;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	763b      	strb	r3, [r7, #24]
  PWM_Init.uPrescaler = 100;
 8000bca:	2364      	movs	r3, #100	; 0x64
 8000bcc:	61fb      	str	r3, [r7, #28]
  PWM_Init.uPeriod    = 20000;
 8000bce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000bd2:	623b      	str	r3, [r7, #32]

  PWM_Init.sChannels[0].eActive = QA_Inactive;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

  PWM_Init.sChannels[1].eActive = QA_Active;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  PWM_Init.sChannels[1].pGPIO   = GPIOA;
 8000be0:	4b92      	ldr	r3, [pc, #584]	; (8000e2c <main+0x334>)
 8000be2:	637b      	str	r3, [r7, #52]	; 0x34
  PWM_Init.sChannels[1].uPin    = GPIO_PIN_1;
 8000be4:	2302      	movs	r3, #2
 8000be6:	873b      	strh	r3, [r7, #56]	; 0x38
  PWM_Init.sChannels[1].uAF     = GPIO_AF1_TIM2;
 8000be8:	2301      	movs	r3, #1
 8000bea:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

  PWM_Init.sChannels[2].eActive = QA_Inactive;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  PWM_Init.sChannels[3].eActive = QA_Inactive;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

  PWM_Test = new QAD_PWM(PWM_Init);
 8000bfa:	2094      	movs	r0, #148	; 0x94
 8000bfc:	f004 fde5 	bl	80057ca <_Znwj>
 8000c00:	4603      	mov	r3, r0
 8000c02:	461c      	mov	r4, r3
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f7ff fe42 	bl	8000894 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct>
 8000c10:	4b8a      	ldr	r3, [pc, #552]	; (8000e3c <main+0x344>)
 8000c12:	601c      	str	r4, [r3, #0]

  if (PWM_Test->init()) {
 8000c14:	4b89      	ldr	r3, [pc, #548]	; (8000e3c <main+0x344>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 f9f0 	bl	8003ffe <_ZN7QAD_PWM4initEv>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	bf14      	ite	ne
 8000c24:	2301      	movne	r3, #1
 8000c26:	2300      	moveq	r3, #0
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <main+0x14e>
  	UART_STLink->txStringCR("PWM: Initialization Failed");
 8000c2e:	4b81      	ldr	r3, [pc, #516]	; (8000e34 <main+0x33c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4983      	ldr	r1, [pc, #524]	; (8000e40 <main+0x348>)
 8000c34:	4618      	mov	r0, r3
 8000c36:	f004 fb0d 	bl	8005254 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED->on();
 8000c3a:	4b7d      	ldr	r3, [pc, #500]	; (8000e30 <main+0x338>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f003 f964 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000c44:	e7fe      	b.n	8000c44 <main+0x14c>
  }
  PWM_Test->start();
 8000c46:	4b7d      	ldr	r3, [pc, #500]	; (8000e3c <main+0x344>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fa02 	bl	8004054 <_ZN7QAD_PWM5startEv>
  UART_STLink->txStringCR("PWM: Initialized and Started");
 8000c50:	4b78      	ldr	r3, [pc, #480]	; (8000e34 <main+0x33c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	497b      	ldr	r1, [pc, #492]	; (8000e44 <main+0x34c>)
 8000c56:	4618      	mov	r0, r3
 8000c58:	f004 fafc 	bl	8005254 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  //------------------
  //Setup Servo Driver
  QAD_Servo_InitStruct Servo_Init;
  Servo_Init.cPWM     = PWM_Test;
 8000c5c:	4b77      	ldr	r3, [pc, #476]	; (8000e3c <main+0x344>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	603b      	str	r3, [r7, #0]
  Servo_Init.eChannel = QAD_PWM_Channel_2;
 8000c62:	2301      	movs	r3, #1
 8000c64:	713b      	strb	r3, [r7, #4]
  Servo_Init.uCenter  = 1500;
 8000c66:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000c6a:	60bb      	str	r3, [r7, #8]
  Servo_Init.uMin     = 600;
 8000c6c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000c70:	60fb      	str	r3, [r7, #12]
  Servo_Init.uMax     = 2400;
 8000c72:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000c76:	613b      	str	r3, [r7, #16]
  Servo_Init.uCurrent = 1500;
 8000c78:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000c7c:	617b      	str	r3, [r7, #20]
  Servo_Test = new QAD_Servo(Servo_Init);
 8000c7e:	201c      	movs	r0, #28
 8000c80:	f004 fda3 	bl	80057ca <_Znwj>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461c      	mov	r4, r3
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fe57 	bl	8000940 <_ZN9QAD_ServoC1ER20QAD_Servo_InitStruct>
 8000c92:	4b6d      	ldr	r3, [pc, #436]	; (8000e48 <main+0x350>)
 8000c94:	601c      	str	r4, [r3, #0]

  if (Servo_Test->init()) {
 8000c96:	4b6c      	ldr	r3, [pc, #432]	; (8000e48 <main+0x350>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f003 fb9b 	bl	80043d6 <_ZN9QAD_Servo4initEv>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d00b      	beq.n	8000cc8 <main+0x1d0>
  	UART_STLink->txStringCR("Servo: Initialization Failed");
 8000cb0:	4b60      	ldr	r3, [pc, #384]	; (8000e34 <main+0x33c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4965      	ldr	r1, [pc, #404]	; (8000e4c <main+0x354>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 facc 	bl	8005254 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	GPIO_UserLED->on();
 8000cbc:	4b5c      	ldr	r3, [pc, #368]	; (8000e30 <main+0x338>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f003 f923 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000cc6:	e7fe      	b.n	8000cc6 <main+0x1ce>
  }
  UART_STLink->txStringCR("Servo: Initialized");
 8000cc8:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <main+0x33c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4960      	ldr	r1, [pc, #384]	; (8000e50 <main+0x358>)
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f004 fac0 	bl	8005254 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>


  HAL_Delay(1000);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f000 fbc6 	bl	8001468 <HAL_Delay>
  Servo_Test->min();
 8000cdc:	4b5a      	ldr	r3, [pc, #360]	; (8000e48 <main+0x350>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f003 fc22 	bl	800452a <_ZN9QAD_Servo3minEv>
  HAL_Delay(1000);
 8000ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cea:	f000 fbbd 	bl	8001468 <HAL_Delay>
  Servo_Test->max();
 8000cee:	4b56      	ldr	r3, [pc, #344]	; (8000e48 <main+0x350>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 fc28 	bl	8004548 <_ZN9QAD_Servo3maxEv>
  HAL_Delay(1000);
 8000cf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cfc:	f000 fbb4 	bl	8001468 <HAL_Delay>
  Servo_Test->center();
 8000d00:	4b51      	ldr	r3, [pc, #324]	; (8000e48 <main+0x350>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 fc01 	bl	800450c <_ZN9QAD_Servo6centerEv>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000d0a:	f000 fba1 	bl	8001450 <HAL_GetTick>
 8000d0e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t uOldTick = uNewTick;
 8000d12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d16:	67bb      	str	r3, [r7, #120]	; 0x78

  //Create task timing variables
	uint32_t uServoTicks = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	uint32_t uHeartbeatTicks = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	//Servo Data
	int8_t iPosition = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	bool   bDirection = true;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000d30:	f000 fb8e 	bl	8001450 <HAL_GetTick>
 8000d34:	6778      	str	r0, [r7, #116]	; 0x74
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000d36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000d38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d019      	beq.n	8000d74 <main+0x27c>
    	uOldTick = uNewTick;
 8000d40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d44:	67bb      	str	r3, [r7, #120]	; 0x78
    	uNewTick = uCurTick;
 8000d46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000d4c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d207      	bcs.n	8000d66 <main+0x26e>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000d56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d64:	e009      	b.n	8000d7a <main+0x282>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000d66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8000d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000d72:	e002      	b.n	8000d7a <main+0x282>
    	}

    } else {
    	uTicks = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    }


    //------------
    //Update Servo
    uServoTicks += uTicks;
 8000d7a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000d82:	4413      	add	r3, r2
 8000d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (uServoTicks >= QA_FT_ServoTickThreshold) {
 8000d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d935      	bls.n	8000dfc <main+0x304>

    	if (bDirection) {
 8000d90:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00f      	beq.n	8000db8 <main+0x2c0>

    		if (iPosition < 100) {
 8000d98:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8000d9c:	2b63      	cmp	r3, #99	; 0x63
 8000d9e:	dc07      	bgt.n	8000db0 <main+0x2b8>
    			iPosition++;
 8000da0:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000dae:	e013      	b.n	8000dd8 <main+0x2e0>
    		} else {
    			bDirection = false;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8000db6:	e00f      	b.n	8000dd8 <main+0x2e0>
    		}

    	} else {

    		if (iPosition > -100) {
 8000db8:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8000dbc:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8000dc0:	db07      	blt.n	8000dd2 <main+0x2da>
    			iPosition--;
 8000dc2:	f997 307f 	ldrsb.w	r3, [r7, #127]	; 0x7f
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8000dd0:	e002      	b.n	8000dd8 <main+0x2e0>
    		} else {
    			bDirection = true;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
    		}

    	}

    	Servo_Test->setPosition(iPosition);
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <main+0x350>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f997 207f 	ldrsb.w	r2, [r7, #127]	; 0x7f
 8000de0:	ee07 2a90 	vmov	s15, r2
 8000de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de8:	eeb0 0a67 	vmov.f32	s0, s15
 8000dec:	4618      	mov	r0, r3
 8000dee:	f003 fb01 	bl	80043f4 <_ZN9QAD_Servo11setPositionEf>

    	uServoTicks -= QA_FT_ServoTickThreshold;
 8000df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000df6:	3b0a      	subs	r3, #10
 8000df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000dfc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8000e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000e04:	4413      	add	r3, r2
 8000e06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e12:	d38d      	bcc.n	8000d30 <main+0x238>
    	GPIO_UserLED->toggle();
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <main+0x338>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f003 f89d 	bl	8003f58 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset heartbeat ticks
 8000e1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e22:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000e26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    uCurTick = HAL_GetTick();
 8000e2a:	e781      	b.n	8000d30 <main+0x238>
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	20000254 	.word	0x20000254
 8000e34:	20000258 	.word	0x20000258
 8000e38:	08005a5c 	.word	0x08005a5c
 8000e3c:	2000025c 	.word	0x2000025c
 8000e40:	08005a7c 	.word	0x08005a7c
 8000e44:	08005a98 	.word	0x08005a98
 8000e48:	20000260 	.word	0x20000260
 8000e4c:	08005ab8 	.word	0x08005ab8
 8000e50:	08005ad8 	.word	0x08005ad8

08000e54 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000e5e:	683c      	ldr	r4, [r7, #0]
 8000e60:	4620      	mov	r0, r4
 8000e62:	f004 fcc3 	bl	80057ec <_Znaj>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4618      	mov	r0, r3
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	1e63      	subs	r3, r4, #1
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db04      	blt.n	8000e7c <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000e72:	2100      	movs	r1, #0
 8000e74:	7011      	strb	r1, [r2, #0]
 8000e76:	3201      	adds	r2, #1
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	e7f8      	b.n	8000e6e <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f000 f839 	bl	8000ef6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}

08000e8c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000e8c:	b5b0      	push	{r4, r5, r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000e96:	6838      	ldr	r0, [r7, #0]
 8000e98:	f000 f849 	bl	8000f2e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	881c      	ldrh	r4, [r3, #0]
 8000ea0:	200c      	movs	r0, #12
 8000ea2:	f004 fc92 	bl	80057ca <_Znwj>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	461d      	mov	r5, r3
 8000eaa:	4621      	mov	r1, r4
 8000eac:	4628      	mov	r0, r5
 8000eae:	f7ff fd6e 	bl	800098e <_ZN14QAT_FIFOBufferC1Et>
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f000 f845 	bl	8000f44 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bdb0      	pop	{r4, r5, r7, pc}

08000ec2 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000ec2:	b5b0      	push	{r4, r5, r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000ecc:	6838      	ldr	r0, [r7, #0]
 8000ece:	f000 f855 	bl	8000f7c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000ed2:	4605      	mov	r5, r0
 8000ed4:	2064      	movs	r0, #100	; 0x64
 8000ed6:	f004 fc78 	bl	80057ca <_Znwj>
 8000eda:	4603      	mov	r3, r0
 8000edc:	461c      	mov	r4, r3
 8000ede:	4629      	mov	r1, r5
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f7ff fda3 	bl	8000a2c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000ee6:	4621      	mov	r1, r4
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f852 	bl	8000f92 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bdb0      	pop	{r4, r5, r7, pc}

08000ef6 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6839      	ldr	r1, [r7, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f000 f860 	bl	8000fca <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f867 	bl	8000ff2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f2e:	b480      	push	{r7}
 8000f30:	b083      	sub	sp, #12
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6839      	ldr	r1, [r7, #0]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f85a 	bl	800100c <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f861 	bl	8001034 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6839      	ldr	r1, [r7, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 f854 	bl	800104e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f85b 	bl	8001076 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f85a 	bl	8001090 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff99 	bl	8000f14 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f000 f854 	bl	80010aa <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001002:	4603      	mov	r3, r0
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f852 	bl	80010c2 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff ff9f 	bl	8000f62 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001024:	4602      	mov	r2, r0
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f84c 	bl	80010dc <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001044:	4603      	mov	r3, r0
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	6039      	str	r1, [r7, #0]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f84a 	bl	80010f4 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffa5 	bl	8000fb0 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001066:	4602      	mov	r2, r0
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6013      	str	r3, [r2, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f844 	bl	800110e <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001086:	4603      	mov	r3, r0
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f843 	bl	8001126 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f000 f847 	bl	8001146 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f847 	bl	8001160 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f000 f84b 	bl	8001180 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f84b 	bl	800119a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 f84f 	bl	80011ba <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 800111c:	4603      	mov	r3, r0
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 f850 	bl	80011d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f858 	bl	80011ec <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f859 	bl	8001208 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8001156:	4603      	mov	r3, r0
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f858 	bl	800121e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f860 	bl	8001236 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f861 	bl	8001252 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f000 f860 	bl	8001268 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f868 	bl	8001280 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f869 	bl	800129c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f000 f868 	bl	80012b2 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 800121e:	b580      	push	{r7, lr}
 8001220:	b082      	sub	sp, #8
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f84e 	bl	80012c8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f000 f834 	bl	80012de <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
	return 1;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_kill>:

int _kill(int pid, int sig)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800130e:	f004 fa95 	bl	800583c <__errno>
 8001312:	4603      	mov	r3, r0
 8001314:	2216      	movs	r2, #22
 8001316:	601a      	str	r2, [r3, #0]
	return -1;
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_exit>:

void _exit (int status)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800132c:	f04f 31ff 	mov.w	r1, #4294967295
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffe7 	bl	8001304 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001336:	e7fe      	b.n	8001336 <_exit+0x12>

08001338 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001340:	4a14      	ldr	r2, [pc, #80]	; (8001394 <_sbrk+0x5c>)
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <_sbrk+0x60>)
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk+0x64>)
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <_sbrk+0x68>)
 8001358:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	429a      	cmp	r2, r3
 8001366:	d207      	bcs.n	8001378 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001368:	f004 fa68 	bl	800583c <__errno>
 800136c:	4603      	mov	r3, r0
 800136e:	220c      	movs	r2, #12
 8001370:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
 8001376:	e009      	b.n	800138c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001378:	4b08      	ldr	r3, [pc, #32]	; (800139c <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <_sbrk+0x64>)
 8001388:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800138a:	68fb      	ldr	r3, [r7, #12]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20020000 	.word	0x20020000
 8001398:	00000400 	.word	0x00000400
 800139c:	20000264 	.word	0x20000264
 80013a0:	20000358 	.word	0x20000358

080013a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <SystemInit+0x20>)
 80013aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <SystemInit+0x20>)
 80013b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 fd4d 	bl	8001e86 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295
 8001404:	f000 fd07 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000000 	.word	0x20000000
 8001420:	20000008 	.word	0x20000008
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008
 800144c:	20000340 	.word	0x20000340

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000340 	.word	0x20000340

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000008 	.word	0x20000008

080014b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e033      	b.n	800152e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d109      	bne.n	80014e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f863 	bl	800159a <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80014f6:	f023 0302 	bic.w	r3, r3, #2
 80014fa:	f043 0202 	orr.w	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fa8c 	bl	8001a20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0201 	orr.w	r2, r3, #1
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	641a      	str	r2, [r3, #64]	; 0x40
 800151e:	e001      	b.n	8001524 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800152c:	7bfb      	ldrb	r3, [r7, #15]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8001536:	b580      	push	{r7, lr}
 8001538:	b084      	sub	sp, #16
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e022      	b.n	8001592 <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001550:	f043 0202 	orr.w	r2, r3, #2
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 0201 	bic.w	r2, r2, #1
 8001566:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d108      	bne.n	8001588 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f819 	bl	80015ae <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001590:	7bfb      	ldrb	r3, [r7, #15]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <HAL_ADC_MspDeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <HAL_ADC_Start_IT+0x1a>
 80015da:	2302      	movs	r3, #2
 80015dc:	e0a1      	b.n	8001722 <HAL_ADC_Start_IT+0x15e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f003 0301 	and.w	r3, r3, #1
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d018      	beq.n	8001626 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <HAL_ADC_Start_IT+0x16c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a4a      	ldr	r2, [pc, #296]	; (8001734 <HAL_ADC_Start_IT+0x170>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9a      	lsrs	r2, r3, #18
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001618:	e002      	b.n	8001620 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	3b01      	subs	r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f9      	bne.n	800161a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	2b01      	cmp	r3, #1
 8001632:	d169      	bne.n	8001708 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800165e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001672:	d106      	bne.n	8001682 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	f023 0206 	bic.w	r2, r3, #6
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	645a      	str	r2, [r3, #68]	; 0x44
 8001680:	e002      	b.n	8001688 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_ADC_Start_IT+0x174>)
 8001692:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800169c:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	6812      	ldr	r2, [r2, #0]
 80016a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 031f 	and.w	r3, r3, #31
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d129      	bne.n	8001720 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	e020      	b.n	8001720 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a16      	ldr	r2, [pc, #88]	; (800173c <HAL_ADC_Start_IT+0x178>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d11b      	bne.n	8001720 <HAL_ADC_Start_IT+0x15c>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d114      	bne.n	8001720 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	e00b      	b.n	8001720 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f043 0210 	orr.w	r2, r3, #16
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	f043 0201 	orr.w	r2, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000000 	.word	0x20000000
 8001734:	431bde83 	.word	0x431bde83
 8001738:	40012300 	.word	0x40012300
 800173c:	40012000 	.word	0x40012000

08001740 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800174e:	2b01      	cmp	r3, #1
 8001750:	d101      	bne.n	8001756 <HAL_ADC_Stop_IT+0x16>
 8001752:	2302      	movs	r3, #2
 8001754:	e02b      	b.n	80017ae <HAL_ADC_Stop_IT+0x6e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d113      	bne.n	80017a4 <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800178a:	f023 0320 	bic.w	r3, r3, #32
 800178e:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x1c>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e113      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x244>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b09      	cmp	r3, #9
 80017e6:	d925      	bls.n	8001834 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	68d9      	ldr	r1, [r3, #12]
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	4613      	mov	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	4413      	add	r3, r2
 80017fc:	3b1e      	subs	r3, #30
 80017fe:	2207      	movs	r2, #7
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43da      	mvns	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	400a      	ands	r2, r1
 800180c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68d9      	ldr	r1, [r3, #12]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	b29b      	uxth	r3, r3
 800181e:	4618      	mov	r0, r3
 8001820:	4603      	mov	r3, r0
 8001822:	005b      	lsls	r3, r3, #1
 8001824:	4403      	add	r3, r0
 8001826:	3b1e      	subs	r3, #30
 8001828:	409a      	lsls	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	e022      	b.n	800187a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6919      	ldr	r1, [r3, #16]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	2207      	movs	r2, #7
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	400a      	ands	r2, r1
 8001856:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6919      	ldr	r1, [r3, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	b29b      	uxth	r3, r3
 8001868:	4618      	mov	r0, r3
 800186a:	4603      	mov	r3, r0
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4403      	add	r3, r0
 8001870:	409a      	lsls	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b06      	cmp	r3, #6
 8001880:	d824      	bhi.n	80018cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	3b05      	subs	r3, #5
 8001894:	221f      	movs	r2, #31
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	400a      	ands	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	4618      	mov	r0, r3
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	3b05      	subs	r3, #5
 80018be:	fa00 f203 	lsl.w	r2, r0, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ca:	e04c      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b0c      	cmp	r3, #12
 80018d2:	d824      	bhi.n	800191e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	4613      	mov	r3, r2
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	4413      	add	r3, r2
 80018e4:	3b23      	subs	r3, #35	; 0x23
 80018e6:	221f      	movs	r2, #31
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43da      	mvns	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	400a      	ands	r2, r1
 80018f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	b29b      	uxth	r3, r3
 8001902:	4618      	mov	r0, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685a      	ldr	r2, [r3, #4]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	3b23      	subs	r3, #35	; 0x23
 8001910:	fa00 f203 	lsl.w	r2, r0, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	631a      	str	r2, [r3, #48]	; 0x30
 800191c:	e023      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	3b41      	subs	r3, #65	; 0x41
 8001930:	221f      	movs	r2, #31
 8001932:	fa02 f303 	lsl.w	r3, r2, r3
 8001936:	43da      	mvns	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	400a      	ands	r2, r1
 800193e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	4618      	mov	r0, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4413      	add	r3, r2
 8001958:	3b41      	subs	r3, #65	; 0x41
 800195a:	fa00 f203 	lsl.w	r2, r0, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_ADC_ConfigChannel+0x250>)
 8001968:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a28      	ldr	r2, [pc, #160]	; (8001a10 <HAL_ADC_ConfigChannel+0x254>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d10f      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1d8>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2b12      	cmp	r3, #18
 800197a:	d10b      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a1d      	ldr	r2, [pc, #116]	; (8001a10 <HAL_ADC_ConfigChannel+0x254>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d12b      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x23a>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_ADC_ConfigChannel+0x258>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d003      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0x1f4>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b11      	cmp	r3, #17
 80019ae:	d122      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a11      	ldr	r2, [pc, #68]	; (8001a14 <HAL_ADC_ConfigChannel+0x258>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d111      	bne.n	80019f6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <HAL_ADC_ConfigChannel+0x25c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a11      	ldr	r2, [pc, #68]	; (8001a1c <HAL_ADC_ConfigChannel+0x260>)
 80019d8:	fba2 2303 	umull	r2, r3, r2, r3
 80019dc:	0c9a      	lsrs	r2, r3, #18
 80019de:	4613      	mov	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	4413      	add	r3, r2
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e8:	e002      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	3b01      	subs	r3, #1
 80019ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f9      	bne.n	80019ea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	40012300 	.word	0x40012300
 8001a10:	40012000 	.word	0x40012000
 8001a14:	10000012 	.word	0x10000012
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	431bde83 	.word	0x431bde83

08001a20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a28:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <ADC_Init+0x1f0>)
 8001a2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	431a      	orrs	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	021a      	lsls	r2, r3, #8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6899      	ldr	r1, [r3, #8]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab2:	4a58      	ldr	r2, [pc, #352]	; (8001c14 <ADC_Init+0x1f4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d022      	beq.n	8001afe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ac6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6899      	ldr	r1, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ae8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6899      	ldr	r1, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	e00f      	b.n	8001b1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0202 	bic.w	r2, r2, #2
 8001b2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6899      	ldr	r1, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7e1b      	ldrb	r3, [r3, #24]
 8001b38:	005a      	lsls	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01b      	beq.n	8001b84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b5a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	3b01      	subs	r3, #1
 8001b78:	035a      	lsls	r2, r3, #13
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	e007      	b.n	8001b94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b92:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	051a      	lsls	r2, r3, #20
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6899      	ldr	r1, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bd6:	025a      	lsls	r2, r3, #9
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6899      	ldr	r1, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	029a      	lsls	r2, r3, #10
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	430a      	orrs	r2, r1
 8001c02:	609a      	str	r2, [r3, #8]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	40012300 	.word	0x40012300
 8001c14:	0f000001 	.word	0x0f000001

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	; (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	db12      	blt.n	8001cf0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	490a      	ldr	r1, [pc, #40]	; (8001cfc <__NVIC_DisableIRQ+0x44>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	2001      	movs	r0, #1
 8001cda:	fa00 f202 	lsl.w	r2, r0, r2
 8001cde:	3320      	adds	r3, #32
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ce4:	f3bf 8f4f 	dsb	sy
}
 8001ce8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cea:	f3bf 8f6f 	isb	sy
}
 8001cee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	; (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	; (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	; 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	; 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff05 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff1a 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff0d 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff1d 	bl	8001cb8 <__NVIC_DisableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ff94 	bl	8001dbc <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e159      	b.n	8002170 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 8148 	bne.w	800216a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80a2 	beq.w	800216a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b57      	ldr	r3, [pc, #348]	; (8002188 <HAL_GPIO_Init+0x2e8>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a56      	ldr	r2, [pc, #344]	; (8002188 <HAL_GPIO_Init+0x2e8>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b54      	ldr	r3, [pc, #336]	; (8002188 <HAL_GPIO_Init+0x2e8>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_GPIO_Init+0x2ec>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a49      	ldr	r2, [pc, #292]	; (8002190 <HAL_GPIO_Init+0x2f0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d019      	beq.n	80020a2 <HAL_GPIO_Init+0x202>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a48      	ldr	r2, [pc, #288]	; (8002194 <HAL_GPIO_Init+0x2f4>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d013      	beq.n	800209e <HAL_GPIO_Init+0x1fe>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a47      	ldr	r2, [pc, #284]	; (8002198 <HAL_GPIO_Init+0x2f8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d00d      	beq.n	800209a <HAL_GPIO_Init+0x1fa>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a46      	ldr	r2, [pc, #280]	; (800219c <HAL_GPIO_Init+0x2fc>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d007      	beq.n	8002096 <HAL_GPIO_Init+0x1f6>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a45      	ldr	r2, [pc, #276]	; (80021a0 <HAL_GPIO_Init+0x300>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_GPIO_Init+0x1f2>
 800208e:	2304      	movs	r3, #4
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 8002092:	2307      	movs	r3, #7
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x204>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b4:	4935      	ldr	r1, [pc, #212]	; (800218c <HAL_GPIO_Init+0x2ec>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c2:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e6:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020ec:	4b2d      	ldr	r3, [pc, #180]	; (80021a4 <HAL_GPIO_Init+0x304>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002110:	4a24      	ldr	r2, [pc, #144]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002116:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800213a:	4a1a      	ldr	r2, [pc, #104]	; (80021a4 <HAL_GPIO_Init+0x304>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002164:	4a0f      	ldr	r2, [pc, #60]	; (80021a4 <HAL_GPIO_Init+0x304>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f aea2 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	40023800 	.word	0x40023800
 800218c:	40013800 	.word	0x40013800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400
 8002198:	40020800 	.word	0x40020800
 800219c:	40020c00 	.word	0x40020c00
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40013c00 	.word	0x40013c00

080021a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e0bb      	b.n	800233c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021c4:	2201      	movs	r2, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	fa02 f303 	lsl.w	r3, r2, r3
 80021cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4013      	ands	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	429a      	cmp	r2, r3
 80021dc:	f040 80ab 	bne.w	8002336 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80021e0:	4a5c      	ldr	r2, [pc, #368]	; (8002354 <HAL_GPIO_DeInit+0x1ac>)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	089b      	lsrs	r3, r3, #2
 80021e6:	3302      	adds	r3, #2
 80021e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ec:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	4013      	ands	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a54      	ldr	r2, [pc, #336]	; (8002358 <HAL_GPIO_DeInit+0x1b0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d019      	beq.n	800223e <HAL_GPIO_DeInit+0x96>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a53      	ldr	r2, [pc, #332]	; (800235c <HAL_GPIO_DeInit+0x1b4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_DeInit+0x92>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_GPIO_DeInit+0x1b8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d00d      	beq.n	8002236 <HAL_GPIO_DeInit+0x8e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a51      	ldr	r2, [pc, #324]	; (8002364 <HAL_GPIO_DeInit+0x1bc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d007      	beq.n	8002232 <HAL_GPIO_DeInit+0x8a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a50      	ldr	r2, [pc, #320]	; (8002368 <HAL_GPIO_DeInit+0x1c0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d101      	bne.n	800222e <HAL_GPIO_DeInit+0x86>
 800222a:	2304      	movs	r3, #4
 800222c:	e008      	b.n	8002240 <HAL_GPIO_DeInit+0x98>
 800222e:	2307      	movs	r3, #7
 8002230:	e006      	b.n	8002240 <HAL_GPIO_DeInit+0x98>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_DeInit+0x98>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_DeInit+0x98>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_DeInit+0x98>
 800223e:	2300      	movs	r3, #0
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	429a      	cmp	r2, r3
 800224e:	d132      	bne.n	80022b6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002250:	4b46      	ldr	r3, [pc, #280]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	4944      	ldr	r1, [pc, #272]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 800225a:	4013      	ands	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800225e:	4b43      	ldr	r3, [pc, #268]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	4941      	ldr	r1, [pc, #260]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 8002268:	4013      	ands	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800226c:	4b3f      	ldr	r3, [pc, #252]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43db      	mvns	r3, r3
 8002274:	493d      	ldr	r1, [pc, #244]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 8002276:	4013      	ands	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800227a:	4b3c      	ldr	r3, [pc, #240]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	493a      	ldr	r1, [pc, #232]	; (800236c <HAL_GPIO_DeInit+0x1c4>)
 8002284:	4013      	ands	r3, r2
 8002286:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002298:	4a2e      	ldr	r2, [pc, #184]	; (8002354 <HAL_GPIO_DeInit+0x1ac>)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	43da      	mvns	r2, r3
 80022a8:	482a      	ldr	r0, [pc, #168]	; (8002354 <HAL_GPIO_DeInit+0x1ac>)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	089b      	lsrs	r3, r3, #2
 80022ae:	400a      	ands	r2, r1
 80022b0:	3302      	adds	r3, #2
 80022b2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2103      	movs	r1, #3
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	401a      	ands	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	08d2      	lsrs	r2, r2, #3
 80022ec:	4019      	ands	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3208      	adds	r2, #8
 80022f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	2103      	movs	r1, #3
 8002300:	fa01 f303 	lsl.w	r3, r1, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	401a      	ands	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	2103      	movs	r1, #3
 800232a:	fa01 f303 	lsl.w	r3, r1, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	401a      	ands	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	3301      	adds	r3, #1
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2b0f      	cmp	r3, #15
 8002340:	f67f af40 	bls.w	80021c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002344:	bf00      	nop
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40013c00 	.word	0x40013c00

08002370 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	807b      	strh	r3, [r7, #2]
 800237c:	4613      	mov	r3, r2
 800237e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002386:	887a      	ldrh	r2, [r7, #2]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800238c:	e003      	b.n	8002396 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800238e:	887b      	ldrh	r3, [r7, #2]
 8002390:	041a      	lsls	r2, r3, #16
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	619a      	str	r2, [r3, #24]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e264      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d075      	beq.n	80024ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c2:	4ba3      	ldr	r3, [pc, #652]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4ba0      	ldr	r3, [pc, #640]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d112      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b9d      	ldr	r3, [pc, #628]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e6:	d10b      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b99      	ldr	r3, [pc, #612]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05b      	beq.n	80024ac <HAL_RCC_OscConfig+0x108>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d157      	bne.n	80024ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e23f      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d106      	bne.n	8002418 <HAL_RCC_OscConfig+0x74>
 800240a:	4b91      	ldr	r3, [pc, #580]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a90      	ldr	r2, [pc, #576]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x98>
 8002422:	4b8b      	ldr	r3, [pc, #556]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a8a      	ldr	r2, [pc, #552]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a87      	ldr	r2, [pc, #540]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 800243c:	4b84      	ldr	r3, [pc, #528]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a83      	ldr	r2, [pc, #524]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a80      	ldr	r2, [pc, #512]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fff8 	bl	8001450 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fff4 	bl	8001450 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e204      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b76      	ldr	r3, [pc, #472]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xc0>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe ffe4 	bl	8001450 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe ffe0 	bl	8001450 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1f0      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b6c      	ldr	r3, [pc, #432]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0xe8>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b5f      	ldr	r3, [pc, #380]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b5c      	ldr	r3, [pc, #368]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1c4      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b56      	ldr	r3, [pc, #344]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4952      	ldr	r1, [pc, #328]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b4f      	ldr	r3, [pc, #316]	; (8002654 <HAL_RCC_OscConfig+0x2b0>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe ff99 	bl	8001450 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe ff95 	bl	8001450 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1a5      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b46      	ldr	r3, [pc, #280]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b43      	ldr	r3, [pc, #268]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4940      	ldr	r1, [pc, #256]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b3f      	ldr	r3, [pc, #252]	; (8002654 <HAL_RCC_OscConfig+0x2b0>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe ff78 	bl	8001450 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe ff74 	bl	8001450 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e184      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d030      	beq.n	80025f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b30      	ldr	r3, [pc, #192]	; (8002658 <HAL_RCC_OscConfig+0x2b4>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe ff58 	bl	8001450 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a4:	f7fe ff54 	bl	8001450 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e164      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b26      	ldr	r3, [pc, #152]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x200>
 80025c2:	e015      	b.n	80025f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_OscConfig+0x2b4>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7fe ff41 	bl	8001450 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe ff3d 	bl	8001450 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e14d      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b1a      	ldr	r3, [pc, #104]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 80025e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1f0      	bne.n	80025d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80a0 	beq.w	800273e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	4a0e      	ldr	r2, [pc, #56]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261c:	6413      	str	r3, [r2, #64]	; 0x40
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002626:	60bb      	str	r3, [r7, #8]
 8002628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262a:	2301      	movs	r3, #1
 800262c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_OscConfig+0x2b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800263a:	4b08      	ldr	r3, [pc, #32]	; (800265c <HAL_RCC_OscConfig+0x2b8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_RCC_OscConfig+0x2b8>)
 8002640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002646:	f7fe ff03 	bl	8001450 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	e011      	b.n	8002672 <HAL_RCC_OscConfig+0x2ce>
 800264e:	bf00      	nop
 8002650:	40023800 	.word	0x40023800
 8002654:	42470000 	.word	0x42470000
 8002658:	42470e80 	.word	0x42470e80
 800265c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe fef6 	bl	8001450 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e106      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002672:	4b85      	ldr	r3, [pc, #532]	; (8002888 <HAL_RCC_OscConfig+0x4e4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x2f0>
 8002686:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268a:	4a80      	ldr	r2, [pc, #512]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6713      	str	r3, [r2, #112]	; 0x70
 8002692:	e01c      	b.n	80026ce <HAL_RCC_OscConfig+0x32a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	2b05      	cmp	r3, #5
 800269a:	d10c      	bne.n	80026b6 <HAL_RCC_OscConfig+0x312>
 800269c:	4b7b      	ldr	r3, [pc, #492]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	4a7a      	ldr	r2, [pc, #488]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026a2:	f043 0304 	orr.w	r3, r3, #4
 80026a6:	6713      	str	r3, [r2, #112]	; 0x70
 80026a8:	4b78      	ldr	r3, [pc, #480]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	4a77      	ldr	r2, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	; 0x70
 80026b4:	e00b      	b.n	80026ce <HAL_RCC_OscConfig+0x32a>
 80026b6:	4b75      	ldr	r3, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a74      	ldr	r2, [pc, #464]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	f023 0301 	bic.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a71      	ldr	r2, [pc, #452]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026c8:	f023 0304 	bic.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d015      	beq.n	8002702 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7fe febb 	bl	8001450 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe feb7 	bl	8001450 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e0c5      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f4:	4b65      	ldr	r3, [pc, #404]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0ee      	beq.n	80026de <HAL_RCC_OscConfig+0x33a>
 8002700:	e014      	b.n	800272c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7fe fea5 	bl	8001450 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002708:	e00a      	b.n	8002720 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270a:	f7fe fea1 	bl	8001450 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	f241 3288 	movw	r2, #5000	; 0x1388
 8002718:	4293      	cmp	r3, r2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e0af      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002720:	4b5a      	ldr	r3, [pc, #360]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d1ee      	bne.n	800270a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800272c:	7dfb      	ldrb	r3, [r7, #23]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002732:	4b56      	ldr	r3, [pc, #344]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a55      	ldr	r2, [pc, #340]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002738:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699b      	ldr	r3, [r3, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 809b 	beq.w	800287e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f003 030c 	and.w	r3, r3, #12
 8002750:	2b08      	cmp	r3, #8
 8002752:	d05c      	beq.n	800280e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d141      	bne.n	80027e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b4c      	ldr	r3, [pc, #304]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe fe75 	bl	8001450 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe fe71 	bl	8001450 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e081      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69da      	ldr	r2, [r3, #28]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	019b      	lsls	r3, r3, #6
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	085b      	lsrs	r3, r3, #1
 80027a0:	3b01      	subs	r3, #1
 80027a2:	041b      	lsls	r3, r3, #16
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	4937      	ldr	r1, [pc, #220]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b2:	4b37      	ldr	r3, [pc, #220]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b8:	f7fe fe4a 	bl	8001450 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c0:	f7fe fe46 	bl	8001450 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e056      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b2e      	ldr	r3, [pc, #184]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x41c>
 80027de:	e04e      	b.n	800287e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e0:	4b2b      	ldr	r3, [pc, #172]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fe33 	bl	8001450 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fe2f 	bl	8001450 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e03f      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x44a>
 800280c:	e037      	b.n	800287e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e032      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800281a:	4b1c      	ldr	r3, [pc, #112]	; (800288c <HAL_RCC_OscConfig+0x4e8>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d028      	beq.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002832:	429a      	cmp	r2, r3
 8002834:	d121      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d11a      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800284a:	4013      	ands	r3, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002850:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002852:	4293      	cmp	r3, r2
 8002854:	d111      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	085b      	lsrs	r3, r3, #1
 8002862:	3b01      	subs	r3, #1
 8002864:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002866:	429a      	cmp	r2, r3
 8002868:	d107      	bne.n	800287a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3718      	adds	r7, #24
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40007000 	.word	0x40007000
 800288c:	40023800 	.word	0x40023800
 8002890:	42470060 	.word	0x42470060

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0cc      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d90c      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d044      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d119      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e07f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d003      	beq.n	8002952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	2b03      	cmp	r3, #3
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e067      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4934      	ldr	r1, [pc, #208]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe fd64 	bl	8001450 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe fd60 	bl	8001450 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d20c      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e032      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1a:	f000 f821 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fe fcc4 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023c00 	.word	0x40023c00
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08005b10 	.word	0x08005b10
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	2300      	movs	r3, #0
 8002a72:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a78:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d00d      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	f200 80bd 	bhi.w	8002c04 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x34>
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a92:	e0b7      	b.n	8002c04 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a96:	60bb      	str	r3, [r7, #8]
       break;
 8002a98:	e0b7      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9a:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a9c:	60bb      	str	r3, [r7, #8]
      break;
 8002a9e:	e0b4      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa0:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aaa:	4b5b      	ldr	r3, [pc, #364]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d04d      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab6:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	461a      	mov	r2, r3
 8002abe:	f04f 0300 	mov.w	r3, #0
 8002ac2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ac6:	f04f 0100 	mov.w	r1, #0
 8002aca:	ea02 0800 	and.w	r8, r2, r0
 8002ace:	ea03 0901 	and.w	r9, r3, r1
 8002ad2:	4640      	mov	r0, r8
 8002ad4:	4649      	mov	r1, r9
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	014b      	lsls	r3, r1, #5
 8002ae0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ae4:	0142      	lsls	r2, r0, #5
 8002ae6:	4610      	mov	r0, r2
 8002ae8:	4619      	mov	r1, r3
 8002aea:	ebb0 0008 	subs.w	r0, r0, r8
 8002aee:	eb61 0109 	sbc.w	r1, r1, r9
 8002af2:	f04f 0200 	mov.w	r2, #0
 8002af6:	f04f 0300 	mov.w	r3, #0
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b00:	0182      	lsls	r2, r0, #6
 8002b02:	1a12      	subs	r2, r2, r0
 8002b04:	eb63 0301 	sbc.w	r3, r3, r1
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	00d9      	lsls	r1, r3, #3
 8002b12:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b16:	00d0      	lsls	r0, r2, #3
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	eb12 0208 	adds.w	r2, r2, r8
 8002b20:	eb43 0309 	adc.w	r3, r3, r9
 8002b24:	f04f 0000 	mov.w	r0, #0
 8002b28:	f04f 0100 	mov.w	r1, #0
 8002b2c:	0259      	lsls	r1, r3, #9
 8002b2e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b32:	0250      	lsls	r0, r2, #9
 8002b34:	4602      	mov	r2, r0
 8002b36:	460b      	mov	r3, r1
 8002b38:	4610      	mov	r0, r2
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	f7fd fb50 	bl	80001e8 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e04a      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	099b      	lsrs	r3, r3, #6
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b62:	f04f 0100 	mov.w	r1, #0
 8002b66:	ea02 0400 	and.w	r4, r2, r0
 8002b6a:	ea03 0501 	and.w	r5, r3, r1
 8002b6e:	4620      	mov	r0, r4
 8002b70:	4629      	mov	r1, r5
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	014b      	lsls	r3, r1, #5
 8002b7c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b80:	0142      	lsls	r2, r0, #5
 8002b82:	4610      	mov	r0, r2
 8002b84:	4619      	mov	r1, r3
 8002b86:	1b00      	subs	r0, r0, r4
 8002b88:	eb61 0105 	sbc.w	r1, r1, r5
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	018b      	lsls	r3, r1, #6
 8002b96:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b9a:	0182      	lsls	r2, r0, #6
 8002b9c:	1a12      	subs	r2, r2, r0
 8002b9e:	eb63 0301 	sbc.w	r3, r3, r1
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f04f 0100 	mov.w	r1, #0
 8002baa:	00d9      	lsls	r1, r3, #3
 8002bac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bb0:	00d0      	lsls	r0, r2, #3
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	1912      	adds	r2, r2, r4
 8002bb8:	eb45 0303 	adc.w	r3, r5, r3
 8002bbc:	f04f 0000 	mov.w	r0, #0
 8002bc0:	f04f 0100 	mov.w	r1, #0
 8002bc4:	0299      	lsls	r1, r3, #10
 8002bc6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bca:	0290      	lsls	r0, r2, #10
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	f7fd fb04 	bl	80001e8 <__aeabi_uldivmod>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	4613      	mov	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0c1b      	lsrs	r3, r3, #16
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c00:	60bb      	str	r3, [r7, #8]
      break;
 8002c02:	e002      	b.n	8002c0a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c06:	60bb      	str	r3, [r7, #8]
      break;
 8002c08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c16:	bf00      	nop
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	00f42400 	.word	0x00f42400
 8002c20:	007a1200 	.word	0x007a1200

08002c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000000 	.word	0x20000000

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c40:	f7ff fff0 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	0a9b      	lsrs	r3, r3, #10
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4903      	ldr	r1, [pc, #12]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	08005b20 	.word	0x08005b20

08002c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c68:	f7ff ffdc 	bl	8002c24 <HAL_RCC_GetHCLKFreq>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	0b5b      	lsrs	r3, r3, #13
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	4903      	ldr	r1, [pc, #12]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40023800 	.word	0x40023800
 8002c88:	08005b20 	.word	0x08005b20

08002c8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e041      	b.n	8002d22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d106      	bne.n	8002cb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f88d 	bl	8002dd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	f000 fa08 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6a1a      	ldr	r2, [r3, #32]
 8002d40:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_TIM_PWM_DeInit+0x40>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	f240 4344 	movw	r3, #1092	; 0x444
 8002d54:	4013      	ands	r3, r2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d107      	bne.n	8002d6a <HAL_TIM_PWM_DeInit+0x40>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0201 	bic.w	r2, r2, #1
 8002d68:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f83b 	bl	8002de6 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr

08002de6 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d109      	bne.n	8002e20 <HAL_TIM_PWM_Start+0x24>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e022      	b.n	8002e66 <HAL_TIM_PWM_Start+0x6a>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d109      	bne.n	8002e3a <HAL_TIM_PWM_Start+0x3e>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	bf14      	ite	ne
 8002e32:	2301      	movne	r3, #1
 8002e34:	2300      	moveq	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	e015      	b.n	8002e66 <HAL_TIM_PWM_Start+0x6a>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d109      	bne.n	8002e54 <HAL_TIM_PWM_Start+0x58>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e008      	b.n	8002e66 <HAL_TIM_PWM_Start+0x6a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e068      	b.n	8002f40 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <HAL_TIM_PWM_Start+0x82>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e7c:	e013      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xaa>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	d104      	bne.n	8002e8e <HAL_TIM_PWM_Start+0x92>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8c:	e00b      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xaa>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d104      	bne.n	8002e9e <HAL_TIM_PWM_Start+0xa2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e9c:	e003      	b.n	8002ea6 <HAL_TIM_PWM_Start+0xaa>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	6839      	ldr	r1, [r7, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fb22 	bl	80034f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <HAL_TIM_PWM_Start+0x14c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d107      	bne.n	8002ece <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1d      	ldr	r2, [pc, #116]	; (8002f48 <HAL_TIM_PWM_Start+0x14c>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d018      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x10e>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee0:	d013      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x10e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_TIM_PWM_Start+0x150>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x10e>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <HAL_TIM_PWM_Start+0x154>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d009      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x10e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a16      	ldr	r2, [pc, #88]	; (8002f54 <HAL_TIM_PWM_Start+0x158>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_TIM_PWM_Start+0x10e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <HAL_TIM_PWM_Start+0x15c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d111      	bne.n	8002f2e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b06      	cmp	r3, #6
 8002f1a:	d010      	beq.n	8002f3e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2c:	e007      	b.n	8002f3e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40014000 	.word	0x40014000

08002f5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e0ae      	b.n	80030d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	f200 809f 	bhi.w	80030c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f8a:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	080030c9 	.word	0x080030c9
 8002f98:	080030c9 	.word	0x080030c9
 8002f9c:	080030c9 	.word	0x080030c9
 8002fa0:	08003005 	.word	0x08003005
 8002fa4:	080030c9 	.word	0x080030c9
 8002fa8:	080030c9 	.word	0x080030c9
 8002fac:	080030c9 	.word	0x080030c9
 8002fb0:	08003047 	.word	0x08003047
 8002fb4:	080030c9 	.word	0x080030c9
 8002fb8:	080030c9 	.word	0x080030c9
 8002fbc:	080030c9 	.word	0x080030c9
 8002fc0:	08003087 	.word	0x08003087
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68b9      	ldr	r1, [r7, #8]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 f908 	bl	80031e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0208 	orr.w	r2, r2, #8
 8002fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	699a      	ldr	r2, [r3, #24]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0204 	bic.w	r2, r2, #4
 8002fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6999      	ldr	r1, [r3, #24]
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	619a      	str	r2, [r3, #24]
      break;
 8003002:	e064      	b.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	4618      	mov	r0, r3
 800300c:	f000 f94e 	bl	80032ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800301e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699a      	ldr	r2, [r3, #24]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800302e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6999      	ldr	r1, [r3, #24]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	021a      	lsls	r2, r3, #8
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	619a      	str	r2, [r3, #24]
      break;
 8003044:	e043      	b.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f999 	bl	8003384 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0208 	orr.w	r2, r2, #8
 8003060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69da      	ldr	r2, [r3, #28]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0204 	bic.w	r2, r2, #4
 8003070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	69d9      	ldr	r1, [r3, #28]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	61da      	str	r2, [r3, #28]
      break;
 8003084:	e023      	b.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f9e3 	bl	8003458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69d9      	ldr	r1, [r3, #28]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	021a      	lsls	r2, r3, #8
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	430a      	orrs	r2, r1
 80030c4:	61da      	str	r2, [r3, #28]
      break;
 80030c6:	e002      	b.n	80030ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	75fb      	strb	r3, [r7, #23]
      break;
 80030cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a34      	ldr	r2, [pc, #208]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d00f      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a31      	ldr	r2, [pc, #196]	; (80031c8 <TIM_Base_SetConfig+0xe8>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a30      	ldr	r2, [pc, #192]	; (80031cc <TIM_Base_SetConfig+0xec>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <TIM_Base_SetConfig+0xf0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d017      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a22      	ldr	r2, [pc, #136]	; (80031c8 <TIM_Base_SetConfig+0xe8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a21      	ldr	r2, [pc, #132]	; (80031cc <TIM_Base_SetConfig+0xec>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00f      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <TIM_Base_SetConfig+0xf0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <TIM_Base_SetConfig+0xf4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <TIM_Base_SetConfig+0xf8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x8a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <TIM_Base_SetConfig+0xfc>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <TIM_Base_SetConfig+0xe4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d103      	bne.n	80031b0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	615a      	str	r2, [r3, #20]
}
 80031b6:	bf00      	nop
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40000400 	.word	0x40000400
 80031cc:	40000800 	.word	0x40000800
 80031d0:	40000c00 	.word	0x40000c00
 80031d4:	40014000 	.word	0x40014000
 80031d8:	40014400 	.word	0x40014400
 80031dc:	40014800 	.word	0x40014800

080031e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	f023 0201 	bic.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0303 	bic.w	r3, r3, #3
 8003216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	4313      	orrs	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	f023 0302 	bic.w	r3, r3, #2
 8003228:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	4313      	orrs	r3, r2
 8003232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <TIM_OC1_SetConfig+0xc8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d10c      	bne.n	8003256 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f023 0308 	bic.w	r3, r3, #8
 8003242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4313      	orrs	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f023 0304 	bic.w	r3, r3, #4
 8003254:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <TIM_OC1_SetConfig+0xc8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d111      	bne.n	8003282 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003264:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800326c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	621a      	str	r2, [r3, #32]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	40010000 	.word	0x40010000

080032ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	f023 0210 	bic.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
 80032c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0320 	bic.w	r3, r3, #32
 80032f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4313      	orrs	r3, r2
 8003302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a1e      	ldr	r2, [pc, #120]	; (8003380 <TIM_OC2_SetConfig+0xd4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d10d      	bne.n	8003328 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003326:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <TIM_OC2_SetConfig+0xd4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d113      	bne.n	8003358 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800333e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685a      	ldr	r2, [r3, #4]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40010000 	.word	0x40010000

08003384 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69db      	ldr	r3, [r3, #28]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f023 0303 	bic.w	r3, r3, #3
 80033ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	021b      	lsls	r3, r3, #8
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1d      	ldr	r2, [pc, #116]	; (8003454 <TIM_OC3_SetConfig+0xd0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10d      	bne.n	80033fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a14      	ldr	r2, [pc, #80]	; (8003454 <TIM_OC3_SetConfig+0xd0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d113      	bne.n	800342e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800340c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003414:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4313      	orrs	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	621a      	str	r2, [r3, #32]
}
 8003448:	bf00      	nop
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40010000 	.word	0x40010000

08003458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800348e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	031b      	lsls	r3, r3, #12
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a10      	ldr	r2, [pc, #64]	; (80034f4 <TIM_OC4_SetConfig+0x9c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d109      	bne.n	80034cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	019b      	lsls	r3, r3, #6
 80034c6:	697a      	ldr	r2, [r7, #20]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	621a      	str	r2, [r3, #32]
}
 80034e6:	bf00      	nop
 80034e8:	371c      	adds	r7, #28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40010000 	.word	0x40010000

080034f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b087      	sub	sp, #28
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f003 031f 	and.w	r3, r3, #31
 800350a:	2201      	movs	r2, #1
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	43db      	mvns	r3, r3
 800351a:	401a      	ands	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6a1a      	ldr	r2, [r3, #32]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	621a      	str	r2, [r3, #32]
}
 8003536:	bf00      	nop
 8003538:	371c      	adds	r7, #28
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b082      	sub	sp, #8
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e03f      	b.n	80035d4 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f866 	bl	800363a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2224      	movs	r2, #36	; 0x24
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68da      	ldr	r2, [r3, #12]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003584:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 f86c 	bl	8003664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800359a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e021      	b.n	8003632 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2224      	movs	r2, #36	; 0x24
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003604:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f821 	bl	800364e <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003668:	b09f      	sub	sp, #124	; 0x7c
 800366a:	af00      	add	r7, sp, #0
 800366c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800366e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367a:	68d9      	ldr	r1, [r3, #12]
 800367c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	ea40 0301 	orr.w	r3, r0, r1
 8003684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	431a      	orrs	r2, r3
 8003690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	431a      	orrs	r2, r3
 8003696:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4313      	orrs	r3, r2
 800369c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800369e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036a8:	f021 010c 	bic.w	r1, r1, #12
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b2:	430b      	orrs	r3, r1
 80036b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80036c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c2:	6999      	ldr	r1, [r3, #24]
 80036c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	ea40 0301 	orr.w	r3, r0, r1
 80036cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4bc5      	ldr	r3, [pc, #788]	; (80039e8 <UART_SetConfig+0x384>)
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d004      	beq.n	80036e2 <UART_SetConfig+0x7e>
 80036d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	4bc3      	ldr	r3, [pc, #780]	; (80039ec <UART_SetConfig+0x388>)
 80036de:	429a      	cmp	r2, r3
 80036e0:	d103      	bne.n	80036ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036e2:	f7ff fabf 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 80036e6:	6778      	str	r0, [r7, #116]	; 0x74
 80036e8:	e002      	b.n	80036f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ea:	f7ff faa7 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80036ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036f8:	f040 80b6 	bne.w	8003868 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036fe:	461c      	mov	r4, r3
 8003700:	f04f 0500 	mov.w	r5, #0
 8003704:	4622      	mov	r2, r4
 8003706:	462b      	mov	r3, r5
 8003708:	1891      	adds	r1, r2, r2
 800370a:	6439      	str	r1, [r7, #64]	; 0x40
 800370c:	415b      	adcs	r3, r3
 800370e:	647b      	str	r3, [r7, #68]	; 0x44
 8003710:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003714:	1912      	adds	r2, r2, r4
 8003716:	eb45 0303 	adc.w	r3, r5, r3
 800371a:	f04f 0000 	mov.w	r0, #0
 800371e:	f04f 0100 	mov.w	r1, #0
 8003722:	00d9      	lsls	r1, r3, #3
 8003724:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003728:	00d0      	lsls	r0, r2, #3
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	1911      	adds	r1, r2, r4
 8003730:	6639      	str	r1, [r7, #96]	; 0x60
 8003732:	416b      	adcs	r3, r5
 8003734:	667b      	str	r3, [r7, #100]	; 0x64
 8003736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	461a      	mov	r2, r3
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	1891      	adds	r1, r2, r2
 8003742:	63b9      	str	r1, [r7, #56]	; 0x38
 8003744:	415b      	adcs	r3, r3
 8003746:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003748:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800374c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003750:	f7fc fd4a 	bl	80001e8 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4ba5      	ldr	r3, [pc, #660]	; (80039f0 <UART_SetConfig+0x38c>)
 800375a:	fba3 2302 	umull	r2, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	011e      	lsls	r6, r3, #4
 8003762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003764:	461c      	mov	r4, r3
 8003766:	f04f 0500 	mov.w	r5, #0
 800376a:	4622      	mov	r2, r4
 800376c:	462b      	mov	r3, r5
 800376e:	1891      	adds	r1, r2, r2
 8003770:	6339      	str	r1, [r7, #48]	; 0x30
 8003772:	415b      	adcs	r3, r3
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
 8003776:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800377a:	1912      	adds	r2, r2, r4
 800377c:	eb45 0303 	adc.w	r3, r5, r3
 8003780:	f04f 0000 	mov.w	r0, #0
 8003784:	f04f 0100 	mov.w	r1, #0
 8003788:	00d9      	lsls	r1, r3, #3
 800378a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800378e:	00d0      	lsls	r0, r2, #3
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	1911      	adds	r1, r2, r4
 8003796:	65b9      	str	r1, [r7, #88]	; 0x58
 8003798:	416b      	adcs	r3, r5
 800379a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800379c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	461a      	mov	r2, r3
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	1891      	adds	r1, r2, r2
 80037a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80037aa:	415b      	adcs	r3, r3
 80037ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80037b6:	f7fc fd17 	bl	80001e8 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4b8c      	ldr	r3, [pc, #560]	; (80039f0 <UART_SetConfig+0x38c>)
 80037c0:	fba3 1302 	umull	r1, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	2164      	movs	r1, #100	; 0x64
 80037c8:	fb01 f303 	mul.w	r3, r1, r3
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	3332      	adds	r3, #50	; 0x32
 80037d2:	4a87      	ldr	r2, [pc, #540]	; (80039f0 <UART_SetConfig+0x38c>)
 80037d4:	fba2 2303 	umull	r2, r3, r2, r3
 80037d8:	095b      	lsrs	r3, r3, #5
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037e0:	441e      	add	r6, r3
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	4618      	mov	r0, r3
 80037e6:	f04f 0100 	mov.w	r1, #0
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	1894      	adds	r4, r2, r2
 80037f0:	623c      	str	r4, [r7, #32]
 80037f2:	415b      	adcs	r3, r3
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
 80037f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037fa:	1812      	adds	r2, r2, r0
 80037fc:	eb41 0303 	adc.w	r3, r1, r3
 8003800:	f04f 0400 	mov.w	r4, #0
 8003804:	f04f 0500 	mov.w	r5, #0
 8003808:	00dd      	lsls	r5, r3, #3
 800380a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800380e:	00d4      	lsls	r4, r2, #3
 8003810:	4622      	mov	r2, r4
 8003812:	462b      	mov	r3, r5
 8003814:	1814      	adds	r4, r2, r0
 8003816:	653c      	str	r4, [r7, #80]	; 0x50
 8003818:	414b      	adcs	r3, r1
 800381a:	657b      	str	r3, [r7, #84]	; 0x54
 800381c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	461a      	mov	r2, r3
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	1891      	adds	r1, r2, r2
 8003828:	61b9      	str	r1, [r7, #24]
 800382a:	415b      	adcs	r3, r3
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003832:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003836:	f7fc fcd7 	bl	80001e8 <__aeabi_uldivmod>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	4b6c      	ldr	r3, [pc, #432]	; (80039f0 <UART_SetConfig+0x38c>)
 8003840:	fba3 1302 	umull	r1, r3, r3, r2
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	2164      	movs	r1, #100	; 0x64
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	3332      	adds	r3, #50	; 0x32
 8003852:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <UART_SetConfig+0x38c>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	f003 0207 	and.w	r2, r3, #7
 800385e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4432      	add	r2, r6
 8003864:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003866:	e0b9      	b.n	80039dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003868:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800386a:	461c      	mov	r4, r3
 800386c:	f04f 0500 	mov.w	r5, #0
 8003870:	4622      	mov	r2, r4
 8003872:	462b      	mov	r3, r5
 8003874:	1891      	adds	r1, r2, r2
 8003876:	6139      	str	r1, [r7, #16]
 8003878:	415b      	adcs	r3, r3
 800387a:	617b      	str	r3, [r7, #20]
 800387c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003880:	1912      	adds	r2, r2, r4
 8003882:	eb45 0303 	adc.w	r3, r5, r3
 8003886:	f04f 0000 	mov.w	r0, #0
 800388a:	f04f 0100 	mov.w	r1, #0
 800388e:	00d9      	lsls	r1, r3, #3
 8003890:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003894:	00d0      	lsls	r0, r2, #3
 8003896:	4602      	mov	r2, r0
 8003898:	460b      	mov	r3, r1
 800389a:	eb12 0804 	adds.w	r8, r2, r4
 800389e:	eb43 0905 	adc.w	r9, r3, r5
 80038a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f04f 0100 	mov.w	r1, #0
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	008b      	lsls	r3, r1, #2
 80038b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038ba:	0082      	lsls	r2, r0, #2
 80038bc:	4640      	mov	r0, r8
 80038be:	4649      	mov	r1, r9
 80038c0:	f7fc fc92 	bl	80001e8 <__aeabi_uldivmod>
 80038c4:	4602      	mov	r2, r0
 80038c6:	460b      	mov	r3, r1
 80038c8:	4b49      	ldr	r3, [pc, #292]	; (80039f0 <UART_SetConfig+0x38c>)
 80038ca:	fba3 2302 	umull	r2, r3, r3, r2
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	011e      	lsls	r6, r3, #4
 80038d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038d4:	4618      	mov	r0, r3
 80038d6:	f04f 0100 	mov.w	r1, #0
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	1894      	adds	r4, r2, r2
 80038e0:	60bc      	str	r4, [r7, #8]
 80038e2:	415b      	adcs	r3, r3
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038ea:	1812      	adds	r2, r2, r0
 80038ec:	eb41 0303 	adc.w	r3, r1, r3
 80038f0:	f04f 0400 	mov.w	r4, #0
 80038f4:	f04f 0500 	mov.w	r5, #0
 80038f8:	00dd      	lsls	r5, r3, #3
 80038fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80038fe:	00d4      	lsls	r4, r2, #3
 8003900:	4622      	mov	r2, r4
 8003902:	462b      	mov	r3, r5
 8003904:	1814      	adds	r4, r2, r0
 8003906:	64bc      	str	r4, [r7, #72]	; 0x48
 8003908:	414b      	adcs	r3, r1
 800390a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800390c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4618      	mov	r0, r3
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	008b      	lsls	r3, r1, #2
 8003920:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003924:	0082      	lsls	r2, r0, #2
 8003926:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800392a:	f7fc fc5d 	bl	80001e8 <__aeabi_uldivmod>
 800392e:	4602      	mov	r2, r0
 8003930:	460b      	mov	r3, r1
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <UART_SetConfig+0x38c>)
 8003934:	fba3 1302 	umull	r1, r3, r3, r2
 8003938:	095b      	lsrs	r3, r3, #5
 800393a:	2164      	movs	r1, #100	; 0x64
 800393c:	fb01 f303 	mul.w	r3, r1, r3
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	3332      	adds	r3, #50	; 0x32
 8003946:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <UART_SetConfig+0x38c>)
 8003948:	fba2 2303 	umull	r2, r3, r2, r3
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003952:	441e      	add	r6, r3
 8003954:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003956:	4618      	mov	r0, r3
 8003958:	f04f 0100 	mov.w	r1, #0
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	1894      	adds	r4, r2, r2
 8003962:	603c      	str	r4, [r7, #0]
 8003964:	415b      	adcs	r3, r3
 8003966:	607b      	str	r3, [r7, #4]
 8003968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800396c:	1812      	adds	r2, r2, r0
 800396e:	eb41 0303 	adc.w	r3, r1, r3
 8003972:	f04f 0400 	mov.w	r4, #0
 8003976:	f04f 0500 	mov.w	r5, #0
 800397a:	00dd      	lsls	r5, r3, #3
 800397c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003980:	00d4      	lsls	r4, r2, #3
 8003982:	4622      	mov	r2, r4
 8003984:	462b      	mov	r3, r5
 8003986:	eb12 0a00 	adds.w	sl, r2, r0
 800398a:	eb43 0b01 	adc.w	fp, r3, r1
 800398e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	4618      	mov	r0, r3
 8003994:	f04f 0100 	mov.w	r1, #0
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	008b      	lsls	r3, r1, #2
 80039a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039a6:	0082      	lsls	r2, r0, #2
 80039a8:	4650      	mov	r0, sl
 80039aa:	4659      	mov	r1, fp
 80039ac:	f7fc fc1c 	bl	80001e8 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <UART_SetConfig+0x38c>)
 80039b6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	2164      	movs	r1, #100	; 0x64
 80039be:	fb01 f303 	mul.w	r3, r1, r3
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	3332      	adds	r3, #50	; 0x32
 80039c8:	4a09      	ldr	r2, [pc, #36]	; (80039f0 <UART_SetConfig+0x38c>)
 80039ca:	fba2 2303 	umull	r2, r3, r2, r3
 80039ce:	095b      	lsrs	r3, r3, #5
 80039d0:	f003 020f 	and.w	r2, r3, #15
 80039d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4432      	add	r2, r6
 80039da:	609a      	str	r2, [r3, #8]
}
 80039dc:	bf00      	nop
 80039de:	377c      	adds	r7, #124	; 0x7c
 80039e0:	46bd      	mov	sp, r7
 80039e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039e6:	bf00      	nop
 80039e8:	40011000 	.word	0x40011000
 80039ec:	40011400 	.word	0x40011400
 80039f0:	51eb851f 	.word	0x51eb851f

080039f4 <_ZN12QAD_TimerMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_TimerMgr& get(void) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
		static QAD_TimerMgr instance;
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <_ZN12QAD_TimerMgr3getEv+0x48>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	f3bf 8f5b 	dmb	ish
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf0c      	ite	eq
 8003a0a:	2301      	moveq	r3, #1
 8003a0c:	2300      	movne	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <_ZN12QAD_TimerMgr3getEv+0x42>
 8003a14:	4809      	ldr	r0, [pc, #36]	; (8003a3c <_ZN12QAD_TimerMgr3getEv+0x48>)
 8003a16:	f001 fec9 	bl	80057ac <__cxa_guard_acquire>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <_ZN12QAD_TimerMgr3getEv+0x42>
 8003a2a:	4805      	ldr	r0, [pc, #20]	; (8003a40 <_ZN12QAD_TimerMgr3getEv+0x4c>)
 8003a2c:	f001 f80c 	bl	8004a48 <_ZN12QAD_TimerMgrC1Ev>
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <_ZN12QAD_TimerMgr3getEv+0x48>)
 8003a32:	f001 fec7 	bl	80057c4 <__cxa_guard_release>
		return instance;
 8003a36:	4b02      	ldr	r3, [pc, #8]	; (8003a40 <_ZN12QAD_TimerMgr3getEv+0x4c>)
	}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000308 	.word	0x20000308
 8003a40:	20000268 	.word	0x20000268

08003a44 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>:
  //Data Methods

	//Used to retrieve the current state of a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the state for. Member of QAD_Timer_Periph
	//Returns member of QAD_TimerState enum
	static QAD_Timer_State getState(QAD_Timer_Periph eTimer) {
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].eState;
 8003a4e:	f7ff ffd1 	bl	80039f4 <_ZN12QAD_TimerMgr3getEv>
 8003a52:	4601      	mov	r1, r0
 8003a54:	79fa      	ldrb	r2, [r7, #7]
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	3301      	adds	r3, #1
 8003a62:	781b      	ldrb	r3, [r3, #0]
	}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>:
	}

	//Used to retrieve an instance for a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the instance for. Member of QAD_Timer_Periph
	//Returns TIM_TypeDef, as defined in stm32f411xe.h
	static TIM_TypeDef* getInstance(QAD_Timer_Periph eTimer) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].pInstance;
 8003a76:	f7ff ffbd 	bl	80039f4 <_ZN12QAD_TimerMgr3getEv>
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	79fa      	ldrb	r2, [r7, #7]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	330c      	adds	r3, #12
 8003a8a:	681b      	ldr	r3, [r3, #0]
	}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
	//Management Methods

	//Used to register a Timer peripheral as being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected Timer is already in use
	static QA_Result registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	460a      	mov	r2, r1
 8003a9e:	71fb      	strb	r3, [r7, #7]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerTimer(eTimer, eState);
 8003aa4:	f7ff ffa6 	bl	80039f4 <_ZN12QAD_TimerMgr3getEv>
 8003aa8:	79ba      	ldrb	r2, [r7, #6]
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	4619      	mov	r1, r3
 8003aae:	f001 f8d9 	bl	8004c64 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>
 8003ab2:	4603      	mov	r3, r0
	}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>:

	//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	static void deregisterTimer(QAD_Timer_Periph eTimer) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterTimer(eTimer);
 8003ac6:	f7ff ff95 	bl	80039f4 <_ZN12QAD_TimerMgr3getEv>
 8003aca:	4602      	mov	r2, r0
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	4619      	mov	r1, r3
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	f001 f8f2 	bl	8004cba <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>
	}
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to enable the clock for
	static void enableClock(QAD_Timer_Periph eTimer) {
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eTimer);
 8003ae8:	f7ff ff84 	bl	80039f4 <_ZN12QAD_TimerMgr3getEv>
 8003aec:	4602      	mov	r2, r0
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f001 f8f8 	bl	8004ce8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>
	}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>:

	//Used to disable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to disable the clock for
	static void disableClock(QAD_Timer_Periph eTimer) {
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	4603      	mov	r3, r0
 8003b08:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eTimer);
 8003b0a:	f7ff ff73 	bl	80039f4 <_ZN12QAD_TimerMgr3getEv>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	79fb      	ldrb	r3, [r7, #7]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f001 f9e9 	bl	8004eec <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>
	}
 8003b1a:	bf00      	nop
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <_ZN7QAD_ADC11imp_handlerEv>:
	//-----------------------
	//QAD_ADC Handler Methods

//QAD_ADC::imp_handler
//QAD_ADC Handler Method
void QAD_ADC::imp_handler(void) {
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]

	//Check for overrun error
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_OVR)) {
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0320 	and.w	r3, r3, #32
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <_ZN7QAD_ADC11imp_handlerEv+0x36>
		imp_stop();
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f952 	bl	8003dec <_ZN7QAD_ADC8imp_stopEv>
		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_OVR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4c:	f06f 0220 	mvn.w	r2, #32
 8003b50:	601a      	str	r2, [r3, #0]
		imp_start();
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f83a 	bl	8003bcc <_ZN7QAD_ADC9imp_startEv>
	}

	//Check for end of conversion
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_EOC)) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	bf0c      	ite	eq
 8003b66:	2301      	moveq	r3, #1
 8003b68:	2300      	movne	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d028      	beq.n	8003bc2 <_ZN7QAD_ADC11imp_handlerEv+0xa0>

		m_uData[m_uDataIdx] = m_sADCHandle.Instance->DR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003b7c:	b291      	uxth	r1, r2
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	33cc      	adds	r3, #204	; 0xcc
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	4413      	add	r3, r2
 8003b86:	460a      	mov	r2, r1
 8003b88:	80da      	strh	r2, [r3, #6]
		if (m_uDataIdx >= (m_uChannelCount-1))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003b90:	461a      	mov	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	db04      	blt.n	8003ba8 <_ZN7QAD_ADC11imp_handlerEv+0x86>
			m_uDataIdx = 0; else
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8003ba6:	e007      	b.n	8003bb8 <_ZN7QAD_ADC11imp_handlerEv+0x96>
			m_uDataIdx++;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 8003bae:	3301      	adds	r3, #1
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_EOC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbc:	f06f 0202 	mvn.w	r2, #2
 8003bc0:	601a      	str	r2, [r3, #0]
	}
}
 8003bc2:	bf00      	nop
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <_ZN7QAD_ADC9imp_startEv>:
	//-----------------------
	//QAD_ADC Control Methods

//QAD_ADC::imp_start
//QAD_ADC Control Method
QA_Result QAD_ADC::imp_start(void) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08c      	sub	sp, #48	; 0x30
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	if ((m_eState) || (!m_uChannelCount))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	785b      	ldrb	r3, [r3, #1]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <_ZN7QAD_ADC9imp_startEv+0x1a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <_ZN7QAD_ADC9imp_startEv+0x1e>
		return QA_Fail;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e0f9      	b.n	8003dde <_ZN7QAD_ADC9imp_startEv+0x212>

	//Initialize ADC
	m_sADCHandle.Instance                   = ADC1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a7e      	ldr	r2, [pc, #504]	; (8003de8 <_ZN7QAD_ADC9imp_startEv+0x21c>)
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54
	m_sADCHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003bf6:	659a      	str	r2, [r3, #88]	; 0x58
	m_sADCHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sADCHandle.Init.ScanConvMode          = ENABLE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	665a      	str	r2, [r3, #100]	; 0x64
	m_sADCHandle.Init.ContinuousConvMode    = DISABLE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sADCHandle.Init.DiscontinuousConvMode = DISABLE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sADCHandle.Init.NbrOfDiscConversion   = 0;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	679a      	str	r2, [r3, #120]	; 0x78
	m_sADCHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sADCHandle.Init.ExternalTrigConv      = imp_getTrigger();
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f933 	bl	8003e90 <_ZN7QAD_ADC14imp_getTriggerEv>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sADCHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	661a      	str	r2, [r3, #96]	; 0x60
	m_sADCHandle.Init.NbrOfConversion       = m_uChannelCount;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	671a      	str	r2, [r3, #112]	; 0x70
	m_sADCHandle.Init.DMAContinuousRequests = ENABLE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2201      	movs	r2, #1
 8003c46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	m_sADCHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_ADC_Init(&m_sADCHandle) != HAL_OK) {
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3354      	adds	r3, #84	; 0x54
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fd fc2b 	bl	80014b0 <HAL_ADC_Init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	2301      	movne	r3, #1
 8003c62:	2300      	moveq	r3, #0
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d004      	beq.n	8003c74 <_ZN7QAD_ADC9imp_startEv+0xa8>
		imp_stop();
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f8be 	bl	8003dec <_ZN7QAD_ADC8imp_stopEv>
		return QA_Fail;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0b4      	b.n	8003dde <_ZN7QAD_ADC9imp_startEv+0x212>
	}

	//Channel GPIO Configuration
	GPIO_InitTypeDef GPIO_Init = {0};
 8003c74:	f107 0318 	add.w	r3, r7, #24
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	605a      	str	r2, [r3, #4]
 8003c7e:	609a      	str	r2, [r3, #8]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode  = GPIO_MODE_ANALOG;
 8003c84:	2303      	movs	r3, #3
 8003c86:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Pull  = GPIO_NOPULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	623b      	str	r3, [r7, #32]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003c9c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d22e      	bcs.n	8003d02 <_ZN7QAD_ADC9imp_startEv+0x136>
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	330a      	adds	r3, #10
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	4413      	add	r3, r2
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b11      	cmp	r3, #17
 8003cb6:	d109      	bne.n	8003ccc <_ZN7QAD_ADC9imp_startEv+0x100>
				(m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVBat)) {
 8003cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	330a      	adds	r3, #10
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	681b      	ldr	r3, [r3, #0]
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003cc8:	2b12      	cmp	r3, #18
 8003cca:	d014      	beq.n	8003cf6 <_ZN7QAD_ADC9imp_startEv+0x12a>
			GPIO_Init.Pin       = m_sChannels[i].uPin;
 8003ccc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	4413      	add	r3, r2
 8003cd6:	33a0      	adds	r3, #160	; 0xa0
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 8003cdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	4413      	add	r3, r2
 8003ce6:	339c      	adds	r3, #156	; 0x9c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f107 0218 	add.w	r2, r7, #24
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7fe f8d5 	bl	8001ea0 <HAL_GPIO_Init>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003d00:	e7c9      	b.n	8003c96 <_ZN7QAD_ADC9imp_startEv+0xca>
		}
	}


	//Channel Configuration
	ADC_ChannelConfTypeDef  ADCChannel_Init = {0};
 8003d02:	f107 0308 	add.w	r3, r7, #8
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
 8003d0c:	609a      	str	r2, [r3, #8]
 8003d0e:	60da      	str	r2, [r3, #12]
	ADCChannel_Init.Offset        = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003d20:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d230      	bcs.n	8003d8a <_ZN7QAD_ADC9imp_startEv+0x1be>
		ADCChannel_Init.Channel       = m_sChannels[i].eChannel;
 8003d28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	330a      	adds	r3, #10
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	4413      	add	r3, r2
 8003d34:	3304      	adds	r3, #4
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]
		ADCChannel_Init.Rank          = i+1;
 8003d3a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
		ADCChannel_Init.SamplingTime = m_sChannels[i].eSamplingTime;
 8003d42:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	330a      	adds	r3, #10
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3308      	adds	r3, #8
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&m_sADCHandle, &ADCChannel_Init) != HAL_OK) {
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3354      	adds	r3, #84	; 0x54
 8003d58:	f107 0208 	add.w	r2, r7, #8
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fd fd2c 	bl	80017bc <HAL_ADC_ConfigChannel>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	bf14      	ite	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	2300      	moveq	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d004      	beq.n	8003d7e <_ZN7QAD_ADC9imp_startEv+0x1b2>
			imp_stop();
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f839 	bl	8003dec <_ZN7QAD_ADC8imp_stopEv>
			return QA_Fail;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e02f      	b.n	8003dde <_ZN7QAD_ADC9imp_startEv+0x212>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003d7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003d82:	3301      	adds	r3, #1
 8003d84:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003d88:	e7c7      	b.n	8003d1a <_ZN7QAD_ADC9imp_startEv+0x14e>
		}

	}

	//Clear Data
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003d90:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d94:	2b0f      	cmp	r3, #15
 8003d96:	d80d      	bhi.n	8003db4 <_ZN7QAD_ADC9imp_startEv+0x1e8>
		m_uData[i] = 0;
 8003d98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	33cc      	adds	r3, #204	; 0xcc
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	4413      	add	r3, r2
 8003da4:	2200      	movs	r2, #0
 8003da6:	80da      	strh	r2, [r3, #6]
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003da8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003dac:	3301      	adds	r3, #1
 8003dae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003db2:	e7ed      	b.n	8003d90 <_ZN7QAD_ADC9imp_startEv+0x1c4>
	m_uDataIdx = 0;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

	//Enable ADC IRQ
	HAL_ADC_Start_IT(&m_sADCHandle);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3354      	adds	r3, #84	; 0x54
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7fd fbff 	bl	80015c4 <HAL_ADC_Start_IT>
	__HAL_TIM_ENABLE(&m_sTIMHandle);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

	//Set States
	m_eState = QA_Active;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3730      	adds	r7, #48	; 0x30
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
 8003de6:	bf00      	nop
 8003de8:	40012000 	.word	0x40012000

08003dec <_ZN7QAD_ADC8imp_stopEv>:


//QAD_ADC::imp_stop
//QAD_ADC Control Method
void QAD_ADC::imp_stop(void) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]

	//Disable ADC IRQ
	__HAL_TIM_DISABLE(&m_sTIMHandle);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	6a1a      	ldr	r2, [r3, #32]
 8003dfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003dfe:	4013      	ands	r3, r2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d014      	beq.n	8003e38 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	f240 4344 	movw	r3, #1092	; 0x444
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bf0c      	ite	eq
 8003e1e:	2301      	moveq	r3, #1
 8003e20:	2300      	movne	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d007      	beq.n	8003e38 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	f022 0201 	bic.w	r2, r2, #1
 8003e36:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&m_sADCHandle);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3354      	adds	r3, #84	; 0x54
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd fc7f 	bl	8001740 <HAL_ADC_Stop_IT>

	//GPIO Deinitialization
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d212      	bcs.n	8003e78 <_ZN7QAD_ADC8imp_stopEv+0x8c>
		HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	4413      	add	r3, r2
 8003e5a:	339c      	adds	r3, #156	; 0x9c
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	4413      	add	r3, r2
 8003e66:	33a0      	adds	r3, #160	; 0xa0
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f7fe f99c 	bl	80021a8 <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	3301      	adds	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
 8003e76:	e7e6      	b.n	8003e46 <_ZN7QAD_ADC8imp_stopEv+0x5a>
	}

	//Deinitialize ADC
	HAL_ADC_DeInit(&m_sADCHandle);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3354      	adds	r3, #84	; 0x54
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fd fb5a 	bl	8001536 <HAL_ADC_DeInit>

	//Set States
	m_eState = QA_Inactive;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	705a      	strb	r2, [r3, #1]
}
 8003e88:	bf00      	nop
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <_ZN7QAD_ADC14imp_getTriggerEv>:
	//--------------------
	//QAD_ADC Tool Methods

//QAD_ADC::imp_getTrigger
//QAD_ADC Tool Method
uint32_t QAD_ADC::imp_getTrigger(void) {
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
	uint32_t uTrigger;
	switch (m_eTimer) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	789b      	ldrb	r3, [r3, #2]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d002      	beq.n	8003ea6 <_ZN7QAD_ADC14imp_getTriggerEv+0x16>
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d004      	beq.n	8003eae <_ZN7QAD_ADC14imp_getTriggerEv+0x1e>
 8003ea4:	e007      	b.n	8003eb6 <_ZN7QAD_ADC14imp_getTriggerEv+0x26>
		case QAD_Timer2:
			uTrigger = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003ea6:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003eaa:	60fb      	str	r3, [r7, #12]
			break;
 8003eac:	e006      	b.n	8003ebc <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		case QAD_Timer3:
			uTrigger = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003eae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eb2:	60fb      	str	r3, [r7, #12]
			break;
 8003eb4:	e002      	b.n	8003ebc <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		default:
			uTrigger = 0xFFFFFFFF;
 8003eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eba:	60fb      	str	r3, [r7, #12]
	}
	return uTrigger;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	809a      	strh	r2, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	719a      	strb	r2, [r3, #6]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f000 f841 	bl	8003f84 <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6818      	ldr	r0, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	889b      	ldrh	r3, [r3, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f7fe fa26 	bl	8002370 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	741a      	strb	r2, [r3, #16]
}
 8003f2a:	bf00      	nop
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	889b      	ldrh	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	4619      	mov	r1, r3
 8003f46:	f7fe fa13 	bl	8002370 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	741a      	strb	r2, [r3, #16]
}
 8003f50:	bf00      	nop
 8003f52:	3708      	adds	r7, #8
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	7c1b      	ldrb	r3, [r3, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d005      	beq.n	8003f74 <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d107      	bne.n	8003f7c <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f7ff ffe0 	bl	8003f32 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8003f72:	e003      	b.n	8003f7c <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f7ff ffc9 	bl	8003f0c <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8003f7a:	bf00      	nop
	}
}
 8003f7c:	bf00      	nop
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003f8c:	f107 030c 	add.w	r3, r7, #12
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	609a      	str	r2, [r3, #8]
 8003f98:	60da      	str	r2, [r3, #12]
 8003f9a:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	889b      	ldrh	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	799b      	ldrb	r3, [r3, #6]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8003faa:	2311      	movs	r3, #17
 8003fac:	e000      	b.n	8003fb0 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f107 020c 	add.w	r2, r7, #12
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fd ff69 	bl	8001ea0 <HAL_GPIO_Init>
}
 8003fce:	bf00      	nop
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>:
	static uint8_t getChannels(QAD_Timer_Periph eTimer) {
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].uChannels;
 8003fe0:	f7ff fd08 	bl	80039f4 <_ZN12QAD_TimerMgr3getEv>
 8003fe4:	4601      	mov	r1, r0
 8003fe6:	79fa      	ldrb	r2, [r7, #7]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3309      	adds	r3, #9
 8003ff4:	781b      	ldrb	r3, [r3, #0]
	}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <_ZN7QAD_PWM4initEv>:
//QAD_PWM::init
//QAD_PWM Initialization Method
//
//Used to initialize the PWM driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_PWM::init(void) {
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b084      	sub	sp, #16
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]

	//Check if selected Timer peripheral is currently available
  if (QAD_TimerMgr::getState(m_eTimer))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	789b      	ldrb	r3, [r3, #2]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fd1a 	bl	8003a44 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	bf14      	ite	ne
 8004016:	2301      	movne	r3, #1
 8004018:	2300      	moveq	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <_ZN7QAD_PWM4initEv+0x26>
  	return QA_Error_PeriphBusy;
 8004020:	2302      	movs	r3, #2
 8004022:	e013      	b.n	800404c <_ZN7QAD_PWM4initEv+0x4e>

  //Register Timer peripheral as now being in use
  QAD_TimerMgr::registerTimer(m_eTimer, QAD_Timer_InUse_PWM);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	789b      	ldrb	r3, [r3, #2]
 8004028:	2103      	movs	r1, #3
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fd32 	bl	8003a94 <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>

  //Initialize the Timer peripheral
  QA_Result eRes = periphInit();
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f88c 	bl	800414e <_ZN7QAD_PWM10periphInitEv>
 8004036:	4603      	mov	r3, r0
 8004038:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister the Timer peripheral
  if (eRes)
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <_ZN7QAD_PWM4initEv+0x4c>
  	QAD_TimerMgr::deregisterTimer(m_eTimer);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	789b      	ldrb	r3, [r3, #2]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fd39 	bl	8003abc <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>

  //Return initialization result
  return eRes;
 800404a:	7bfb      	ldrb	r3, [r7, #15]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <_ZN7QAD_PWM5startEv>:

//QAD_PWM::start
//QAD_PWM Control Method
//
//Starts the PWM driver
void QAD_PWM::start(void) {
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]

	//Iterate through the number of channels supported by the specific timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 800405c:	2300      	movs	r3, #0
 800405e:	73fb      	strb	r3, [r7, #15]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	789b      	ldrb	r3, [r3, #2]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ffb6 	bl	8003fd6 <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 800406a:	4603      	mov	r3, r0
 800406c:	461a      	mov	r2, r3
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	4293      	cmp	r3, r2
 8004072:	bf34      	ite	cc
 8004074:	2301      	movcc	r3, #1
 8004076:	2300      	movcs	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d019      	beq.n	80040b2 <_ZN7QAD_PWM5startEv+0x5e>

		//If channel is set to active then start PWM on that channel
		if (m_sChannels[i].eActive)
 800407e:	7bfa      	ldrb	r2, [r7, #15]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	3354      	adds	r3, #84	; 0x54
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <_ZN7QAD_PWM5startEv+0x56>
			HAL_TIM_PWM_Start(&m_sHandle, m_uChannelSelect[i]);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	1d18      	adds	r0, r3, #4
 8004098:	7bfb      	ldrb	r3, [r7, #15]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	3320      	adds	r3, #32
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	4619      	mov	r1, r3
 80040a6:	f7fe fea9 	bl	8002dfc <HAL_TIM_PWM_Start>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	3301      	adds	r3, #1
 80040ae:	73fb      	strb	r3, [r7, #15]
 80040b0:	e7d6      	b.n	8004060 <_ZN7QAD_PWM5startEv+0xc>
	}

	//Set PWM driver state to active
	m_eState = QA_Active;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	705a      	strb	r2, [r3, #1]
}
 80040b8:	bf00      	nop
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>:
//QAD_PWM Control Method
//
//Sets the current PWM value for a specific channel
//eChannel - The PWM channel to set the value for. A member of QAD_PWM_Channel as defined in QAD_PWM.hpp
//uVal     - The PWM value to set. This value should not be larger than the timer period set within the driver initialization structure
void QAD_PWM::setPWMVal(QAD_PWM_Channel eChannel, uint16_t uVal) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	460b      	mov	r3, r1
 80040ca:	70fb      	strb	r3, [r7, #3]
 80040cc:	4613      	mov	r3, r2
 80040ce:	803b      	strh	r3, [r7, #0]

	//Return if the selected channel is higher than the number of channels supported by the selected timer peripheral
  if (eChannel >= QAD_TimerMgr::getChannels(m_eTimer))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	789b      	ldrb	r3, [r3, #2]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff ff7e 	bl	8003fd6 <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 80040da:	4603      	mov	r3, r0
 80040dc:	461a      	mov	r2, r3
 80040de:	78fb      	ldrb	r3, [r7, #3]
 80040e0:	4293      	cmp	r3, r2
 80040e2:	bf2c      	ite	cs
 80040e4:	2301      	movcs	r3, #1
 80040e6:	2300      	movcc	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d12b      	bne.n	8004146 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x86>
  	return;

  //Set new PWM value to compare register for selected channel of timer peripheral
  __HAL_TIM_SET_COMPARE(&m_sHandle, m_uChannelSelect[eChannel], uVal);
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	3320      	adds	r3, #32
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x48>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	883a      	ldrh	r2, [r7, #0]
 8004104:	635a      	str	r2, [r3, #52]	; 0x34
 8004106:	e01f      	b.n	8004148 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	3320      	adds	r3, #32
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d104      	bne.n	8004122 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x62>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	883a      	ldrh	r2, [r7, #0]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
 8004120:	e012      	b.n	8004148 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 8004122:	78fb      	ldrb	r3, [r7, #3]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	3320      	adds	r3, #32
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b08      	cmp	r3, #8
 8004130:	d104      	bne.n	800413c <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x7c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	883a      	ldrh	r2, [r7, #0]
 8004138:	63da      	str	r2, [r3, #60]	; 0x3c
 800413a:	e005      	b.n	8004148 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	883a      	ldrh	r2, [r7, #0]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
 8004144:	e000      	b.n	8004148 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
  	return;
 8004146:	bf00      	nop
}
 8004148:	3708      	adds	r7, #8
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <_ZN7QAD_PWM10periphInitEv>:
//
//Used to initialize the GPIOs, timer peripheral clock, the timer peripheral itself and the respective PWM channels
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral and clock
//are all in the uninitialized state.
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_PWM::periphInit(void) {
 800414e:	b580      	push	{r7, lr}
 8004150:	b090      	sub	sp, #64	; 0x40
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]

	//Init GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 8004156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800415a:	2200      	movs	r2, #0
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
 8004160:	609a      	str	r2, [r3, #8]
 8004162:	60da      	str	r2, [r3, #12]
 8004164:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode     = GPIO_MODE_AF_PP;      //Set pin to Alternate Function - Push/Pull mode
 8004166:	2302      	movs	r3, #2
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_Init.Pull     = GPIO_NOPULL;          //Disable pull-up and pull-down resistors
 800416a:	2300      	movs	r3, #0
 800416c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init.Speed    = GPIO_SPEED_FREQ_HIGH; //Set pin output speed to high
 800416e:	2302      	movs	r3, #2
 8004170:	637b      	str	r3, [r7, #52]	; 0x34

	//Iterate through specific GPIOs per channel and initialize each in turn
	//Will only iterate through the number of channels supported by the specific timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004172:	2300      	movs	r3, #0
 8004174:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	789b      	ldrb	r3, [r3, #2]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff ff2a 	bl	8003fd6 <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 8004182:	4603      	mov	r3, r0
 8004184:	461a      	mov	r2, r3
 8004186:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800418a:	4293      	cmp	r3, r2
 800418c:	bf34      	ite	cc
 800418e:	2301      	movcc	r3, #1
 8004190:	2300      	movcs	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d037      	beq.n	8004208 <_ZN7QAD_PWM10periphInitEv+0xba>

		//If channel is set to be active then initialize GPIO pin
		if (m_sChannels[i].eActive) {
 8004198:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4413      	add	r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	3354      	adds	r3, #84	; 0x54
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d025      	beq.n	80041fc <_ZN7QAD_PWM10periphInitEv+0xae>
			GPIO_Init.Pin         = m_sChannels[i].uPin; //Set pin number
 80041b0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	335c      	adds	r3, #92	; 0x5c
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_Init.Alternate   = m_sChannels[i].uAF;  //Set alternate function to suit required timer peripheral
 80041c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	4613      	mov	r3, r2
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	335e      	adds	r3, #94	; 0x5e
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	63bb      	str	r3, [r7, #56]	; 0x38
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 80041dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80041e0:	6879      	ldr	r1, [r7, #4]
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	440b      	add	r3, r1
 80041ec:	3358      	adds	r3, #88	; 0x58
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fd fe52 	bl	8001ea0 <HAL_GPIO_Init>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80041fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004200:	3301      	adds	r3, #1
 8004202:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004206:	e7b7      	b.n	8004178 <_ZN7QAD_PWM10periphInitEv+0x2a>
		}
	}

	//Enable Timer Clock
	QAD_TimerMgr::enableClock(m_eTimer);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	789b      	ldrb	r3, [r3, #2]
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff fc66 	bl	8003ade <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>

	//Init Timer PWM Mode
	m_sHandle.Instance                     = QAD_TimerMgr::getInstance(m_eTimer);  //Set instance for required timer peripheral
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	789b      	ldrb	r3, [r3, #2]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fc28 	bl	8003a6c <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>
 800421c:	4602      	mov	r2, r0
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.Prescaler               = m_uPrescaler;                         //Set timer prescaler
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.Period                  = m_uPeriod;                            //Set timer counter period
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.CounterMode             = TIM_COUNTERMODE_UP;                   //Set counter mode to up
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.ClockDivision           = TIM_CLOCKDIVISION_DIV1;               //Unused
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.RepetitionCounter       = 0x0;                                  //
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.AutoReloadPreload       = TIM_AUTORELOAD_PRELOAD_ENABLE;        //Enable preload of the timer's auto-reload register
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2280      	movs	r2, #128	; 0x80
 8004248:	61da      	str	r2, [r3, #28]

  //Initialize Timer in PWM mode, performing a partial deinitialization if the initialization fails
  if (HAL_TIM_PWM_Init(&m_sHandle) != HAL_OK) {
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7fe fd1c 	bl	8002c8c <HAL_TIM_PWM_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	bf14      	ite	ne
 800425a:	2301      	movne	r3, #1
 800425c:	2300      	moveq	r3, #0
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <_ZN7QAD_PWM10periphInitEv+0x122>
		periphDeinit(DeinitPartial);
 8004264:	2100      	movs	r1, #0
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f863 	bl	8004332 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800426c:	2301      	movs	r3, #1
 800426e:	e05c      	b.n	800432a <_ZN7QAD_PWM10periphInitEv+0x1dc>
	}

	//Init PWM Channels
	TIM_OC_InitTypeDef TIM_OC_Init;
	//Iterate through number of channels supported by selected timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004270:	2300      	movs	r3, #0
 8004272:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	789b      	ldrb	r3, [r3, #2]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff feab 	bl	8003fd6 <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004288:	4293      	cmp	r3, r2
 800428a:	bf34      	ite	cc
 800428c:	2301      	movcc	r3, #1
 800428e:	2300      	movcs	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d042      	beq.n	800431c <_ZN7QAD_PWM10periphInitEv+0x1ce>
		//If channel is set to active then initialize PWM channel
		if (m_sChannels[i].eActive) {
 8004296:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	440b      	add	r3, r1
 80042a6:	3354      	adds	r3, #84	; 0x54
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d030      	beq.n	8004310 <_ZN7QAD_PWM10periphInitEv+0x1c2>
			TIM_OC_Init = {0};
 80042ae:	f107 030c 	add.w	r3, r7, #12
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	611a      	str	r2, [r3, #16]
 80042be:	615a      	str	r2, [r3, #20]
 80042c0:	619a      	str	r2, [r3, #24]
			TIM_OC_Init.OCMode        = TIM_OCMODE_PWM1;        //Set Output Compare mode to PWM1
 80042c2:	2360      	movs	r3, #96	; 0x60
 80042c4:	60fb      	str	r3, [r7, #12]
			TIM_OC_Init.OCIdleState   = TIM_OCIDLESTATE_SET;    //Set Output Compare Idle State to Set
 80042c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80042ca:	623b      	str	r3, [r7, #32]
			TIM_OC_Init.Pulse         = 0;                      //
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
			TIM_OC_Init.OCPolarity    = TIM_OCPOLARITY_HIGH;    //Set Output Compare Polarity to High
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]
			TIM_OC_Init.OCFastMode    = TIM_OCFAST_ENABLE;      //Enable Output Compare Fast Mode
 80042d4:	2304      	movs	r3, #4
 80042d6:	61fb      	str	r3, [r7, #28]

			//Configure PWM Channel, performing a full deinitialization if the configuration fails
			if (HAL_TIM_PWM_ConfigChannel(&m_sHandle, &TIM_OC_Init, m_uChannelSelect[i]) != HAL_OK) {
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	1d18      	adds	r0, r3, #4
 80042dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	3320      	adds	r3, #32
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	4413      	add	r3, r2
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	f107 030c 	add.w	r3, r7, #12
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7fe fe34 	bl	8002f5c <HAL_TIM_PWM_ConfigChannel>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	bf14      	ite	ne
 80042fa:	2301      	movne	r3, #1
 80042fc:	2300      	moveq	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <_ZN7QAD_PWM10periphInitEv+0x1c2>
				periphDeinit(DeinitFull);
 8004304:	2101      	movs	r1, #1
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f813 	bl	8004332 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>
				return QA_Fail;
 800430c:	2301      	movs	r3, #1
 800430e:	e00c      	b.n	800432a <_ZN7QAD_PWM10periphInitEv+0x1dc>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004310:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004314:	3301      	adds	r3, #1
 8004316:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800431a:	e7ac      	b.n	8004276 <_ZN7QAD_PWM10periphInitEv+0x128>
			}
		}
	}

	//Set Driver States
	m_eInitState = QA_Initialized; //Set driver state as initialized
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
	m_eState     = QA_Inactive;    //Set driver as currently inactive
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3740      	adds	r7, #64	; 0x40
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, timer peripheral clock and the timer peripheral itself
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_PWM::periphDeinit(QAD_PWM::DeinitMode eDeinitMode) {
 8004332:	b580      	push	{r7, lr}
 8004334:	b084      	sub	sp, #16
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	460b      	mov	r3, r1
 800433c:	70fb      	strb	r3, [r7, #3]

	//Check if a full deinitialization is required
	if (eDeinitMode) {
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x26>

		//Deinitialize Timer Peripheral
		HAL_TIM_PWM_DeInit(&m_sHandle);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3304      	adds	r3, #4
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fcee 	bl	8002d2a <HAL_TIM_PWM_DeInit>

		//Disable Timer Clock
		QAD_TimerMgr::disableClock(m_eTimer);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	789b      	ldrb	r3, [r3, #2]
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fbd4 	bl	8003b00 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>

	}

	//Deinitialize GPIOs
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004358:	2300      	movs	r3, #0
 800435a:	73fb      	strb	r3, [r7, #15]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	789b      	ldrb	r3, [r3, #2]
 8004360:	4618      	mov	r0, r3
 8004362:	f7ff fe38 	bl	8003fd6 <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 8004366:	4603      	mov	r3, r0
 8004368:	461a      	mov	r2, r3
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	4293      	cmp	r3, r2
 800436e:	bf34      	ite	cc
 8004370:	2301      	movcc	r3, #1
 8004372:	2300      	movcs	r3, #0
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d023      	beq.n	80043c2 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x90>
		if (m_sChannels[i].eActive)
 800437a:	7bfa      	ldrb	r2, [r7, #15]
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	440b      	add	r3, r1
 8004388:	3354      	adds	r3, #84	; 0x54
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d014      	beq.n	80043ba <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x88>
			HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 8004390:	7bfa      	ldrb	r2, [r7, #15]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	3358      	adds	r3, #88	; 0x58
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	7bfa      	ldrb	r2, [r7, #15]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	335c      	adds	r3, #92	; 0x5c
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f7fd fef7 	bl	80021a8 <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	3301      	adds	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	e7cc      	b.n	800435c <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x2a>
	}

	//Set Driver States
	m_eState     = QA_Inactive;        //Set driver as currently inactive
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	705a      	strb	r2, [r3, #1]
	m_eInitState = QA_NotInitialized;  //Set driver state as not initialized
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
}
 80043ce:	bf00      	nop
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <_ZN9QAD_Servo4initEv>:
	//--------------------------------
	//QAD_Servo Initialization Methods

//QAD_Servo::init
//QAD_Servo Initialization Method
QA_Result QAD_Servo::init(void) {
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b082      	sub	sp, #8
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6078      	str	r0, [r7, #4]

	//Set Driver States
	m_eInitState = QA_Initialized;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	701a      	strb	r2, [r3, #0]

	//
	update();
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8be 	bl	8004566 <_ZN9QAD_Servo6updateEv>

	//Return
	return QA_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <_ZN9QAD_Servo11setPositionEf>:
}


//QAD_Servo::setPosition
//QAD_Servo Control Method
void QAD_Servo::setPosition(float fPos) {
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	ed87 0a00 	vstr	s0, [r7]

	if (fPos == 0.0f) {
 8004400:	edd7 7a00 	vldr	s15, [r7]
 8004404:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440c:	d104      	bne.n	8004418 <_ZN9QAD_Servo11setPositionEf+0x24>
		m_uCurrent = m_uCenter;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68da      	ldr	r2, [r3, #12]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	619a      	str	r2, [r3, #24]
 8004416:	e06d      	b.n	80044f4 <_ZN9QAD_Servo11setPositionEf+0x100>

	} else if (fPos > 0.0f) {
 8004418:	edd7 7a00 	vldr	s15, [r7]
 800441c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	dd31      	ble.n	800448a <_ZN9QAD_Servo11setPositionEf+0x96>

		uint32_t uRange = m_uMax - m_uCenter;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695a      	ldr	r2, [r3, #20]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	613b      	str	r3, [r7, #16]
		float fStep = uRange / 100.0f;
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800443c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8004504 <_ZN9QAD_Servo11setPositionEf+0x110>
 8004440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004444:	edc7 7a03 	vstr	s15, [r7, #12]
		float fVal  = fPos * fStep;
 8004448:	ed97 7a00 	vldr	s14, [r7]
 800444c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004454:	edc7 7a02 	vstr	s15, [r7, #8]
		fVal  = fVal + 0.5f;
 8004458:	edd7 7a02 	vldr	s15, [r7, #8]
 800445c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004460:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004464:	edc7 7a02 	vstr	s15, [r7, #8]

		m_uCurrent = m_uCenter + fVal;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	ee07 3a90 	vmov	s15, r3
 8004470:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004474:	edd7 7a02 	vldr	s15, [r7, #8]
 8004478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800447c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004480:	ee17 2a90 	vmov	r2, s15
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	619a      	str	r2, [r3, #24]
 8004488:	e034      	b.n	80044f4 <_ZN9QAD_Servo11setPositionEf+0x100>

	} else {

		uint32_t uRange = m_uCenter - m_uMin;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	61fb      	str	r3, [r7, #28]
		float fStep = uRange / 100.0f;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044a0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004504 <_ZN9QAD_Servo11setPositionEf+0x110>
 80044a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044a8:	edc7 7a06 	vstr	s15, [r7, #24]
		float fVal  = (0.0f - fPos) * fStep;
 80044ac:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004508 <_ZN9QAD_Servo11setPositionEf+0x114>
 80044b0:	edd7 7a00 	vldr	s15, [r7]
 80044b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80044bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c0:	edc7 7a05 	vstr	s15, [r7, #20]
		fVal  = fVal + 0.5f;
 80044c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044d0:	edc7 7a05 	vstr	s15, [r7, #20]

		m_uCurrent = m_uCenter - fVal;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80044e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80044e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044ec:	ee17 2a90 	vmov	r2, s15
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	619a      	str	r2, [r3, #24]

	}

	update();
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f836 	bl	8004566 <_ZN9QAD_Servo6updateEv>

}
 80044fa:	bf00      	nop
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	42c80000 	.word	0x42c80000
 8004508:	00000000 	.word	0x00000000

0800450c <_ZN9QAD_Servo6centerEv>:
}


//QAD_Servo::center
//QAD_Servo Control Method
void QAD_Servo::center(void) {
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  m_uCurrent = m_uCenter;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	619a      	str	r2, [r3, #24]

  update();
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f822 	bl	8004566 <_ZN9QAD_Servo6updateEv>
}
 8004522:	bf00      	nop
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <_ZN9QAD_Servo3minEv>:


//QAD_Servo::min
//QAD_Servo Control Method
void QAD_Servo::min(void) {
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  m_uCurrent = m_uMin;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691a      	ldr	r2, [r3, #16]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	619a      	str	r2, [r3, #24]

  update();
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f813 	bl	8004566 <_ZN9QAD_Servo6updateEv>
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <_ZN9QAD_Servo3maxEv>:


//QAD_Servo::max
//QAD_Servo Control Method
void QAD_Servo::max(void) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  m_uCurrent = m_uMax;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	619a      	str	r2, [r3, #24]

  update();
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f804 	bl	8004566 <_ZN9QAD_Servo6updateEv>
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <_ZN9QAD_Servo6updateEv>:
	//--------------------------------
	//QAD_Servo Private Update Methods

//QAD_Servo::update
//QAD_Servo Private Update Method
void QAD_Servo::update(void) {
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
	m_cPWM->setPWMVal(m_eChannel, m_uCurrent);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6858      	ldr	r0, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	7a19      	ldrb	r1, [r3, #8]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	f7ff fd9f 	bl	80040c0 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>
}
 8004582:	bf00      	nop
 8004584:	3708      	adds	r7, #8
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f3bf 8f5b 	dmb	ish
 8004598:	b2db      	uxtb	r3, r3
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d010      	beq.n	80045ce <_ZN11QAD_UARTMgr3getEv+0x42>
 80045ac:	4809      	ldr	r0, [pc, #36]	; (80045d4 <_ZN11QAD_UARTMgr3getEv+0x48>)
 80045ae:	f001 f8fd 	bl	80057ac <__cxa_guard_acquire>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <_ZN11QAD_UARTMgr3getEv+0x42>
 80045c2:	4805      	ldr	r0, [pc, #20]	; (80045d8 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 80045c4:	f000 fcf2 	bl	8004fac <_ZN11QAD_UARTMgrC1Ev>
 80045c8:	4802      	ldr	r0, [pc, #8]	; (80045d4 <_ZN11QAD_UARTMgr3getEv+0x48>)
 80045ca:	f001 f8fb 	bl	80057c4 <__cxa_guard_release>
		return instance;
 80045ce:	4b02      	ldr	r3, [pc, #8]	; (80045d8 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	20000330 	.word	0x20000330
 80045d8:	2000030c 	.word	0x2000030c

080045dc <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	4603      	mov	r3, r0
 80045e4:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 80045ec:	2302      	movs	r3, #2
 80045ee:	e00a      	b.n	8004606 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 80045f0:	f7ff ffcc 	bl	800458c <_ZN11QAD_UARTMgr3getEv>
 80045f4:	4601      	mov	r1, r0
 80045f6:	79fa      	ldrb	r2, [r7, #7]
 80045f8:	4613      	mov	r3, r2
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	3301      	adds	r3, #1
 8004604:	781b      	ldrb	r3, [r3, #0]
	}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	e00a      	b.n	8004638 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8004622:	f7ff ffb3 	bl	800458c <_ZN11QAD_UARTMgr3getEv>
 8004626:	4601      	mov	r1, r0
 8004628:	79fa      	ldrb	r2, [r7, #7]
 800462a:	4613      	mov	r3, r2
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3304      	adds	r3, #4
 8004636:	681b      	ldr	r3, [r3, #0]
	}
 8004638:	4618      	mov	r0, r3
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	4603      	mov	r3, r0
 8004648:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d902      	bls.n	8004656 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8004650:	f06f 0309 	mvn.w	r3, #9
 8004654:	e00b      	b.n	800466e <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8004656:	f7ff ff99 	bl	800458c <_ZN11QAD_UARTMgr3getEv>
 800465a:	4601      	mov	r1, r0
 800465c:	79fa      	ldrb	r2, [r7, #7]
 800465e:	4613      	mov	r3, r2
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	3308      	adds	r3, #8
 800466a:	f993 3000 	ldrsb.w	r3, [r3]
	}
 800466e:	4618      	mov	r0, r3
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 8004680:	f7ff ff84 	bl	800458c <_ZN11QAD_UARTMgr3getEv>
 8004684:	4602      	mov	r2, r0
 8004686:	79fb      	ldrb	r3, [r7, #7]
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f000 fcce 	bl	800502c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 8004690:	4603      	mov	r3, r0
	}
 8004692:	4618      	mov	r0, r3
 8004694:	3708      	adds	r7, #8
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	4603      	mov	r3, r0
 80046a2:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 80046a4:	f7ff ff72 	bl	800458c <_ZN11QAD_UARTMgr3getEv>
 80046a8:	4602      	mov	r2, r0
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 fce5 	bl	800507e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 80046b4:	bf00      	nop
 80046b6:	3708      	adds	r7, #8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 80046c6:	f7ff ff61 	bl	800458c <_ZN11QAD_UARTMgr3getEv>
 80046ca:	4602      	mov	r2, r0
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	4619      	mov	r1, r3
 80046d0:	4610      	mov	r0, r2
 80046d2:	f000 fcef 	bl	80050b4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 80046d6:	bf00      	nop
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 80046e8:	f7ff ff50 	bl	800458c <_ZN11QAD_UARTMgr3getEv>
 80046ec:	4602      	mov	r2, r0
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f000 fd4c 	bl	8005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 80046f8:	bf00      	nop
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	785b      	ldrb	r3, [r3, #1]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff65 	bl	80045dc <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8004722:	2302      	movs	r3, #2
 8004724:	e012      	b.n	800474c <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	785b      	ldrb	r3, [r3, #1]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ffa3 	bl	8004676 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f8a7 	bl	8004884 <_ZN8QAD_UART10periphInitEv>
 8004736:	4603      	mov	r3, r0
 8004738:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d004      	beq.n	800474a <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff ffa8 	bl	800469a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 800474a:	7bfb      	ldrb	r3, [r7, #15]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d009      	beq.n	8004778 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 8004764:	2101      	movs	r1, #1
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f924 	bl	80049b4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	785b      	ldrb	r3, [r3, #1]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff92 	bl	800469a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8004776:	e000      	b.n	800477a <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8004778:	bf00      	nop
}
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	331c      	adds	r3, #28
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047ae:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	69db      	ldr	r3, [r3, #28]
 80047d0:	68da      	ldr	r2, [r3, #12]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047da:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 80047e4:	bf00      	nop
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f042 0220 	orr.w	r2, r2, #32
 8004806:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f022 0220 	bic.w	r2, r2, #32
 8004832:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	78fa      	ldrb	r2, [r7, #3]
 800485a:	605a      	str	r2, [r3, #4]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	b2db      	uxtb	r3, r3
}
 8004878:	4618      	mov	r0, r3
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 800488c:	f107 030c 	add.w	r3, r7, #12
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	60da      	str	r2, [r3, #12]
 800489a:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8a1b      	ldrh	r3, [r3, #16]
 80048a0:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 80048a2:	2302      	movs	r3, #2
 80048a4:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 80048aa:	2303      	movs	r3, #3
 80048ac:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	7c9b      	ldrb	r3, [r3, #18]
 80048b2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f107 020c 	add.w	r2, r7, #12
 80048bc:	4611      	mov	r1, r2
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fd faee 	bl	8001ea0 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	8b1b      	ldrh	r3, [r3, #24]
 80048c8:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 80048ca:	2302      	movs	r3, #2
 80048cc:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 80048ce:	2301      	movs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 80048d2:	2303      	movs	r3, #3
 80048d4:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	7e9b      	ldrb	r3, [r3, #26]
 80048da:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f107 020c 	add.w	r2, r7, #12
 80048e4:	4611      	mov	r1, r2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd fada 	bl	8001ea0 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fee3 	bl	80046bc <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	785b      	ldrb	r3, [r3, #1]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff fe87 	bl	800460e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8004900:	4602      	mov	r2, r0
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	220c      	movs	r2, #12
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	331c      	adds	r3, #28
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fe03 	bl	8003542 <HAL_UART_Init>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	bf14      	ite	ne
 8004942:	2301      	movne	r3, #1
 8004944:	2300      	moveq	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 800494c:	2100      	movs	r1, #0
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f830 	bl	80049b4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8004954:	2301      	movs	r3, #1
 8004956:	e029      	b.n	80049ac <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69db      	ldr	r3, [r3, #28]
 8004962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004966:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	785b      	ldrb	r3, [r3, #1]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fe67 	bl	8004640 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004972:	4603      	mov	r3, r0
 8004974:	4618      	mov	r0, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	7a1b      	ldrb	r3, [r3, #8]
 800497a:	2200      	movs	r2, #0
 800497c:	4619      	mov	r1, r3
 800497e:	f7fd fa4a 	bl	8001e16 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff fe5a 	bl	8004640 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 800498c:	4603      	mov	r3, r0
 800498e:	4618      	mov	r0, r3
 8004990:	f7fd fa5d 	bl	8001e4e <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3720      	adds	r7, #32
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01b      	beq.n	80049fe <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff fefc 	bl	80047c4 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7ff ff25 	bl	800481c <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff fe32 	bl	8004640 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 80049dc:	4603      	mov	r3, r0
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fd fa43 	bl	8001e6a <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	68da      	ldr	r2, [r3, #12]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f2:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	331c      	adds	r3, #28
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe fdef 	bl	80035dc <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	785b      	ldrb	r3, [r3, #1]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff fe6b 	bl	80046de <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	8b1b      	ldrh	r3, [r3, #24]
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7fd fbc8 	bl	80021a8 <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8a1b      	ldrh	r3, [r3, #16]
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7fd fbc0 	bl	80021a8 <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3708      	adds	r7, #8
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <_ZN12QAD_TimerMgrC1Ev>:
//QAD_TimerMgr::QAD_TimerMgr
//QAD_TimerMgr Constructor
//
//Fills out details for the system's Tiemr peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
QAD_TimerMgr::QAD_TimerMgr() {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]

  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 8004a50:	2300      	movs	r3, #0
 8004a52:	73fb      	strb	r3, [r7, #15]
 8004a54:	7bfb      	ldrb	r3, [r7, #15]
 8004a56:	2b07      	cmp	r3, #7
 8004a58:	d830      	bhi.n	8004abc <_ZN12QAD_TimerMgrC1Ev+0x74>
  	m_sTimers[i].eState   = QAD_Timer_Unused;
 8004a5a:	7bfa      	ldrb	r2, [r7, #15]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	3301      	adds	r3, #1
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bEncoder = (i < QAD_Timer9);
 8004a6e:	7bfa      	ldrb	r2, [r7, #15]
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf94      	ite	ls
 8004a76:	2301      	movls	r3, #1
 8004a78:	2300      	movhi	r3, #0
 8004a7a:	b2d8      	uxtb	r0, r3
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	330a      	adds	r3, #10
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bADC     = ((i == QAD_Timer2) || (i == QAD_Timer3));
 8004a8e:	7bfb      	ldrb	r3, [r7, #15]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d002      	beq.n	8004a9a <_ZN12QAD_TimerMgrC1Ev+0x52>
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d101      	bne.n	8004a9e <_ZN12QAD_TimerMgrC1Ev+0x56>
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	e000      	b.n	8004aa0 <_ZN12QAD_TimerMgrC1Ev+0x58>
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	330b      	adds	r3, #11
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	e7cb      	b.n	8004a54 <_ZN12QAD_TimerMgrC1Ev+0xc>
  }

  //Set Timer Periph ID
  m_sTimers[QAD_Timer1].eTimer  = QAD_Timer1;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
  m_sTimers[QAD_Timer2].eTimer  = QAD_Timer2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	751a      	strb	r2, [r3, #20]
  m_sTimers[QAD_Timer3].eTimer  = QAD_Timer3;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  m_sTimers[QAD_Timer4].eTimer  = QAD_Timer4;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2203      	movs	r2, #3
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  m_sTimers[QAD_Timer5].eTimer  = QAD_Timer5;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2204      	movs	r2, #4
 8004adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  m_sTimers[QAD_Timer9].eTimer  = QAD_Timer9;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2205      	movs	r2, #5
 8004ae4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  m_sTimers[QAD_Timer10].eTimer = QAD_Timer10;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2206      	movs	r2, #6
 8004aec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  m_sTimers[QAD_Timer11].eTimer = QAD_Timer11;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2207      	movs	r2, #7
 8004af4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	//Set clock speeds
	m_sTimers[QAD_Timer1].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 8004af8:	f7fe f8b4 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8004afc:	4602      	mov	r2, r0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	605a      	str	r2, [r3, #4]
	m_sTimers[QAD_Timer2].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004b02:	f7fe f89b 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8004b06:	4603      	mov	r3, r0
 8004b08:	005a      	lsls	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	619a      	str	r2, [r3, #24]
	m_sTimers[QAD_Timer3].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004b0e:	f7fe f895 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8004b12:	4603      	mov	r3, r0
 8004b14:	005a      	lsls	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sTimers[QAD_Timer4].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004b1a:	f7fe f88f 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	005a      	lsls	r2, r3, #1
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	641a      	str	r2, [r3, #64]	; 0x40
	m_sTimers[QAD_Timer5].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004b26:	f7fe f889 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	005a      	lsls	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	655a      	str	r2, [r3, #84]	; 0x54
	m_sTimers[QAD_Timer9].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 8004b32:	f7fe f897 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8004b36:	4602      	mov	r2, r0
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	669a      	str	r2, [r3, #104]	; 0x68
	m_sTimers[QAD_Timer10].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fe f892 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8004b40:	4602      	mov	r2, r0
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sTimers[QAD_Timer11].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 8004b46:	f7fe f88d 	bl	8002c64 <HAL_RCC_GetPCLK2Freq>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//Set types
	m_sTimers[QAD_Timer1].eType  = QAD_Timer_16bit;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	721a      	strb	r2, [r3, #8]
	m_sTimers[QAD_Timer2].eType  = QAD_Timer_32bit;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	771a      	strb	r2, [r3, #28]
	m_sTimers[QAD_Timer3].eType  = QAD_Timer_16bit;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sTimers[QAD_Timer4].eType  = QAD_Timer_16bit;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sTimers[QAD_Timer5].eType  = QAD_Timer_32bit;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	m_sTimers[QAD_Timer9].eType  = QAD_Timer_16bit;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sTimers[QAD_Timer10].eType = QAD_Timer_16bit;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	m_sTimers[QAD_Timer11].eType = QAD_Timer_16bit;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

	//Set channel counts
	m_sTimers[QAD_Timer1].uChannels  = 4;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2204      	movs	r2, #4
 8004b92:	725a      	strb	r2, [r3, #9]
	m_sTimers[QAD_Timer2].uChannels  = 4;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2204      	movs	r2, #4
 8004b98:	775a      	strb	r2, [r3, #29]
	m_sTimers[QAD_Timer3].uChannels  = 4;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	m_sTimers[QAD_Timer4].uChannels  = 4;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	m_sTimers[QAD_Timer5].uChannels  = 4;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2204      	movs	r2, #4
 8004bae:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	m_sTimers[QAD_Timer9].uChannels  = 2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	m_sTimers[QAD_Timer10].uChannels = 1;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	m_sTimers[QAD_Timer11].uChannels = 1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	//Set Instances
	m_sTimers[QAD_Timer1].pInstance  = TIM1;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a1e      	ldr	r2, [pc, #120]	; (8004c48 <_ZN12QAD_TimerMgrC1Ev+0x200>)
 8004bce:	60da      	str	r2, [r3, #12]
	m_sTimers[QAD_Timer2].pInstance  = TIM2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bd6:	621a      	str	r2, [r3, #32]
	m_sTimers[QAD_Timer3].pInstance  = TIM3;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a1c      	ldr	r2, [pc, #112]	; (8004c4c <_ZN12QAD_TimerMgrC1Ev+0x204>)
 8004bdc:	635a      	str	r2, [r3, #52]	; 0x34
	m_sTimers[QAD_Timer4].pInstance  = TIM4;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <_ZN12QAD_TimerMgrC1Ev+0x208>)
 8004be2:	649a      	str	r2, [r3, #72]	; 0x48
	m_sTimers[QAD_Timer5].pInstance  = TIM5;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <_ZN12QAD_TimerMgrC1Ev+0x20c>)
 8004be8:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sTimers[QAD_Timer9].pInstance  = TIM9;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a1a      	ldr	r2, [pc, #104]	; (8004c58 <_ZN12QAD_TimerMgrC1Ev+0x210>)
 8004bee:	671a      	str	r2, [r3, #112]	; 0x70
	m_sTimers[QAD_Timer10].pInstance = TIM10;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a1a      	ldr	r2, [pc, #104]	; (8004c5c <_ZN12QAD_TimerMgrC1Ev+0x214>)
 8004bf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	m_sTimers[QAD_Timer11].pInstance = TIM11;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <_ZN12QAD_TimerMgrC1Ev+0x218>)
 8004bfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	//Set Update IRQs
	m_sTimers[QAD_Timer1].eIRQ_Update  = TIM1_UP_TIM10_IRQn;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2219      	movs	r2, #25
 8004c04:	741a      	strb	r2, [r3, #16]
	m_sTimers[QAD_Timer2].eIRQ_Update  = TIM2_IRQn;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	221c      	movs	r2, #28
 8004c0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sTimers[QAD_Timer3].eIRQ_Update  = TIM3_IRQn;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	221d      	movs	r2, #29
 8004c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sTimers[QAD_Timer4].eIRQ_Update  = TIM4_IRQn;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	221e      	movs	r2, #30
 8004c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	m_sTimers[QAD_Timer5].eIRQ_Update  = TIM5_IRQn;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2232      	movs	r2, #50	; 0x32
 8004c22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_sTimers[QAD_Timer9].eIRQ_Update  = TIM1_BRK_TIM9_IRQn;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2218      	movs	r2, #24
 8004c2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sTimers[QAD_Timer10].eIRQ_Update = TIM1_UP_TIM10_IRQn;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2219      	movs	r2, #25
 8004c32:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	m_sTimers[QAD_Timer11].eIRQ_Update = TIM1_TRG_COM_TIM11_IRQn;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	221a      	movs	r2, #26
 8004c3a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

}
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800

08004c64 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
//         QAD_Timer_InUse_PWM     - Specifies timer as being used to generate PWM signals
//         QAD_Timer_InUse_ADC     - Specifies timer as being used to trigger ADC conversions
//Returns QA_OK if registration is successful.
//        QA_Fail if eState is set to QAD_Timer_Unused.
//        QA_Error_PeriphBusy if selected Timer is already in use
QA_Result QAD_TimerMgr::imp_registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	460b      	mov	r3, r1
 8004c6e:	70fb      	strb	r3, [r7, #3]
 8004c70:	4613      	mov	r3, r2
 8004c72:	70bb      	strb	r3, [r7, #2]
  if (m_sTimers[eTimer].eState)
 8004c74:	78fa      	ldrb	r2, [r7, #3]
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	3301      	adds	r3, #1
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x2a>
  	return QA_Error_PeriphBusy;
 8004c8a:	2302      	movs	r3, #2
 8004c8c:	e00f      	b.n	8004cae <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  if (!eState)
 8004c8e:	78bb      	ldrb	r3, [r7, #2]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x34>
  	return QA_Fail;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e00a      	b.n	8004cae <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  m_sTimers[eTimer].eState = eState;
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	78ba      	ldrb	r2, [r7, #2]
 8004caa:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>:
//QAD_TimerMgr Management Method
//
//To be called from static method registerTimer()
//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
//eTimer - The Timer peripheral to be deregistered. A member of QAD_Timer_Periph
void QAD_TimerMgr::imp_deregisterTimer(QAD_Timer_Periph eTimer) {
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	70fb      	strb	r3, [r7, #3]
  m_sTimers[eTimer].eState = QAD_Timer_Unused;
 8004cc6:	78fa      	ldrb	r2, [r7, #3]
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	3301      	adds	r3, #1
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by enableClock()
//Used to enable the clock for a specific Timer peripheral
//eTimer - the Timer peripheral to enable the clock for
void QAD_TimerMgr::imp_enableClock(QAD_Timer_Periph eTimer) {
 8004ce8:	b480      	push	{r7}
 8004cea:	b08b      	sub	sp, #44	; 0x2c
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	2b08      	cmp	r3, #8
 8004cf8:	f200 80ef 	bhi.w	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1c>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d5f 	.word	0x08004d5f
 8004d0c:	08004d95 	.word	0x08004d95
 8004d10:	08004dcb 	.word	0x08004dcb
 8004d14:	08004e01 	.word	0x08004e01
 8004d18:	08004e37 	.word	0x08004e37
 8004d1c:	08004e6d 	.word	0x08004e6d
 8004d20:	08004ea3 	.word	0x08004ea3
 8004d24:	08004ed9 	.word	0x08004ed9
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_ENABLE();
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2c:	4b6e      	ldr	r3, [pc, #440]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d30:	4a6d      	ldr	r2, [pc, #436]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d32:	f043 0301 	orr.w	r3, r3, #1
 8004d36:	6453      	str	r3, [r2, #68]	; 0x44
 8004d38:	4b6b      	ldr	r3, [pc, #428]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_TIM1_FORCE_RESET();
 8004d44:	4b68      	ldr	r3, [pc, #416]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	4a67      	ldr	r2, [pc, #412]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_TIM1_RELEASE_RESET();
 8004d50:	4b65      	ldr	r3, [pc, #404]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	4a64      	ldr	r2, [pc, #400]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004d5c:	e0bd      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_ENABLE();
 8004d5e:	2300      	movs	r3, #0
 8004d60:	623b      	str	r3, [r7, #32]
 8004d62:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	4a60      	ldr	r2, [pc, #384]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6e:	4b5e      	ldr	r3, [pc, #376]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	623b      	str	r3, [r7, #32]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
			__HAL_RCC_TIM2_FORCE_RESET();
 8004d7a:	4b5b      	ldr	r3, [pc, #364]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	4a5a      	ldr	r2, [pc, #360]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM2_RELEASE_RESET();
 8004d86:	4b58      	ldr	r3, [pc, #352]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	4a57      	ldr	r2, [pc, #348]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d8c:	f023 0301 	bic.w	r3, r3, #1
 8004d90:	6213      	str	r3, [r2, #32]
      break;
 8004d92:	e0a2      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_ENABLE();
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
 8004d98:	4b53      	ldr	r3, [pc, #332]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	4a52      	ldr	r2, [pc, #328]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004d9e:	f043 0302 	orr.w	r3, r3, #2
 8004da2:	6413      	str	r3, [r2, #64]	; 0x40
 8004da4:	4b50      	ldr	r3, [pc, #320]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	61fb      	str	r3, [r7, #28]
 8004dae:	69fb      	ldr	r3, [r7, #28]
			__HAL_RCC_TIM3_FORCE_RESET();
 8004db0:	4b4d      	ldr	r3, [pc, #308]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	4a4c      	ldr	r2, [pc, #304]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM3_RELEASE_RESET();
 8004dbc:	4b4a      	ldr	r3, [pc, #296]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dbe:	6a1b      	ldr	r3, [r3, #32]
 8004dc0:	4a49      	ldr	r2, [pc, #292]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dc2:	f023 0302 	bic.w	r3, r3, #2
 8004dc6:	6213      	str	r3, [r2, #32]
      break;
 8004dc8:	e087      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61bb      	str	r3, [r7, #24]
 8004dce:	4b46      	ldr	r3, [pc, #280]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a45      	ldr	r2, [pc, #276]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dd4:	f043 0304 	orr.w	r3, r3, #4
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dda:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	69bb      	ldr	r3, [r7, #24]
			__HAL_RCC_TIM4_FORCE_RESET();
 8004de6:	4b40      	ldr	r3, [pc, #256]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	4a3f      	ldr	r2, [pc, #252]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004dec:	f043 0304 	orr.w	r3, r3, #4
 8004df0:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM4_RELEASE_RESET();
 8004df2:	4b3d      	ldr	r3, [pc, #244]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	4a3c      	ldr	r2, [pc, #240]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004df8:	f023 0304 	bic.w	r3, r3, #4
 8004dfc:	6213      	str	r3, [r2, #32]
      break;
 8004dfe:	e06c      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_ENABLE();
 8004e00:	2300      	movs	r3, #0
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	4b38      	ldr	r3, [pc, #224]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	4a37      	ldr	r2, [pc, #220]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e0a:	f043 0308 	orr.w	r3, r3, #8
 8004e0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e10:	4b35      	ldr	r3, [pc, #212]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	697b      	ldr	r3, [r7, #20]
			__HAL_RCC_TIM5_FORCE_RESET();
 8004e1c:	4b32      	ldr	r3, [pc, #200]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	4a31      	ldr	r2, [pc, #196]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e22:	f043 0308 	orr.w	r3, r3, #8
 8004e26:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM5_RELEASE_RESET();
 8004e28:	4b2f      	ldr	r3, [pc, #188]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e2e:	f023 0308 	bic.w	r3, r3, #8
 8004e32:	6213      	str	r3, [r2, #32]
      break;
 8004e34:	e051      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e44:	6453      	str	r3, [r2, #68]	; 0x44
 8004e46:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_TIM9_FORCE_RESET();
 8004e52:	4b25      	ldr	r3, [pc, #148]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM9_RELEASE_RESET();
 8004e5e:	4b22      	ldr	r3, [pc, #136]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e68:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004e6a:	e036      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_ENABLE();
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e74:	4a1c      	ldr	r2, [pc, #112]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
			__HAL_RCC_TIM10_FORCE_RESET();
 8004e88:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	4a16      	ldr	r2, [pc, #88]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e92:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM10_RELEASE_RESET();
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004e9a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e9e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004ea0:	e01b      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	4b10      	ldr	r3, [pc, #64]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4a0f      	ldr	r2, [pc, #60]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
			__HAL_RCC_TIM11_FORCE_RESET();
 8004ebe:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ec8:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM11_RELEASE_RESET();
 8004eca:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	4a06      	ldr	r2, [pc, #24]	; (8004ee8 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ed0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ed4:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004ed6:	e000      	b.n	8004eda <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_TimerNone):
    	break;
 8004ed8:	bf00      	nop
  }
}
 8004eda:	bf00      	nop
 8004edc:	372c      	adds	r7, #44	; 0x2c
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	40023800 	.word	0x40023800

08004eec <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by disableClock()
//Used to disable the clock for a specific Timer peripheral
//eTimer - The timer peripheral to disable the clock for
void QAD_TimerMgr::imp_disableClock(QAD_Timer_Periph eTimer) {
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b08      	cmp	r3, #8
 8004efc:	d84d      	bhi.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
 8004efe:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0x18>)
 8004f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f04:	08004f29 	.word	0x08004f29
 8004f08:	08004f37 	.word	0x08004f37
 8004f0c:	08004f45 	.word	0x08004f45
 8004f10:	08004f53 	.word	0x08004f53
 8004f14:	08004f61 	.word	0x08004f61
 8004f18:	08004f6f 	.word	0x08004f6f
 8004f1c:	08004f7d 	.word	0x08004f7d
 8004f20:	08004f8b 	.word	0x08004f8b
 8004f24:	08004f99 	.word	0x08004f99
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_DISABLE();
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	4a1e      	ldr	r2, [pc, #120]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f2e:	f023 0301 	bic.w	r3, r3, #1
 8004f32:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004f34:	e031      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_DISABLE();
 8004f36:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004f42:	e02a      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_DISABLE();
 8004f44:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	4a17      	ldr	r2, [pc, #92]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f4a:	f023 0302 	bic.w	r3, r3, #2
 8004f4e:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004f50:	e023      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_DISABLE();
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	4a14      	ldr	r2, [pc, #80]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f58:	f023 0304 	bic.w	r3, r3, #4
 8004f5c:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004f5e:	e01c      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_DISABLE();
 8004f60:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f64:	4a10      	ldr	r2, [pc, #64]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f66:	f023 0308 	bic.w	r3, r3, #8
 8004f6a:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8004f6c:	e015      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_DISABLE();
 8004f6e:	4b0e      	ldr	r3, [pc, #56]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	4a0d      	ldr	r2, [pc, #52]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f78:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004f7a:	e00e      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_DISABLE();
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f82:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004f86:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004f88:	e007      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_DISABLE();
 8004f8a:	4b07      	ldr	r3, [pc, #28]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8e:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8004f90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f94:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004f96:	e000      	b.n	8004f9a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_TimerNone):
    	break;
 8004f98:	bf00      	nop
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40023800 	.word	0x40023800

08004fac <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d80d      	bhi.n	8004fda <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8004fbe:	7bfa      	ldrb	r2, [r7, #15]
 8004fc0:	6879      	ldr	r1, [r7, #4]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	440b      	add	r3, r1
 8004fcc:	3301      	adds	r3, #1
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
 8004fd8:	e7ee      	b.n	8004fb8 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0c      	ldr	r2, [pc, #48]	; (8005020 <_ZN11QAD_UARTMgrC1Ev+0x74>)
 8004ff0:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a0b      	ldr	r2, [pc, #44]	; (8005024 <_ZN11QAD_UARTMgrC1Ev+0x78>)
 8004ff6:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a0b      	ldr	r2, [pc, #44]	; (8005028 <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 8004ffc:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2225      	movs	r2, #37	; 0x25
 8005002:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2226      	movs	r2, #38	; 0x26
 8005008:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2247      	movs	r2, #71	; 0x47
 800500e:	f883 2020 	strb.w	r2, [r3, #32]

}
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4618      	mov	r0, r3
 8005016:	3714      	adds	r7, #20
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr
 8005020:	40011000 	.word	0x40011000
 8005024:	40004400 	.word	0x40004400
 8005028:	40011400 	.word	0x40011400

0800502c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	460b      	mov	r3, r1
 8005036:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d901      	bls.n	8005042 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 800503e:	2301      	movs	r3, #1
 8005040:	e017      	b.n	8005072 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3301      	adds	r3, #1
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8005058:	2302      	movs	r3, #2
 800505a:	e00a      	b.n	8005072 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4413      	add	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	3301      	adds	r3, #1
 800506c:	2201      	movs	r2, #1
 800506e:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	2b02      	cmp	r3, #2
 800508e:	d80a      	bhi.n	80050a6 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	4613      	mov	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	440b      	add	r3, r1
 800509e:	3301      	adds	r3, #1
 80050a0:	2200      	movs	r2, #0
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e000      	b.n	80050a8 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 80050a6:	bf00      	nop
}
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	2b03      	cmp	r3, #3
 80050c4:	d85c      	bhi.n	8005180 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 80050c6:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 80050c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	08005113 	.word	0x08005113
 80050d4:	08005149 	.word	0x08005149
 80050d8:	0800517f 	.word	0x0800517f
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	4b2a      	ldr	r3, [pc, #168]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	4a29      	ldr	r2, [pc, #164]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050e6:	f043 0310 	orr.w	r3, r3, #16
 80050ea:	6453      	str	r3, [r2, #68]	; 0x44
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	4a23      	ldr	r2, [pc, #140]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80050fe:	f043 0310 	orr.w	r3, r3, #16
 8005102:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8005104:	4b21      	ldr	r3, [pc, #132]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	4a20      	ldr	r2, [pc, #128]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800510a:	f023 0310 	bic.w	r3, r3, #16
 800510e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8005110:	e036      	b.n	8005180 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	4a1c      	ldr	r2, [pc, #112]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800511c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005120:	6413      	str	r3, [r2, #64]	; 0x40
 8005122:	4b1a      	ldr	r3, [pc, #104]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 800512e:	4b17      	ldr	r3, [pc, #92]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	4a16      	ldr	r2, [pc, #88]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005138:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	4a13      	ldr	r2, [pc, #76]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005140:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005144:	6213      	str	r3, [r2, #32]
      break;
 8005146:	e01b      	b.n	8005180 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	4b0f      	ldr	r3, [pc, #60]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	4a0e      	ldr	r2, [pc, #56]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005152:	f043 0320 	orr.w	r3, r3, #32
 8005156:	6453      	str	r3, [r2, #68]	; 0x44
 8005158:	4b0c      	ldr	r3, [pc, #48]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	f003 0320 	and.w	r3, r3, #32
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 8005164:	4b09      	ldr	r3, [pc, #36]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	4a08      	ldr	r2, [pc, #32]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800516a:	f043 0320 	orr.w	r3, r3, #32
 800516e:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	4a05      	ldr	r2, [pc, #20]	; (800518c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005176:	f023 0320 	bic.w	r3, r3, #32
 800517a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800517c:	e000      	b.n	8005180 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 800517e:	bf00      	nop
  }
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40023800 	.word	0x40023800

08005190 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800519c:	78fb      	ldrb	r3, [r7, #3]
 800519e:	2b03      	cmp	r3, #3
 80051a0:	d820      	bhi.n	80051e4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 80051a2:	a201      	add	r2, pc, #4	; (adr r2, 80051a8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 80051a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051c7 	.word	0x080051c7
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051e3 	.word	0x080051e3
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 80051b8:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	4a0c      	ldr	r2, [pc, #48]	; (80051f0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80051be:	f023 0310 	bic.w	r3, r3, #16
 80051c2:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80051c4:	e00e      	b.n	80051e4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80051cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051d0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80051d2:	e007      	b.n	80051e4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 80051d4:	4b06      	ldr	r3, [pc, #24]	; (80051f0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80051d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d8:	4a05      	ldr	r2, [pc, #20]	; (80051f0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80051da:	f023 0320 	bic.w	r3, r3, #32
 80051de:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80051e0:	e000      	b.n	80051e4 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 80051e2:	bf00      	nop
  }
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr
 80051f0:	40023800 	.word	0x40023800

080051f4 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7b1b      	ldrb	r3, [r3, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e010      	b.n	800522c <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6839      	ldr	r1, [r7, #0]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	4798      	blx	r3
 8005216:	4603      	mov	r3, r0
 8005218:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 800521a:	7bfb      	ldrb	r3, [r7, #15]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	e003      	b.n	800522c <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3308      	adds	r3, #8
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6839      	ldr	r1, [r7, #0]
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	4798      	blx	r3
}
 800524c:	bf00      	nop
 800524e:	3708      	adds	r7, #8
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800525e:	6838      	ldr	r0, [r7, #0]
 8005260:	f7fa ffba 	bl	80001d8 <strlen>
 8005264:	4603      	mov	r3, r0
 8005266:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8005268:	2300      	movs	r3, #0
 800526a:	81fb      	strh	r3, [r7, #14]
 800526c:	89fa      	ldrh	r2, [r7, #14]
 800526e:	89bb      	ldrh	r3, [r7, #12]
 8005270:	429a      	cmp	r2, r3
 8005272:	d20f      	bcs.n	8005294 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f837 	bl	80052ec <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800527e:	89fb      	ldrh	r3, [r7, #14]
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	4413      	add	r3, r2
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	4619      	mov	r1, r3
 8005288:	f000 f9e1 	bl	800564e <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800528c:	89fb      	ldrh	r3, [r7, #14]
 800528e:	3301      	adds	r3, #1
 8005290:	81fb      	strh	r3, [r7, #14]
 8005292:	e7eb      	b.n	800526c <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f827 	bl	80052ec <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800529e:	4603      	mov	r3, r0
 80052a0:	210d      	movs	r1, #13
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f9d3 	bl	800564e <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	330c      	adds	r3, #12
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	4798      	blx	r3
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	3304      	adds	r3, #4
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f80f 	bl	80052ec <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80052ce:	4603      	mov	r3, r0
 80052d0:	210d      	movs	r1, #13
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 f9bb 	bl	800564e <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	4798      	blx	r3
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
	return get();
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 f805 	bl	8005304 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 80052fa:	4603      	mov	r3, r0
      }
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f805 	bl	800531e <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8005314:	4603      	mov	r3, r0
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 f806 	bl	800533a <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800532e:	4603      	mov	r3, r0
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	3708      	adds	r7, #8
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800533a:	b580      	push	{r7, lr}
 800533c:	b082      	sub	sp, #8
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4618      	mov	r0, r3
 8005346:	f000 f805 	bl	8005354 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800534a:	4603      	mov	r3, r0
 800534c:	4618      	mov	r0, r3
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f805 	bl	800536c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8005362:	4603      	mov	r3, r0
 8005364:	4618      	mov	r0, r3
 8005366:	3708      	adds	r7, #8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4618      	mov	r0, r3
 8005378:	f000 f805 	bl	8005386 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 800537c:	4603      	mov	r3, r0
 800537e:	4618      	mov	r0, r3
 8005380:	3708      	adds	r7, #8
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	3314      	adds	r3, #20
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f8e4 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7ff f9a4 	bl	8004700 <_ZN8QAD_UART4initEv>
 80053b8:	4603      	mov	r3, r0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	3314      	adds	r3, #20
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f8d2 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80053d4:	4603      	mov	r3, r0
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7ff f9bc 	bl	8004754 <_ZN8QAD_UART6deinitEv>
}
 80053dc:	bf00      	nop
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b095      	sub	sp, #84	; 0x54
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3314      	adds	r3, #20
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f8c0 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff f9c0 	bl	8004780 <_ZN8QAD_UART9getHandleEv>
 8005400:	4602      	mov	r2, r0
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	4611      	mov	r1, r2
 8005408:	2244      	movs	r2, #68	; 0x44
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fa48 	bl	80058a0 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b20      	cmp	r3, #32
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01f      	beq.n	8005466 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	3314      	adds	r3, #20
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f8a4 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005430:	4603      	mov	r3, r0
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff fa18 	bl	8004868 <_ZN8QAD_UART6dataRXEv>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	7b9b      	ldrb	r3, [r3, #14]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	3308      	adds	r3, #8
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff ff4e 	bl	80052ec <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005450:	4602      	mov	r2, r0
 8005452:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f000 f8f8 	bl	800564e <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f06f 0220 	mvn.w	r2, #32
 8005464:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546e:	2b80      	cmp	r3, #128	; 0x80
 8005470:	bf0c      	ite	eq
 8005472:	2301      	moveq	r3, #1
 8005474:	2300      	movne	r3, #0
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d035      	beq.n	80054e8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff ff33 	bl	80052ec <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005486:	4603      	mov	r3, r0
 8005488:	4618      	mov	r0, r3
 800548a:	f000 f8cd 	bl	8005628 <_ZN14QAT_FIFOBuffer5emptyEv>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	bf0c      	ite	eq
 8005494:	2301      	moveq	r3, #1
 8005496:	2300      	movne	r3, #0
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b00      	cmp	r3, #0
 800549c:	d014      	beq.n	80054c8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3314      	adds	r3, #20
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 f868 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80054a8:	4604      	mov	r4, r0
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3304      	adds	r3, #4
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff ff1c 	bl	80052ec <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80054b4:	4603      	mov	r3, r0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f000 f8ed 	bl	8005696 <_ZN14QAT_FIFOBuffer3popEv>
 80054bc:	4603      	mov	r3, r0
 80054be:	4619      	mov	r1, r3
 80054c0:	4620      	mov	r0, r4
 80054c2:	f7ff f9c1 	bl	8004848 <_ZN8QAD_UART6dataTXEh>
 80054c6:	e00b      	b.n	80054e0 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	3314      	adds	r3, #20
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 f853 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80054d2:	4603      	mov	r3, r0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7ff f975 	bl	80047c4 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054e6:	601a      	str	r2, [r3, #0]
  }
}
 80054e8:	bf00      	nop
 80054ea:	3754      	adds	r7, #84	; 0x54
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd90      	pop	{r4, r7, pc}

080054f0 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3314      	adds	r3, #20
 80054fc:	4618      	mov	r0, r3
 80054fe:	f000 f83b 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005502:	4603      	mov	r3, r0
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff f947 	bl	8004798 <_ZN8QAD_UART7startTXEv>
}
 800550a:	bf00      	nop
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	3314      	adds	r3, #20
 800551e:	4618      	mov	r0, r3
 8005520:	f000 f82a 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005524:	4603      	mov	r3, r0
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff f94c 	bl	80047c4 <_ZN8QAD_UART6stopTXEv>
}
 800552c:	bf00      	nop
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	3314      	adds	r3, #20
 8005540:	4618      	mov	r0, r3
 8005542:	f000 f819 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005546:	4603      	mov	r3, r0
 8005548:	4618      	mov	r0, r3
 800554a:	f7ff f951 	bl	80047f0 <_ZN8QAD_UART7startRXEv>
}
 800554e:	bf00      	nop
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8005556:	b580      	push	{r7, lr}
 8005558:	b082      	sub	sp, #8
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	3314      	adds	r3, #20
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f808 	bl	8005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005568:	4603      	mov	r3, r0
 800556a:	4618      	mov	r0, r3
 800556c:	f7ff f956 	bl	800481c <_ZN8QAD_UART6stopRXEv>
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	return get();
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 f805 	bl	8005590 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 8005586:	4603      	mov	r3, r0
      }
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f805 	bl	80055aa <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 80055a0:	4603      	mov	r3, r0
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f806 	bl	80055c6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80055ba:	4603      	mov	r3, r0
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f805 	bl	80055e0 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80055d6:	4603      	mov	r3, r0
 80055d8:	4618      	mov	r0, r3
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}

080055e0 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f805 	bl	80055f8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 80055ee:	4603      	mov	r3, r0
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 f805 	bl	8005612 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 8005608:	4603      	mov	r3, r0
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	88da      	ldrh	r2, [r3, #6]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	891b      	ldrh	r3, [r3, #8]
 8005638:	429a      	cmp	r2, r3
 800563a:	d101      	bne.n	8005640 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	891b      	ldrh	r3, [r3, #8]
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f000 f847 	bl	80056f6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8005668:	4602      	mov	r2, r0
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	889a      	ldrh	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	891b      	ldrh	r3, [r3, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	d906      	bls.n	8005688 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	891b      	ldrh	r3, [r3, #8]
 800567e:	3301      	adds	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 8005686:	e002      	b.n	800568e <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	811a      	strh	r2, [r3, #8]
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 8005696:	b580      	push	{r7, lr}
 8005698:	b084      	sub	sp, #16
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff ffc2 	bl	8005628 <_ZN14QAT_FIFOBuffer5emptyEv>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf0c      	ite	eq
 80056aa:	2301      	moveq	r3, #1
 80056ac:	2300      	movne	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	88db      	ldrh	r3, [r3, #6]
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f000 f81a 	bl	80056f6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80056c2:	4603      	mov	r3, r0
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	889a      	ldrh	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	88db      	ldrh	r3, [r3, #6]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d906      	bls.n	80056e2 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	88db      	ldrh	r3, [r3, #6]
 80056d8:	3301      	adds	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	80da      	strh	r2, [r3, #6]
 80056e0:	e002      	b.n	80056e8 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	80da      	strh	r2, [r3, #6]
		return uData;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	e000      	b.n	80056ee <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b082      	sub	sp, #8
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
 80056fe:	6039      	str	r1, [r7, #0]
	return get()[__i];
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f807 	bl	8005714 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8005706:	4602      	mov	r2, r0
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4413      	add	r3, r2
      }
 800570c:	4618      	mov	r0, r3
 800570e:	3708      	adds	r7, #8
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 f805 	bl	800572e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8005724:	4603      	mov	r3, r0
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f806 	bl	800574a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800573e:	4603      	mov	r3, r0
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f805 	bl	8005764 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800575a:	4603      	mov	r3, r0
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f805 	bl	800577c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8005772:	4603      	mov	r3, r0
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f805 	bl	8005796 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 800578c:	4603      	mov	r3, r0
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <__cxa_guard_acquire>:
 80057ac:	6803      	ldr	r3, [r0, #0]
 80057ae:	07db      	lsls	r3, r3, #31
 80057b0:	d406      	bmi.n	80057c0 <__cxa_guard_acquire+0x14>
 80057b2:	7843      	ldrb	r3, [r0, #1]
 80057b4:	b103      	cbz	r3, 80057b8 <__cxa_guard_acquire+0xc>
 80057b6:	deff      	udf	#255	; 0xff
 80057b8:	2301      	movs	r3, #1
 80057ba:	7043      	strb	r3, [r0, #1]
 80057bc:	4618      	mov	r0, r3
 80057be:	4770      	bx	lr
 80057c0:	2000      	movs	r0, #0
 80057c2:	4770      	bx	lr

080057c4 <__cxa_guard_release>:
 80057c4:	2301      	movs	r3, #1
 80057c6:	6003      	str	r3, [r0, #0]
 80057c8:	4770      	bx	lr

080057ca <_Znwj>:
 80057ca:	2801      	cmp	r0, #1
 80057cc:	bf38      	it	cc
 80057ce:	2001      	movcc	r0, #1
 80057d0:	b510      	push	{r4, lr}
 80057d2:	4604      	mov	r4, r0
 80057d4:	4620      	mov	r0, r4
 80057d6:	f000 f85b 	bl	8005890 <malloc>
 80057da:	b930      	cbnz	r0, 80057ea <_Znwj+0x20>
 80057dc:	f000 f81e 	bl	800581c <_ZSt15get_new_handlerv>
 80057e0:	b908      	cbnz	r0, 80057e6 <_Znwj+0x1c>
 80057e2:	f000 f823 	bl	800582c <abort>
 80057e6:	4780      	blx	r0
 80057e8:	e7f4      	b.n	80057d4 <_Znwj+0xa>
 80057ea:	bd10      	pop	{r4, pc}

080057ec <_Znaj>:
 80057ec:	f7ff bfed 	b.w	80057ca <_Znwj>

080057f0 <__cxa_pure_virtual>:
 80057f0:	b508      	push	{r3, lr}
 80057f2:	f000 f80d 	bl	8005810 <_ZSt9terminatev>

080057f6 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80057f6:	b508      	push	{r3, lr}
 80057f8:	4780      	blx	r0
 80057fa:	f000 f817 	bl	800582c <abort>
	...

08005800 <_ZSt13get_terminatev>:
 8005800:	4b02      	ldr	r3, [pc, #8]	; (800580c <_ZSt13get_terminatev+0xc>)
 8005802:	6818      	ldr	r0, [r3, #0]
 8005804:	f3bf 8f5b 	dmb	ish
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	2000000c 	.word	0x2000000c

08005810 <_ZSt9terminatev>:
 8005810:	b508      	push	{r3, lr}
 8005812:	f7ff fff5 	bl	8005800 <_ZSt13get_terminatev>
 8005816:	f7ff ffee 	bl	80057f6 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800581c <_ZSt15get_new_handlerv>:
 800581c:	4b02      	ldr	r3, [pc, #8]	; (8005828 <_ZSt15get_new_handlerv+0xc>)
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	f3bf 8f5b 	dmb	ish
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	20000334 	.word	0x20000334

0800582c <abort>:
 800582c:	b508      	push	{r3, lr}
 800582e:	2006      	movs	r0, #6
 8005830:	f000 f8de 	bl	80059f0 <raise>
 8005834:	2001      	movs	r0, #1
 8005836:	f7fb fd75 	bl	8001324 <_exit>
	...

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	; (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000010 	.word	0x20000010

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	; (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	; (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	; (800588c <__libc_init_array+0x44>)
 800585c:	f000 f8f2 	bl	8005a44 <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	08005b54 	.word	0x08005b54
 8005884:	08005b54 	.word	0x08005b54
 8005888:	08005b54 	.word	0x08005b54
 800588c:	08005b58 	.word	0x08005b58

08005890 <malloc>:
 8005890:	4b02      	ldr	r3, [pc, #8]	; (800589c <malloc+0xc>)
 8005892:	4601      	mov	r1, r0
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	f000 b819 	b.w	80058cc <_malloc_r>
 800589a:	bf00      	nop
 800589c:	20000010 	.word	0x20000010

080058a0 <memcpy>:
 80058a0:	440a      	add	r2, r1
 80058a2:	4291      	cmp	r1, r2
 80058a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058a8:	d100      	bne.n	80058ac <memcpy+0xc>
 80058aa:	4770      	bx	lr
 80058ac:	b510      	push	{r4, lr}
 80058ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058b6:	4291      	cmp	r1, r2
 80058b8:	d1f9      	bne.n	80058ae <memcpy+0xe>
 80058ba:	bd10      	pop	{r4, pc}

080058bc <memset>:
 80058bc:	4402      	add	r2, r0
 80058be:	4603      	mov	r3, r0
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d100      	bne.n	80058c6 <memset+0xa>
 80058c4:	4770      	bx	lr
 80058c6:	f803 1b01 	strb.w	r1, [r3], #1
 80058ca:	e7f9      	b.n	80058c0 <memset+0x4>

080058cc <_malloc_r>:
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ce:	1ccd      	adds	r5, r1, #3
 80058d0:	f025 0503 	bic.w	r5, r5, #3
 80058d4:	3508      	adds	r5, #8
 80058d6:	2d0c      	cmp	r5, #12
 80058d8:	bf38      	it	cc
 80058da:	250c      	movcc	r5, #12
 80058dc:	2d00      	cmp	r5, #0
 80058de:	4606      	mov	r6, r0
 80058e0:	db01      	blt.n	80058e6 <_malloc_r+0x1a>
 80058e2:	42a9      	cmp	r1, r5
 80058e4:	d903      	bls.n	80058ee <_malloc_r+0x22>
 80058e6:	230c      	movs	r3, #12
 80058e8:	6033      	str	r3, [r6, #0]
 80058ea:	2000      	movs	r0, #0
 80058ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058ee:	f000 f89b 	bl	8005a28 <__malloc_lock>
 80058f2:	4921      	ldr	r1, [pc, #132]	; (8005978 <_malloc_r+0xac>)
 80058f4:	680a      	ldr	r2, [r1, #0]
 80058f6:	4614      	mov	r4, r2
 80058f8:	b99c      	cbnz	r4, 8005922 <_malloc_r+0x56>
 80058fa:	4f20      	ldr	r7, [pc, #128]	; (800597c <_malloc_r+0xb0>)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	b923      	cbnz	r3, 800590a <_malloc_r+0x3e>
 8005900:	4621      	mov	r1, r4
 8005902:	4630      	mov	r0, r6
 8005904:	f000 f83c 	bl	8005980 <_sbrk_r>
 8005908:	6038      	str	r0, [r7, #0]
 800590a:	4629      	mov	r1, r5
 800590c:	4630      	mov	r0, r6
 800590e:	f000 f837 	bl	8005980 <_sbrk_r>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	d123      	bne.n	800595e <_malloc_r+0x92>
 8005916:	230c      	movs	r3, #12
 8005918:	6033      	str	r3, [r6, #0]
 800591a:	4630      	mov	r0, r6
 800591c:	f000 f88a 	bl	8005a34 <__malloc_unlock>
 8005920:	e7e3      	b.n	80058ea <_malloc_r+0x1e>
 8005922:	6823      	ldr	r3, [r4, #0]
 8005924:	1b5b      	subs	r3, r3, r5
 8005926:	d417      	bmi.n	8005958 <_malloc_r+0x8c>
 8005928:	2b0b      	cmp	r3, #11
 800592a:	d903      	bls.n	8005934 <_malloc_r+0x68>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	441c      	add	r4, r3
 8005930:	6025      	str	r5, [r4, #0]
 8005932:	e004      	b.n	800593e <_malloc_r+0x72>
 8005934:	6863      	ldr	r3, [r4, #4]
 8005936:	42a2      	cmp	r2, r4
 8005938:	bf0c      	ite	eq
 800593a:	600b      	streq	r3, [r1, #0]
 800593c:	6053      	strne	r3, [r2, #4]
 800593e:	4630      	mov	r0, r6
 8005940:	f000 f878 	bl	8005a34 <__malloc_unlock>
 8005944:	f104 000b 	add.w	r0, r4, #11
 8005948:	1d23      	adds	r3, r4, #4
 800594a:	f020 0007 	bic.w	r0, r0, #7
 800594e:	1ac2      	subs	r2, r0, r3
 8005950:	d0cc      	beq.n	80058ec <_malloc_r+0x20>
 8005952:	1a1b      	subs	r3, r3, r0
 8005954:	50a3      	str	r3, [r4, r2]
 8005956:	e7c9      	b.n	80058ec <_malloc_r+0x20>
 8005958:	4622      	mov	r2, r4
 800595a:	6864      	ldr	r4, [r4, #4]
 800595c:	e7cc      	b.n	80058f8 <_malloc_r+0x2c>
 800595e:	1cc4      	adds	r4, r0, #3
 8005960:	f024 0403 	bic.w	r4, r4, #3
 8005964:	42a0      	cmp	r0, r4
 8005966:	d0e3      	beq.n	8005930 <_malloc_r+0x64>
 8005968:	1a21      	subs	r1, r4, r0
 800596a:	4630      	mov	r0, r6
 800596c:	f000 f808 	bl	8005980 <_sbrk_r>
 8005970:	3001      	adds	r0, #1
 8005972:	d1dd      	bne.n	8005930 <_malloc_r+0x64>
 8005974:	e7cf      	b.n	8005916 <_malloc_r+0x4a>
 8005976:	bf00      	nop
 8005978:	20000338 	.word	0x20000338
 800597c:	2000033c 	.word	0x2000033c

08005980 <_sbrk_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d06      	ldr	r5, [pc, #24]	; (800599c <_sbrk_r+0x1c>)
 8005984:	2300      	movs	r3, #0
 8005986:	4604      	mov	r4, r0
 8005988:	4608      	mov	r0, r1
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	f7fb fcd4 	bl	8001338 <_sbrk>
 8005990:	1c43      	adds	r3, r0, #1
 8005992:	d102      	bne.n	800599a <_sbrk_r+0x1a>
 8005994:	682b      	ldr	r3, [r5, #0]
 8005996:	b103      	cbz	r3, 800599a <_sbrk_r+0x1a>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	20000344 	.word	0x20000344

080059a0 <_raise_r>:
 80059a0:	291f      	cmp	r1, #31
 80059a2:	b538      	push	{r3, r4, r5, lr}
 80059a4:	4604      	mov	r4, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	d904      	bls.n	80059b4 <_raise_r+0x14>
 80059aa:	2316      	movs	r3, #22
 80059ac:	6003      	str	r3, [r0, #0]
 80059ae:	f04f 30ff 	mov.w	r0, #4294967295
 80059b2:	bd38      	pop	{r3, r4, r5, pc}
 80059b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80059b6:	b112      	cbz	r2, 80059be <_raise_r+0x1e>
 80059b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80059bc:	b94b      	cbnz	r3, 80059d2 <_raise_r+0x32>
 80059be:	4620      	mov	r0, r4
 80059c0:	f000 f830 	bl	8005a24 <_getpid_r>
 80059c4:	462a      	mov	r2, r5
 80059c6:	4601      	mov	r1, r0
 80059c8:	4620      	mov	r0, r4
 80059ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059ce:	f000 b817 	b.w	8005a00 <_kill_r>
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d00a      	beq.n	80059ec <_raise_r+0x4c>
 80059d6:	1c59      	adds	r1, r3, #1
 80059d8:	d103      	bne.n	80059e2 <_raise_r+0x42>
 80059da:	2316      	movs	r3, #22
 80059dc:	6003      	str	r3, [r0, #0]
 80059de:	2001      	movs	r0, #1
 80059e0:	e7e7      	b.n	80059b2 <_raise_r+0x12>
 80059e2:	2400      	movs	r4, #0
 80059e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80059e8:	4628      	mov	r0, r5
 80059ea:	4798      	blx	r3
 80059ec:	2000      	movs	r0, #0
 80059ee:	e7e0      	b.n	80059b2 <_raise_r+0x12>

080059f0 <raise>:
 80059f0:	4b02      	ldr	r3, [pc, #8]	; (80059fc <raise+0xc>)
 80059f2:	4601      	mov	r1, r0
 80059f4:	6818      	ldr	r0, [r3, #0]
 80059f6:	f7ff bfd3 	b.w	80059a0 <_raise_r>
 80059fa:	bf00      	nop
 80059fc:	20000010 	.word	0x20000010

08005a00 <_kill_r>:
 8005a00:	b538      	push	{r3, r4, r5, lr}
 8005a02:	4d07      	ldr	r5, [pc, #28]	; (8005a20 <_kill_r+0x20>)
 8005a04:	2300      	movs	r3, #0
 8005a06:	4604      	mov	r4, r0
 8005a08:	4608      	mov	r0, r1
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	602b      	str	r3, [r5, #0]
 8005a0e:	f7fb fc79 	bl	8001304 <_kill>
 8005a12:	1c43      	adds	r3, r0, #1
 8005a14:	d102      	bne.n	8005a1c <_kill_r+0x1c>
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	b103      	cbz	r3, 8005a1c <_kill_r+0x1c>
 8005a1a:	6023      	str	r3, [r4, #0]
 8005a1c:	bd38      	pop	{r3, r4, r5, pc}
 8005a1e:	bf00      	nop
 8005a20:	20000344 	.word	0x20000344

08005a24 <_getpid_r>:
 8005a24:	f7fb bc66 	b.w	80012f4 <_getpid>

08005a28 <__malloc_lock>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__malloc_lock+0x8>)
 8005a2a:	f000 b809 	b.w	8005a40 <__retarget_lock_acquire_recursive>
 8005a2e:	bf00      	nop
 8005a30:	2000034c 	.word	0x2000034c

08005a34 <__malloc_unlock>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__malloc_unlock+0x8>)
 8005a36:	f000 b804 	b.w	8005a42 <__retarget_lock_release_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	2000034c 	.word	0x2000034c

08005a40 <__retarget_lock_acquire_recursive>:
 8005a40:	4770      	bx	lr

08005a42 <__retarget_lock_release_recursive>:
 8005a42:	4770      	bx	lr

08005a44 <_init>:
 8005a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a46:	bf00      	nop
 8005a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4a:	bc08      	pop	{r3}
 8005a4c:	469e      	mov	lr, r3
 8005a4e:	4770      	bx	lr

08005a50 <_fini>:
 8005a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a52:	bf00      	nop
 8005a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a56:	bc08      	pop	{r3}
 8005a58:	469e      	mov	lr, r3
 8005a5a:	4770      	bx	lr
