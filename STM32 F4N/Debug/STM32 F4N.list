
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  0800497c  0800497c  0001497c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a98  08004a98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004a98  08004a98  00014a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa0  08004aa0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000074  08004b1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004b1c  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   000152f7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002a3e1  00000000  00000000  0003539b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005c1d  00000000  00000000  0005f77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  000653a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a9d42  00000000  00000000  00066348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000e70  00000000  00000000  00110090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001eb94  00000000  00000000  00110f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012fa94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004470  00000000  00000000  0012fae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004964 	.word	0x08004964

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08004964 	.word	0x08004964

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e6:	490e      	ldr	r1, [pc, #56]	; (8000520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004fc:	4c0b      	ldr	r4, [pc, #44]	; (800052c <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800050a:	f000 fe9b 	bl	8001244 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f004 f92b 	bl	8004768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000512:	f000 faa9 	bl	8000a68 <main>
  bx  lr    
 8000516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000524:	08004aa8 	.word	0x08004aa8
  ldr r2, =_sbss
 8000528:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800052c:	2000034c 	.word	0x2000034c

08000530 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <DMA1_Stream0_IRQHandler>
	...

08000534 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b098      	sub	sp, #96	; 0x60
 8000538:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a69      	ldr	r2, [pc, #420]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000544:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000546:	4b67      	ldr	r3, [pc, #412]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a66      	ldr	r2, [pc, #408]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800054c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000550:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000552:	4b64      	ldr	r3, [pc, #400]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a63      	ldr	r2, [pc, #396]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	2003      	movs	r0, #3
 8000560:	f001 fb7a 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000564:	2000      	movs	r0, #0
 8000566:	f000 fe7f 	bl	8001268 <HAL_InitTick>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 800057a:	2301      	movs	r3, #1
 800057c:	e0ad      	b.n	80006da <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a58      	ldr	r2, [pc, #352]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b53      	ldr	r3, [pc, #332]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a52      	ldr	r2, [pc, #328]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]
  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External (HSE) oscillator to be used, and setup primary PLL to provide a 100MHz clock
  //NOTE: HSE Oscillator provided on STM32F411RE Nucleo 64 board is an 8MHz clock signal provided by the ST-Link MCU's Master Clock Output
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80005b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 f90c 	bl	80047dc <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80005c4:	2301      	movs	r3, #1
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 80005dc:	2332      	movs	r3, #50	; 0x32
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 80005e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ec:	4618      	mov	r0, r3
 80005ee:	f002 f813 	bl	8002618 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 8000602:	2301      	movs	r3, #1
 8000604:	e069      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000614:	6453      	str	r3, [r2, #68]	; 0x44
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000632:	230f      	movs	r3, #15
 8000634:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;

  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 8000636:	2302      	movs	r3, #2
 8000638:	623b      	str	r3, [r7, #32]

  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24

  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
                                                          //NOTE: APB1 timer clocks are clock doubled, providing APB1 timers with 100MHz clocks

  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f002 fa5a 	bl	8002b08 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 8000664:	2301      	movs	r3, #1
 8000666:	e038      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6313      	str	r3, [r2, #48]	; 0x30
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023c00 	.word	0x40023c00
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <_ZN7QAD_ADCC1Ev>:
	uint8_t                 m_uDataIdx;


	//-----------
	//Constructor
	QAD_ADC() :
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_sTIMHandle({0}),
		m_sADCHandle({0}),
		m_uChannelCount(0) {}
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	705a      	strb	r2, [r3, #1]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	330c      	adds	r3, #12
 8000708:	2248      	movs	r2, #72	; 0x48
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f004 f865 	bl	80047dc <memset>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3354      	adds	r3, #84	; 0x54
 8000716:	2248      	movs	r2, #72	; 0x48
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f004 f85e 	bl	80047dc <memset>
 8000720:	230f      	movs	r3, #15
 8000722:	2b00      	cmp	r3, #0
 8000724:	db01      	blt.n	800072a <_ZN7QAD_ADCC1Ev+0x3a>
 8000726:	3b01      	subs	r3, #1
 8000728:	e7fb      	b.n	8000722 <_ZN7QAD_ADCC1Ev+0x32>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2200      	movs	r2, #0
 800072e:	f883 219c 	strb.w	r2, [r3, #412]	; 0x19c
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <_ZN7QAD_ADC3getEv>:


	  //-----------------
	  //Singleton Methods

	static QAD_ADC& get(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
		static QAD_ADC instance;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f3bf 8f5b 	dmb	ish
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b00      	cmp	r3, #0
 800075a:	d010      	beq.n	800077e <_ZN7QAD_ADC3getEv+0x42>
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 800075e:	f003 ffb5 	bl	80046cc <__cxa_guard_acquire>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	bf14      	ite	ne
 8000768:	2301      	movne	r3, #1
 800076a:	2300      	moveq	r3, #0
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d005      	beq.n	800077e <_ZN7QAD_ADC3getEv+0x42>
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <_ZN7QAD_ADC3getEv+0x4c>)
 8000774:	f7ff ffbc 	bl	80006f0 <_ZN7QAD_ADCC1Ev>
 8000778:	4802      	ldr	r0, [pc, #8]	; (8000784 <_ZN7QAD_ADC3getEv+0x48>)
 800077a:	f003 ffb3 	bl	80046e4 <__cxa_guard_release>
		return instance;
 800077e:	4b02      	ldr	r3, [pc, #8]	; (8000788 <_ZN7QAD_ADC3getEv+0x4c>)
	}
 8000780:	4618      	mov	r0, r3
 8000782:	bd80      	pop	{r7, pc}
 8000784:	20000250 	.word	0x20000250
 8000788:	20000090 	.word	0x20000090

0800078c <_ZN7QAD_ADC7handlerEv>:


	  //--------------
	  //Handler Method

	static void handler(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
		get().imp_handler();
 8000790:	f7ff ffd4 	bl	800073c <_ZN7QAD_ADC3getEv>
 8000794:	4603      	mov	r3, r0
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fe0a 	bl	80033b0 <_ZN7QAD_ADC11imp_handlerEv>
	}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}

080007a0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0

}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
	...

080007b0 <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <HardFault_Handler+0x10>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f003 f8c4 	bl	8003946 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007be:	e7fe      	b.n	80007be <HardFault_Handler+0xe>
 80007c0:	200002d8 	.word	0x200002d8

080007c4 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <MemManage_Handler+0x10>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f003 f8ba 	bl	8003946 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007d2:	e7fe      	b.n	80007d2 <MemManage_Handler+0xe>
 80007d4:	200002d8 	.word	0x200002d8

080007d8 <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007dc:	4b02      	ldr	r3, [pc, #8]	; (80007e8 <BusFault_Handler+0x10>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 f8b0 	bl	8003946 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0xe>
 80007e8:	200002d8 	.word	0x200002d8

080007ec <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
	GPIO_UserLED->on();
 80007f0:	4b02      	ldr	r3, [pc, #8]	; (80007fc <UsageFault_Handler+0x10>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4618      	mov	r0, r3
 80007f6:	f003 f8a6 	bl	8003946 <_ZN15QAD_GPIO_Output2onEv>
  while (1) {}
 80007fa:	e7fe      	b.n	80007fa <UsageFault_Handler+0xe>
 80007fc:	200002d8 	.word	0x200002d8

08000800 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr

0800080e <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 800080e:	b480      	push	{r7}
 8000810:	af00      	add	r7, sp, #0

}
 8000812:	bf00      	nop
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr

0800081c <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800082e:	f000 fd4b 	bl	80012c8 <HAL_IncTick>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Function
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <USART2_IRQHandler+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2100      	movs	r1, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f003 fc86 	bl	8004154 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200002dc 	.word	0x200002dc

08000850 <ADC_IRQHandler>:


//ADC_IRQHandler
//Interrupt Handler Function
void ADC_IRQHandler(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  QAD_ADC::handler();
 8000854:	f7ff ff9a 	bl	800078c <_ZN7QAD_ADC7handlerEv>
}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN9QAD_Flash3getEv>:


	//----------------
	//Singleton Method

	static QAD_Flash& get(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
		static QAD_Flash instance;
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <_ZN9QAD_Flash3getEv+0x48>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	f3bf 8f5b 	dmb	ish
 8000868:	b2db      	uxtb	r3, r3
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	2b00      	cmp	r3, #0
 8000870:	bf0c      	ite	eq
 8000872:	2301      	moveq	r3, #1
 8000874:	2300      	movne	r3, #0
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d010      	beq.n	800089e <_ZN9QAD_Flash3getEv+0x42>
 800087c:	4809      	ldr	r0, [pc, #36]	; (80008a4 <_ZN9QAD_Flash3getEv+0x48>)
 800087e:	f003 ff25 	bl	80046cc <__cxa_guard_acquire>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	bf14      	ite	ne
 8000888:	2301      	movne	r3, #1
 800088a:	2300      	moveq	r3, #0
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d005      	beq.n	800089e <_ZN9QAD_Flash3getEv+0x42>
 8000892:	4805      	ldr	r0, [pc, #20]	; (80008a8 <_ZN9QAD_Flash3getEv+0x4c>)
 8000894:	f002 ff60 	bl	8003758 <_ZN9QAD_FlashC1Ev>
 8000898:	4802      	ldr	r0, [pc, #8]	; (80008a4 <_ZN9QAD_Flash3getEv+0x48>)
 800089a:	f003 ff23 	bl	80046e4 <__cxa_guard_release>
		return instance;
 800089e:	4b02      	ldr	r3, [pc, #8]	; (80008a8 <_ZN9QAD_Flash3getEv+0x4c>)
	}
 80008a0:	4618      	mov	r0, r3
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	200002d4 	.word	0x200002d4
 80008a8:	20000254 	.word	0x20000254

080008ac <_ZN9QAD_Flash16getSectorPointerEh>:

		return get().m_sSectors[uSector].uBase;
	}


	static void* getSectorPointer(uint8_t uSector) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
		if (uSector >= QAD_FLASH_SECTORCOUNT)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	2b07      	cmp	r3, #7
 80008ba:	d901      	bls.n	80008c0 <_ZN9QAD_Flash16getSectorPointerEh+0x14>
			return NULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	e007      	b.n	80008d0 <_ZN9QAD_Flash16getSectorPointerEh+0x24>

		return get().m_sSectors[uSector].pData;
 80008c0:	f7ff ffcc 	bl	800085c <_ZN9QAD_Flash3getEv>
 80008c4:	4602      	mov	r2, r0
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	4413      	add	r3, r2
 80008cc:	3308      	adds	r3, #8
 80008ce:	681b      	ldr	r3, [r3, #0]
	}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <_ZN9QAD_Flash19eraseAndWriteSectorEhPhm>:

	static QA_Result eraseSector(uint8_t uSector) {
		return get().imp_eraseSector(uSector);
	}

	static QA_Result eraseAndWriteSector(uint8_t uSector, uint8_t* pData, uint32_t uSize) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
 80008e4:	73fb      	strb	r3, [r7, #15]
		return get().imp_eraseAndWriteSector(uSector, pData, uSize);
 80008e6:	f7ff ffb9 	bl	800085c <_ZN9QAD_Flash3getEv>
 80008ea:	7bf9      	ldrb	r1, [r7, #15]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	f002 ffb8 	bl	8003864 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm>
 80008f4:	4603      	mov	r3, r0
	}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
 8000906:	460b      	mov	r3, r1
 8000908:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 800090a:	887a      	ldrh	r2, [r7, #2]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4611      	mov	r1, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f9ef 	bl	8000cf4 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	887a      	ldrh	r2, [r7, #2]
 800091a:	809a      	strh	r2, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2200      	movs	r2, #0
 8000920:	80da      	strh	r2, [r3, #6]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	811a      	strh	r2, [r3, #8]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	4608      	mov	r0, r1
 800093e:	4611      	mov	r1, r2
 8000940:	461a      	mov	r2, r3
 8000942:	4603      	mov	r3, r0
 8000944:	817b      	strh	r3, [r7, #10]
 8000946:	460b      	mov	r3, r1
 8000948:	813b      	strh	r3, [r7, #8]
 800094a:	4613      	mov	r3, r2
 800094c:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	3304      	adds	r3, #4
 8000958:	f107 020a 	add.w	r2, r7, #10
 800095c:	4611      	mov	r1, r2
 800095e:	4618      	mov	r0, r3
 8000960:	f000 f9e4 	bl	8000d2c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3308      	adds	r3, #8
 8000968:	f107 0208 	add.w	r2, r7, #8
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f9dc 	bl	8000d2c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2200      	movs	r2, #0
 8000978:	731a      	strb	r2, [r3, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2200      	movs	r2, #0
 800097e:	735a      	strb	r2, [r3, #13]
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	2200      	movs	r2, #0
 8000984:	739a      	strb	r2, [r3, #14]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	79fa      	ldrb	r2, [r7, #7]
 800098a:	73da      	strb	r2, [r3, #15]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	08004a40 	.word	0x08004a40

0800099c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	769a      	strb	r2, [r3, #26]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2225      	movs	r2, #37	; 0x25
 80009f8:	76da      	strb	r2, [r3, #27]
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	331c      	adds	r3, #28
 80009fe:	2244      	movs	r2, #68	; 0x44
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f003 feea 	bl	80047dc <memset>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	8b99      	ldrh	r1, [r3, #28]
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	8bda      	ldrh	r2, [r3, #30]
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f7ff ff7b 	bl	8000934 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000a3e:	4a09      	ldr	r2, [pc, #36]	; (8000a64 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	741a      	strb	r2, [r3, #16]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	3314      	adds	r3, #20
 8000a52:	4611      	mov	r1, r2
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 f984 	bl	8000d62 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08004a7c 	.word	0x08004a7c

08000a68 <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b097      	sub	sp, #92	; 0x5c
 8000a6c:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000a6e:	f7ff fd61 	bl	8000534 <_Z16SystemInitializev>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf14      	ite	ne
 8000a78:	2301      	movne	r3, #1
 8000a7a:	2300      	moveq	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d000      	beq.n	8000a84 <main+0x1c>
		while (1) {}
 8000a82:	e7fe      	b.n	8000a82 <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000a84:	2014      	movs	r0, #20
 8000a86:	f003 fe30 	bl	80046ea <_Znwj>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461c      	mov	r4, r3
 8000a8e:	2220      	movs	r2, #32
 8000a90:	498e      	ldr	r1, [pc, #568]	; (8000ccc <main+0x264>)
 8000a92:	4620      	mov	r0, r4
 8000a94:	f002 ff36 	bl	8003904 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000a98:	4b8d      	ldr	r3, [pc, #564]	; (8000cd0 <main+0x268>)
 8000a9a:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	763b      	strb	r3, [r7, #24]
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000aa0:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000aa4:	61fb      	str	r3, [r7, #28]
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	f887 3020 	strb.w	r3, [r7, #32]
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000aac:	4b87      	ldr	r3, [pc, #540]	; (8000ccc <main+0x264>)
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	853b      	strh	r3, [r7, #40]	; 0x28
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000ab4:	2307      	movs	r3, #7
 8000ab6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000aba:	4b84      	ldr	r3, [pc, #528]	; (8000ccc <main+0x264>)
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000abe:	2308      	movs	r3, #8
 8000ac0:	863b      	strh	r3, [r7, #48]	; 0x30
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000ac2:	2307      	movs	r3, #7
 8000ac4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000ac8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000acc:	86bb      	strh	r3, [r7, #52]	; 0x34
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ad2:	86fb      	strh	r3, [r7, #54]	; 0x36

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000ad4:	2018      	movs	r0, #24
 8000ad6:	f003 fe08 	bl	80046ea <_Znwj>
 8000ada:	4603      	mov	r3, r0
 8000adc:	461c      	mov	r4, r3
 8000ade:	f107 0318 	add.w	r3, r7, #24
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	f7ff ff9d 	bl	8000a24 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000aea:	4b7a      	ldr	r3, [pc, #488]	; (8000cd4 <main+0x26c>)
 8000aec:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000aee:	4b79      	ldr	r3, [pc, #484]	; (8000cd4 <main+0x26c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f003 fb0d 	bl	8004114 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d005      	beq.n	8000b16 <main+0xae>
  	GPIO_UserLED->on();
 8000b0a:	4b71      	ldr	r3, [pc, #452]	; (8000cd0 <main+0x268>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 ff19 	bl	8003946 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000b14:	e7fe      	b.n	8000b14 <main+0xac>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000b16:	4b6f      	ldr	r3, [pc, #444]	; (8000cd4 <main+0x26c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f003 fb5e 	bl	80041dc <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000b20:	4b6c      	ldr	r3, [pc, #432]	; (8000cd4 <main+0x26c>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	496c      	ldr	r1, [pc, #432]	; (8000cd8 <main+0x270>)
 8000b26:	4618      	mov	r0, r3
 8000b28:	f003 fb24 	bl	8004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  UART_STLink->txCR();
 8000b2c:	4b69      	ldr	r3, [pc, #420]	; (8000cd4 <main+0x26c>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fb53 	bl	80041dc <_ZN19QAS_Serial_Dev_Base4txCREv>


  //
  const uint8_t uSector = 7;
 8000b36:	2307      	movs	r3, #7
 8000b38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  const uint8_t uStrSize = 9;
 8000b3c:	2309      	movs	r3, #9
 8000b3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  char strWrite[uStrSize] = {'T', 'e', 's', 't', 'i', 'n', 'g', 0};
 8000b42:	4a66      	ldr	r2, [pc, #408]	; (8000cdc <main+0x274>)
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b50:	2300      	movs	r3, #0
 8000b52:	753b      	strb	r3, [r7, #20]

  //Write To Flash
  UART_STLink->txStringCR("Writing to Flash");
 8000b54:	4b5f      	ldr	r3, [pc, #380]	; (8000cd4 <main+0x26c>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4961      	ldr	r1, [pc, #388]	; (8000ce0 <main+0x278>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fb0a 	bl	8004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  if (QAD_Flash::eraseAndWriteSector(uSector, (uint8_t*)strWrite, uStrSize))
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2209      	movs	r2, #9
 8000b66:	4619      	mov	r1, r3
 8000b68:	2007      	movs	r0, #7
 8000b6a:	f7ff feb5 	bl	80008d8 <_ZN9QAD_Flash19eraseAndWriteSectorEhPhm>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf14      	ite	ne
 8000b74:	2301      	movne	r3, #1
 8000b76:	2300      	moveq	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d005      	beq.n	8000b8a <main+0x122>
  	UART_STLink->txStringCR("ERROR: Unable to write to Flash");
 8000b7e:	4b55      	ldr	r3, [pc, #340]	; (8000cd4 <main+0x26c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4958      	ldr	r1, [pc, #352]	; (8000ce4 <main+0x27c>)
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 faf5 	bl	8004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //if (QAD_Flash::eraseSector(uSector))
  	//UART_STLink->txStringCR("ERROR: Unable to erase Flash");

  UART_STLink->txCR();
 8000b8a:	4b52      	ldr	r3, [pc, #328]	; (8000cd4 <main+0x26c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f003 fb24 	bl	80041dc <_ZN19QAS_Serial_Dev_Base4txCREv>


  //Read From Flash
  UART_STLink->txStringCR("Reading from Flash");
 8000b94:	4b4f      	ldr	r3, [pc, #316]	; (8000cd4 <main+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4953      	ldr	r1, [pc, #332]	; (8000ce8 <main+0x280>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f003 faea 	bl	8004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  char* strReadPtr = (char*)QAD_Flash::getSectorPointer(uSector);
 8000ba0:	2007      	movs	r0, #7
 8000ba2:	f7ff fe83 	bl	80008ac <_ZN9QAD_Flash16getSectorPointerEh>
 8000ba6:	6438      	str	r0, [r7, #64]	; 0x40
  char strRead[uStrSize];
  for (uint8_t i=0; i<uStrSize; i++)
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000bae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000bb2:	2b08      	cmp	r3, #8
 8000bb4:	d811      	bhi.n	8000bda <main+0x172>
  	strRead[i] = strReadPtr[i];
 8000bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000bba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bbc:	441a      	add	r2, r3
 8000bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000bc2:	7812      	ldrb	r2, [r2, #0]
 8000bc4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000bc8:	440b      	add	r3, r1
 8000bca:	f803 2c58 	strb.w	r2, [r3, #-88]
  for (uint8_t i=0; i<uStrSize; i++)
 8000bce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8000bd8:	e7e9      	b.n	8000bae <main+0x146>

  if (strRead[uStrSize-1]) {
 8000bda:	7a3b      	ldrb	r3, [r7, #8]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d007      	beq.n	8000bf0 <main+0x188>
  	UART_STLink->txStringCR("ERROR: Null terminator missing");
 8000be0:	4b3c      	ldr	r3, [pc, #240]	; (8000cd4 <main+0x26c>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4941      	ldr	r1, [pc, #260]	; (8000cec <main+0x284>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fac4 	bl	8004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	strRead[uStrSize-1] = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	723b      	strb	r3, [r7, #8]
  }

  bool blComp = true;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  for (uint8_t i=0; i<uStrSize; i++) {
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8000bfc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000c00:	2b08      	cmp	r3, #8
 8000c02:	d818      	bhi.n	8000c36 <main+0x1ce>
  	if (strRead[i] != strWrite[i])
 8000c04:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000c08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000c0c:	4413      	add	r3, r2
 8000c0e:	f813 2c58 	ldrb.w	r2, [r3, #-88]
 8000c12:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000c16:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d002      	beq.n	8000c2a <main+0x1c2>
  		blComp = false;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  for (uint8_t i=0; i<uStrSize; i++) {
 8000c2a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000c2e:	3301      	adds	r3, #1
 8000c30:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8000c34:	e7e2      	b.n	8000bfc <main+0x194>
  }

  if (!blComp) {
 8000c36:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000c3a:	f083 0301 	eor.w	r3, r3, #1
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d005      	beq.n	8000c50 <main+0x1e8>
  	UART_STLink->txStringCR("ERROR: Readback contains incorrect data");
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <main+0x26c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4929      	ldr	r1, [pc, #164]	; (8000cf0 <main+0x288>)
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f003 fa92 	bl	8004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  }

  UART_STLink->txStringCR(strRead);
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <main+0x26c>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4610      	mov	r0, r2
 8000c5c:	f003 fa8a 	bl	8004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000c60:	f000 fb46 	bl	80012f0 <HAL_GetTick>
 8000c64:	64f8      	str	r0, [r7, #76]	; 0x4c
	uint32_t uOldTick = uNewTick;
 8000c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c68:	63fb      	str	r3, [r7, #60]	; 0x3c

  //Create task timing variables
	uint32_t uHeartbeatTicks = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	64bb      	str	r3, [r7, #72]	; 0x48

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000c6e:	f000 fb3f 	bl	80012f0 <HAL_GetTick>
 8000c72:	63b8      	str	r0, [r7, #56]	; 0x38
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d012      	beq.n	8000ca2 <main+0x23a>
    	uOldTick = uNewTick;
 8000c7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    	uNewTick = uCurTick;
 8000c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c82:	64fb      	str	r3, [r7, #76]	; 0x4c
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000c84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d205      	bcs.n	8000c98 <main+0x230>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	3b01      	subs	r3, #1
 8000c94:	653b      	str	r3, [r7, #80]	; 0x50
 8000c96:	e006      	b.n	8000ca6 <main+0x23e>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8000ca0:	e001      	b.n	8000ca6 <main+0x23e>
    	}

    } else {
    	uTicks = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	653b      	str	r3, [r7, #80]	; 0x50

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000caa:	4413      	add	r3, r2
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cb4:	d3db      	bcc.n	8000c6e <main+0x206>
    	GPIO_UserLED->toggle();
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <main+0x268>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 fe69 	bl	8003992 <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset heartbeat ticks
 8000cc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000cc6:	64bb      	str	r3, [r7, #72]	; 0x48
    uCurTick = HAL_GetTick();
 8000cc8:	e7d1      	b.n	8000c6e <main+0x206>
 8000cca:	bf00      	nop
 8000ccc:	40020000 	.word	0x40020000
 8000cd0:	200002d8 	.word	0x200002d8
 8000cd4:	200002dc 	.word	0x200002dc
 8000cd8:	0800497c 	.word	0x0800497c
 8000cdc:	08004a2c 	.word	0x08004a2c
 8000ce0:	0800499c 	.word	0x0800499c
 8000ce4:	080049b0 	.word	0x080049b0
 8000ce8:	080049d0 	.word	0x080049d0
 8000cec:	080049e4 	.word	0x080049e4
 8000cf0:	08004a04 	.word	0x08004a04

08000cf4 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000cfe:	683c      	ldr	r4, [r7, #0]
 8000d00:	4620      	mov	r0, r4
 8000d02:	f003 fd03 	bl	800470c <_Znaj>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	1e63      	subs	r3, r4, #1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db04      	blt.n	8000d1c <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000d12:	2100      	movs	r1, #0
 8000d14:	7011      	strb	r1, [r2, #0]
 8000d16:	3201      	adds	r2, #1
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	e7f8      	b.n	8000d0e <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000d1c:	4601      	mov	r1, r0
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f839 	bl	8000d96 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	370c      	adds	r7, #12
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd90      	pop	{r4, r7, pc}

08000d2c <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000d2c:	b5b0      	push	{r4, r5, r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000d36:	6838      	ldr	r0, [r7, #0]
 8000d38:	f000 f849 	bl	8000dce <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	881c      	ldrh	r4, [r3, #0]
 8000d40:	200c      	movs	r0, #12
 8000d42:	f003 fcd2 	bl	80046ea <_Znwj>
 8000d46:	4603      	mov	r3, r0
 8000d48:	461d      	mov	r5, r3
 8000d4a:	4621      	mov	r1, r4
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	f7ff fdd6 	bl	80008fe <_ZN14QAT_FIFOBufferC1Et>
 8000d52:	4629      	mov	r1, r5
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 f845 	bl	8000de4 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bdb0      	pop	{r4, r5, r7, pc}

08000d62 <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000d62:	b5b0      	push	{r4, r5, r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
 8000d6a:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000d6c:	6838      	ldr	r0, [r7, #0]
 8000d6e:	f000 f855 	bl	8000e1c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4605      	mov	r5, r0
 8000d74:	2064      	movs	r0, #100	; 0x64
 8000d76:	f003 fcb8 	bl	80046ea <_Znwj>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	461c      	mov	r4, r3
 8000d7e:	4629      	mov	r1, r5
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fe0b 	bl	800099c <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000d86:	4621      	mov	r1, r4
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 f852 	bl	8000e32 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bdb0      	pop	{r4, r5, r7, pc}

08000d96 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b082      	sub	sp, #8
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6839      	ldr	r1, [r7, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 f860 	bl	8000e6a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f867 	bl	8000e92 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6839      	ldr	r1, [r7, #0]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f85a 	bl	8000eac <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f861 	bl	8000ed4 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f000 f854 	bl	8000eee <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f85b 	bl	8000f16 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8000e60:	4603      	mov	r3, r0
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
 8000e72:	6039      	str	r1, [r7, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f85a 	bl	8000f30 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff99 	bl	8000db4 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8000e82:	4602      	mov	r2, r0
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 f854 	bl	8000f4a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f000 f852 	bl	8000f62 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff9f 	bl	8000e02 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f84c 	bl	8000f7c <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b082      	sub	sp, #8
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f84a 	bl	8000f94 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ffa5 	bl	8000e50 <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8000f06:	4602      	mov	r2, r0
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f844 	bl	8000fae <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f843 	bl	8000fc6 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f847 	bl	8000fe6 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f847 	bl	8001000 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f84b 	bl	8001020 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f84b 	bl	800103a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f84f 	bl	800105a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b082      	sub	sp, #8
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 f850 	bl	8001074 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 f858 	bl	800108c <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 f859 	bl	80010a8 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 f858 	bl	80010be <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f000 f860 	bl	80010d6 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f861 	bl	80010f2 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 8001030:	4603      	mov	r3, r0
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f860 	bl	8001108 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f868 	bl	8001120 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f869 	bl	800113c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 800106a:	4603      	mov	r3, r0
 800106c:	4618      	mov	r0, r3
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f868 	bl	8001152 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f000 f84e 	bl	8001168 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4618      	mov	r0, r3
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr

08001108 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f000 f834 	bl	800117e <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4618      	mov	r0, r3
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
      : _Head() { }
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4618      	mov	r0, r3
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr

08001168 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
      : _Head() { }
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4618      	mov	r0, r3
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
	return 1;
 8001198:	2301      	movs	r3, #1
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_kill>:

int _kill(int pid, int sig)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011ae:	f003 fad5 	bl	800475c <__errno>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2216      	movs	r2, #22
 80011b6:	601a      	str	r2, [r3, #0]
	return -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_exit>:

void _exit (int status)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ffe7 	bl	80011a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011d6:	e7fe      	b.n	80011d6 <_exit+0x12>

080011d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e0:	4a14      	ldr	r2, [pc, #80]	; (8001234 <_sbrk+0x5c>)
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <_sbrk+0x60>)
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d102      	bne.n	80011fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <_sbrk+0x64>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <_sbrk+0x68>)
 80011f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	429a      	cmp	r2, r3
 8001206:	d207      	bcs.n	8001218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001208:	f003 faa8 	bl	800475c <__errno>
 800120c:	4603      	mov	r3, r0
 800120e:	220c      	movs	r2, #12
 8001210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001212:	f04f 33ff 	mov.w	r3, #4294967295
 8001216:	e009      	b.n	800122c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001218:	4b08      	ldr	r3, [pc, #32]	; (800123c <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	4a05      	ldr	r2, [pc, #20]	; (800123c <_sbrk+0x64>)
 8001228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20020000 	.word	0x20020000
 8001238:	00000400 	.word	0x00000400
 800123c:	200002e0 	.word	0x200002e0
 8001240:	20000350 	.word	0x20000350

08001244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <SystemInit+0x20>)
 800124a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <SystemInit+0x20>)
 8001250:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001254:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x54>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_InitTick+0x58>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001282:	fbb2 f3f3 	udiv	r3, r2, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fd29 	bl	8001cde <HAL_SYSTICK_Config>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e00e      	b.n	80012b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b0f      	cmp	r3, #15
 800129a:	d80a      	bhi.n	80012b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800129c:	2200      	movs	r2, #0
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f000 fce3 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a8:	4a06      	ldr	r2, [pc, #24]	; (80012c4 <HAL_InitTick+0x5c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000004 	.word	0x20000004

080012c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000318 	.word	0x20000318

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	20000318 	.word	0x20000318

08001308 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e033      	b.n	8001386 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	2b00      	cmp	r3, #0
 8001324:	d109      	bne.n	800133a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f863 	bl	80013f2 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f003 0310 	and.w	r3, r3, #16
 8001342:	2b00      	cmp	r3, #0
 8001344:	d118      	bne.n	8001378 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800134e:	f023 0302 	bic.w	r3, r3, #2
 8001352:	f043 0202 	orr.w	r2, r3, #2
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fa8c 	bl	8001878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f023 0303 	bic.w	r3, r3, #3
 800136e:	f043 0201 	orr.w	r2, r3, #1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	641a      	str	r2, [r3, #64]	; 0x40
 8001376:	e001      	b.n	800137c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001384:	7bfb      	ldrb	r3, [r7, #15]
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_ADC_DeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_ADC_DeInit+0x16>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e022      	b.n	80013ea <HAL_ADC_DeInit+0x5c>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f043 0202 	orr.w	r2, r3, #2
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	609a      	str	r2, [r3, #8]
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d108      	bne.n	80013e0 <HAL_ADC_DeInit+0x52>

  /* DeInit the low level hardware: RCC clock, NVIC */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware: RCC clock, NVIC */
  HAL_ADC_MspDeInit(hadc);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f819 	bl	8001406 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_ADC_MspInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspInit could be implemented in the user file
   */ 
}
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_ADC_MspDeInit>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_MspDeInit could be implemented in the user file
   */ 
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800142e:	2b01      	cmp	r3, #1
 8001430:	d101      	bne.n	8001436 <HAL_ADC_Start_IT+0x1a>
 8001432:	2302      	movs	r3, #2
 8001434:	e0a1      	b.n	800157a <HAL_ADC_Start_IT+0x15e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2201      	movs	r2, #1
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b01      	cmp	r3, #1
 800144a:	d018      	beq.n	800147e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_ADC_Start_IT+0x16c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_ADC_Start_IT+0x170>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	0c9a      	lsrs	r2, r3, #18
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001470:	e002      	b.n	8001478 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	3b01      	subs	r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f9      	bne.n	8001472 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	2b01      	cmp	r3, #1
 800148a:	d169      	bne.n	8001560 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d007      	beq.n	80014be <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014b6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014ca:	d106      	bne.n	80014da <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d0:	f023 0206 	bic.w	r2, r3, #6
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	645a      	str	r2, [r3, #68]	; 0x44
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e8:	4b29      	ldr	r3, [pc, #164]	; (8001590 <HAL_ADC_Start_IT+0x174>)
 80014ea:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014f4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001504:	f043 0320 	orr.w	r3, r3, #32
 8001508:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 031f 	and.w	r3, r3, #31
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10f      	bne.n	8001536 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d129      	bne.n	8001578 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	e020      	b.n	8001578 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <HAL_ADC_Start_IT+0x178>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d11b      	bne.n	8001578 <HAL_ADC_Start_IT+0x15c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d114      	bne.n	8001578 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	e00b      	b.n	8001578 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	f043 0210 	orr.w	r2, r3, #16
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000000 	.word	0x20000000
 800158c:	431bde83 	.word	0x431bde83
 8001590:	40012300 	.word	0x40012300
 8001594:	40012000 	.word	0x40012000

08001598 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d101      	bne.n	80015ae <HAL_ADC_Stop_IT+0x16>
 80015aa:	2302      	movs	r3, #2
 80015ac:	e02b      	b.n	8001606 <HAL_ADC_Stop_IT+0x6e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0201 	bic.w	r2, r2, #1
 80015c4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d113      	bne.n	80015fc <HAL_ADC_Stop_IT+0x64>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80015e2:	f023 0320 	bic.w	r3, r3, #32
 80015e6:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	f043 0201 	orr.w	r2, r3, #1
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1c>
 800162c:	2302      	movs	r3, #2
 800162e:	e113      	b.n	8001858 <HAL_ADC_ConfigChannel+0x244>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d925      	bls.n	800168c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	3b1e      	subs	r3, #30
 8001656:	2207      	movs	r2, #7
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	43da      	mvns	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	400a      	ands	r2, r1
 8001664:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	68d9      	ldr	r1, [r3, #12]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	689a      	ldr	r2, [r3, #8]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	4618      	mov	r0, r3
 8001678:	4603      	mov	r3, r0
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	4403      	add	r3, r0
 800167e:	3b1e      	subs	r3, #30
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	e022      	b.n	80016d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6919      	ldr	r1, [r3, #16]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	4613      	mov	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4413      	add	r3, r2
 80016a0:	2207      	movs	r2, #7
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43da      	mvns	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	400a      	ands	r2, r1
 80016ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6919      	ldr	r1, [r3, #16]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4403      	add	r3, r0
 80016c8:	409a      	lsls	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d824      	bhi.n	8001724 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685a      	ldr	r2, [r3, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	4413      	add	r3, r2
 80016ea:	3b05      	subs	r3, #5
 80016ec:	221f      	movs	r2, #31
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43da      	mvns	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	400a      	ands	r2, r1
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b05      	subs	r3, #5
 8001716:	fa00 f203 	lsl.w	r2, r0, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
 8001722:	e04c      	b.n	80017be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b0c      	cmp	r3, #12
 800172a:	d824      	bhi.n	8001776 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685a      	ldr	r2, [r3, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	3b23      	subs	r3, #35	; 0x23
 800173e:	221f      	movs	r2, #31
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43da      	mvns	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	400a      	ands	r2, r1
 800174c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b29b      	uxth	r3, r3
 800175a:	4618      	mov	r0, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	4613      	mov	r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	4413      	add	r3, r2
 8001766:	3b23      	subs	r3, #35	; 0x23
 8001768:	fa00 f203 	lsl.w	r2, r0, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	430a      	orrs	r2, r1
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
 8001774:	e023      	b.n	80017be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b41      	subs	r3, #65	; 0x41
 8001788:	221f      	movs	r2, #31
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4618      	mov	r0, r3
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	3b41      	subs	r3, #65	; 0x41
 80017b2:	fa00 f203 	lsl.w	r2, r0, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017be:	4b29      	ldr	r3, [pc, #164]	; (8001864 <HAL_ADC_ConfigChannel+0x250>)
 80017c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_ADC_ConfigChannel+0x254>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d10f      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x1d8>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b12      	cmp	r3, #18
 80017d2:	d10b      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <HAL_ADC_ConfigChannel+0x254>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d12b      	bne.n	800184e <HAL_ADC_ConfigChannel+0x23a>
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1c      	ldr	r2, [pc, #112]	; (800186c <HAL_ADC_ConfigChannel+0x258>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d003      	beq.n	8001808 <HAL_ADC_ConfigChannel+0x1f4>
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b11      	cmp	r3, #17
 8001806:	d122      	bne.n	800184e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_ADC_ConfigChannel+0x258>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d111      	bne.n	800184e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_ADC_ConfigChannel+0x25c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_ADC_ConfigChannel+0x260>)
 8001830:	fba2 2303 	umull	r2, r3, r2, r3
 8001834:	0c9a      	lsrs	r2, r3, #18
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001840:	e002      	b.n	8001848 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	3b01      	subs	r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	40012300 	.word	0x40012300
 8001868:	40012000 	.word	0x40012000
 800186c:	10000012 	.word	0x10000012
 8001870:	20000000 	.word	0x20000000
 8001874:	431bde83 	.word	0x431bde83

08001878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001880:	4b79      	ldr	r3, [pc, #484]	; (8001a68 <ADC_Init+0x1f0>)
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	021a      	lsls	r2, r3, #8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <ADC_Init+0x1f4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e00f      	b.n	8001976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0202 	bic.w	r2, r2, #2
 8001984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e1b      	ldrb	r3, [r3, #24]
 8001990:	005a      	lsls	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01b      	beq.n	80019dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	3b01      	subs	r3, #1
 80019d0:	035a      	lsls	r2, r3, #13
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	e007      	b.n	80019ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	051a      	lsls	r2, r3, #20
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a2e:	025a      	lsls	r2, r3, #9
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	029a      	lsls	r2, r3, #10
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	0f000001 	.word	0x0f000001

08001a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	; (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60d3      	str	r3, [r2, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	f003 0307 	and.w	r3, r3, #7
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db0b      	blt.n	8001afe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <__NVIC_EnableIRQ+0x38>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2001      	movs	r0, #1
 8001af6:	fa00 f202 	lsl.w	r2, r0, r2
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db12      	blt.n	8001b48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	490a      	ldr	r1, [pc, #40]	; (8001b54 <__NVIC_DisableIRQ+0x44>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	3320      	adds	r3, #32
 8001b38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3c:	f3bf 8f4f 	dsb	sy
}
 8001b40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b42:	f3bf 8f6f 	isb	sy
}
 8001b46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000e100 	.word	0xe000e100

08001b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db0a      	blt.n	8001b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <__NVIC_SetPriority+0x4c>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	0112      	lsls	r2, r2, #4
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b80:	e00a      	b.n	8001b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4908      	ldr	r1, [pc, #32]	; (8001ba8 <__NVIC_SetPriority+0x50>)
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3b04      	subs	r3, #4
 8001b90:	0112      	lsls	r2, r2, #4
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	761a      	strb	r2, [r3, #24]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000e100 	.word	0xe000e100
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b089      	sub	sp, #36	; 0x24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	f1c3 0307 	rsb	r3, r3, #7
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	bf28      	it	cs
 8001bca:	2304      	movcs	r3, #4
 8001bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	2b06      	cmp	r3, #6
 8001bd4:	d902      	bls.n	8001bdc <NVIC_EncodePriority+0x30>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3b03      	subs	r3, #3
 8001bda:	e000      	b.n	8001bde <NVIC_EncodePriority+0x32>
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	f04f 32ff 	mov.w	r2, #4294967295
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43da      	mvns	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	401a      	ands	r2, r3
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	43d9      	mvns	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c04:	4313      	orrs	r3, r2
         );
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3724      	adds	r7, #36	; 0x24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff8e 	bl	8001b58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff05 	bl	8001a70 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff1a 	bl	8001ab8 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff8e 	bl	8001bac <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5d 	bl	8001b58 <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff0d 	bl	8001ad4 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff1d 	bl	8001b10 <__NVIC_DisableIRQ>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ff94 	bl	8001c14 <SysTick_Config>
 8001cec:	4603      	mov	r3, r0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001d0a:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_FLASH_Program+0xa0>)
 8001d0c:	7e1b      	ldrb	r3, [r3, #24]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_FLASH_Program+0x1e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e03b      	b.n	8001d8e <HAL_FLASH_Program+0x96>
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_FLASH_Program+0xa0>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d20:	f000 f870 	bl	8001e04 <FLASH_WaitForLastOperation>
 8001d24:	4603      	mov	r3, r0
 8001d26:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001d28:	7dfb      	ldrb	r3, [r7, #23]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d12b      	bne.n	8001d86 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001d34:	783b      	ldrb	r3, [r7, #0]
 8001d36:	4619      	mov	r1, r3
 8001d38:	68b8      	ldr	r0, [r7, #8]
 8001d3a:	f000 f91b 	bl	8001f74 <FLASH_Program_Byte>
 8001d3e:	e016      	b.n	8001d6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d105      	bne.n	8001d52 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001d46:	883b      	ldrh	r3, [r7, #0]
 8001d48:	4619      	mov	r1, r3
 8001d4a:	68b8      	ldr	r0, [r7, #8]
 8001d4c:	f000 f8ee 	bl	8001f2c <FLASH_Program_HalfWord>
 8001d50:	e00d      	b.n	8001d6e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d105      	bne.n	8001d64 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	68b8      	ldr	r0, [r7, #8]
 8001d5e:	f000 f8c3 	bl	8001ee8 <FLASH_Program_Word>
 8001d62:	e004      	b.n	8001d6e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d68:	68b8      	ldr	r0, [r7, #8]
 8001d6a:	f000 f88b 	bl	8001e84 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001d6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d72:	f000 f847 	bl	8001e04 <FLASH_WaitForLastOperation>
 8001d76:	4603      	mov	r3, r0
 8001d78:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001d7a:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_FLASH_Program+0xa4>)
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_FLASH_Program+0xa4>)
 8001d80:	f023 0301 	bic.w	r3, r3, #1
 8001d84:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d86:	4b04      	ldr	r3, [pc, #16]	; (8001d98 <HAL_FLASH_Program+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	2000031c 	.word	0x2000031c
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001daa:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da0b      	bge.n	8001dca <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001db4:	4a09      	ldr	r2, [pc, #36]	; (8001ddc <HAL_FLASH_Unlock+0x3c>)
 8001db6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001dba:	4a09      	ldr	r2, [pc, #36]	; (8001de0 <HAL_FLASH_Unlock+0x40>)
 8001dbc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_FLASH_Unlock+0x38>)
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	da01      	bge.n	8001dca <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001dca:	79fb      	ldrb	r3, [r7, #7]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	40023c00 	.word	0x40023c00
 8001ddc:	45670123 	.word	0x45670123
 8001de0:	cdef89ab 	.word	0xcdef89ab

08001de4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_FLASH_Lock+0x1c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <HAL_FLASH_Lock+0x1c>)
 8001dee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001df2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <FLASH_WaitForLastOperation+0x78>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e16:	f7ff fa6b 	bl	80012f0 <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e1c:	e010      	b.n	8001e40 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d00c      	beq.n	8001e40 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d007      	beq.n	8001e3c <FLASH_WaitForLastOperation+0x38>
 8001e2c:	f7ff fa60 	bl	80012f0 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d201      	bcs.n	8001e40 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e019      	b.n	8001e74 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <FLASH_WaitForLastOperation+0x7c>)
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001e6a:	f000 f8a5 	bl	8001fb8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
  
}  
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	2000031c 	.word	0x2000031c
 8001e80:	40023c00 	.word	0x40023c00

08001e84 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <FLASH_Program_DoubleWord+0x60>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	4a13      	ldr	r2, [pc, #76]	; (8001ee4 <FLASH_Program_DoubleWord+0x60>)
 8001e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <FLASH_Program_DoubleWord+0x60>)
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <FLASH_Program_DoubleWord+0x60>)
 8001ea2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001ea6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <FLASH_Program_DoubleWord+0x60>)
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	4a0d      	ldr	r2, [pc, #52]	; (8001ee4 <FLASH_Program_DoubleWord+0x60>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001eba:	f3bf 8f6f 	isb	sy
}
 8001ebe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	000a      	movs	r2, r1
 8001ece:	2300      	movs	r3, #0
 8001ed0:	68f9      	ldr	r1, [r7, #12]
 8001ed2:	3104      	adds	r1, #4
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	40023c00 	.word	0x40023c00

08001ee8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <FLASH_Program_Word+0x40>)
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	4a0c      	ldr	r2, [pc, #48]	; (8001f28 <FLASH_Program_Word+0x40>)
 8001ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001efc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <FLASH_Program_Word+0x40>)
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	4a09      	ldr	r2, [pc, #36]	; (8001f28 <FLASH_Program_Word+0x40>)
 8001f04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <FLASH_Program_Word+0x40>)
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	4a06      	ldr	r2, [pc, #24]	; (8001f28 <FLASH_Program_Word+0x40>)
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	601a      	str	r2, [r3, #0]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <FLASH_Program_HalfWord+0x44>)
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <FLASH_Program_HalfWord+0x44>)
 8001f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <FLASH_Program_HalfWord+0x44>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <FLASH_Program_HalfWord+0x44>)
 8001f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f50:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <FLASH_Program_HalfWord+0x44>)
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4a06      	ldr	r2, [pc, #24]	; (8001f70 <FLASH_Program_HalfWord+0x44>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	801a      	strh	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40023c00 	.word	0x40023c00

08001f74 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <FLASH_Program_Byte+0x40>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <FLASH_Program_Byte+0x40>)
 8001f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <FLASH_Program_Byte+0x40>)
 8001f8e:	4a09      	ldr	r2, [pc, #36]	; (8001fb4 <FLASH_Program_Byte+0x40>)
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <FLASH_Program_Byte+0x40>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <FLASH_Program_Byte+0x40>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	78fa      	ldrb	r2, [r7, #3]
 8001fa4:	701a      	strb	r2, [r3, #0]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40023c00 	.word	0x40023c00

08001fb8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001fbc:	4b2f      	ldr	r3, [pc, #188]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0310 	and.w	r3, r3, #16
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d008      	beq.n	8001fda <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	f043 0310 	orr.w	r3, r3, #16
 8001fd0:	4a2b      	ldr	r2, [pc, #172]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8001fd2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001fd4:	4b29      	ldr	r3, [pc, #164]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001fda:	4b28      	ldr	r3, [pc, #160]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f043 0308 	orr.w	r3, r3, #8
 8001fee:	4a24      	ldr	r2, [pc, #144]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8001ff0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8001ff4:	2220      	movs	r2, #32
 8001ff6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001ff8:	4b20      	ldr	r3, [pc, #128]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 800200e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8002012:	2240      	movs	r2, #64	; 0x40
 8002014:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8002016:	4b19      	ldr	r3, [pc, #100]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201e:	2b00      	cmp	r3, #0
 8002020:	d008      	beq.n	8002034 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f043 0302 	orr.w	r3, r3, #2
 800202a:	4a15      	ldr	r2, [pc, #84]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 800202c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8002030:	2280      	movs	r2, #128	; 0x80
 8002032:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002034:	4b11      	ldr	r3, [pc, #68]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002040:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8002042:	69db      	ldr	r3, [r3, #28]
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 800204a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <FLASH_SetErrorCode+0xc4>)
 800204e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002052:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002054:	4b09      	ldr	r3, [pc, #36]	; (800207c <FLASH_SetErrorCode+0xc4>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0302 	and.w	r3, r3, #2
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002060:	4b07      	ldr	r3, [pc, #28]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	4a05      	ldr	r2, [pc, #20]	; (8002080 <FLASH_SetErrorCode+0xc8>)
 800206a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <FLASH_SetErrorCode+0xc4>)
 800206e:	2202      	movs	r2, #2
 8002070:	60da      	str	r2, [r3, #12]
  }
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40023c00 	.word	0x40023c00
 8002080:	2000031c 	.word	0x2000031c

08002084 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002094:	78fb      	ldrb	r3, [r7, #3]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e010      	b.n	80020c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d103      	bne.n	80020ae <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80020a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	e009      	b.n	80020c2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d103      	bne.n	80020bc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80020b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e002      	b.n	80020c2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80020bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80020c2:	4b13      	ldr	r3, [pc, #76]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	4a12      	ldr	r2, [pc, #72]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020cc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	490f      	ldr	r1, [pc, #60]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80020da:	4b0d      	ldr	r3, [pc, #52]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	4a0c      	ldr	r2, [pc, #48]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80020e4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020e8:	691a      	ldr	r2, [r3, #16]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4313      	orrs	r3, r2
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020f2:	f043 0302 	orr.w	r3, r3, #2
 80020f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <FLASH_Erase_Sector+0x8c>)
 80020fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002102:	6113      	str	r3, [r2, #16]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40023c00 	.word	0x40023c00

08002114 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002114:	b480      	push	{r7}
 8002116:	b089      	sub	sp, #36	; 0x24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
 800212e:	e159      	b.n	80023e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002130:	2201      	movs	r2, #1
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	429a      	cmp	r2, r3
 800214a:	f040 8148 	bne.w	80023de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d005      	beq.n	8002166 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002162:	2b02      	cmp	r3, #2
 8002164:	d130      	bne.n	80021c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	2203      	movs	r2, #3
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800219c:	2201      	movs	r2, #1
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4013      	ands	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	f003 0201 	and.w	r2, r3, #1
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4313      	orrs	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d017      	beq.n	8002204 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	2203      	movs	r2, #3
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d123      	bne.n	8002258 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	08da      	lsrs	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3208      	adds	r2, #8
 8002218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	220f      	movs	r2, #15
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	08da      	lsrs	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3208      	adds	r2, #8
 8002252:	69b9      	ldr	r1, [r7, #24]
 8002254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	2203      	movs	r2, #3
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 0203 	and.w	r2, r3, #3
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	fa02 f303 	lsl.w	r3, r2, r3
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	4313      	orrs	r3, r2
 8002284:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a2 	beq.w	80023de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	4b57      	ldr	r3, [pc, #348]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a56      	ldr	r2, [pc, #344]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b54      	ldr	r3, [pc, #336]	; (80023fc <HAL_GPIO_Init+0x2e8>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b6:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_GPIO_Init+0x2ec>)
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a49      	ldr	r2, [pc, #292]	; (8002404 <HAL_GPIO_Init+0x2f0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d019      	beq.n	8002316 <HAL_GPIO_Init+0x202>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a48      	ldr	r2, [pc, #288]	; (8002408 <HAL_GPIO_Init+0x2f4>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d013      	beq.n	8002312 <HAL_GPIO_Init+0x1fe>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a47      	ldr	r2, [pc, #284]	; (800240c <HAL_GPIO_Init+0x2f8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00d      	beq.n	800230e <HAL_GPIO_Init+0x1fa>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a46      	ldr	r2, [pc, #280]	; (8002410 <HAL_GPIO_Init+0x2fc>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d007      	beq.n	800230a <HAL_GPIO_Init+0x1f6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a45      	ldr	r2, [pc, #276]	; (8002414 <HAL_GPIO_Init+0x300>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_GPIO_Init+0x1f2>
 8002302:	2304      	movs	r3, #4
 8002304:	e008      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002306:	2307      	movs	r3, #7
 8002308:	e006      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230a:	2303      	movs	r3, #3
 800230c:	e004      	b.n	8002318 <HAL_GPIO_Init+0x204>
 800230e:	2302      	movs	r3, #2
 8002310:	e002      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <HAL_GPIO_Init+0x204>
 8002316:	2300      	movs	r3, #0
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f002 0203 	and.w	r2, r2, #3
 800231e:	0092      	lsls	r2, r2, #2
 8002320:	4093      	lsls	r3, r2
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002328:	4935      	ldr	r1, [pc, #212]	; (8002400 <HAL_GPIO_Init+0x2ec>)
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	089b      	lsrs	r3, r3, #2
 800232e:	3302      	adds	r3, #2
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_GPIO_Init+0x304>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	43db      	mvns	r3, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4013      	ands	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800235a:	4a2f      	ldr	r2, [pc, #188]	; (8002418 <HAL_GPIO_Init+0x304>)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <HAL_GPIO_Init+0x304>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	43db      	mvns	r3, r3
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4013      	ands	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002384:	4a24      	ldr	r2, [pc, #144]	; (8002418 <HAL_GPIO_Init+0x304>)
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_GPIO_Init+0x304>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a1a      	ldr	r2, [pc, #104]	; (8002418 <HAL_GPIO_Init+0x304>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b18      	ldr	r3, [pc, #96]	; (8002418 <HAL_GPIO_Init+0x304>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <HAL_GPIO_Init+0x304>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	3301      	adds	r3, #1
 80023e2:	61fb      	str	r3, [r7, #28]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b0f      	cmp	r3, #15
 80023e8:	f67f aea2 	bls.w	8002130 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40013800 	.word	0x40013800
 8002404:	40020000 	.word	0x40020000
 8002408:	40020400 	.word	0x40020400
 800240c:	40020800 	.word	0x40020800
 8002410:	40020c00 	.word	0x40020c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40013c00 	.word	0x40013c00

0800241c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	e0bb      	b.n	80025b0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	429a      	cmp	r2, r3
 8002450:	f040 80ab 	bne.w	80025aa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8002454:	4a5c      	ldr	r2, [pc, #368]	; (80025c8 <HAL_GPIO_DeInit+0x1ac>)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	089b      	lsrs	r3, r3, #2
 800245a:	3302      	adds	r3, #2
 800245c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002460:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	220f      	movs	r2, #15
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	4013      	ands	r3, r2
 8002474:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a54      	ldr	r2, [pc, #336]	; (80025cc <HAL_GPIO_DeInit+0x1b0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d019      	beq.n	80024b2 <HAL_GPIO_DeInit+0x96>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a53      	ldr	r2, [pc, #332]	; (80025d0 <HAL_GPIO_DeInit+0x1b4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_DeInit+0x92>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_GPIO_DeInit+0x1b8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_DeInit+0x8e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a51      	ldr	r2, [pc, #324]	; (80025d8 <HAL_GPIO_DeInit+0x1bc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_DeInit+0x8a>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a50      	ldr	r2, [pc, #320]	; (80025dc <HAL_GPIO_DeInit+0x1c0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_DeInit+0x86>
 800249e:	2304      	movs	r3, #4
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_DeInit+0x98>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_DeInit+0x98>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_DeInit+0x98>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_DeInit+0x98>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_DeInit+0x98>
 80024b2:	2300      	movs	r3, #0
 80024b4:	697a      	ldr	r2, [r7, #20]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d132      	bne.n	800252a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024c4:	4b46      	ldr	r3, [pc, #280]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	4944      	ldr	r1, [pc, #272]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	4941      	ldr	r1, [pc, #260]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024dc:	4013      	ands	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80024e0:	4b3f      	ldr	r3, [pc, #252]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	493d      	ldr	r1, [pc, #244]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80024ee:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	493a      	ldr	r1, [pc, #232]	; (80025e0 <HAL_GPIO_DeInit+0x1c4>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	220f      	movs	r2, #15
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800250c:	4a2e      	ldr	r2, [pc, #184]	; (80025c8 <HAL_GPIO_DeInit+0x1ac>)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	089b      	lsrs	r3, r3, #2
 8002512:	3302      	adds	r3, #2
 8002514:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	43da      	mvns	r2, r3
 800251c:	482a      	ldr	r0, [pc, #168]	; (80025c8 <HAL_GPIO_DeInit+0x1ac>)
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	400a      	ands	r2, r1
 8002524:	3302      	adds	r3, #2
 8002526:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2103      	movs	r1, #3
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	401a      	ands	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	08da      	lsrs	r2, r3, #3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3208      	adds	r2, #8
 8002548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	220f      	movs	r2, #15
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	08d2      	lsrs	r2, r2, #3
 8002560:	4019      	ands	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3208      	adds	r2, #8
 8002566:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	2103      	movs	r1, #3
 8002574:	fa01 f303 	lsl.w	r3, r1, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	401a      	ands	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	2101      	movs	r1, #1
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	fa01 f303 	lsl.w	r3, r1, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	401a      	ands	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689a      	ldr	r2, [r3, #8]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	2103      	movs	r1, #3
 800259e:	fa01 f303 	lsl.w	r3, r1, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	401a      	ands	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	3301      	adds	r3, #1
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b0f      	cmp	r3, #15
 80025b4:	f67f af40 	bls.w	8002438 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	bf00      	nop
 80025bc:	371c      	adds	r7, #28
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40013c00 	.word	0x40013c00

080025e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	460b      	mov	r3, r1
 80025ee:	807b      	strh	r3, [r7, #2]
 80025f0:	4613      	mov	r3, r2
 80025f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f4:	787b      	ldrb	r3, [r7, #1]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fa:	887a      	ldrh	r2, [r7, #2]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002600:	e003      	b.n	800260a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002602:	887b      	ldrh	r3, [r7, #2]
 8002604:	041a      	lsls	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	619a      	str	r2, [r3, #24]
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
	...

08002618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e264      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d075      	beq.n	8002722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002636:	4ba3      	ldr	r3, [pc, #652]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b04      	cmp	r3, #4
 8002640:	d00c      	beq.n	800265c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002642:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800264a:	2b08      	cmp	r3, #8
 800264c:	d112      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264e:	4b9d      	ldr	r3, [pc, #628]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265a:	d10b      	bne.n	8002674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	4b99      	ldr	r3, [pc, #612]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d05b      	beq.n	8002720 <HAL_RCC_OscConfig+0x108>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d157      	bne.n	8002720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e23f      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800267c:	d106      	bne.n	800268c <HAL_RCC_OscConfig+0x74>
 800267e:	4b91      	ldr	r3, [pc, #580]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a90      	ldr	r2, [pc, #576]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e01d      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x98>
 8002696:	4b8b      	ldr	r3, [pc, #556]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a8a      	ldr	r2, [pc, #552]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a87      	ldr	r2, [pc, #540]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0xb0>
 80026b0:	4b84      	ldr	r3, [pc, #528]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a83      	ldr	r2, [pc, #524]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a80      	ldr	r2, [pc, #512]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe fe0e 	bl	80012f0 <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fe0a 	bl	80012f0 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e204      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ea:	4b76      	ldr	r3, [pc, #472]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0xc0>
 80026f6:	e014      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fdfa 	bl	80012f0 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002700:	f7fe fdf6 	bl	80012f0 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e1f0      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002712:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0xe8>
 800271e:	e000      	b.n	8002722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d063      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800273a:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002742:	2b08      	cmp	r3, #8
 8002744:	d11c      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002746:	4b5f      	ldr	r3, [pc, #380]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d116      	bne.n	8002780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1c4      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4952      	ldr	r1, [pc, #328]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	e03a      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002788:	4b4f      	ldr	r3, [pc, #316]	; (80028c8 <HAL_RCC_OscConfig+0x2b0>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fdaf 	bl	80012f0 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002796:	f7fe fdab 	bl	80012f0 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e1a5      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a8:	4b46      	ldr	r3, [pc, #280]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4940      	ldr	r1, [pc, #256]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	e015      	b.n	80027f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <HAL_RCC_OscConfig+0x2b0>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d0:	f7fe fd8e 	bl	80012f0 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d8:	f7fe fd8a 	bl	80012f0 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e184      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ea:	4b36      	ldr	r3, [pc, #216]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d030      	beq.n	8002864 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d016      	beq.n	8002838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280a:	4b30      	ldr	r3, [pc, #192]	; (80028cc <HAL_RCC_OscConfig+0x2b4>)
 800280c:	2201      	movs	r2, #1
 800280e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002810:	f7fe fd6e 	bl	80012f0 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002818:	f7fe fd6a 	bl	80012f0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e164      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800282a:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f0      	beq.n	8002818 <HAL_RCC_OscConfig+0x200>
 8002836:	e015      	b.n	8002864 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002838:	4b24      	ldr	r3, [pc, #144]	; (80028cc <HAL_RCC_OscConfig+0x2b4>)
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283e:	f7fe fd57 	bl	80012f0 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002846:	f7fe fd53 	bl	80012f0 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e14d      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800285a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a0 	beq.w	80029b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10f      	bne.n	80028a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 800288c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002890:	6413      	str	r3, [r2, #64]	; 0x40
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_RCC_OscConfig+0x2ac>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800289e:	2301      	movs	r3, #1
 80028a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a2:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <HAL_RCC_OscConfig+0x2b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d121      	bne.n	80028f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ae:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <HAL_RCC_OscConfig+0x2b8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a07      	ldr	r2, [pc, #28]	; (80028d0 <HAL_RCC_OscConfig+0x2b8>)
 80028b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fd19 	bl	80012f0 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	e011      	b.n	80028e6 <HAL_RCC_OscConfig+0x2ce>
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
 80028d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d4:	f7fe fd0c 	bl	80012f0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e106      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e6:	4b85      	ldr	r3, [pc, #532]	; (8002afc <HAL_RCC_OscConfig+0x4e4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x2f0>
 80028fa:	4b81      	ldr	r3, [pc, #516]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fe:	4a80      	ldr	r2, [pc, #512]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002900:	f043 0301 	orr.w	r3, r3, #1
 8002904:	6713      	str	r3, [r2, #112]	; 0x70
 8002906:	e01c      	b.n	8002942 <HAL_RCC_OscConfig+0x32a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b05      	cmp	r3, #5
 800290e:	d10c      	bne.n	800292a <HAL_RCC_OscConfig+0x312>
 8002910:	4b7b      	ldr	r3, [pc, #492]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002914:	4a7a      	ldr	r2, [pc, #488]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6713      	str	r3, [r2, #112]	; 0x70
 800291c:	4b78      	ldr	r3, [pc, #480]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002920:	4a77      	ldr	r2, [pc, #476]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	; 0x70
 8002928:	e00b      	b.n	8002942 <HAL_RCC_OscConfig+0x32a>
 800292a:	4b75      	ldr	r3, [pc, #468]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800292c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292e:	4a74      	ldr	r2, [pc, #464]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002930:	f023 0301 	bic.w	r3, r3, #1
 8002934:	6713      	str	r3, [r2, #112]	; 0x70
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293a:	4a71      	ldr	r2, [pc, #452]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800293c:	f023 0304 	bic.w	r3, r3, #4
 8002940:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d015      	beq.n	8002976 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe fcd1 	bl	80012f0 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fccd 	bl	80012f0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e0c5      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ee      	beq.n	8002952 <HAL_RCC_OscConfig+0x33a>
 8002974:	e014      	b.n	80029a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002976:	f7fe fcbb 	bl	80012f0 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe fcb7 	bl	80012f0 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0af      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002994:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ee      	bne.n	800297e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a0:	7dfb      	ldrb	r3, [r7, #23]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d105      	bne.n	80029b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a6:	4b56      	ldr	r3, [pc, #344]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	4a55      	ldr	r2, [pc, #340]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 809b 	beq.w	8002af2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	d05c      	beq.n	8002a82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d141      	bne.n	8002a54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d0:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d6:	f7fe fc8b 	bl	80012f0 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029de:	f7fe fc87 	bl	80012f0 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e081      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f0:	4b43      	ldr	r3, [pc, #268]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f0      	bne.n	80029de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	019b      	lsls	r3, r3, #6
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	085b      	lsrs	r3, r3, #1
 8002a14:	3b01      	subs	r3, #1
 8002a16:	041b      	lsls	r3, r3, #16
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	4937      	ldr	r1, [pc, #220]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a26:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe fc60 	bl	80012f0 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe fc5c 	bl	80012f0 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e056      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x41c>
 8002a52:	e04e      	b.n	8002af2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a54:	4b2b      	ldr	r3, [pc, #172]	; (8002b04 <HAL_RCC_OscConfig+0x4ec>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5a:	f7fe fc49 	bl	80012f0 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a62:	f7fe fc45 	bl	80012f0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e03f      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1f0      	bne.n	8002a62 <HAL_RCC_OscConfig+0x44a>
 8002a80:	e037      	b.n	8002af2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e032      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a8e:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <HAL_RCC_OscConfig+0x4e8>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d028      	beq.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d121      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d11a      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002abe:	4013      	ands	r3, r2
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ac4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d111      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40007000 	.word	0x40007000
 8002b00:	40023800 	.word	0x40023800
 8002b04:	42470060 	.word	0x42470060

08002b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0cc      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b1c:	4b68      	ldr	r3, [pc, #416]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d90c      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b2a:	4b65      	ldr	r3, [pc, #404]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d044      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d119      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d003      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d107      	bne.n	8002bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc6:	4b3f      	ldr	r3, [pc, #252]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e06f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	4b3b      	ldr	r3, [pc, #236]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e067      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 0203 	bic.w	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	4934      	ldr	r1, [pc, #208]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fb7a 	bl	80012f0 <HAL_GetTick>
 8002bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfe:	e00a      	b.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c00:	f7fe fb76 	bl	80012f0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e04f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c16:	4b2b      	ldr	r3, [pc, #172]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 020c 	and.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d1eb      	bne.n	8002c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c28:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	683a      	ldr	r2, [r7, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d20c      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c36:	4b22      	ldr	r3, [pc, #136]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe fada 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	08004a5c 	.word	0x08004a5c
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	607b      	str	r3, [r7, #4]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cec:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030c 	and.w	r3, r3, #12
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d00d      	beq.n	8002d14 <HAL_RCC_GetSysClockFreq+0x40>
 8002cf8:	2b08      	cmp	r3, #8
 8002cfa:	f200 80bd 	bhi.w	8002e78 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_RCC_GetSysClockFreq+0x34>
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d003      	beq.n	8002d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d06:	e0b7      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d08:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d0a:	60bb      	str	r3, [r7, #8]
       break;
 8002d0c:	e0b7      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d0e:	4b61      	ldr	r3, [pc, #388]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d10:	60bb      	str	r3, [r7, #8]
      break;
 8002d12:	e0b4      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d14:	4b5d      	ldr	r3, [pc, #372]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d04d      	beq.n	8002dc6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2a:	4b58      	ldr	r3, [pc, #352]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	099b      	lsrs	r3, r3, #6
 8002d30:	461a      	mov	r2, r3
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d3a:	f04f 0100 	mov.w	r1, #0
 8002d3e:	ea02 0800 	and.w	r8, r2, r0
 8002d42:	ea03 0901 	and.w	r9, r3, r1
 8002d46:	4640      	mov	r0, r8
 8002d48:	4649      	mov	r1, r9
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	014b      	lsls	r3, r1, #5
 8002d54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d58:	0142      	lsls	r2, r0, #5
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	ebb0 0008 	subs.w	r0, r0, r8
 8002d62:	eb61 0109 	sbc.w	r1, r1, r9
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	018b      	lsls	r3, r1, #6
 8002d70:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d74:	0182      	lsls	r2, r0, #6
 8002d76:	1a12      	subs	r2, r2, r0
 8002d78:	eb63 0301 	sbc.w	r3, r3, r1
 8002d7c:	f04f 0000 	mov.w	r0, #0
 8002d80:	f04f 0100 	mov.w	r1, #0
 8002d84:	00d9      	lsls	r1, r3, #3
 8002d86:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d8a:	00d0      	lsls	r0, r2, #3
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	eb12 0208 	adds.w	r2, r2, r8
 8002d94:	eb43 0309 	adc.w	r3, r3, r9
 8002d98:	f04f 0000 	mov.w	r0, #0
 8002d9c:	f04f 0100 	mov.w	r1, #0
 8002da0:	0259      	lsls	r1, r3, #9
 8002da2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002da6:	0250      	lsls	r0, r2, #9
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4610      	mov	r0, r2
 8002dae:	4619      	mov	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	f7fd fa16 	bl	80001e8 <__aeabi_uldivmod>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e04a      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc6:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	099b      	lsrs	r3, r3, #6
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dd6:	f04f 0100 	mov.w	r1, #0
 8002dda:	ea02 0400 	and.w	r4, r2, r0
 8002dde:	ea03 0501 	and.w	r5, r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f04f 0200 	mov.w	r2, #0
 8002dea:	f04f 0300 	mov.w	r3, #0
 8002dee:	014b      	lsls	r3, r1, #5
 8002df0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002df4:	0142      	lsls	r2, r0, #5
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	1b00      	subs	r0, r0, r4
 8002dfc:	eb61 0105 	sbc.w	r1, r1, r5
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	018b      	lsls	r3, r1, #6
 8002e0a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e0e:	0182      	lsls	r2, r0, #6
 8002e10:	1a12      	subs	r2, r2, r0
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	f04f 0000 	mov.w	r0, #0
 8002e1a:	f04f 0100 	mov.w	r1, #0
 8002e1e:	00d9      	lsls	r1, r3, #3
 8002e20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e24:	00d0      	lsls	r0, r2, #3
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	1912      	adds	r2, r2, r4
 8002e2c:	eb45 0303 	adc.w	r3, r5, r3
 8002e30:	f04f 0000 	mov.w	r0, #0
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	0299      	lsls	r1, r3, #10
 8002e3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e3e:	0290      	lsls	r0, r2, #10
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4610      	mov	r0, r2
 8002e46:	4619      	mov	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	f7fd f9ca 	bl	80001e8 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e5c:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	3301      	adds	r3, #1
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e74:	60bb      	str	r3, [r7, #8]
      break;
 8002e76:	e002      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e7a:	60bb      	str	r3, [r7, #8]
      break;
 8002e7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200

08002e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_RCC_GetHCLKFreq+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	20000000 	.word	0x20000000

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff0 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ec6:	5ccb      	ldrb	r3, [r1, r3]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	08004a6c 	.word	0x08004a6c

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002edc:	f7ff ffdc 	bl	8002e98 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	0b5b      	lsrs	r3, r3, #13
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	4903      	ldr	r1, [pc, #12]	; (8002efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eee:	5ccb      	ldrb	r3, [r1, r3]
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	08004a6c 	.word	0x08004a6c

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e03f      	b.n	8002f92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f866 	bl	8002ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f86b 	bl	8003020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e021      	b.n	8002ff0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2224      	movs	r2, #36	; 0x24
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fc2:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f821 	bl	800300c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003024:	b09f      	sub	sp, #124	; 0x7c
 8003026:	af00      	add	r7, sp, #0
 8003028:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800302a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003036:	68d9      	ldr	r1, [r3, #12]
 8003038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	ea40 0301 	orr.w	r3, r0, r1
 8003040:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	431a      	orrs	r2, r3
 800304c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	431a      	orrs	r2, r3
 8003052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4313      	orrs	r3, r2
 8003058:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800305a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003064:	f021 010c 	bic.w	r1, r1, #12
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800306e:	430b      	orrs	r3, r1
 8003070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800307c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800307e:	6999      	ldr	r1, [r3, #24]
 8003080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	ea40 0301 	orr.w	r3, r0, r1
 8003088:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800308a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	4bc5      	ldr	r3, [pc, #788]	; (80033a4 <UART_SetConfig+0x384>)
 8003090:	429a      	cmp	r2, r3
 8003092:	d004      	beq.n	800309e <UART_SetConfig+0x7e>
 8003094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4bc3      	ldr	r3, [pc, #780]	; (80033a8 <UART_SetConfig+0x388>)
 800309a:	429a      	cmp	r2, r3
 800309c:	d103      	bne.n	80030a6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800309e:	f7ff ff1b 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 80030a2:	6778      	str	r0, [r7, #116]	; 0x74
 80030a4:	e002      	b.n	80030ac <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030a6:	f7ff ff03 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 80030aa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b4:	f040 80b6 	bne.w	8003224 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ba:	461c      	mov	r4, r3
 80030bc:	f04f 0500 	mov.w	r5, #0
 80030c0:	4622      	mov	r2, r4
 80030c2:	462b      	mov	r3, r5
 80030c4:	1891      	adds	r1, r2, r2
 80030c6:	6439      	str	r1, [r7, #64]	; 0x40
 80030c8:	415b      	adcs	r3, r3
 80030ca:	647b      	str	r3, [r7, #68]	; 0x44
 80030cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030d0:	1912      	adds	r2, r2, r4
 80030d2:	eb45 0303 	adc.w	r3, r5, r3
 80030d6:	f04f 0000 	mov.w	r0, #0
 80030da:	f04f 0100 	mov.w	r1, #0
 80030de:	00d9      	lsls	r1, r3, #3
 80030e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80030e4:	00d0      	lsls	r0, r2, #3
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	1911      	adds	r1, r2, r4
 80030ec:	6639      	str	r1, [r7, #96]	; 0x60
 80030ee:	416b      	adcs	r3, r5
 80030f0:	667b      	str	r3, [r7, #100]	; 0x64
 80030f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	1891      	adds	r1, r2, r2
 80030fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003100:	415b      	adcs	r3, r3
 8003102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003104:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003108:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800310c:	f7fd f86c 	bl	80001e8 <__aeabi_uldivmod>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4ba5      	ldr	r3, [pc, #660]	; (80033ac <UART_SetConfig+0x38c>)
 8003116:	fba3 2302 	umull	r2, r3, r3, r2
 800311a:	095b      	lsrs	r3, r3, #5
 800311c:	011e      	lsls	r6, r3, #4
 800311e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003120:	461c      	mov	r4, r3
 8003122:	f04f 0500 	mov.w	r5, #0
 8003126:	4622      	mov	r2, r4
 8003128:	462b      	mov	r3, r5
 800312a:	1891      	adds	r1, r2, r2
 800312c:	6339      	str	r1, [r7, #48]	; 0x30
 800312e:	415b      	adcs	r3, r3
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
 8003132:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003136:	1912      	adds	r2, r2, r4
 8003138:	eb45 0303 	adc.w	r3, r5, r3
 800313c:	f04f 0000 	mov.w	r0, #0
 8003140:	f04f 0100 	mov.w	r1, #0
 8003144:	00d9      	lsls	r1, r3, #3
 8003146:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800314a:	00d0      	lsls	r0, r2, #3
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	1911      	adds	r1, r2, r4
 8003152:	65b9      	str	r1, [r7, #88]	; 0x58
 8003154:	416b      	adcs	r3, r5
 8003156:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	461a      	mov	r2, r3
 800315e:	f04f 0300 	mov.w	r3, #0
 8003162:	1891      	adds	r1, r2, r2
 8003164:	62b9      	str	r1, [r7, #40]	; 0x28
 8003166:	415b      	adcs	r3, r3
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800316e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003172:	f7fd f839 	bl	80001e8 <__aeabi_uldivmod>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <UART_SetConfig+0x38c>)
 800317c:	fba3 1302 	umull	r1, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	2164      	movs	r1, #100	; 0x64
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	3332      	adds	r3, #50	; 0x32
 800318e:	4a87      	ldr	r2, [pc, #540]	; (80033ac <UART_SetConfig+0x38c>)
 8003190:	fba2 2303 	umull	r2, r3, r2, r3
 8003194:	095b      	lsrs	r3, r3, #5
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800319c:	441e      	add	r6, r3
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	4618      	mov	r0, r3
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	4602      	mov	r2, r0
 80031a8:	460b      	mov	r3, r1
 80031aa:	1894      	adds	r4, r2, r2
 80031ac:	623c      	str	r4, [r7, #32]
 80031ae:	415b      	adcs	r3, r3
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031b6:	1812      	adds	r2, r2, r0
 80031b8:	eb41 0303 	adc.w	r3, r1, r3
 80031bc:	f04f 0400 	mov.w	r4, #0
 80031c0:	f04f 0500 	mov.w	r5, #0
 80031c4:	00dd      	lsls	r5, r3, #3
 80031c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031ca:	00d4      	lsls	r4, r2, #3
 80031cc:	4622      	mov	r2, r4
 80031ce:	462b      	mov	r3, r5
 80031d0:	1814      	adds	r4, r2, r0
 80031d2:	653c      	str	r4, [r7, #80]	; 0x50
 80031d4:	414b      	adcs	r3, r1
 80031d6:	657b      	str	r3, [r7, #84]	; 0x54
 80031d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	461a      	mov	r2, r3
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	1891      	adds	r1, r2, r2
 80031e4:	61b9      	str	r1, [r7, #24]
 80031e6:	415b      	adcs	r3, r3
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ee:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80031f2:	f7fc fff9 	bl	80001e8 <__aeabi_uldivmod>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4b6c      	ldr	r3, [pc, #432]	; (80033ac <UART_SetConfig+0x38c>)
 80031fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	2164      	movs	r1, #100	; 0x64
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3332      	adds	r3, #50	; 0x32
 800320e:	4a67      	ldr	r2, [pc, #412]	; (80033ac <UART_SetConfig+0x38c>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	f003 0207 	and.w	r2, r3, #7
 800321a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4432      	add	r2, r6
 8003220:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003222:	e0b9      	b.n	8003398 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003226:	461c      	mov	r4, r3
 8003228:	f04f 0500 	mov.w	r5, #0
 800322c:	4622      	mov	r2, r4
 800322e:	462b      	mov	r3, r5
 8003230:	1891      	adds	r1, r2, r2
 8003232:	6139      	str	r1, [r7, #16]
 8003234:	415b      	adcs	r3, r3
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800323c:	1912      	adds	r2, r2, r4
 800323e:	eb45 0303 	adc.w	r3, r5, r3
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	00d9      	lsls	r1, r3, #3
 800324c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003250:	00d0      	lsls	r0, r2, #3
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	eb12 0804 	adds.w	r8, r2, r4
 800325a:	eb43 0905 	adc.w	r9, r3, r5
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	008b      	lsls	r3, r1, #2
 8003272:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003276:	0082      	lsls	r2, r0, #2
 8003278:	4640      	mov	r0, r8
 800327a:	4649      	mov	r1, r9
 800327c:	f7fc ffb4 	bl	80001e8 <__aeabi_uldivmod>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4b49      	ldr	r3, [pc, #292]	; (80033ac <UART_SetConfig+0x38c>)
 8003286:	fba3 2302 	umull	r2, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	011e      	lsls	r6, r3, #4
 800328e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003290:	4618      	mov	r0, r3
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	1894      	adds	r4, r2, r2
 800329c:	60bc      	str	r4, [r7, #8]
 800329e:	415b      	adcs	r3, r3
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032a6:	1812      	adds	r2, r2, r0
 80032a8:	eb41 0303 	adc.w	r3, r1, r3
 80032ac:	f04f 0400 	mov.w	r4, #0
 80032b0:	f04f 0500 	mov.w	r5, #0
 80032b4:	00dd      	lsls	r5, r3, #3
 80032b6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032ba:	00d4      	lsls	r4, r2, #3
 80032bc:	4622      	mov	r2, r4
 80032be:	462b      	mov	r3, r5
 80032c0:	1814      	adds	r4, r2, r0
 80032c2:	64bc      	str	r4, [r7, #72]	; 0x48
 80032c4:	414b      	adcs	r3, r1
 80032c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f04f 0100 	mov.w	r1, #0
 80032d2:	f04f 0200 	mov.w	r2, #0
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	008b      	lsls	r3, r1, #2
 80032dc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032e0:	0082      	lsls	r2, r0, #2
 80032e2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80032e6:	f7fc ff7f 	bl	80001e8 <__aeabi_uldivmod>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4b2f      	ldr	r3, [pc, #188]	; (80033ac <UART_SetConfig+0x38c>)
 80032f0:	fba3 1302 	umull	r1, r3, r3, r2
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	2164      	movs	r1, #100	; 0x64
 80032f8:	fb01 f303 	mul.w	r3, r1, r3
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	3332      	adds	r3, #50	; 0x32
 8003302:	4a2a      	ldr	r2, [pc, #168]	; (80033ac <UART_SetConfig+0x38c>)
 8003304:	fba2 2303 	umull	r2, r3, r2, r3
 8003308:	095b      	lsrs	r3, r3, #5
 800330a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800330e:	441e      	add	r6, r3
 8003310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003312:	4618      	mov	r0, r3
 8003314:	f04f 0100 	mov.w	r1, #0
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	1894      	adds	r4, r2, r2
 800331e:	603c      	str	r4, [r7, #0]
 8003320:	415b      	adcs	r3, r3
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003328:	1812      	adds	r2, r2, r0
 800332a:	eb41 0303 	adc.w	r3, r1, r3
 800332e:	f04f 0400 	mov.w	r4, #0
 8003332:	f04f 0500 	mov.w	r5, #0
 8003336:	00dd      	lsls	r5, r3, #3
 8003338:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800333c:	00d4      	lsls	r4, r2, #3
 800333e:	4622      	mov	r2, r4
 8003340:	462b      	mov	r3, r5
 8003342:	eb12 0a00 	adds.w	sl, r2, r0
 8003346:	eb43 0b01 	adc.w	fp, r3, r1
 800334a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	4618      	mov	r0, r3
 8003350:	f04f 0100 	mov.w	r1, #0
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	008b      	lsls	r3, r1, #2
 800335e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003362:	0082      	lsls	r2, r0, #2
 8003364:	4650      	mov	r0, sl
 8003366:	4659      	mov	r1, fp
 8003368:	f7fc ff3e 	bl	80001e8 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <UART_SetConfig+0x38c>)
 8003372:	fba3 1302 	umull	r1, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2164      	movs	r1, #100	; 0x64
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a09      	ldr	r2, [pc, #36]	; (80033ac <UART_SetConfig+0x38c>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	f003 020f 	and.w	r2, r3, #15
 8003390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4432      	add	r2, r6
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	bf00      	nop
 800339a:	377c      	adds	r7, #124	; 0x7c
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a2:	bf00      	nop
 80033a4:	40011000 	.word	0x40011000
 80033a8:	40011400 	.word	0x40011400
 80033ac:	51eb851f 	.word	0x51eb851f

080033b0 <_ZN7QAD_ADC11imp_handlerEv>:
	//-----------------------
	//QAD_ADC Handler Methods

//QAD_ADC::imp_handler
//QAD_ADC Handler Method
void QAD_ADC::imp_handler(void) {
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

	//Check for overrun error
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_OVR)) {
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b20      	cmp	r3, #32
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <_ZN7QAD_ADC11imp_handlerEv+0x36>
		imp_stop();
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f951 	bl	8003678 <_ZN7QAD_ADC8imp_stopEv>
		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_OVR);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	f06f 0220 	mvn.w	r2, #32
 80033de:	601a      	str	r2, [r3, #0]
		imp_start();
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f839 	bl	8003458 <_ZN7QAD_ADC9imp_startEv>
	}

	//Check for end of conversion
	if (__HAL_ADC_GET_FLAG(&m_sADCHandle, ADC_FLAG_EOC)) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <_ZN7QAD_ADC11imp_handlerEv+0xa0>

		m_uData[m_uDataIdx] = m_sADCHandle.Instance->DR;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800340a:	b291      	uxth	r1, r2
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	33cc      	adds	r3, #204	; 0xcc
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	4413      	add	r3, r2
 8003414:	460a      	mov	r2, r1
 8003416:	80da      	strh	r2, [r3, #6]
		if (m_uDataIdx >= (m_uChannelCount-1))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800341e:	461a      	mov	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003426:	3b01      	subs	r3, #1
 8003428:	429a      	cmp	r2, r3
 800342a:	db04      	blt.n	8003436 <_ZN7QAD_ADC11imp_handlerEv+0x86>
			m_uDataIdx = 0; else
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be
 8003434:	e007      	b.n	8003446 <_ZN7QAD_ADC11imp_handlerEv+0x96>
			m_uDataIdx++;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 31be 	ldrb.w	r3, [r3, #446]	; 0x1be
 800343c:	3301      	adds	r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

		__HAL_ADC_CLEAR_FLAG(&m_sADCHandle, ADC_FLAG_EOC);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344a:	f06f 0202 	mvn.w	r2, #2
 800344e:	601a      	str	r2, [r3, #0]
	}
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <_ZN7QAD_ADC9imp_startEv>:
	//-----------------------
	//QAD_ADC Control Methods

//QAD_ADC::imp_start
//QAD_ADC Control Method
QA_Result QAD_ADC::imp_start(void) {
 8003458:	b580      	push	{r7, lr}
 800345a:	b08c      	sub	sp, #48	; 0x30
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	if ((m_eState) || (!m_uChannelCount))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d104      	bne.n	8003472 <_ZN7QAD_ADC9imp_startEv+0x1a>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <_ZN7QAD_ADC9imp_startEv+0x1e>
		return QA_Fail;
 8003472:	2301      	movs	r3, #1
 8003474:	e0f9      	b.n	800366a <_ZN7QAD_ADC9imp_startEv+0x212>

	//Initialize ADC
	m_sADCHandle.Instance                   = ADC1;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <_ZN7QAD_ADC9imp_startEv+0x21c>)
 800347a:	655a      	str	r2, [r3, #84]	; 0x54
	m_sADCHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003482:	659a      	str	r2, [r3, #88]	; 0x58
	m_sADCHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sADCHandle.Init.ScanConvMode          = ENABLE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2201      	movs	r2, #1
 800348e:	665a      	str	r2, [r3, #100]	; 0x64
	m_sADCHandle.Init.ContinuousConvMode    = DISABLE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sADCHandle.Init.DiscontinuousConvMode = DISABLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sADCHandle.Init.NbrOfDiscConversion   = 0;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	679a      	str	r2, [r3, #120]	; 0x78
	m_sADCHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	m_sADCHandle.Init.ExternalTrigConv      = imp_getTrigger();
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f933 	bl	800371c <_ZN7QAD_ADC14imp_getTriggerEv>
 80034b6:	4602      	mov	r2, r0
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sADCHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	661a      	str	r2, [r3, #96]	; 0x60
	m_sADCHandle.Init.NbrOfConversion       = m_uChannelCount;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	671a      	str	r2, [r3, #112]	; 0x70
	m_sADCHandle.Init.DMAContinuousRequests = ENABLE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
	m_sADCHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_ADC_Init(&m_sADCHandle) != HAL_OK) {
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3354      	adds	r3, #84	; 0x54
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd ff11 	bl	8001308 <HAL_ADC_Init>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d004      	beq.n	8003500 <_ZN7QAD_ADC9imp_startEv+0xa8>
		imp_stop();
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8be 	bl	8003678 <_ZN7QAD_ADC8imp_stopEv>
		return QA_Fail;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b4      	b.n	800366a <_ZN7QAD_ADC9imp_startEv+0x212>
	}

	//Channel GPIO Configuration
	GPIO_InitTypeDef GPIO_Init = {0};
 8003500:	f107 0318 	add.w	r3, r7, #24
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	60da      	str	r2, [r3, #12]
 800350e:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode  = GPIO_MODE_ANALOG;
 8003510:	2303      	movs	r3, #3
 8003512:	61fb      	str	r3, [r7, #28]
	GPIO_Init.Pull  = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	623b      	str	r3, [r7, #32]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	; 0x24

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800351c:	2300      	movs	r3, #0
 800351e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 8003528:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800352c:	429a      	cmp	r2, r3
 800352e:	d22e      	bcs.n	800358e <_ZN7QAD_ADC9imp_startEv+0x136>
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	330a      	adds	r3, #10
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b11      	cmp	r3, #17
 8003542:	d109      	bne.n	8003558 <_ZN7QAD_ADC9imp_startEv+0x100>
				(m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVBat)) {
 8003544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	330a      	adds	r3, #10
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	4413      	add	r3, r2
 8003550:	3304      	adds	r3, #4
 8003552:	681b      	ldr	r3, [r3, #0]
		if ((m_sChannels[i].eChannel != QAD_ADC_PeriphChannelVRefInt) ||
 8003554:	2b12      	cmp	r3, #18
 8003556:	d014      	beq.n	8003582 <_ZN7QAD_ADC9imp_startEv+0x12a>
			GPIO_Init.Pin       = m_sChannels[i].uPin;
 8003558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	4413      	add	r3, r2
 8003562:	33a0      	adds	r3, #160	; 0xa0
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	61bb      	str	r3, [r7, #24]
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 8003568:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	011b      	lsls	r3, r3, #4
 8003570:	4413      	add	r3, r2
 8003572:	339c      	adds	r3, #156	; 0x9c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f107 0218 	add.w	r2, r7, #24
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fdc9 	bl	8002114 <HAL_GPIO_Init>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 8003582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003586:	3301      	adds	r3, #1
 8003588:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800358c:	e7c9      	b.n	8003522 <_ZN7QAD_ADC9imp_startEv+0xca>
		}
	}


	//Channel Configuration
	ADC_ChannelConfTypeDef  ADCChannel_Init = {0};
 800358e:	f107 0308 	add.w	r3, r7, #8
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
	ADCChannel_Init.Offset        = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]

	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80035ac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d230      	bcs.n	8003616 <_ZN7QAD_ADC9imp_startEv+0x1be>
		ADCChannel_Init.Channel       = m_sChannels[i].eChannel;
 80035b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	330a      	adds	r3, #10
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	4413      	add	r3, r2
 80035c0:	3304      	adds	r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60bb      	str	r3, [r7, #8]
		ADCChannel_Init.Rank          = i+1;
 80035c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
		ADCChannel_Init.SamplingTime = m_sChannels[i].eSamplingTime;
 80035ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	330a      	adds	r3, #10
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	4413      	add	r3, r2
 80035da:	3308      	adds	r3, #8
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&m_sADCHandle, &ADCChannel_Init) != HAL_OK) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	3354      	adds	r3, #84	; 0x54
 80035e4:	f107 0208 	add.w	r2, r7, #8
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7fe f812 	bl	8001614 <HAL_ADC_ConfigChannel>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf14      	ite	ne
 80035f6:	2301      	movne	r3, #1
 80035f8:	2300      	moveq	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <_ZN7QAD_ADC9imp_startEv+0x1b2>
			imp_stop();
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f839 	bl	8003678 <_ZN7QAD_ADC8imp_stopEv>
			return QA_Fail;
 8003606:	2301      	movs	r3, #1
 8003608:	e02f      	b.n	800366a <_ZN7QAD_ADC9imp_startEv+0x212>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 800360a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800360e:	3301      	adds	r3, #1
 8003610:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003614:	e7c7      	b.n	80035a6 <_ZN7QAD_ADC9imp_startEv+0x14e>
		}

	}

	//Clear Data
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003616:	2300      	movs	r3, #0
 8003618:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800361c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003620:	2b0f      	cmp	r3, #15
 8003622:	d80d      	bhi.n	8003640 <_ZN7QAD_ADC9imp_startEv+0x1e8>
		m_uData[i] = 0;
 8003624:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	33cc      	adds	r3, #204	; 0xcc
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	4413      	add	r3, r2
 8003630:	2200      	movs	r2, #0
 8003632:	80da      	strh	r2, [r3, #6]
	for (uint8_t i=0; i<QAD_ADC_MAXCHANNELS; i++)
 8003634:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003638:	3301      	adds	r3, #1
 800363a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800363e:	e7ed      	b.n	800361c <_ZN7QAD_ADC9imp_startEv+0x1c4>
	m_uDataIdx = 0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 21be 	strb.w	r2, [r3, #446]	; 0x1be

	//Enable ADC IRQ
	HAL_ADC_Start_IT(&m_sADCHandle);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3354      	adds	r3, #84	; 0x54
 800364c:	4618      	mov	r0, r3
 800364e:	f7fd fee5 	bl	800141c <HAL_ADC_Start_IT>
	__HAL_TIM_ENABLE(&m_sTIMHandle);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f042 0201 	orr.w	r2, r2, #1
 8003660:	601a      	str	r2, [r3, #0]

	//Set States
	m_eState = QA_Active;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3730      	adds	r7, #48	; 0x30
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40012000 	.word	0x40012000

08003678 <_ZN7QAD_ADC8imp_stopEv>:


//QAD_ADC::imp_stop
//QAD_ADC Control Method
void QAD_ADC::imp_stop(void) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]

	//Disable ADC IRQ
	__HAL_TIM_DISABLE(&m_sTIMHandle);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	f241 1311 	movw	r3, #4369	; 0x1111
 800368a:	4013      	ands	r3, r2
 800368c:	2b00      	cmp	r3, #0
 800368e:	bf0c      	ite	eq
 8003690:	2301      	moveq	r3, #1
 8003692:	2300      	movne	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d014      	beq.n	80036c4 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	6a1a      	ldr	r2, [r3, #32]
 80036a0:	f240 4344 	movw	r3, #1092	; 0x444
 80036a4:	4013      	ands	r3, r2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d007      	beq.n	80036c4 <_ZN7QAD_ADC8imp_stopEv+0x4c>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(&m_sADCHandle);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3354      	adds	r3, #84	; 0x54
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7fd ff65 	bl	8001598 <HAL_ADC_Stop_IT>

	//GPIO Deinitialization
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80036ce:	2300      	movs	r3, #0
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
 80036d8:	7bfa      	ldrb	r2, [r7, #15]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d212      	bcs.n	8003704 <_ZN7QAD_ADC8imp_stopEv+0x8c>
		HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 80036de:	7bfb      	ldrb	r3, [r7, #15]
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4413      	add	r3, r2
 80036e6:	339c      	adds	r3, #156	; 0x9c
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	4413      	add	r3, r2
 80036f2:	33a0      	adds	r3, #160	; 0xa0
 80036f4:	881b      	ldrh	r3, [r3, #0]
 80036f6:	4619      	mov	r1, r3
 80036f8:	f7fe fe90 	bl	800241c <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<m_uChannelCount; i++) {
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
 80036fe:	3301      	adds	r3, #1
 8003700:	73fb      	strb	r3, [r7, #15]
 8003702:	e7e6      	b.n	80036d2 <_ZN7QAD_ADC8imp_stopEv+0x5a>
	}

	//Deinitialize ADC
	HAL_ADC_DeInit(&m_sADCHandle);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3354      	adds	r3, #84	; 0x54
 8003708:	4618      	mov	r0, r3
 800370a:	f7fd fe40 	bl	800138e <HAL_ADC_DeInit>

	//Set States
	m_eState = QA_Inactive;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	705a      	strb	r2, [r3, #1]
}
 8003714:	bf00      	nop
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZN7QAD_ADC14imp_getTriggerEv>:
	//--------------------
	//QAD_ADC Tool Methods

//QAD_ADC::imp_getTrigger
//QAD_ADC Tool Method
uint32_t QAD_ADC::imp_getTrigger(void) {
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
	uint32_t uTrigger;
	switch (m_eTimer) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	789b      	ldrb	r3, [r3, #2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d002      	beq.n	8003732 <_ZN7QAD_ADC14imp_getTriggerEv+0x16>
 800372c:	2b02      	cmp	r3, #2
 800372e:	d004      	beq.n	800373a <_ZN7QAD_ADC14imp_getTriggerEv+0x1e>
 8003730:	e007      	b.n	8003742 <_ZN7QAD_ADC14imp_getTriggerEv+0x26>
		case QAD_Timer2:
			uTrigger = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8003732:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8003736:	60fb      	str	r3, [r7, #12]
			break;
 8003738:	e006      	b.n	8003748 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		case QAD_Timer3:
			uTrigger = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800373a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800373e:	60fb      	str	r3, [r7, #12]
			break;
 8003740:	e002      	b.n	8003748 <_ZN7QAD_ADC14imp_getTriggerEv+0x2c>
		default:
			uTrigger = 0xFFFFFFFF;
 8003742:	f04f 33ff 	mov.w	r3, #4294967295
 8003746:	60fb      	str	r3, [r7, #12]
	}
	return uTrigger;
 8003748:	68fb      	ldr	r3, [r7, #12]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <_ZN9QAD_FlashC1Ev>:
	//----------------------
	//QAD_Flash Constructors

//QAD_Flash::QAD_Flash
//QAD_Flash Constructor
QAD_Flash::QAD_Flash() {
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]

	//---------------------------
	//Setup Sector Base Addresses
	m_sSectors[0].uBase = 0x08000000;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003766:	605a      	str	r2, [r3, #4]
	m_sSectors[1].uBase = 0x08004000;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a37      	ldr	r2, [pc, #220]	; (8003848 <_ZN9QAD_FlashC1Ev+0xf0>)
 800376c:	615a      	str	r2, [r3, #20]
	m_sSectors[2].uBase = 0x08008000;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a36      	ldr	r2, [pc, #216]	; (800384c <_ZN9QAD_FlashC1Ev+0xf4>)
 8003772:	625a      	str	r2, [r3, #36]	; 0x24
	m_sSectors[3].uBase = 0x0800C000;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a36      	ldr	r2, [pc, #216]	; (8003850 <_ZN9QAD_FlashC1Ev+0xf8>)
 8003778:	635a      	str	r2, [r3, #52]	; 0x34
	m_sSectors[4].uBase = 0x08010000;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a35      	ldr	r2, [pc, #212]	; (8003854 <_ZN9QAD_FlashC1Ev+0xfc>)
 800377e:	645a      	str	r2, [r3, #68]	; 0x44
	m_sSectors[5].uBase = 0x08020000;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a35      	ldr	r2, [pc, #212]	; (8003858 <_ZN9QAD_FlashC1Ev+0x100>)
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
	m_sSectors[6].uBase = 0x08040000;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a34      	ldr	r2, [pc, #208]	; (800385c <_ZN9QAD_FlashC1Ev+0x104>)
 800378a:	665a      	str	r2, [r3, #100]	; 0x64
	m_sSectors[7].uBase = 0x08060000;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a34      	ldr	r2, [pc, #208]	; (8003860 <_ZN9QAD_FlashC1Ev+0x108>)
 8003790:	675a      	str	r2, [r3, #116]	; 0x74

	//------------------
	//Setup Sector Sizes
	m_sSectors[0].uSize = 16384;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003798:	601a      	str	r2, [r3, #0]
	m_sSectors[1].uSize = 16384;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a0:	611a      	str	r2, [r3, #16]
	m_sSectors[2].uSize = 16384;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a8:	621a      	str	r2, [r3, #32]
	m_sSectors[3].uSize = 16384;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
	m_sSectors[4].uSize = 65536;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
	m_sSectors[5].uSize = 131072;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037c0:	651a      	str	r2, [r3, #80]	; 0x50
	m_sSectors[6].uSize = 131072;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037c8:	661a      	str	r2, [r3, #96]	; 0x60
	m_sSectors[7].uSize = 131072;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037d0:	671a      	str	r2, [r3, #112]	; 0x70

	//---------------------
	//Setup Sector Pointers
	for (uint8_t i=0; i<QAD_FLASH_SECTORCOUNT; i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	2b07      	cmp	r3, #7
 80037da:	d810      	bhi.n	80037fe <_ZN9QAD_FlashC1Ev+0xa6>
	  m_sSectors[i].pData = (void*)m_sSectors[i].uBase;
 80037dc:	7bfb      	ldrb	r3, [r7, #15]
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	4413      	add	r3, r2
 80037e4:	3304      	adds	r3, #4
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
 80037ea:	4611      	mov	r1, r2
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	4413      	add	r3, r2
 80037f2:	3308      	adds	r3, #8
 80037f4:	6019      	str	r1, [r3, #0]
	for (uint8_t i=0; i<QAD_FLASH_SECTORCOUNT; i++)
 80037f6:	7bfb      	ldrb	r3, [r7, #15]
 80037f8:	3301      	adds	r3, #1
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e7eb      	b.n	80037d6 <_ZN9QAD_FlashC1Ev+0x7e>

	//------------------------
	//Setup Sector Lock Values
	m_sSectors[0].bLocked = true;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	731a      	strb	r2, [r3, #12]
	m_sSectors[1].bLocked = true;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	771a      	strb	r2, [r3, #28]
	m_sSectors[2].bLocked = true;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	m_sSectors[3].bLocked = true;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	m_sSectors[4].bLocked = false;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	m_sSectors[5].bLocked = false;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	m_sSectors[6].bLocked = false;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sSectors[7].bLocked = false;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
}
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	08004000 	.word	0x08004000
 800384c:	08008000 	.word	0x08008000
 8003850:	0800c000 	.word	0x0800c000
 8003854:	08010000 	.word	0x08010000
 8003858:	08020000 	.word	0x08020000
 800385c:	08040000 	.word	0x08040000
 8003860:	08060000 	.word	0x08060000

08003864 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm>:
}


//QAD_Flash::imp_eraseAndWriteSector
//QAD_Flash Data Method
QA_Result QAD_Flash::imp_eraseAndWriteSector(uint8_t uSector, uint8_t* pData, uint32_t uSize) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	607a      	str	r2, [r7, #4]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	460b      	mov	r3, r1
 8003872:	72fb      	strb	r3, [r7, #11]

	//Check sector index
	if (uSector >= QAD_FLASH_SECTORCOUNT)
 8003874:	7afb      	ldrb	r3, [r7, #11]
 8003876:	2b07      	cmp	r3, #7
 8003878:	d901      	bls.n	800387e <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x1a>
		return QA_Fail;
 800387a:	2301      	movs	r3, #1
 800387c:	e03c      	b.n	80038f8 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x94>

	//Check if sector is locked
	if (m_sSectors[uSector].bLocked)
 800387e:	7afb      	ldrb	r3, [r7, #11]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	4413      	add	r3, r2
 8003886:	330c      	adds	r3, #12
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x2e>
		return QA_Fail;
 800388e:	2301      	movs	r3, #1
 8003890:	e032      	b.n	80038f8 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x94>

	//Erase Sector
	if (HAL_FLASH_Unlock() != HAL_OK)
 8003892:	f7fe fa85 	bl	8001da0 <HAL_FLASH_Unlock>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x46>
		return QA_Fail;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e026      	b.n	80038f8 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x94>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x9c>)
 80038ac:	22b3      	movs	r2, #179	; 0xb3
 80038ae:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(uSector, FLASH_VOLTAGE_RANGE_3);
 80038b0:	7afb      	ldrb	r3, [r7, #11]
 80038b2:	2102      	movs	r1, #2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fbe5 	bl	8002084 <FLASH_Erase_Sector>

	for (uint32_t i=0; i<uSize; i++)
 80038ba:	2300      	movs	r3, #0
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d215      	bcs.n	80038f2 <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x8e>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, m_sSectors[uSector].uBase + i, (uint8_t)pData[i]);
 80038c6:	7afb      	ldrb	r3, [r7, #11]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	18d1      	adds	r1, r2, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	4413      	add	r3, r2
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	f04f 0300 	mov.w	r3, #0
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fe fa07 	bl	8001cf8 <HAL_FLASH_Program>
	for (uint32_t i=0; i<uSize; i++)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	3301      	adds	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	e7e5      	b.n	80038be <_ZN9QAD_Flash23imp_eraseAndWriteSectorEhPhm+0x5a>

	HAL_FLASH_Lock();
 80038f2:	f7fe fa77 	bl	8001de4 <HAL_FLASH_Lock>

	//Return
	return QA_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3718      	adds	r7, #24
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023c00 	.word	0x40023c00

08003904 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	88fa      	ldrh	r2, [r7, #6]
 800391c:	809a      	strh	r2, [r3, #4]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	719a      	strb	r2, [r3, #6]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 f841 	bl	80039be <_ZN15QAD_GPIO_Output10periphInitEv>
}
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	889b      	ldrh	r3, [r3, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	4619      	mov	r1, r3
 800395a:	f7fe fe43 	bl	80025e4 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	741a      	strb	r2, [r3, #16]
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6818      	ldr	r0, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	889b      	ldrh	r3, [r3, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	4619      	mov	r1, r3
 8003980:	f7fe fe30 	bl	80025e4 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	741a      	strb	r2, [r3, #16]
}
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}

08003992 <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 8003992:	b580      	push	{r7, lr}
 8003994:	b082      	sub	sp, #8
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7c1b      	ldrb	r3, [r3, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d005      	beq.n	80039ae <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffe0 	bl	800396c <_ZN15QAD_GPIO_Output3offEv>
	    break;
 80039ac:	e003      	b.n	80039b6 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff ffc9 	bl	8003946 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 80039b4:	bf00      	nop
	}
}
 80039b6:	bf00      	nop
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 80039be:	b580      	push	{r7, lr}
 80039c0:	b088      	sub	sp, #32
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 80039c6:	f107 030c 	add.w	r3, r7, #12
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	605a      	str	r2, [r3, #4]
 80039d0:	609a      	str	r2, [r3, #8]
 80039d2:	60da      	str	r2, [r3, #12]
 80039d4:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	889b      	ldrh	r3, [r3, #4]
 80039da:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	799b      	ldrb	r3, [r3, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 80039e4:	2311      	movs	r3, #17
 80039e6:	e000      	b.n	80039ea <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 80039e8:	2301      	movs	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f107 020c 	add.w	r2, r7, #12
 8003a00:	4611      	mov	r1, r2
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe fb86 	bl	8002114 <HAL_GPIO_Init>
}
 8003a08:	bf00      	nop
 8003a0a:	3720      	adds	r7, #32
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	f3bf 8f5b 	dmb	ish
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	bf0c      	ite	eq
 8003a26:	2301      	moveq	r3, #1
 8003a28:	2300      	movne	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <_ZN11QAD_UARTMgr3getEv+0x42>
 8003a30:	4809      	ldr	r0, [pc, #36]	; (8003a58 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8003a32:	f000 fe4b 	bl	80046cc <__cxa_guard_acquire>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf14      	ite	ne
 8003a3c:	2301      	movne	r3, #1
 8003a3e:	2300      	moveq	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <_ZN11QAD_UARTMgr3getEv+0x42>
 8003a46:	4805      	ldr	r0, [pc, #20]	; (8003a5c <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8003a48:	f000 fa40 	bl	8003ecc <_ZN11QAD_UARTMgrC1Ev>
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8003a4e:	f000 fe49 	bl	80046e4 <__cxa_guard_release>
		return instance;
 8003a52:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8003a54:	4618      	mov	r0, r3
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	20000308 	.word	0x20000308
 8003a5c:	200002e4 	.word	0x200002e4

08003a60 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d901      	bls.n	8003a74 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00a      	b.n	8003a8a <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8003a74:	f7ff ffcc 	bl	8003a10 <_ZN11QAD_UARTMgr3getEv>
 8003a78:	4601      	mov	r1, r0
 8003a7a:	79fa      	ldrb	r2, [r7, #7]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3301      	adds	r3, #1
 8003a88:	781b      	ldrb	r3, [r3, #0]
	}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	4603      	mov	r3, r0
 8003a9a:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	e00a      	b.n	8003abc <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 8003aa6:	f7ff ffb3 	bl	8003a10 <_ZN11QAD_UARTMgr3getEv>
 8003aaa:	4601      	mov	r1, r0
 8003aac:	79fa      	ldrb	r2, [r7, #7]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3304      	adds	r3, #4
 8003aba:	681b      	ldr	r3, [r3, #0]
	}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	4603      	mov	r3, r0
 8003acc:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d902      	bls.n	8003ada <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 8003ad4:	f06f 0309 	mvn.w	r3, #9
 8003ad8:	e00b      	b.n	8003af2 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 8003ada:	f7ff ff99 	bl	8003a10 <_ZN11QAD_UARTMgr3getEv>
 8003ade:	4601      	mov	r1, r0
 8003ae0:	79fa      	ldrb	r2, [r7, #7]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3308      	adds	r3, #8
 8003aee:	f993 3000 	ldrsb.w	r3, [r3]
	}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	4603      	mov	r3, r0
 8003b02:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 8003b04:	f7ff ff84 	bl	8003a10 <_ZN11QAD_UARTMgr3getEv>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	79fb      	ldrb	r3, [r7, #7]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4610      	mov	r0, r2
 8003b10:	f000 fa1c 	bl	8003f4c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 8003b14:	4603      	mov	r3, r0
	}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3708      	adds	r7, #8
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	4603      	mov	r3, r0
 8003b26:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8003b28:	f7ff ff72 	bl	8003a10 <_ZN11QAD_UARTMgr3getEv>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	79fb      	ldrb	r3, [r7, #7]
 8003b30:	4619      	mov	r1, r3
 8003b32:	4610      	mov	r0, r2
 8003b34:	f000 fa33 	bl	8003f9e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8003b38:	bf00      	nop
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8003b4a:	f7ff ff61 	bl	8003a10 <_ZN11QAD_UARTMgr3getEv>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	79fb      	ldrb	r3, [r7, #7]
 8003b52:	4619      	mov	r1, r3
 8003b54:	4610      	mov	r0, r2
 8003b56:	f000 fa3d 	bl	8003fd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	4603      	mov	r3, r0
 8003b6a:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8003b6c:	f7ff ff50 	bl	8003a10 <_ZN11QAD_UARTMgr3getEv>
 8003b70:	4602      	mov	r2, r0
 8003b72:	79fb      	ldrb	r3, [r7, #7]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 fa9a 	bl	80040b0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8003b7c:	bf00      	nop
 8003b7e:	3708      	adds	r7, #8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	785b      	ldrb	r3, [r3, #1]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff65 	bl	8003a60 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf14      	ite	ne
 8003b9c:	2301      	movne	r3, #1
 8003b9e:	2300      	moveq	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e012      	b.n	8003bd0 <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	785b      	ldrb	r3, [r3, #1]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ffa3 	bl	8003afa <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f8a7 	bl	8003d08 <_ZN8QAD_UART10periphInitEv>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ffa8 	bl	8003b1e <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3710      	adds	r7, #16
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d009      	beq.n	8003bfc <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 8003be8:	2101      	movs	r1, #1
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f924 	bl	8003e38 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff92 	bl	8003b1e <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8003bfa:	e000      	b.n	8003bfe <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8003bfc:	bf00      	nop
}
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	331c      	adds	r3, #28
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c32:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69db      	ldr	r3, [r3, #28]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c5e:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
 8003c86:	f042 0220 	orr.w	r2, r2, #32
 8003c8a:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f022 0220 	bic.w	r2, r2, #32
 8003cb6:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	605a      	str	r2, [r3, #4]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	b2db      	uxtb	r3, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8003d10:	f107 030c 	add.w	r3, r7, #12
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]
 8003d1c:	60da      	str	r2, [r3, #12]
 8003d1e:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8a1b      	ldrh	r3, [r3, #16]
 8003d24:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8003d26:	2302      	movs	r3, #2
 8003d28:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8003d2e:	2303      	movs	r3, #3
 8003d30:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	7c9b      	ldrb	r3, [r3, #18]
 8003d36:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f107 020c 	add.w	r2, r7, #12
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe f9e6 	bl	8002114 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8b1b      	ldrh	r3, [r3, #24]
 8003d4c:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8003d4e:	2302      	movs	r3, #2
 8003d50:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8003d52:	2301      	movs	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8003d56:	2303      	movs	r3, #3
 8003d58:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	7e9b      	ldrb	r3, [r3, #26]
 8003d5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	f107 020c 	add.w	r2, r7, #12
 8003d68:	4611      	mov	r1, r2
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe f9d2 	bl	8002114 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	785b      	ldrb	r3, [r3, #1]
 8003d74:	4618      	mov	r0, r3
 8003d76:	f7ff fee3 	bl	8003b40 <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fe87 	bl	8003a92 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8003d84:	4602      	mov	r2, r0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	220c      	movs	r2, #12
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	331c      	adds	r3, #28
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff f8a0 	bl	8002f00 <HAL_UART_Init>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf14      	ite	ne
 8003dc6:	2301      	movne	r3, #1
 8003dc8:	2300      	moveq	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f830 	bl	8003e38 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e029      	b.n	8003e30 <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69db      	ldr	r3, [r3, #28]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dea:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	785b      	ldrb	r3, [r3, #1]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7ff fe67 	bl	8003ac4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8003df6:	4603      	mov	r3, r0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7a1b      	ldrb	r3, [r3, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	4619      	mov	r1, r3
 8003e02:	f7fd ff34 	bl	8001c6e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fe5a 	bl	8003ac4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fd ff47 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3720      	adds	r7, #32
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d01b      	beq.n	8003e82 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f7ff fefc 	bl	8003c48 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7ff ff25 	bl	8003ca0 <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fe32 	bl	8003ac4 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8003e60:	4603      	mov	r3, r0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fd ff2d 	bl	8001cc2 <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e76:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	331c      	adds	r3, #28
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff f88c 	bl	8002f9a <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	785b      	ldrb	r3, [r3, #1]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fe6b 	bl	8003b62 <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	695a      	ldr	r2, [r3, #20]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	8b1b      	ldrh	r3, [r3, #24]
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7fe fac0 	bl	800241c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	8a1b      	ldrh	r3, [r3, #16]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f7fe fab8 	bl	800241c <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	701a      	strb	r2, [r3, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
	...

08003ecc <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 8003ecc:	b480      	push	{r7}
 8003ece:	b085      	sub	sp, #20
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	73fb      	strb	r3, [r7, #15]
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d80d      	bhi.n	8003efa <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 8003ede:	7bfa      	ldrb	r2, [r7, #15]
 8003ee0:	6879      	ldr	r1, [r7, #4]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	440b      	add	r3, r1
 8003eec:	3301      	adds	r3, #1
 8003eee:	2200      	movs	r2, #0
 8003ef0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8003ef2:	7bfb      	ldrb	r3, [r7, #15]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
 8003ef8:	e7ee      	b.n	8003ed8 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2202      	movs	r2, #2
 8003f0a:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0c      	ldr	r2, [pc, #48]	; (8003f40 <_ZN11QAD_UARTMgrC1Ev+0x74>)
 8003f10:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <_ZN11QAD_UARTMgrC1Ev+0x78>)
 8003f16:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a0b      	ldr	r2, [pc, #44]	; (8003f48 <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 8003f1c:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2225      	movs	r2, #37	; 0x25
 8003f22:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2226      	movs	r2, #38	; 0x26
 8003f28:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2247      	movs	r2, #71	; 0x47
 8003f2e:	f883 2020 	strb.w	r2, [r3, #32]

}
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4618      	mov	r0, r3
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	40011000 	.word	0x40011000
 8003f44:	40004400 	.word	0x40004400
 8003f48:	40011400 	.word	0x40011400

08003f4c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e017      	b.n	8003f92 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3301      	adds	r3, #1
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e00a      	b.n	8003f92 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d80a      	bhi.n	8003fc6 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e000      	b.n	8003fc8 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8003fc6:	bf00      	nop
}
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
	...

08003fd4 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d85c      	bhi.n	80040a0 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 8003fe6:	a201      	add	r2, pc, #4	; (adr r2, 8003fec <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 8003fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fec:	08003ffd 	.word	0x08003ffd
 8003ff0:	08004033 	.word	0x08004033
 8003ff4:	08004069 	.word	0x08004069
 8003ff8:	0800409f 	.word	0x0800409f
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	4b2a      	ldr	r3, [pc, #168]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004004:	4a29      	ldr	r2, [pc, #164]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004006:	f043 0310 	orr.w	r3, r3, #16
 800400a:	6453      	str	r3, [r2, #68]	; 0x44
 800400c:	4b27      	ldr	r3, [pc, #156]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800400e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 8004018:	4b24      	ldr	r3, [pc, #144]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	4a23      	ldr	r2, [pc, #140]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800401e:	f043 0310 	orr.w	r3, r3, #16
 8004022:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	4a20      	ldr	r2, [pc, #128]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800402a:	f023 0310 	bic.w	r3, r3, #16
 800402e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004030:	e036      	b.n	80040a0 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
 8004042:	4b1a      	ldr	r3, [pc, #104]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	613b      	str	r3, [r7, #16]
 800404c:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 800404e:	4b17      	ldr	r3, [pc, #92]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4a16      	ldr	r2, [pc, #88]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004058:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 800405a:	4b14      	ldr	r3, [pc, #80]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004060:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004064:	6213      	str	r3, [r2, #32]
      break;
 8004066:	e01b      	b.n	80040a0 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800406e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004072:	f043 0320 	orr.w	r3, r3, #32
 8004076:	6453      	str	r3, [r2, #68]	; 0x44
 8004078:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800407a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	4a08      	ldr	r2, [pc, #32]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800408a:	f043 0320 	orr.w	r3, r3, #32
 800408e:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8004090:	4b06      	ldr	r3, [pc, #24]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	4a05      	ldr	r2, [pc, #20]	; (80040ac <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8004096:	f023 0320 	bic.w	r3, r3, #32
 800409a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800409c:	e000      	b.n	80040a0 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 800409e:	bf00      	nop
  }
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40023800 	.word	0x40023800

080040b0 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d820      	bhi.n	8004104 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040e7 	.word	0x080040e7
 80040d0:	080040f5 	.word	0x080040f5
 80040d4:	08004103 	.word	0x08004103
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80040de:	f023 0310 	bic.w	r3, r3, #16
 80040e2:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80040e4:	e00e      	b.n	8004104 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 80040e6:	4b0a      	ldr	r3, [pc, #40]	; (8004110 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	4a09      	ldr	r2, [pc, #36]	; (8004110 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80040ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040f0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80040f2:	e007      	b.n	8004104 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80040f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f8:	4a05      	ldr	r2, [pc, #20]	; (8004110 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 80040fa:	f023 0320 	bic.w	r3, r3, #32
 80040fe:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8004100:	e000      	b.n	8004104 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 8004102:	bf00      	nop
  }
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40023800 	.word	0x40023800

08004114 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7b1b      	ldrb	r3, [r3, #12]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8004126:	2300      	movs	r3, #0
 8004128:	e010      	b.n	800414c <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6839      	ldr	r1, [r7, #0]
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	4798      	blx	r3
 8004136:	4603      	mov	r3, r0
 8004138:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 800413a:	7bfb      	ldrb	r3, [r7, #15]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	e003      	b.n	800414c <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6839      	ldr	r1, [r7, #0]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	4798      	blx	r3
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 800417e:	6838      	ldr	r0, [r7, #0]
 8004180:	f7fc f82a 	bl	80001d8 <strlen>
 8004184:	4603      	mov	r3, r0
 8004186:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 8004188:	2300      	movs	r3, #0
 800418a:	81fb      	strh	r3, [r7, #14]
 800418c:	89fa      	ldrh	r2, [r7, #14]
 800418e:	89bb      	ldrh	r3, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d20f      	bcs.n	80041b4 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3304      	adds	r3, #4
 8004198:	4618      	mov	r0, r3
 800419a:	f000 f837 	bl	800420c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800419e:	89fb      	ldrh	r3, [r7, #14]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	f000 f9e1 	bl	800456e <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 80041ac:	89fb      	ldrh	r3, [r7, #14]
 80041ae:	3301      	adds	r3, #1
 80041b0:	81fb      	strh	r3, [r7, #14]
 80041b2:	e7eb      	b.n	800418c <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 f827 	bl	800420c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80041be:	4603      	mov	r3, r0
 80041c0:	210d      	movs	r1, #13
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f9d3 	bl	800456e <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	330c      	adds	r3, #12
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 f80f 	bl	800420c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80041ee:	4603      	mov	r3, r0
 80041f0:	210d      	movs	r1, #13
 80041f2:	4618      	mov	r0, r3
 80041f4:	f000 f9bb 	bl	800456e <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	return get();
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f805 	bl	8004224 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 800421a:	4603      	mov	r3, r0
      }
 800421c:	4618      	mov	r0, r3
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 f805 	bl	800423e <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8004234:	4603      	mov	r3, r0
 8004236:	4618      	mov	r0, r3
 8004238:	3708      	adds	r7, #8
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f806 	bl	800425a <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800424e:	4603      	mov	r3, r0
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800425a:	b580      	push	{r7, lr}
 800425c:	b082      	sub	sp, #8
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4618      	mov	r0, r3
 8004266:	f000 f805 	bl	8004274 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800426a:	4603      	mov	r3, r0
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f805 	bl	800428c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8004282:	4603      	mov	r3, r0
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4618      	mov	r0, r3
 8004298:	f000 f805 	bl	80042a6 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 800429c:	4603      	mov	r3, r0
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80042a6:	b480      	push	{r7}
 80042a8:	b083      	sub	sp, #12
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3314      	adds	r3, #20
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f8e4 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fc56 	bl	8003b84 <_ZN8QAD_UART4initEv>
 80042d8:	4603      	mov	r3, r0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3314      	adds	r3, #20
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f8d2 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80042f4:	4603      	mov	r3, r0
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff fc6e 	bl	8003bd8 <_ZN8QAD_UART6deinitEv>
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b095      	sub	sp, #84	; 0x54
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	3314      	adds	r3, #20
 8004312:	4618      	mov	r0, r3
 8004314:	f000 f8c0 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004318:	4603      	mov	r3, r0
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff fc72 	bl	8003c04 <_ZN8QAD_UART9getHandleEv>
 8004320:	4602      	mov	r2, r0
 8004322:	f107 0308 	add.w	r3, r7, #8
 8004326:	4611      	mov	r1, r2
 8004328:	2244      	movs	r2, #68	; 0x44
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fa48 	bl	80047c0 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b20      	cmp	r3, #32
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01f      	beq.n	8004386 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3314      	adds	r3, #20
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f8a4 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004350:	4603      	mov	r3, r0
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff fcca 	bl	8003cec <_ZN8QAD_UART6dataRXEv>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	7b9b      	ldrb	r3, [r3, #14]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3308      	adds	r3, #8
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff ff4e 	bl	800420c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8004370:	4602      	mov	r2, r0
 8004372:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f000 f8f8 	bl	800456e <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	f06f 0220 	mvn.w	r2, #32
 8004384:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b80      	cmp	r3, #128	; 0x80
 8004390:	bf0c      	ite	eq
 8004392:	2301      	moveq	r3, #1
 8004394:	2300      	movne	r3, #0
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	d035      	beq.n	8004408 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff33 	bl	800420c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f000 f8cd 	bl	8004548 <_ZN14QAT_FIFOBuffer5emptyEv>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d014      	beq.n	80043e8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3314      	adds	r3, #20
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f868 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80043c8:	4604      	mov	r4, r0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3304      	adds	r3, #4
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7ff ff1c 	bl	800420c <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80043d4:	4603      	mov	r3, r0
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 f8ed 	bl	80045b6 <_ZN14QAT_FIFOBuffer3popEv>
 80043dc:	4603      	mov	r3, r0
 80043de:	4619      	mov	r1, r3
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7ff fc73 	bl	8003ccc <_ZN8QAD_UART6dataTXEh>
 80043e6:	e00b      	b.n	8004400 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3314      	adds	r3, #20
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 f853 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff fc27 	bl	8003c48 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004406:	601a      	str	r2, [r3, #0]
  }
}
 8004408:	bf00      	nop
 800440a:	3754      	adds	r7, #84	; 0x54
 800440c:	46bd      	mov	sp, r7
 800440e:	bd90      	pop	{r4, r7, pc}

08004410 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3314      	adds	r3, #20
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f83b 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff fbf9 	bl	8003c1c <_ZN8QAD_UART7startTXEv>
}
 800442a:	bf00      	nop
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3314      	adds	r3, #20
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f82a 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004444:	4603      	mov	r3, r0
 8004446:	4618      	mov	r0, r3
 8004448:	f7ff fbfe 	bl	8003c48 <_ZN8QAD_UART6stopTXEv>
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3314      	adds	r3, #20
 8004460:	4618      	mov	r0, r3
 8004462:	f000 f819 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004466:	4603      	mov	r3, r0
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fc03 	bl	8003c74 <_ZN8QAD_UART7startRXEv>
}
 800446e:	bf00      	nop
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 8004476:	b580      	push	{r7, lr}
 8004478:	b082      	sub	sp, #8
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3314      	adds	r3, #20
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f808 	bl	8004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8004488:	4603      	mov	r3, r0
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff fc08 	bl	8003ca0 <_ZN8QAD_UART6stopRXEv>
}
 8004490:	bf00      	nop
 8004492:	3708      	adds	r7, #8
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}

08004498 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
	return get();
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f805 	bl	80044b0 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 80044a6:	4603      	mov	r3, r0
      }
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f805 	bl	80044ca <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 80044c0:	4603      	mov	r3, r0
 80044c2:	4618      	mov	r0, r3
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 f806 	bl	80044e6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80044da:	4603      	mov	r3, r0
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	3708      	adds	r7, #8
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f805 	bl	8004500 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80044f6:	4603      	mov	r3, r0
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f805 	bl	8004518 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 800450e:	4603      	mov	r3, r0
 8004510:	4618      	mov	r0, r3
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f805 	bl	8004532 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 8004528:	4603      	mov	r3, r0
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	88da      	ldrh	r2, [r3, #6]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	891b      	ldrh	r3, [r3, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	d101      	bne.n	8004560 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 800456e:	b580      	push	{r7, lr}
 8004570:	b082      	sub	sp, #8
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	891b      	ldrh	r3, [r3, #8]
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 f847 	bl	8004616 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 8004588:	4602      	mov	r2, r0
 800458a:	78fb      	ldrb	r3, [r7, #3]
 800458c:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	889a      	ldrh	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	891b      	ldrh	r3, [r3, #8]
 8004596:	429a      	cmp	r2, r3
 8004598:	d906      	bls.n	80045a8 <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	891b      	ldrh	r3, [r3, #8]
 800459e:	3301      	adds	r3, #1
 80045a0:	b29a      	uxth	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 80045a6:	e002      	b.n	80045ae <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	811a      	strh	r2, [r3, #8]
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff ffc2 	bl	8004548 <_ZN14QAT_FIFOBuffer5emptyEv>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	88db      	ldrh	r3, [r3, #6]
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f000 f81a 	bl	8004616 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80045e2:	4603      	mov	r3, r0
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	889a      	ldrh	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	88db      	ldrh	r3, [r3, #6]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d906      	bls.n	8004602 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	88db      	ldrh	r3, [r3, #6]
 80045f8:	3301      	adds	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	80da      	strh	r2, [r3, #6]
 8004600:	e002      	b.n	8004608 <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	80da      	strh	r2, [r3, #6]
		return uData;
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	e000      	b.n	800460e <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
	return get()[__i];
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f807 	bl	8004634 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 8004626:	4602      	mov	r2, r0
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	4413      	add	r3, r2
      }
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 f805 	bl	800464e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8004644:	4603      	mov	r3, r0
 8004646:	4618      	mov	r0, r3
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f806 	bl	800466a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800465e:	4603      	mov	r3, r0
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f805 	bl	8004684 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800467a:	4603      	mov	r3, r0
 800467c:	4618      	mov	r0, r3
 800467e:	3708      	adds	r7, #8
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f805 	bl	800469c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8004692:	4603      	mov	r3, r0
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 f805 	bl	80046b6 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 80046ac:	4603      	mov	r3, r0
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <__cxa_guard_acquire>:
 80046cc:	6803      	ldr	r3, [r0, #0]
 80046ce:	07db      	lsls	r3, r3, #31
 80046d0:	d406      	bmi.n	80046e0 <__cxa_guard_acquire+0x14>
 80046d2:	7843      	ldrb	r3, [r0, #1]
 80046d4:	b103      	cbz	r3, 80046d8 <__cxa_guard_acquire+0xc>
 80046d6:	deff      	udf	#255	; 0xff
 80046d8:	2301      	movs	r3, #1
 80046da:	7043      	strb	r3, [r0, #1]
 80046dc:	4618      	mov	r0, r3
 80046de:	4770      	bx	lr
 80046e0:	2000      	movs	r0, #0
 80046e2:	4770      	bx	lr

080046e4 <__cxa_guard_release>:
 80046e4:	2301      	movs	r3, #1
 80046e6:	6003      	str	r3, [r0, #0]
 80046e8:	4770      	bx	lr

080046ea <_Znwj>:
 80046ea:	2801      	cmp	r0, #1
 80046ec:	bf38      	it	cc
 80046ee:	2001      	movcc	r0, #1
 80046f0:	b510      	push	{r4, lr}
 80046f2:	4604      	mov	r4, r0
 80046f4:	4620      	mov	r0, r4
 80046f6:	f000 f85b 	bl	80047b0 <malloc>
 80046fa:	b930      	cbnz	r0, 800470a <_Znwj+0x20>
 80046fc:	f000 f81e 	bl	800473c <_ZSt15get_new_handlerv>
 8004700:	b908      	cbnz	r0, 8004706 <_Znwj+0x1c>
 8004702:	f000 f823 	bl	800474c <abort>
 8004706:	4780      	blx	r0
 8004708:	e7f4      	b.n	80046f4 <_Znwj+0xa>
 800470a:	bd10      	pop	{r4, pc}

0800470c <_Znaj>:
 800470c:	f7ff bfed 	b.w	80046ea <_Znwj>

08004710 <__cxa_pure_virtual>:
 8004710:	b508      	push	{r3, lr}
 8004712:	f000 f80d 	bl	8004730 <_ZSt9terminatev>

08004716 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004716:	b508      	push	{r3, lr}
 8004718:	4780      	blx	r0
 800471a:	f000 f817 	bl	800474c <abort>
	...

08004720 <_ZSt13get_terminatev>:
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <_ZSt13get_terminatev+0xc>)
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	f3bf 8f5b 	dmb	ish
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	2000000c 	.word	0x2000000c

08004730 <_ZSt9terminatev>:
 8004730:	b508      	push	{r3, lr}
 8004732:	f7ff fff5 	bl	8004720 <_ZSt13get_terminatev>
 8004736:	f7ff ffee 	bl	8004716 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800473c <_ZSt15get_new_handlerv>:
 800473c:	4b02      	ldr	r3, [pc, #8]	; (8004748 <_ZSt15get_new_handlerv+0xc>)
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	f3bf 8f5b 	dmb	ish
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	2000030c 	.word	0x2000030c

0800474c <abort>:
 800474c:	b508      	push	{r3, lr}
 800474e:	2006      	movs	r0, #6
 8004750:	f000 f8de 	bl	8004910 <raise>
 8004754:	2001      	movs	r0, #1
 8004756:	f7fc fd35 	bl	80011c4 <_exit>
	...

0800475c <__errno>:
 800475c:	4b01      	ldr	r3, [pc, #4]	; (8004764 <__errno+0x8>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000010 	.word	0x20000010

08004768 <__libc_init_array>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	4d0d      	ldr	r5, [pc, #52]	; (80047a0 <__libc_init_array+0x38>)
 800476c:	4c0d      	ldr	r4, [pc, #52]	; (80047a4 <__libc_init_array+0x3c>)
 800476e:	1b64      	subs	r4, r4, r5
 8004770:	10a4      	asrs	r4, r4, #2
 8004772:	2600      	movs	r6, #0
 8004774:	42a6      	cmp	r6, r4
 8004776:	d109      	bne.n	800478c <__libc_init_array+0x24>
 8004778:	4d0b      	ldr	r5, [pc, #44]	; (80047a8 <__libc_init_array+0x40>)
 800477a:	4c0c      	ldr	r4, [pc, #48]	; (80047ac <__libc_init_array+0x44>)
 800477c:	f000 f8f2 	bl	8004964 <_init>
 8004780:	1b64      	subs	r4, r4, r5
 8004782:	10a4      	asrs	r4, r4, #2
 8004784:	2600      	movs	r6, #0
 8004786:	42a6      	cmp	r6, r4
 8004788:	d105      	bne.n	8004796 <__libc_init_array+0x2e>
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004790:	4798      	blx	r3
 8004792:	3601      	adds	r6, #1
 8004794:	e7ee      	b.n	8004774 <__libc_init_array+0xc>
 8004796:	f855 3b04 	ldr.w	r3, [r5], #4
 800479a:	4798      	blx	r3
 800479c:	3601      	adds	r6, #1
 800479e:	e7f2      	b.n	8004786 <__libc_init_array+0x1e>
 80047a0:	08004aa0 	.word	0x08004aa0
 80047a4:	08004aa0 	.word	0x08004aa0
 80047a8:	08004aa0 	.word	0x08004aa0
 80047ac:	08004aa4 	.word	0x08004aa4

080047b0 <malloc>:
 80047b0:	4b02      	ldr	r3, [pc, #8]	; (80047bc <malloc+0xc>)
 80047b2:	4601      	mov	r1, r0
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	f000 b819 	b.w	80047ec <_malloc_r>
 80047ba:	bf00      	nop
 80047bc:	20000010 	.word	0x20000010

080047c0 <memcpy>:
 80047c0:	440a      	add	r2, r1
 80047c2:	4291      	cmp	r1, r2
 80047c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047c8:	d100      	bne.n	80047cc <memcpy+0xc>
 80047ca:	4770      	bx	lr
 80047cc:	b510      	push	{r4, lr}
 80047ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047d6:	4291      	cmp	r1, r2
 80047d8:	d1f9      	bne.n	80047ce <memcpy+0xe>
 80047da:	bd10      	pop	{r4, pc}

080047dc <memset>:
 80047dc:	4402      	add	r2, r0
 80047de:	4603      	mov	r3, r0
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d100      	bne.n	80047e6 <memset+0xa>
 80047e4:	4770      	bx	lr
 80047e6:	f803 1b01 	strb.w	r1, [r3], #1
 80047ea:	e7f9      	b.n	80047e0 <memset+0x4>

080047ec <_malloc_r>:
 80047ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ee:	1ccd      	adds	r5, r1, #3
 80047f0:	f025 0503 	bic.w	r5, r5, #3
 80047f4:	3508      	adds	r5, #8
 80047f6:	2d0c      	cmp	r5, #12
 80047f8:	bf38      	it	cc
 80047fa:	250c      	movcc	r5, #12
 80047fc:	2d00      	cmp	r5, #0
 80047fe:	4606      	mov	r6, r0
 8004800:	db01      	blt.n	8004806 <_malloc_r+0x1a>
 8004802:	42a9      	cmp	r1, r5
 8004804:	d903      	bls.n	800480e <_malloc_r+0x22>
 8004806:	230c      	movs	r3, #12
 8004808:	6033      	str	r3, [r6, #0]
 800480a:	2000      	movs	r0, #0
 800480c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800480e:	f000 f89b 	bl	8004948 <__malloc_lock>
 8004812:	4921      	ldr	r1, [pc, #132]	; (8004898 <_malloc_r+0xac>)
 8004814:	680a      	ldr	r2, [r1, #0]
 8004816:	4614      	mov	r4, r2
 8004818:	b99c      	cbnz	r4, 8004842 <_malloc_r+0x56>
 800481a:	4f20      	ldr	r7, [pc, #128]	; (800489c <_malloc_r+0xb0>)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	b923      	cbnz	r3, 800482a <_malloc_r+0x3e>
 8004820:	4621      	mov	r1, r4
 8004822:	4630      	mov	r0, r6
 8004824:	f000 f83c 	bl	80048a0 <_sbrk_r>
 8004828:	6038      	str	r0, [r7, #0]
 800482a:	4629      	mov	r1, r5
 800482c:	4630      	mov	r0, r6
 800482e:	f000 f837 	bl	80048a0 <_sbrk_r>
 8004832:	1c43      	adds	r3, r0, #1
 8004834:	d123      	bne.n	800487e <_malloc_r+0x92>
 8004836:	230c      	movs	r3, #12
 8004838:	6033      	str	r3, [r6, #0]
 800483a:	4630      	mov	r0, r6
 800483c:	f000 f88a 	bl	8004954 <__malloc_unlock>
 8004840:	e7e3      	b.n	800480a <_malloc_r+0x1e>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	1b5b      	subs	r3, r3, r5
 8004846:	d417      	bmi.n	8004878 <_malloc_r+0x8c>
 8004848:	2b0b      	cmp	r3, #11
 800484a:	d903      	bls.n	8004854 <_malloc_r+0x68>
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	441c      	add	r4, r3
 8004850:	6025      	str	r5, [r4, #0]
 8004852:	e004      	b.n	800485e <_malloc_r+0x72>
 8004854:	6863      	ldr	r3, [r4, #4]
 8004856:	42a2      	cmp	r2, r4
 8004858:	bf0c      	ite	eq
 800485a:	600b      	streq	r3, [r1, #0]
 800485c:	6053      	strne	r3, [r2, #4]
 800485e:	4630      	mov	r0, r6
 8004860:	f000 f878 	bl	8004954 <__malloc_unlock>
 8004864:	f104 000b 	add.w	r0, r4, #11
 8004868:	1d23      	adds	r3, r4, #4
 800486a:	f020 0007 	bic.w	r0, r0, #7
 800486e:	1ac2      	subs	r2, r0, r3
 8004870:	d0cc      	beq.n	800480c <_malloc_r+0x20>
 8004872:	1a1b      	subs	r3, r3, r0
 8004874:	50a3      	str	r3, [r4, r2]
 8004876:	e7c9      	b.n	800480c <_malloc_r+0x20>
 8004878:	4622      	mov	r2, r4
 800487a:	6864      	ldr	r4, [r4, #4]
 800487c:	e7cc      	b.n	8004818 <_malloc_r+0x2c>
 800487e:	1cc4      	adds	r4, r0, #3
 8004880:	f024 0403 	bic.w	r4, r4, #3
 8004884:	42a0      	cmp	r0, r4
 8004886:	d0e3      	beq.n	8004850 <_malloc_r+0x64>
 8004888:	1a21      	subs	r1, r4, r0
 800488a:	4630      	mov	r0, r6
 800488c:	f000 f808 	bl	80048a0 <_sbrk_r>
 8004890:	3001      	adds	r0, #1
 8004892:	d1dd      	bne.n	8004850 <_malloc_r+0x64>
 8004894:	e7cf      	b.n	8004836 <_malloc_r+0x4a>
 8004896:	bf00      	nop
 8004898:	20000310 	.word	0x20000310
 800489c:	20000314 	.word	0x20000314

080048a0 <_sbrk_r>:
 80048a0:	b538      	push	{r3, r4, r5, lr}
 80048a2:	4d06      	ldr	r5, [pc, #24]	; (80048bc <_sbrk_r+0x1c>)
 80048a4:	2300      	movs	r3, #0
 80048a6:	4604      	mov	r4, r0
 80048a8:	4608      	mov	r0, r1
 80048aa:	602b      	str	r3, [r5, #0]
 80048ac:	f7fc fc94 	bl	80011d8 <_sbrk>
 80048b0:	1c43      	adds	r3, r0, #1
 80048b2:	d102      	bne.n	80048ba <_sbrk_r+0x1a>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	b103      	cbz	r3, 80048ba <_sbrk_r+0x1a>
 80048b8:	6023      	str	r3, [r4, #0]
 80048ba:	bd38      	pop	{r3, r4, r5, pc}
 80048bc:	2000033c 	.word	0x2000033c

080048c0 <_raise_r>:
 80048c0:	291f      	cmp	r1, #31
 80048c2:	b538      	push	{r3, r4, r5, lr}
 80048c4:	4604      	mov	r4, r0
 80048c6:	460d      	mov	r5, r1
 80048c8:	d904      	bls.n	80048d4 <_raise_r+0x14>
 80048ca:	2316      	movs	r3, #22
 80048cc:	6003      	str	r3, [r0, #0]
 80048ce:	f04f 30ff 	mov.w	r0, #4294967295
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80048d6:	b112      	cbz	r2, 80048de <_raise_r+0x1e>
 80048d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80048dc:	b94b      	cbnz	r3, 80048f2 <_raise_r+0x32>
 80048de:	4620      	mov	r0, r4
 80048e0:	f000 f830 	bl	8004944 <_getpid_r>
 80048e4:	462a      	mov	r2, r5
 80048e6:	4601      	mov	r1, r0
 80048e8:	4620      	mov	r0, r4
 80048ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048ee:	f000 b817 	b.w	8004920 <_kill_r>
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d00a      	beq.n	800490c <_raise_r+0x4c>
 80048f6:	1c59      	adds	r1, r3, #1
 80048f8:	d103      	bne.n	8004902 <_raise_r+0x42>
 80048fa:	2316      	movs	r3, #22
 80048fc:	6003      	str	r3, [r0, #0]
 80048fe:	2001      	movs	r0, #1
 8004900:	e7e7      	b.n	80048d2 <_raise_r+0x12>
 8004902:	2400      	movs	r4, #0
 8004904:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004908:	4628      	mov	r0, r5
 800490a:	4798      	blx	r3
 800490c:	2000      	movs	r0, #0
 800490e:	e7e0      	b.n	80048d2 <_raise_r+0x12>

08004910 <raise>:
 8004910:	4b02      	ldr	r3, [pc, #8]	; (800491c <raise+0xc>)
 8004912:	4601      	mov	r1, r0
 8004914:	6818      	ldr	r0, [r3, #0]
 8004916:	f7ff bfd3 	b.w	80048c0 <_raise_r>
 800491a:	bf00      	nop
 800491c:	20000010 	.word	0x20000010

08004920 <_kill_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4d07      	ldr	r5, [pc, #28]	; (8004940 <_kill_r+0x20>)
 8004924:	2300      	movs	r3, #0
 8004926:	4604      	mov	r4, r0
 8004928:	4608      	mov	r0, r1
 800492a:	4611      	mov	r1, r2
 800492c:	602b      	str	r3, [r5, #0]
 800492e:	f7fc fc39 	bl	80011a4 <_kill>
 8004932:	1c43      	adds	r3, r0, #1
 8004934:	d102      	bne.n	800493c <_kill_r+0x1c>
 8004936:	682b      	ldr	r3, [r5, #0]
 8004938:	b103      	cbz	r3, 800493c <_kill_r+0x1c>
 800493a:	6023      	str	r3, [r4, #0]
 800493c:	bd38      	pop	{r3, r4, r5, pc}
 800493e:	bf00      	nop
 8004940:	2000033c 	.word	0x2000033c

08004944 <_getpid_r>:
 8004944:	f7fc bc26 	b.w	8001194 <_getpid>

08004948 <__malloc_lock>:
 8004948:	4801      	ldr	r0, [pc, #4]	; (8004950 <__malloc_lock+0x8>)
 800494a:	f000 b809 	b.w	8004960 <__retarget_lock_acquire_recursive>
 800494e:	bf00      	nop
 8004950:	20000344 	.word	0x20000344

08004954 <__malloc_unlock>:
 8004954:	4801      	ldr	r0, [pc, #4]	; (800495c <__malloc_unlock+0x8>)
 8004956:	f000 b804 	b.w	8004962 <__retarget_lock_release_recursive>
 800495a:	bf00      	nop
 800495c:	20000344 	.word	0x20000344

08004960 <__retarget_lock_acquire_recursive>:
 8004960:	4770      	bx	lr

08004962 <__retarget_lock_release_recursive>:
 8004962:	4770      	bx	lr

08004964 <_init>:
 8004964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004966:	bf00      	nop
 8004968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800496a:	bc08      	pop	{r3}
 800496c:	469e      	mov	lr, r3
 800496e:	4770      	bx	lr

08004970 <_fini>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr
