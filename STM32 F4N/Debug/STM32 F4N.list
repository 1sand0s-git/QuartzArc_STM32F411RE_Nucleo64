
STM32 F4N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea8  08005ea8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eb0  08005eb0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb4  08005eb4  00015eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  20000074  08005f2c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08005f2c  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_line   00017dc6  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0002eec3  00000000  00000000  00037e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006167  00000000  00000000  00066d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001308  00000000  00000000  0006ce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000a9fc6  00000000  00000000  0006e1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011c0  00000000  00000000  00118168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001eda2  00000000  00000000  00119328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001380ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000542c  00000000  00000000  00138120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000074 	.word	0x20000074
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005d28 	.word	0x08005d28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000078 	.word	0x20000078
 80001d4:	08005d28 	.word	0x08005d28

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b96e 	b.w	80004dc <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468c      	mov	ip, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	f040 8083 	bne.w	800032e <__udivmoddi4+0x116>
 8000228:	428a      	cmp	r2, r1
 800022a:	4617      	mov	r7, r2
 800022c:	d947      	bls.n	80002be <__udivmoddi4+0xa6>
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	b142      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000234:	f1c2 0020 	rsb	r0, r2, #32
 8000238:	fa24 f000 	lsr.w	r0, r4, r0
 800023c:	4091      	lsls	r1, r2
 800023e:	4097      	lsls	r7, r2
 8000240:	ea40 0c01 	orr.w	ip, r0, r1
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbbc f6f8 	udiv	r6, ip, r8
 8000250:	fa1f fe87 	uxth.w	lr, r7
 8000254:	fb08 c116 	mls	r1, r8, r6, ip
 8000258:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800025c:	fb06 f10e 	mul.w	r1, r6, lr
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 8119 	bcs.w	80004a0 <__udivmoddi4+0x288>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8116 	bls.w	80004a0 <__udivmoddi4+0x288>
 8000274:	3e02      	subs	r6, #2
 8000276:	443b      	add	r3, r7
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fe0e 	mul.w	lr, r0, lr
 800028c:	45a6      	cmp	lr, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	193c      	adds	r4, r7, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8105 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800029a:	45a6      	cmp	lr, r4
 800029c:	f240 8102 	bls.w	80004a4 <__udivmoddi4+0x28c>
 80002a0:	3802      	subs	r0, #2
 80002a2:	443c      	add	r4, r7
 80002a4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a8:	eba4 040e 	sub.w	r4, r4, lr
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	b902      	cbnz	r2, 80002c2 <__udivmoddi4+0xaa>
 80002c0:	deff      	udf	#255	; 0xff
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d150      	bne.n	800036c <__udivmoddi4+0x154>
 80002ca:	1bcb      	subs	r3, r1, r7
 80002cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d0:	fa1f f887 	uxth.w	r8, r7
 80002d4:	2601      	movs	r6, #1
 80002d6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002da:	0c21      	lsrs	r1, r4, #16
 80002dc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e4:	fb08 f30c 	mul.w	r3, r8, ip
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xe4>
 80002ec:	1879      	adds	r1, r7, r1
 80002ee:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0xe2>
 80002f4:	428b      	cmp	r3, r1
 80002f6:	f200 80e9 	bhi.w	80004cc <__udivmoddi4+0x2b4>
 80002fa:	4684      	mov	ip, r0
 80002fc:	1ac9      	subs	r1, r1, r3
 80002fe:	b2a3      	uxth	r3, r4
 8000300:	fbb1 f0fe 	udiv	r0, r1, lr
 8000304:	fb0e 1110 	mls	r1, lr, r0, r1
 8000308:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800030c:	fb08 f800 	mul.w	r8, r8, r0
 8000310:	45a0      	cmp	r8, r4
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x10c>
 8000314:	193c      	adds	r4, r7, r4
 8000316:	f100 33ff 	add.w	r3, r0, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x10a>
 800031c:	45a0      	cmp	r8, r4
 800031e:	f200 80d9 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 8000322:	4618      	mov	r0, r3
 8000324:	eba4 0408 	sub.w	r4, r4, r8
 8000328:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800032c:	e7bf      	b.n	80002ae <__udivmoddi4+0x96>
 800032e:	428b      	cmp	r3, r1
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x12e>
 8000332:	2d00      	cmp	r5, #0
 8000334:	f000 80b1 	beq.w	800049a <__udivmoddi4+0x282>
 8000338:	2600      	movs	r6, #0
 800033a:	e9c5 0100 	strd	r0, r1, [r5]
 800033e:	4630      	mov	r0, r6
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	fab3 f683 	clz	r6, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d14a      	bne.n	80003e4 <__udivmoddi4+0x1cc>
 800034e:	428b      	cmp	r3, r1
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0x140>
 8000352:	4282      	cmp	r2, r0
 8000354:	f200 80b8 	bhi.w	80004c8 <__udivmoddi4+0x2b0>
 8000358:	1a84      	subs	r4, r0, r2
 800035a:	eb61 0103 	sbc.w	r1, r1, r3
 800035e:	2001      	movs	r0, #1
 8000360:	468c      	mov	ip, r1
 8000362:	2d00      	cmp	r5, #0
 8000364:	d0a8      	beq.n	80002b8 <__udivmoddi4+0xa0>
 8000366:	e9c5 4c00 	strd	r4, ip, [r5]
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0xa0>
 800036c:	f1c2 0320 	rsb	r3, r2, #32
 8000370:	fa20 f603 	lsr.w	r6, r0, r3
 8000374:	4097      	lsls	r7, r2
 8000376:	fa01 f002 	lsl.w	r0, r1, r2
 800037a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037e:	40d9      	lsrs	r1, r3
 8000380:	4330      	orrs	r0, r6
 8000382:	0c03      	lsrs	r3, r0, #16
 8000384:	fbb1 f6fe 	udiv	r6, r1, lr
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000394:	fb06 f108 	mul.w	r1, r6, r8
 8000398:	4299      	cmp	r1, r3
 800039a:	fa04 f402 	lsl.w	r4, r4, r2
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x19c>
 80003a0:	18fb      	adds	r3, r7, r3
 80003a2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a6:	f080 808d 	bcs.w	80004c4 <__udivmoddi4+0x2ac>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 808a 	bls.w	80004c4 <__udivmoddi4+0x2ac>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	443b      	add	r3, r7
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b281      	uxth	r1, r0
 80003b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c4:	fb00 f308 	mul.w	r3, r0, r8
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x1c4>
 80003cc:	1879      	adds	r1, r7, r1
 80003ce:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d2:	d273      	bcs.n	80004bc <__udivmoddi4+0x2a4>
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d971      	bls.n	80004bc <__udivmoddi4+0x2a4>
 80003d8:	3802      	subs	r0, #2
 80003da:	4439      	add	r1, r7
 80003dc:	1acb      	subs	r3, r1, r3
 80003de:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e2:	e778      	b.n	80002d6 <__udivmoddi4+0xbe>
 80003e4:	f1c6 0c20 	rsb	ip, r6, #32
 80003e8:	fa03 f406 	lsl.w	r4, r3, r6
 80003ec:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f0:	431c      	orrs	r4, r3
 80003f2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f6:	fa01 f306 	lsl.w	r3, r1, r6
 80003fa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000402:	431f      	orrs	r7, r3
 8000404:	0c3b      	lsrs	r3, r7, #16
 8000406:	fbb1 f9fe 	udiv	r9, r1, lr
 800040a:	fa1f f884 	uxth.w	r8, r4
 800040e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000412:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000416:	fb09 fa08 	mul.w	sl, r9, r8
 800041a:	458a      	cmp	sl, r1
 800041c:	fa02 f206 	lsl.w	r2, r2, r6
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x220>
 8000426:	1861      	adds	r1, r4, r1
 8000428:	f109 30ff 	add.w	r0, r9, #4294967295
 800042c:	d248      	bcs.n	80004c0 <__udivmoddi4+0x2a8>
 800042e:	458a      	cmp	sl, r1
 8000430:	d946      	bls.n	80004c0 <__udivmoddi4+0x2a8>
 8000432:	f1a9 0902 	sub.w	r9, r9, #2
 8000436:	4421      	add	r1, r4
 8000438:	eba1 010a 	sub.w	r1, r1, sl
 800043c:	b2bf      	uxth	r7, r7
 800043e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000442:	fb0e 1110 	mls	r1, lr, r0, r1
 8000446:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044a:	fb00 f808 	mul.w	r8, r0, r8
 800044e:	45b8      	cmp	r8, r7
 8000450:	d907      	bls.n	8000462 <__udivmoddi4+0x24a>
 8000452:	19e7      	adds	r7, r4, r7
 8000454:	f100 31ff 	add.w	r1, r0, #4294967295
 8000458:	d22e      	bcs.n	80004b8 <__udivmoddi4+0x2a0>
 800045a:	45b8      	cmp	r8, r7
 800045c:	d92c      	bls.n	80004b8 <__udivmoddi4+0x2a0>
 800045e:	3802      	subs	r0, #2
 8000460:	4427      	add	r7, r4
 8000462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000466:	eba7 0708 	sub.w	r7, r7, r8
 800046a:	fba0 8902 	umull	r8, r9, r0, r2
 800046e:	454f      	cmp	r7, r9
 8000470:	46c6      	mov	lr, r8
 8000472:	4649      	mov	r1, r9
 8000474:	d31a      	bcc.n	80004ac <__udivmoddi4+0x294>
 8000476:	d017      	beq.n	80004a8 <__udivmoddi4+0x290>
 8000478:	b15d      	cbz	r5, 8000492 <__udivmoddi4+0x27a>
 800047a:	ebb3 020e 	subs.w	r2, r3, lr
 800047e:	eb67 0701 	sbc.w	r7, r7, r1
 8000482:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000486:	40f2      	lsrs	r2, r6
 8000488:	ea4c 0202 	orr.w	r2, ip, r2
 800048c:	40f7      	lsrs	r7, r6
 800048e:	e9c5 2700 	strd	r2, r7, [r5]
 8000492:	2600      	movs	r6, #0
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e70b      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e9      	b.n	8000278 <__udivmoddi4+0x60>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6fd      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004a8:	4543      	cmp	r3, r8
 80004aa:	d2e5      	bcs.n	8000478 <__udivmoddi4+0x260>
 80004ac:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b0:	eb69 0104 	sbc.w	r1, r9, r4
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7df      	b.n	8000478 <__udivmoddi4+0x260>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e7d2      	b.n	8000462 <__udivmoddi4+0x24a>
 80004bc:	4660      	mov	r0, ip
 80004be:	e78d      	b.n	80003dc <__udivmoddi4+0x1c4>
 80004c0:	4681      	mov	r9, r0
 80004c2:	e7b9      	b.n	8000438 <__udivmoddi4+0x220>
 80004c4:	4666      	mov	r6, ip
 80004c6:	e775      	b.n	80003b4 <__udivmoddi4+0x19c>
 80004c8:	4630      	mov	r0, r6
 80004ca:	e74a      	b.n	8000362 <__udivmoddi4+0x14a>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	4439      	add	r1, r7
 80004d2:	e713      	b.n	80002fc <__udivmoddi4+0xe4>
 80004d4:	3802      	subs	r0, #2
 80004d6:	443c      	add	r4, r7
 80004d8:	e724      	b.n	8000324 <__udivmoddi4+0x10c>
 80004da:	bf00      	nop

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e4:	480d      	ldr	r0, [pc, #52]	; (800051c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e6:	490e      	ldr	r1, [pc, #56]	; (8000520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004ec:	e002      	b.n	80004f4 <LoopCopyDataInit>

080004ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f2:	3304      	adds	r3, #4

080004f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f8:	d3f9      	bcc.n	80004ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004fc:	4c0b      	ldr	r4, [pc, #44]	; (800052c <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000500:	e001      	b.n	8000506 <LoopFillZerobss>

08000502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000504:	3204      	adds	r2, #4

08000506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000508:	d3fb      	bcc.n	8000502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800050a:	f000 ffc9 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050e:	f005 fb0d 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000512:	f000 fb17 	bl	8000b44 <main>
  bx  lr    
 8000516:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000524:	08005eb8 	.word	0x08005eb8
  ldr r2, =_sbss
 8000528:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800052c:	20000198 	.word	0x20000198

08000530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC_IRQHandler>
	...

08000534 <_Z16SystemInitializev>:
//
//Used to initialize CPU caches, NVIC and SysTick, as well as oscillators, PLLs, system clocks, bus clocks and some peripheral clocks.
//Also enables all GPIOs
//
//Returns QA_OK if successful, or QA_Fail if initialized failed
QA_Result SystemInitialize(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	b098      	sub	sp, #96	; 0x60
 8000538:	af00      	add	r7, sp, #0

	//-----------------------
	//Enable Cache & Prefetch
	__HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a69      	ldr	r2, [pc, #420]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000544:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_DATA_CACHE_ENABLE();
 8000546:	4b67      	ldr	r3, [pc, #412]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a66      	ldr	r2, [pc, #408]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 800054c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000550:	6013      	str	r3, [r2, #0]
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000552:	4b64      	ldr	r3, [pc, #400]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a63      	ldr	r2, [pc, #396]	; (80006e4 <_Z16SystemInitializev+0x1b0>)
 8000558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055c:	6013      	str	r3, [r2, #0]


  //--------------------------
  //Set NVIC Priority Grouping
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055e:	2003      	movs	r0, #3
 8000560:	f001 f8f4 	bl	800174c <HAL_NVIC_SetPriorityGrouping>


  //------------
	//Init SysTick
	if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000564:	2000      	movs	r0, #0
 8000566:	f000 ffad 	bl	80014c4 <HAL_InitTick>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf14      	ite	ne
 8000570:	2301      	movne	r3, #1
 8000572:	2300      	moveq	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <_Z16SystemInitializev+0x4a>
		return QA_Fail;
 800057a:	2301      	movs	r3, #1
 800057c:	e0ad      	b.n	80006da <_Z16SystemInitializev+0x1a6>


	//-------------------------
	//Setup Power Configuration
	__HAL_RCC_PWR_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61bb      	str	r3, [r7, #24]
 8000582:	4b59      	ldr	r3, [pc, #356]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	4a58      	ldr	r2, [pc, #352]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000596:	61bb      	str	r3, [r7, #24]
 8000598:	69bb      	ldr	r3, [r7, #24]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	4b53      	ldr	r3, [pc, #332]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a52      	ldr	r2, [pc, #328]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005a8:	6013      	str	r3, [r2, #0]
 80005aa:	4b50      	ldr	r3, [pc, #320]	; (80006ec <_Z16SystemInitializev+0x1b8>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	697b      	ldr	r3, [r7, #20]

  //---------------------
  //Configure Oscillators
  //
  //Configure High Speed External oscillator to be used, and setup primary PLL to provide a 100MHz clock
  RCC_OscInitTypeDef RCC_OscInit = {0};
 80005b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ba:	2230      	movs	r2, #48	; 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f005 faee 	bl	8005ba0 <memset>
  RCC_OscInit.OscillatorType = RCC_OSCILLATORTYPE_HSE; //Define which oscillator is to be configured
 80005c4:	2301      	movs	r3, #1
 80005c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInit.HSEState       = RCC_HSE_BYPASS;         //Set High Speed External oscillator as system clock
 80005c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInit.PLL.PLLState   = RCC_PLL_ON;             //Enable primary PLL
 80005ce:	2302      	movs	r3, #2
 80005d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInit.PLL.PLLSource  = RCC_PLLSOURCE_HSE;      //Set High Speed External oscillator as PLL input clock
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c

    //Set PLL values required for 100MHz system clock
  RCC_OscInit.PLL.PLLM       = 2;
 80005d8:	2302      	movs	r3, #2
 80005da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInit.PLL.PLLN       = 50;
 80005dc:	2332      	movs	r3, #50	; 0x32
 80005de:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInit.PLL.PLLP       = RCC_PLLP_DIV2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInit.PLL.PLLQ       = 4;
 80005e4:	2304      	movs	r3, #4
 80005e6:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_RCC_OscConfig(&RCC_OscInit) != HAL_OK) {     //Initialize Oscillators using values in init structure
 80005e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fb8b 	bl	8001d08 <HAL_RCC_OscConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	bf14      	ite	ne
 80005f8:	2301      	movne	r3, #1
 80005fa:	2300      	moveq	r3, #0
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <_Z16SystemInitializev+0xd2>
    return QA_Fail;
 8000602:	2301      	movs	r3, #1
 8000604:	e069      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //-------------------
  //Enable SysCfg Clock
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060e:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000614:	6453      	str	r3, [r2, #68]	; 0x44
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]


  //--------------------------
  //Configure CPU & Bus Clocks
  RCC_ClkInitTypeDef RCC_ClkInit = {0};
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]
  RCC_ClkInit.ClockType      = RCC_CLOCKTYPE_HCLK |       //Define which clocks are to be configured (HCLK, SYSCLK, PCLK1, PCLK2)
 8000632:	230f      	movs	r3, #15
 8000634:	61fb      	str	r3, [r7, #28]
  		                         RCC_CLOCKTYPE_SYSCLK |
															 RCC_CLOCKTYPE_PCLK1 |
															 RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInit.SYSCLKSource   = RCC_SYSCLKSOURCE_PLLCLK;   //Set primary PLL as system clock source
 8000636:	2302      	movs	r3, #2
 8000638:	623b      	str	r3, [r7, #32]
  RCC_ClkInit.AHBCLKDivider  = RCC_SYSCLK_DIV1;           //Set clock divider for host bus (AHB), DIV1 provides an AHB frequency of 100MHz
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInit.APB1CLKDivider = RCC_HCLK_DIV2;             //Set clock divider for peripheral bus 1 (APB1), DIV2 provides an APB1 frequency of 50MHz
 800063e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000642:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInit.APB2CLKDivider = RCC_HCLK_DIV1;             //Set clock divider for peripheral bus 2 (APB2), DIV1 provides an APB2 frequency of 100MHz
 8000644:	2300      	movs	r3, #0
 8000646:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInit, FLASH_LATENCY_4) != HAL_OK) { //Initialize system clocks using required values, and setting Flash Latency to 4 cycles
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2104      	movs	r1, #4
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fdd2 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	bf14      	ite	ne
 800065a:	2301      	movne	r3, #1
 800065c:	2300      	moveq	r3, #0
 800065e:	b2db      	uxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <_Z16SystemInitializev+0x134>
  	return QA_Fail;
 8000664:	2301      	movs	r3, #1
 8000666:	e038      	b.n	80006da <_Z16SystemInitializev+0x1a6>
  }


  //------------------
  //Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800066e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000670:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6313      	str	r3, [r2, #48]	; 0x30
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067c:	f003 0301 	and.w	r3, r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068c:	4a16      	ldr	r2, [pc, #88]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	6313      	str	r3, [r2, #48]	; 0x30
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	f003 0302 	and.w	r3, r3, #2
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006c6:	f043 0308 	orr.w	r3, r3, #8
 80006ca:	6313      	str	r3, [r2, #48]	; 0x30
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <_Z16SystemInitializev+0x1b4>)
 80006ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]


  //Return
  return QA_OK;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3760      	adds	r7, #96	; 0x60
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023c00 	.word	0x40023c00
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <NMI_Handler>:
  //---------------------------
  //Exception Handler Functions

//NMI_Handler
//Exception Handler Function
void  NMI_Handler(void) {
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0

}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr

080006fe <HardFault_Handler>:


//HardFault_Handler
//Exception Handler Function
void  HardFault_Handler(void) {
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  while (1) {}
 8000702:	e7fe      	b.n	8000702 <HardFault_Handler+0x4>

08000704 <MemManage_Handler>:
}


//MemManage_Handler
//Exception Handler Function
void  MemManage_Handler(void) {
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  while (1) {}
 8000708:	e7fe      	b.n	8000708 <MemManage_Handler+0x4>

0800070a <BusFault_Handler>:
}


//BusFault_Handler
//Exception Handler Function
void  BusFault_Handler(void) {
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  while (1) {}
 800070e:	e7fe      	b.n	800070e <BusFault_Handler+0x4>

08000710 <UsageFault_Handler>:
}


//UsageFault_Handler
//Exception Handler Function
void  UsageFault_Handler(void) {
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  while (1) {}
 8000714:	e7fe      	b.n	8000714 <UsageFault_Handler+0x4>

08000716 <SVC_Handler>:
}


//SVC_Handler
//Exception Handler Function
void  SVC_Handler(void) {
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0

}
 800071a:	bf00      	nop
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <DebugMon_Handler>:


//DebugMon_Handler
//Exception Handler Function
void  DebugMon_Handler(void) {
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

}
 8000728:	bf00      	nop
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <PendSV_Handler>:


//PendSV_Handler
//Exception Handler Function
void  PendSV_Handler(void) {
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <SysTick_Handler>:


//SysTick_Handler
//Exception Handler Function
void  SysTick_Handler(void) {
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000744:	f000 feee 	bl	8001524 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8000748:	f001 f84f 	bl	80017ea <HAL_SYSTICK_IRQHandler>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}

08000750 <USART2_IRQHandler>:

//USART2_IRQHandler
//Interrupt Handler Method
//
//This is used for TX and RX interrupts for serial over ST-Link
void USART2_IRQHandler(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	UART_STLink->handler(NULL); //Calls interrupt handler method in QAD_Serial_Dev_UART class
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <USART2_IRQHandler+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f004 feb2 	bl	80054c4 <_ZN19QAS_Serial_Dev_Base7handlerEPv>
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	20000094 	.word	0x20000094

08000768 <EXTI15_10_IRQHandler>:

//EXTI15_10_IRQHandler
//Interrupt Handler Method
//
//This is currently used for testing of the QAD_EXTI driver class
void EXTI15_10_IRQHandler(void) {
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  EXTI_Test->handler();  //Calls interrupt handler method in QAD_EXTI driver class
 800076c:	4b03      	ldr	r3, [pc, #12]	; (800077c <EXTI15_10_IRQHandler+0x14>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4618      	mov	r0, r3
 8000772:	f003 f857 	bl	8003824 <_ZN8QAD_EXTI7handlerEv>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000098 	.word	0x20000098

08000780 <TIM2_IRQHandler>:

//TIM2_IRQHandler
//Interrupt Handler Method
//
//This is currently used for testing of the QAD_Timer driver class
void TIM2_IRQHandler(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  Timer_Test->handler();  //Calls interrupt handler method in QAD_Timer driver class
 8000784:	4b03      	ldr	r3, [pc, #12]	; (8000794 <TIM2_IRQHandler+0x14>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4618      	mov	r0, r3
 800078a:	f003 ff1e 	bl	80045ca <_ZN9QAD_Timer7handlerEv>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000009c 	.word	0x2000009c

08000798 <_ZN9QAD_TimerC1ER20QAD_Timer_InitStruct>:
	//--------------------------
	//Constructors / Destructors

	QAD_Timer() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	QAD_Timer(QAD_Timer_InitStruct& sInit) :  //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
		m_eTimer(sInit.eTimer),
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	781a      	ldrb	r2, [r3, #0]
		m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_pHandlerFunction(NULL),
		m_pHandlerClass(NULL),
		m_uIRQCounterTarget(sInit.uCounterTarget),
		m_uIRQCounterValue(0) {}
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2248      	movs	r2, #72	; 0x48
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 f9f4 	bl	8005ba0 <memset>
		m_eMode(sInit.eMode),
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	785a      	ldrb	r2, [r3, #1]
		m_uIRQCounterValue(0) {}
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		m_uPrescaler(sInit.uPrescaler),
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685a      	ldr	r2, [r3, #4]
		m_uIRQCounterValue(0) {}
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	651a      	str	r2, [r3, #80]	; 0x50
		m_uPeriod(sInit.uPeriod),
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	689a      	ldr	r2, [r3, #8]
		m_uIRQCounterValue(0) {}
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	655a      	str	r2, [r3, #84]	; 0x54
		m_uIRQPriority(sInit.uIRQPriority),
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	7b1a      	ldrb	r2, [r3, #12]
		m_uIRQCounterValue(0) {}
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	661a      	str	r2, [r3, #96]	; 0x60
		m_uIRQCounterTarget(sInit.uCounterTarget),
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	89da      	ldrh	r2, [r3, #14]
		m_uIRQCounterValue(0) {}
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZN11QAD_EncoderC1ER22QAD_Encoder_InitStruct>:
	//--------------------------
	//Constructors / Destructors

  QAD_Encoder() = delete;                        //Delete the default class constructor, as we need an initialization structor to be provided on class creation

  QAD_Encoder(QAD_Encoder_InitStruct& sInit) :  //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	6039      	str	r1, [r7, #0]
		m_eState(QA_Inactive),
		m_uValueOld(0),
		m_uValueNew(0),
		m_iValue(0),
		m_uAccel(0),
		m_eMode(sInit.eMode) {};
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000824:	801a      	strh	r2, [r3, #0]
  	m_pCh1_GPIO(sInit.pCh1_GPIO),
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	681a      	ldr	r2, [r3, #0]
		m_eMode(sInit.eMode) {};
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	605a      	str	r2, [r3, #4]
		m_uCh1_Pin(sInit.uCh1_Pin),
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	889a      	ldrh	r2, [r3, #4]
		m_eMode(sInit.eMode) {};
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	811a      	strh	r2, [r3, #8]
		m_uCh1_AF(sInit.uCh1_AF),
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	799a      	ldrb	r2, [r3, #6]
		m_eMode(sInit.eMode) {};
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	729a      	strb	r2, [r3, #10]
		m_pCh2_GPIO(sInit.pCh2_GPIO),
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	689a      	ldr	r2, [r3, #8]
		m_eMode(sInit.eMode) {};
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60da      	str	r2, [r3, #12]
		m_uCh2_Pin(sInit.uCh2_Pin),
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	899a      	ldrh	r2, [r3, #12]
		m_eMode(sInit.eMode) {};
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	821a      	strh	r2, [r3, #16]
		m_uCh2_AF(sInit.uCh2_AF),
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	7b9a      	ldrb	r2, [r3, #14]
		m_eMode(sInit.eMode) {};
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	749a      	strb	r2, [r3, #18]
		m_eTimer(sInit.eTimer),
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	7bda      	ldrb	r2, [r3, #15]
		m_eMode(sInit.eMode) {};
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	74da      	strb	r2, [r3, #19]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3314      	adds	r3, #20
 8000862:	2248      	movs	r2, #72	; 0x48
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f005 f99a 	bl	8005ba0 <memset>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2200      	movs	r2, #0
 8000870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	7c1a      	ldrb	r2, [r3, #16]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <_ZN26QAD_PWM_Channel_InitStructaSERKS_>:
	uint8_t        uAF;      //Alternate function used to connect the GPIO pin to the respective timer peripheral


	//Assignment operator definition to allow easy copying of channel data from QAD_PWM_InitStruct to
	//members of m_sChannels array in QAD_PWM driver class
	QAD_PWM_Channel_InitStruct& operator=(const QAD_PWM_Channel_InitStruct& other) {
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
		eActive   = other.eActive;
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	701a      	strb	r2, [r3, #0]
		pGPIO     = other.pGPIO;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	685a      	ldr	r2, [r3, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	605a      	str	r2, [r3, #4]
		uPin      = other.uPin;
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	891a      	ldrh	r2, [r3, #8]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	811a      	strh	r2, [r3, #8]
		uAF       = other.uAF;
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	7a9a      	ldrb	r2, [r3, #10]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	729a      	strb	r2, [r3, #10]
		return *this;
 80008da:	687b      	ldr	r3, [r7, #4]
	}
 80008dc:	4618      	mov	r0, r3
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct>:
  //--------------------------
	//Constructors / Destructors

  QAD_PWM() = delete;                   //Delete the default class constructor, as we need an initialization structure to be provided on class creation

  QAD_PWM(QAD_PWM_InitStruct& sInit) :  //The class constructor to be used, which has a reference to an initialization structure passed to it
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  	m_eInitState(QA_NotInitialized),
		m_eState(QA_Inactive),
		m_eTimer(sInit.eTimer),
		m_sHandle({0}),
		m_uPrescaler(sInit.uPrescaler),
		m_uPeriod(sInit.uPeriod) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2200      	movs	r2, #0
 80008fc:	705a      	strb	r2, [r3, #1]
		m_eTimer(sInit.eTimer),
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	781a      	ldrb	r2, [r3, #0]
		m_uPeriod(sInit.uPeriod) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	709a      	strb	r2, [r3, #2]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3304      	adds	r3, #4
 800090a:	2248      	movs	r2, #72	; 0x48
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f005 f946 	bl	8005ba0 <memset>
		m_uPrescaler(sInit.uPrescaler),
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	685a      	ldr	r2, [r3, #4]
		m_uPeriod(sInit.uPeriod) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	64da      	str	r2, [r3, #76]	; 0x4c
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	651a      	str	r2, [r3, #80]	; 0x50
 8000924:	2303      	movs	r3, #3
 8000926:	2b00      	cmp	r3, #0
 8000928:	db01      	blt.n	800092e <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x46>
 800092a:	3b01      	subs	r3, #1
 800092c:	e7fb      	b.n	8000926 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x3e>

  	//Copy channel specific data from initialization structure to m_sChannels array in QAD_PWM class
  	for (uint8_t i=0; i<QAD_PWM_CHANNEL_COUNT; i++) {
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	2b03      	cmp	r3, #3
 8000936:	d818      	bhi.n	800096a <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x82>
  		m_sChannels[i] = sInit.sChannels[i];
 8000938:	7bfa      	ldrb	r2, [r7, #15]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	3350      	adds	r3, #80	; 0x50
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4413      	add	r3, r2
 8000948:	1d18      	adds	r0, r3, #4
 800094a:	7bfa      	ldrb	r2, [r7, #15]
 800094c:	4613      	mov	r3, r2
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	4413      	add	r3, r2
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	3308      	adds	r3, #8
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	4413      	add	r3, r2
 800095a:	3304      	adds	r3, #4
 800095c:	4619      	mov	r1, r3
 800095e:	f7ff ffa7 	bl	80008b0 <_ZN26QAD_PWM_Channel_InitStructaSERKS_>
  	for (uint8_t i=0; i<QAD_PWM_CHANNEL_COUNT; i++) {
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	3301      	adds	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e7e3      	b.n	8000932 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct+0x4a>
  	}

  	//Fill out m_uChannelSelect array with TIM_Channel defines
  	m_uChannelSelect[QAD_PWM_Channel_1] = TIM_CHANNEL_1;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  	m_uChannelSelect[QAD_PWM_Channel_2] = TIM_CHANNEL_2;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2204      	movs	r2, #4
 8000976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  	m_uChannelSelect[QAD_PWM_Channel_3] = TIM_CHANNEL_3;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2208      	movs	r2, #8
 800097e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  	m_uChannelSelect[QAD_PWM_Channel_4] = TIM_CHANNEL_4;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	220c      	movs	r2, #12
 8000986:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4618      	mov	r0, r3
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_ZN14QAT_FIFOBufferC1Et>:
	//--------------------------
  //Constructors / Destructors

	QAT_FIFOBuffer() = delete;         //Delete default class constructor, as the buffer size needs to be supplied upon class creation

	QAT_FIFOBuffer(uint16_t uSize) :   //Constructor to be used, which has the buffer size (in bytes) passed to it
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	460b      	mov	r3, r1
 800099e:	807b      	strh	r3, [r7, #2]
		m_pBuffer(std::make_unique<uint8_t[]>(uSize)),
		m_uSize(uSize),
		m_uReadIdx(0),
		m_uWriteIdx(0) {}
 80009a0:	887a      	ldrh	r2, [r7, #2]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4611      	mov	r1, r2
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 fad2 	bl	8000f50 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	887a      	ldrh	r2, [r7, #2]
 80009b0:	809a      	strh	r2, [r3, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2200      	movs	r2, #0
 80009b6:	80da      	strh	r2, [r3, #6]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	811a      	strh	r2, [r3, #8]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>:

	//Main class contructor
	//uTXFIFOSize - the size in bytes for the TX FIFO buffer
	//uRXFIFOSize - the size in bytes for the RX FIFO buffer
	//eDeviceType - A member of the DeviceType enum to define what type of serial device is being used
	QAS_Serial_Dev_Base(uint16_t uTXFIFOSize, uint16_t uRXFIFOSize, DeviceType eDeviceType) : //The class constructor to be used,
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4603      	mov	r3, r0
 80009d8:	817b      	strh	r3, [r7, #10]
 80009da:	460b      	mov	r3, r1
 80009dc:	813b      	strh	r3, [r7, #8]
 80009de:	4613      	mov	r3, r2
 80009e0:	71fb      	strb	r3, [r7, #7]
		m_pTXFIFO(std::make_unique<QAT_FIFOBuffer>(uTXFIFOSize)),   //Create TX FIFO class with size in bytes provided in uTXFIFOSize
		m_pRXFIFO(std::make_unique<QAT_FIFOBuffer>(uRXFIFOSize)),   //Create RX FIFO class with size in bytes provided in uRXFIFOSize
		m_eInitState(QA_NotInitialized),                            //Set Init State to not initialized
		m_eTXState(QA_Inactive),                                    //Set TX State to inactive
		m_eRXState(QA_Inactive),                                    //Set RX State to inactive
		m_eDeviceType(eDeviceType) {}                               //Set
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE+0x64>)
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	3304      	adds	r3, #4
 80009ec:	f107 020a 	add.w	r2, r7, #10
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fac8 	bl	8000f88 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	3308      	adds	r3, #8
 80009fc:	f107 0208 	add.w	r2, r7, #8
 8000a00:	4611      	mov	r1, r2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 fac0 	bl	8000f88 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	731a      	strb	r2, [r3, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	2200      	movs	r2, #0
 8000a12:	735a      	strb	r2, [r3, #13]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2200      	movs	r2, #0
 8000a18:	739a      	strb	r2, [r3, #14]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	79fa      	ldrb	r2, [r7, #7]
 8000a1e:	73da      	strb	r2, [r3, #15]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	08005e38 	.word	0x08005e38

08000a30 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>:
	  //Constructors / Destructors

	QAD_UART() = delete;                     //Delete the default class constructor, as we need an initialization structure to be provided on class creation


	QAD_UART(QAD_UART_InitStruct& pInit) :   //The class constructor to be used, which has a reference to an initialization structure passed to it
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
		m_uRXPin(pInit.rxpin),
		m_uRXAF(pInit.rxaf),
		m_eIRQ(USART1_IRQn),
		m_sHandle({0}),
		m_eTXState(QA_Inactive),
		m_eRXState(QA_Inactive) {}
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
		m_eUART(pInit.uart),
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	781a      	ldrb	r2, [r3, #0]
		m_eRXState(QA_Inactive) {}
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	705a      	strb	r2, [r3, #1]
		m_uBaudrate(pInit.baudrate),
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685a      	ldr	r2, [r3, #4]
		m_eRXState(QA_Inactive) {}
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	605a      	str	r2, [r3, #4]
		m_uIRQPriority(pInit.irqpriority),
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	7a1a      	ldrb	r2, [r3, #8]
		m_eRXState(QA_Inactive) {}
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	721a      	strb	r2, [r3, #8]
		m_pTXGPIO(pInit.txgpio),
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
		m_eRXState(QA_Inactive) {}
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60da      	str	r2, [r3, #12]
		m_uTXPin(pInit.txpin),
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	8a1a      	ldrh	r2, [r3, #16]
		m_eRXState(QA_Inactive) {}
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	821a      	strh	r2, [r3, #16]
		m_uTXAF(pInit.txaf),
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	7c9a      	ldrb	r2, [r3, #18]
		m_eRXState(QA_Inactive) {}
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	749a      	strb	r2, [r3, #18]
		m_pRXGPIO(pInit.rxgpio),
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	695a      	ldr	r2, [r3, #20]
		m_eRXState(QA_Inactive) {}
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	615a      	str	r2, [r3, #20]
		m_uRXPin(pInit.rxpin),
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	8b1a      	ldrh	r2, [r3, #24]
		m_eRXState(QA_Inactive) {}
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	831a      	strh	r2, [r3, #24]
		m_uRXAF(pInit.rxaf),
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	7e9a      	ldrb	r2, [r3, #26]
		m_eRXState(QA_Inactive) {}
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	769a      	strb	r2, [r3, #26]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2225      	movs	r2, #37	; 0x25
 8000a8c:	76da      	strb	r2, [r3, #27]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	331c      	adds	r3, #28
 8000a92:	2244      	movs	r2, #68	; 0x44
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f005 f882 	bl	8005ba0 <memset>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>:
	//Constructors / Destructors

	QAS_Serial_Dev_UART() = delete;       //Delete the default class constructor, as we need an initialization structure to be provided on class creation

	//The class constructor to be used, which has a reference to a QAS_Serial_Dev_UART_InitStruct passed to it
  QAS_Serial_Dev_UART(QAS_Serial_Dev_UART_InitStruct& sInit) :
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  	QAS_Serial_Dev_Base(sInit.uTXFIFO_Size, sInit.uRXFIFO_Size, DT_UART),
		m_ePeriph(sInit.sUART_Init.uart),
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000ac2:	6878      	ldr	r0, [r7, #4]
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	8b99      	ldrh	r1, [r3, #28]
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	8bda      	ldrh	r2, [r3, #30]
 8000acc:	2300      	movs	r3, #0
 8000ace:	f7ff ff7b 	bl	80009c8 <_ZN19QAS_Serial_Dev_BaseC1EttNS_10DeviceTypeE>
 8000ad2:	4a09      	ldr	r2, [pc, #36]	; (8000af8 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	601a      	str	r2, [r3, #0]
		m_ePeriph(sInit.sUART_Init.uart),
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	781a      	ldrb	r2, [r3, #0]
		m_pUART(std::make_unique<QAD_UART>(sInit.sUART_Init)) {}
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	741a      	strb	r2, [r3, #16]
 8000ae0:	683a      	ldr	r2, [r7, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3314      	adds	r3, #20
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fa68 	bl	8000fbe <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	08005e8c 	.word	0x08005e8c

08000afc <_Z17EXTI_Test_HandlerPv>:
//Driver class for testing EXTI driver functionality (driver defined in QAD_EXTI.hpp)
QAD_EXTI* EXTI_Test;

//Callback function for testing EXTI driver functionality
//This is the method that will be called when the EXTI interrupt is triggered
void EXTI_Test_Handler(void* pData) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	UART_STLink->txStringCR("Interrupt Triggered");
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <_Z17EXTI_Test_HandlerPv+0x1c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4904      	ldr	r1, [pc, #16]	; (8000b1c <_Z17EXTI_Test_HandlerPv+0x20>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f004 fd14 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000094 	.word	0x20000094
 8000b1c:	08005d40 	.word	0x08005d40

08000b20 <_Z18Timer_Test_HandlerPv>:
//Driver class for testing Timer interrupt driver functionality (driver defined in QAD_Timer.hpp)
QAD_Timer* Timer_Test;

//Callback function for testing Timer interrupt driver functionality
//This is the method that will be called when the Timer Update interrupt is triggered
void Timer_Test_Handler(void* pData) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	UART_STLink->txStringCR("Timer Triggered");
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <_Z18Timer_Test_HandlerPv+0x1c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4904      	ldr	r1, [pc, #16]	; (8000b40 <_Z18Timer_Test_HandlerPv+0x20>)
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f004 fd02 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000094 	.word	0x20000094
 8000b40:	08005d54 	.word	0x08005d54

08000b44 <main>:
//main
//Application entry Point
//
//This is the first C++ function to be called when the microcontroller starts up
//This function is called by the assembly language in startup_stm32f411retx.s
int main(void) {
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b0a9      	sub	sp, #164	; 0xa4
 8000b48:	af00      	add	r7, sp, #0


	//Calls the SystemInitialize method located within boot.hpp, which initializes the
	//CPU caches, as well as the PLLs, system, bus and some peripheral clocks.
	//All GPIOs are also enabled by this method.
	if (SystemInitialize()) {
 8000b4a:	f7ff fcf3 	bl	8000534 <_Z16SystemInitializev>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	bf14      	ite	ne
 8000b54:	2301      	movne	r3, #1
 8000b56:	2300      	moveq	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d000      	beq.n	8000b60 <main+0x1c>
		while (1) {}
 8000b5e:	e7fe      	b.n	8000b5e <main+0x1a>


	//----------------------------------
	//Initialize the User LED using the QAD_GPIO_Output driver class.
	//QAD_USERLED_GPIO_PORT and QAD_USERLED_GPIO_PIN are defined in setup.hpp
	GPIO_UserLED = new QAD_GPIO_Output(QAD_USERLED_GPIO_PORT, QAD_USERLED_GPIO_PIN);
 8000b60:	2014      	movs	r0, #20
 8000b62:	f004 ffa4 	bl	8005aae <_Znwj>
 8000b66:	4603      	mov	r3, r0
 8000b68:	461c      	mov	r4, r3
 8000b6a:	2220      	movs	r2, #32
 8000b6c:	49b8      	ldr	r1, [pc, #736]	; (8000e50 <main+0x30c>)
 8000b6e:	4620      	mov	r0, r4
 8000b70:	f003 fa16 	bl	8003fa0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>
 8000b74:	4bb7      	ldr	r3, [pc, #732]	; (8000e54 <main+0x310>)
 8000b76:	601c      	str	r4, [r3, #0]
	//Initialize UART2, which is used to communicate over serial via the STLINK connection
	//Baudrates, IRQ Priorities, GPIO details and FIFO sizes are defined in setup.hpp

	//Fill out initialization structure required to create UART class (defined in QAS_Serial_Dev_UART.hpp)
  QAS_Serial_Dev_UART_InitStruct sSerialInit;
  sSerialInit.sUART_Init.uart        = QAD_UART2;                //Define the UART peripheral to be used (enum defined in QAD_UART.hpp)
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  sSerialInit.sUART_Init.baudrate    = QAD_UART2_BAUDRATE;       //Define the baudrate to be used by the UART peripheral
 8000b7e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000b82:	66bb      	str	r3, [r7, #104]	; 0x68
  sSerialInit.sUART_Init.irqpriority = QAD_IRQPRIORITY_UART2;    //Defined the IRQ priority to be used by the TX and RX interrupts
 8000b84:	2308      	movs	r3, #8
 8000b86:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  sSerialInit.sUART_Init.txgpio      = QAD_UART2_TX_PORT;        //Define the GPIO port for the TX pin
 8000b8a:	4bb1      	ldr	r3, [pc, #708]	; (8000e50 <main+0x30c>)
 8000b8c:	673b      	str	r3, [r7, #112]	; 0x70
  sSerialInit.sUART_Init.txpin       = QAD_UART2_TX_PIN;         //Define the pin number for the TX pin
 8000b8e:	2304      	movs	r3, #4
 8000b90:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  sSerialInit.sUART_Init.txaf        = QAD_UART2_TX_AF;          //Define the alternate function for the TX pin
 8000b94:	2307      	movs	r3, #7
 8000b96:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
  sSerialInit.sUART_Init.rxgpio      = QAD_UART2_RX_PORT;        //Define the GPIO port for the RX pin
 8000b9a:	4bad      	ldr	r3, [pc, #692]	; (8000e50 <main+0x30c>)
 8000b9c:	67bb      	str	r3, [r7, #120]	; 0x78
  sSerialInit.sUART_Init.rxpin       = QAD_UART2_RX_PIN;         //Define the pin number for the RX pin
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
  sSerialInit.sUART_Init.rxaf        = QAD_UART2_RX_AF;          //Define the alternate function for the TX pin
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
  sSerialInit.uTXFIFO_Size           = QAD_UART2_TX_FIFOSIZE;    //Define the size (in bytes) for the transmit FIFO
 8000baa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bae:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
  sSerialInit.uRXFIFO_Size           = QAD_UART2_RX_FIFOSIZE;    //Define the size (in bytes) for the receive FIFO
 8000bb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb6:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82

  //Create the UART class, passing to it a reference to the initialization structure
  UART_STLink = new QAS_Serial_Dev_UART(sSerialInit);
 8000bba:	2018      	movs	r0, #24
 8000bbc:	f004 ff77 	bl	8005aae <_Znwj>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	461c      	mov	r4, r3
 8000bc4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4620      	mov	r0, r4
 8000bcc:	f7ff ff74 	bl	8000ab8 <_ZN19QAS_Serial_Dev_UARTC1ER30QAS_Serial_Dev_UART_InitStruct>
 8000bd0:	4ba1      	ldr	r3, [pc, #644]	; (8000e58 <main+0x314>)
 8000bd2:	601c      	str	r4, [r3, #0]

  //If initialization failed then turn on user LED and jump into infinite loop
  if (UART_STLink->init(NULL) == QA_Fail) {
 8000bd4:	4ba0      	ldr	r3, [pc, #640]	; (8000e58 <main+0x314>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 fc52 	bl	8005484 <_ZN19QAS_Serial_Dev_Base4initEPv>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	bf0c      	ite	eq
 8000be6:	2301      	moveq	r3, #1
 8000be8:	2300      	movne	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d005      	beq.n	8000bfc <main+0xb8>
  	GPIO_UserLED->on();
 8000bf0:	4b98      	ldr	r3, [pc, #608]	; (8000e54 <main+0x310>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f003 f9f4 	bl	8003fe2 <_ZN15QAD_GPIO_Output2onEv>
    while (1) {}
 8000bfa:	e7fe      	b.n	8000bfa <main+0xb6>
  }

  //If initialization succeeded then output a message via serial
  UART_STLink->txCR();
 8000bfc:	4b96      	ldr	r3, [pc, #600]	; (8000e58 <main+0x314>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fccd 	bl	80055a0 <_ZN19QAS_Serial_Dev_Base4txCREv>
  UART_STLink->txStringCR("STM32F411 Nucleo64 Booting...");
 8000c06:	4b94      	ldr	r3, [pc, #592]	; (8000e58 <main+0x314>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4994      	ldr	r1, [pc, #592]	; (8000e5c <main+0x318>)
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fc93 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//----------------------------------
  //Initialize a QAD_EXTI driver class to test EXTI functionality (defined in QAD_EXTI.hpp)
  //QAD_USERBUTTON_GPIO_PORT and QAD_USERBUTTON_GPIO_PIN are defined in setup.hpp

  //Create the driver class, passing to it the GPIO port and pin that are to be used
  EXTI_Test = new QAD_EXTI(QAD_USERBUTTON_GPIO_PORT, QAD_USERBUTTON_GPIO_PIN);
 8000c12:	201c      	movs	r0, #28
 8000c14:	f004 ff4b 	bl	8005aae <_Znwj>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461c      	mov	r4, r3
 8000c1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c20:	498f      	ldr	r1, [pc, #572]	; (8000e60 <main+0x31c>)
 8000c22:	4620      	mov	r0, r4
 8000c24:	f002 fdda 	bl	80037dc <_ZN8QAD_EXTIC1EP12GPIO_TypeDeft>
 8000c28:	4b8e      	ldr	r3, [pc, #568]	; (8000e64 <main+0x320>)
 8000c2a:	601c      	str	r4, [r3, #0]

  //Set the interrupt handler function that is to be called by the driver class when the
  //external interrupt is triggered
  EXTI_Test->setHandlerFunction(EXTI_Test_Handler);
 8000c2c:	4b8d      	ldr	r3, [pc, #564]	; (8000e64 <main+0x320>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	498d      	ldr	r1, [pc, #564]	; (8000e68 <main+0x324>)
 8000c32:	4618      	mov	r0, r3
 8000c34:	f002 fe26 	bl	8003884 <_ZN8QAD_EXTI18setHandlerFunctionEPFvPvE>
  //Initialize a QAD_Timer driver class to test functionality (defined in QAD_Timer.hpp)
  //QAD_Timer driver is used to trigger interrupts at regular intervals

  //Fill out the initialization structure required to create the driver class (defined in QAD_Timer.hpp)
  QAD_Timer_InitStruct Timer_Test_Init;
  Timer_Test_Init.eTimer         = QAD_Timer2;          //Define the timer peripheral is to be used (enum defined in QAD_TimerMgr.hpp)
 8000c38:	2301      	movs	r3, #1
 8000c3a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  Timer_Test_Init.eMode          = QAD_TimerMultiple;   //Define which mode to use (Continuous, Multiple or Single)
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  Timer_Test_Init.uPrescaler     = 20000;               //Define the timer prescaler
 8000c44:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000c48:	65bb      	str	r3, [r7, #88]	; 0x58
  Timer_Test_Init.uPeriod        = 5000;                //Define the timer period
 8000c4a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c4e:	65fb      	str	r3, [r7, #92]	; 0x5c
  Timer_Test_Init.uIRQPriority   = 0x9;                 //Set the interrupt priority
 8000c50:	2309      	movs	r3, #9
 8000c52:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
  Timer_Test_Init.uCounterTarget = 6;                   //Set the counter target (used when driver is in Multiple mode)
 8000c56:	2306      	movs	r3, #6
 8000c58:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

  //Create the timer class, passing it a reference to the initialization structure
  //Driver class is created in an uninitialized state
  Timer_Test = new QAD_Timer(Timer_Test_Init);
 8000c5c:	2068      	movs	r0, #104	; 0x68
 8000c5e:	f004 ff26 	bl	8005aae <_Znwj>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461c      	mov	r4, r3
 8000c66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	f7ff fd93 	bl	8000798 <_ZN9QAD_TimerC1ER20QAD_Timer_InitStruct>
 8000c72:	4b7e      	ldr	r3, [pc, #504]	; (8000e6c <main+0x328>)
 8000c74:	601c      	str	r4, [r3, #0]

  //Initialize the timer class, and if initialization fails (returns true) the turn on
  //User LED, output failed message via serial and enter infinite loop
  if (Timer_Test->init()) {
 8000c76:	4b7d      	ldr	r3, [pc, #500]	; (8000e6c <main+0x328>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fc7a 	bl	8004574 <_ZN9QAD_Timer4initEv>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	bf14      	ite	ne
 8000c86:	2301      	movne	r3, #1
 8000c88:	2300      	moveq	r3, #0
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d00b      	beq.n	8000ca8 <main+0x164>
  	GPIO_UserLED->on();
 8000c90:	4b70      	ldr	r3, [pc, #448]	; (8000e54 <main+0x310>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 f9a4 	bl	8003fe2 <_ZN15QAD_GPIO_Output2onEv>
  	UART_STLink->txStringCR("Timer: Initialization Failed");
 8000c9a:	4b6f      	ldr	r3, [pc, #444]	; (8000e58 <main+0x314>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4974      	ldr	r1, [pc, #464]	; (8000e70 <main+0x32c>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 fc49 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	while (1) {}
 8000ca6:	e7fe      	b.n	8000ca6 <main+0x162>
  }

  //If timer initialization passed then output message via serial
  UART_STLink->txStringCR("Timer: Initialized");
 8000ca8:	4b6b      	ldr	r3, [pc, #428]	; (8000e58 <main+0x314>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4971      	ldr	r1, [pc, #452]	; (8000e74 <main+0x330>)
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f004 fc42 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>

  //Set the interrupt handler function to be called when interrupt is triggered
  Timer_Test->setHandlerFunction(Timer_Test_Handler);
 8000cb4:	4b6d      	ldr	r3, [pc, #436]	; (8000e6c <main+0x328>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	496f      	ldr	r1, [pc, #444]	; (8000e78 <main+0x334>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fcd9 	bl	8004672 <_ZN9QAD_Timer18setHandlerFunctionEPFvPvE>
	//----------------------------------
  //Initialize a QAD_Encoder Driver class to test driver functionality

  //Fill out initialization structure required to create the encoder driver class (defined in QAD_Encoder.hpp)
  QAD_Encoder_InitStruct sEncoderInit;
  sEncoderInit.pCh1_GPIO = GPIOB;                   //GPIO used for channel 1 of the timer
 8000cc0:	4b6e      	ldr	r3, [pc, #440]	; (8000e7c <main+0x338>)
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  sEncoderInit.uCh1_Pin  = GPIO_PIN_4;              //GPIO pin used for channel 1
 8000cc4:	2310      	movs	r3, #16
 8000cc6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  sEncoderInit.uCh1_AF   = GPIO_AF2_TIM3;           //Alternate function used to connect GPIO pin to timer peripheral
 8000cca:	2302      	movs	r3, #2
 8000ccc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  sEncoderInit.pCh2_GPIO = GPIOB;                   //GPIO used for channel 2 of the timer
 8000cd0:	4b6a      	ldr	r3, [pc, #424]	; (8000e7c <main+0x338>)
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  sEncoderInit.uCh2_Pin  = GPIO_PIN_5;              //GPIO pin used for channel 2
 8000cd4:	2320      	movs	r3, #32
 8000cd6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  sEncoderInit.uCh2_AF   = GPIO_AF2_TIM3;           //Alternate function used to connect GPIO pin to timer peripheral
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  sEncoderInit.eTimer    = QAD_Timer3;              //Timer peripheral to be used for rotary encoder (enum defined in QAD_TimerMgr.hpp)
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  sEncoderInit.eMode     = QAD_EncoderMode_Linear;  //Encode mode, can be either Linear or Exponential (enum defined in QAD_Encoder.hpp)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

  //Create encoder driver class
  //Is created in an uninitialized state
  Encoder_Test = new QAD_Encoder(sEncoderInit);
 8000cec:	2068      	movs	r0, #104	; 0x68
 8000cee:	f004 fede 	bl	8005aae <_Znwj>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461c      	mov	r4, r3
 8000cf6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4620      	mov	r0, r4
 8000cfe:	f7ff fd89 	bl	8000814 <_ZN11QAD_EncoderC1ER22QAD_Encoder_InitStruct>
 8000d02:	4b5f      	ldr	r3, [pc, #380]	; (8000e80 <main+0x33c>)
 8000d04:	601c      	str	r4, [r3, #0]

  //Initialize the encoder driver class
  //If initialization fails the turn on User LED, output failed message via UART and enter infinite loop
  if (Encoder_Test->init()) {
 8000d06:	4b5e      	ldr	r3, [pc, #376]	; (8000e80 <main+0x33c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 ff65 	bl	8003bda <_ZN11QAD_Encoder4initEv>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	bf14      	ite	ne
 8000d16:	2301      	movne	r3, #1
 8000d18:	2300      	moveq	r3, #0
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d00b      	beq.n	8000d38 <main+0x1f4>
  	GPIO_UserLED->on();
 8000d20:	4b4c      	ldr	r3, [pc, #304]	; (8000e54 <main+0x310>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f003 f95c 	bl	8003fe2 <_ZN15QAD_GPIO_Output2onEv>
  	UART_STLink->txStringCR("Encoder: Initialization Failed");
 8000d2a:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <main+0x314>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4955      	ldr	r1, [pc, #340]	; (8000e84 <main+0x340>)
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fc01 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
  	while (1) {}
 8000d36:	e7fe      	b.n	8000d36 <main+0x1f2>
  }

  //Start encoder driver class and output message via UART that encoder has successfully initialized and has been started
  Encoder_Test->start();
 8000d38:	4b51      	ldr	r3, [pc, #324]	; (8000e80 <main+0x33c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f002 ff84 	bl	8003c4a <_ZN11QAD_Encoder5startEv>
  UART_STLink->txStringCR("Encoder: Initialized & Started");
 8000d42:	4b45      	ldr	r3, [pc, #276]	; (8000e58 <main+0x314>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4950      	ldr	r1, [pc, #320]	; (8000e88 <main+0x344>)
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 fbf5 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//----------------------------------
  //Initialize PWM driver class for testing of functionality

  //Fill out initialization structure required to creat the PWM driver class (defined in QAD_PWM.hpp)
  QAD_PWM_InitStruct sPWMInit;
  sPWMInit.eTimer = QAD_Timer4;                   //Define the timer peripheral to be used (enum defined in QAD_TimerMgr.hpp)
 8000d4e:	2303      	movs	r3, #3
 8000d50:	713b      	strb	r3, [r7, #4]
  sPWMInit.uPrescaler = 100;                      //Define the prescaler for the timer
 8000d52:	2364      	movs	r3, #100	; 0x64
 8000d54:	60bb      	str	r3, [r7, #8]
  sPWMInit.uPeriod    = 256;                      //Define the period for the timer
 8000d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5a:	60fb      	str	r3, [r7, #12]
  sPWMInit.sChannels[0].eActive = QA_Active;      //Define timer channel 1 as active
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	743b      	strb	r3, [r7, #16]
  sPWMInit.sChannels[0].pGPIO   = GPIOB;          //Define the GPIO port for timer channel 1
 8000d60:	4b46      	ldr	r3, [pc, #280]	; (8000e7c <main+0x338>)
 8000d62:	617b      	str	r3, [r7, #20]
  sPWMInit.sChannels[0].uPin    = GPIO_PIN_6;     //Define the pin number for timer channel 1
 8000d64:	2340      	movs	r3, #64	; 0x40
 8000d66:	833b      	strh	r3, [r7, #24]
  sPWMInit.sChannels[0].uAF     = GPIO_AF2_TIM4;  //Define the alternate function for timer channel 1
 8000d68:	2302      	movs	r3, #2
 8000d6a:	76bb      	strb	r3, [r7, #26]
  sPWMInit.sChannels[1].eActive = QA_Inactive;    //Define timer channel 2 as inactive
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	773b      	strb	r3, [r7, #28]
  sPWMInit.sChannels[2].eActive = QA_Inactive;    //Define timer channel 3 as inactive
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sPWMInit.sChannels[3].eActive = QA_Inactive;    //Define timer channel 4 as inactive
 8000d76:	2300      	movs	r3, #0
 8000d78:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  //Create the QAD_PWM driver class, passing a reference to the initialization structure
  //Driver class is created in an uninitialized state
  PWM_Test = new QAD_PWM(sPWMInit);
 8000d7c:	2094      	movs	r0, #148	; 0x94
 8000d7e:	f004 fe96 	bl	8005aae <_Znwj>
 8000d82:	4603      	mov	r3, r0
 8000d84:	461c      	mov	r4, r3
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4620      	mov	r0, r4
 8000d8c:	f7ff fdac 	bl	80008e8 <_ZN7QAD_PWMC1ER18QAD_PWM_InitStruct>
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <main+0x348>)
 8000d92:	601c      	str	r4, [r3, #0]

  //Initialize the PWM driver class
  //If initialization fails then output failed message via UART, turn on User LED and enter infinite loop
  if (PWM_Test->init()) {
 8000d94:	4b3d      	ldr	r3, [pc, #244]	; (8000e8c <main+0x348>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 f9ea 	bl	8004172 <_ZN7QAD_PWM4initEv>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	bf14      	ite	ne
 8000da4:	2301      	movne	r3, #1
 8000da6:	2300      	moveq	r3, #0
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00b      	beq.n	8000dc6 <main+0x282>
  	UART_STLink->txString("PWM: Initialization Failed");
 8000dae:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <main+0x314>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4937      	ldr	r1, [pc, #220]	; (8000e90 <main+0x34c>)
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 fb95 	bl	80054e4 <_ZN19QAS_Serial_Dev_Base8txStringEPKc>
  	GPIO_UserLED->on();
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <main+0x310>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 f90f 	bl	8003fe2 <_ZN15QAD_GPIO_Output2onEv>
  	while(1) {}
 8000dc4:	e7fe      	b.n	8000dc4 <main+0x280>
  }

  //Start PWM driver
  PWM_Test->start();
 8000dc6:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <main+0x348>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f003 f9fc 	bl	80041c8 <_ZN7QAD_PWM5startEv>

  //Output message via UART to show PWM driver successfully initialized and has been started
  UART_STLink->txStringCR("PWM: Initialized & Started");
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <main+0x314>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	492f      	ldr	r1, [pc, #188]	; (8000e94 <main+0x350>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f004 fbae 	bl	8005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>
	//Processing Loop

  //Create processing loop timing variables
	uint32_t uTicks;
	uint32_t uCurTick;
	uint32_t uNewTick = HAL_GetTick();
 8000ddc:	f000 fbb6 	bl	800154c <HAL_GetTick>
 8000de0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	uint32_t uOldTick = uNewTick;
 8000de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  //Create task timing variables
  uint32_t uEncoderTicks = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t uHeartbeatTicks = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	//Temporary variable used for PWM driver testing
	int32_t iPWMVal = 128;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		//----------------------------------
		//Frame Timing
		//Calculates how many ticks (in milliseconds) have passed since the previous loop, this value is placed into the uTicks variable
		//uTicks is then used to calculate task timing below
    uCurTick = HAL_GetTick();
 8000dfe:	f000 fba5 	bl	800154c <HAL_GetTick>
 8000e02:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    if (uCurTick != uNewTick) { //Handle loop faster than 1ms issue
 8000e06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000e0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d042      	beq.n	8000e98 <main+0x354>
    	uOldTick = uNewTick;
 8000e12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    	uNewTick = uCurTick;
 8000e1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000e1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    	if (uNewTick < uOldTick) { //Handle 32bit overflow issue
 8000e22:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000e26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d208      	bcs.n	8000e40 <main+0x2fc>
    		uTicks = (uNewTick + (0xFFFFFFFF - uOldTick));
 8000e2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000e32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e3e:	e02e      	b.n	8000e9e <main+0x35a>
    	} else {
    		uTicks = (uNewTick - uOldTick);
 8000e40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8000e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000e4e:	e026      	b.n	8000e9e <main+0x35a>
 8000e50:	40020000 	.word	0x40020000
 8000e54:	20000090 	.word	0x20000090
 8000e58:	20000094 	.word	0x20000094
 8000e5c:	08005d64 	.word	0x08005d64
 8000e60:	40020800 	.word	0x40020800
 8000e64:	20000098 	.word	0x20000098
 8000e68:	08000afd 	.word	0x08000afd
 8000e6c:	2000009c 	.word	0x2000009c
 8000e70:	08005d84 	.word	0x08005d84
 8000e74:	08005da4 	.word	0x08005da4
 8000e78:	08000b21 	.word	0x08000b21
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	200000a0 	.word	0x200000a0
 8000e84:	08005db8 	.word	0x08005db8
 8000e88:	08005dd8 	.word	0x08005dd8
 8000e8c:	200000a4 	.word	0x200000a4
 8000e90:	08005df8 	.word	0x08005df8
 8000e94:	08005e14 	.word	0x08005e14
    	}

    } else {
    	uTicks = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


  	//----------------------------------
    //Process encoder task
    //Currently used to update encoder, retrieve encoder value and use it to update PWM value
    uEncoderTicks += uTicks;
 8000e9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000ea2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ea6:	4413      	add	r3, r2
 8000ea8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (uEncoderTicks >= QA_FT_EncoderTickThreshold) {  //If encoder ticks has exceeded threshold then process encoder task
 8000eac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000eb0:	2b31      	cmp	r3, #49	; 0x31
 8000eb2:	d92e      	bls.n	8000f12 <main+0x3ce>

    	Encoder_Test->update(uEncoderTicks);              //Update encoder driver
 8000eb4:	4b23      	ldr	r3, [pc, #140]	; (8000f44 <main+0x400>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fee3 	bl	8003c88 <_ZN11QAD_Encoder6updateEm>
    	iPWMVal += Encoder_Test->getValue() * 4;          //Retrieve encoder value and add to PWM value
 8000ec2:	4b20      	ldr	r3, [pc, #128]	; (8000f44 <main+0x400>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f002 ff59 	bl	8003d7e <_ZN11QAD_Encoder8getValueEv>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000ed4:	4413      	add	r3, r2
 8000ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

      if (iPWMVal < 0)                                  //Limit PWM value to between 0-255, as per period defined by period set during PWM driver initialization
 8000eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	da02      	bge.n	8000ee8 <main+0x3a4>
      	iPWMVal = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if (iPWMVal > 255)
 8000ee8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000eec:	2bff      	cmp	r3, #255	; 0xff
 8000eee:	dd02      	ble.n	8000ef6 <main+0x3b2>
      	iPWMVal = 255;
 8000ef0:	23ff      	movs	r3, #255	; 0xff
 8000ef2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      PWM_Test->setPWMVal(QAD_PWM_Channel_1, iPWMVal);  //Update PWM value
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <main+0x404>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8000efe:	b292      	uxth	r2, r2
 8000f00:	2100      	movs	r1, #0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 f996 	bl	8004234 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>


    	uEncoderTicks -= QA_FT_EncoderTickThreshold;      //Reset encoder ticks
 8000f08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000f0c:	3b32      	subs	r3, #50	; 0x32
 8000f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

  	//----------------------------------
    //Update Heartbeat LED
    //The heartbeat LED uses the User LED to flash at a regular rate to visually show whether the microcontroller has locked up or
    //become stuck in an exception or interrupt handler
    uHeartbeatTicks += uTicks;
 8000f12:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000f1a:	4413      	add	r3, r2
 8000f1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (uHeartbeatTicks >= QA_FT_HeartbeatTickThreshold) { //If heartbeat ticks has exceeded threshold then update heartbeat LED
 8000f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f24:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f28:	f4ff af69 	bcc.w	8000dfe <main+0x2ba>
    	GPIO_UserLED->toggle();
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <main+0x408>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 f87c 	bl	800402e <_ZN15QAD_GPIO_Output6toggleEv>
    	uHeartbeatTicks -= QA_FT_HeartbeatTickThreshold;     //Reset hearbeat ticks
 8000f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f3a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8000f3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uCurTick = HAL_GetTick();
 8000f42:	e75c      	b.n	8000dfe <main+0x2ba>
 8000f44:	200000a0 	.word	0x200000a0
 8000f48:	200000a4 	.word	0x200000a4
 8000f4c:	20000090 	.word	0x20000090

08000f50 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj>:
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }

  /// std::make_unique for arrays of unknown bound
  template<typename _Tp>
    inline typename _MakeUniq<_Tp>::__array
    make_unique(size_t __num)
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8000f5a:	683c      	ldr	r4, [r7, #0]
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	f004 fdb7 	bl	8005ad0 <_Znaj>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	4602      	mov	r2, r0
 8000f68:	1e63      	subs	r3, r4, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	db04      	blt.n	8000f78 <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x28>
 8000f6e:	2100      	movs	r1, #0
 8000f70:	7011      	strb	r1, [r2, #0]
 8000f72:	3201      	adds	r2, #1
 8000f74:	3b01      	subs	r3, #1
 8000f76:	e7f8      	b.n	8000f6a <_ZSt11make_uniqueIA_hENSt9_MakeUniqIT_E7__arrayEj+0x1a>
 8000f78:	4601      	mov	r1, r0
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 f839 	bl	8000ff2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd90      	pop	{r4, r7, pc}

08000f88 <_ZSt11make_uniqueI14QAT_FIFOBufferJRtEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000f92:	6838      	ldr	r0, [r7, #0]
 8000f94:	f000 f849 	bl	800102a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	881c      	ldrh	r4, [r3, #0]
 8000f9c:	200c      	movs	r0, #12
 8000f9e:	f004 fd86 	bl	8005aae <_Znwj>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461d      	mov	r5, r3
 8000fa6:	4621      	mov	r1, r4
 8000fa8:	4628      	mov	r0, r5
 8000faa:	f7ff fcf3 	bl	8000994 <_ZN14QAT_FIFOBufferC1Et>
 8000fae:	4629      	mov	r1, r5
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f845 	bl	8001040 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bdb0      	pop	{r4, r5, r7, pc}

08000fbe <_ZSt11make_uniqueI8QAD_UARTJR19QAD_UART_InitStructEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8000fbe:	b5b0      	push	{r4, r5, r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f000 f855 	bl	8001078 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>
 8000fce:	4605      	mov	r5, r0
 8000fd0:	2064      	movs	r0, #100	; 0x64
 8000fd2:	f004 fd6c 	bl	8005aae <_Znwj>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461c      	mov	r4, r3
 8000fda:	4629      	mov	r1, r5
 8000fdc:	4620      	mov	r0, r4
 8000fde:	f7ff fd27 	bl	8000a30 <_ZN8QAD_UARTC1ER19QAD_UART_InitStruct>
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 f852 	bl	800108e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bdb0      	pop	{r4, r5, r7, pc}

08000ff2 <_ZNSt10unique_ptrIA_hSt14default_deleteIS0_EEC1IPhS2_vbEET_>:
	unique_ptr(_Up __p) noexcept
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
 8000ffa:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6839      	ldr	r1, [r7, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f860 	bl	80010c6 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>
        { }
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	f000 f867 	bl	80010ee <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001020:	4603      	mov	r3, r0
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <_ZSt7forwardIRtEOT_RNSt16remove_referenceIS1_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_ZNSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6839      	ldr	r1, [r7, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f85a 	bl	8001108 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>
        { }
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 f861 	bl	8001130 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800106e:	4603      	mov	r3, r0
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_ZSt7forwardIR19QAD_UART_InitStructEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_ZNSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6839      	ldr	r1, [r7, #0]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f854 	bl	800114a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>
        { }
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 f85b 	bl	8001172 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80010bc:	4603      	mov	r3, r0
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEEC1EPh>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f85a 	bl	800118c <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>
 80010d8:	6878      	ldr	r0, [r7, #4]
 80010da:	f7ff ff99 	bl	8001010 <_ZNSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 80010de:	4602      	mov	r2, r0
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 f854 	bl	80011a6 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80010fe:	4603      	mov	r3, r0
 8001100:	4618      	mov	r0, r3
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EEC1EPS0_>:
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f852 	bl	80011be <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff9f 	bl	800105e <_ZNSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 8001120:	4602      	mov	r2, r0
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f84c 	bl	80011d8 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001140:	4603      	mov	r3, r0
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EEC1EPS0_>:
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f84a 	bl	80011f0 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffa5 	bl	80010ac <_ZNSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8001162:	4602      	mov	r2, r0
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f844 	bl	800120a <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001182:	4603      	mov	r3, r0
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_ZNSt5tupleIJPhSt14default_deleteIA_hEEEC1IS0_S3_Lb1EEEv>:
	constexpr tuple()
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f843 	bl	8001222 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f847 	bl	8001242 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_ZNSt5tupleIJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f000 f847 	bl	800125c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f84b 	bl	800127c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZNSt5tupleIJP8QAD_UARTSt14default_deleteIS0_EEEC1IS1_S3_Lb1EEEv>:
	constexpr tuple()
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 f84b 	bl	8001296 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 f84f 	bl	80012b6 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>
 8001218:	4603      	mov	r3, r0
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 8001222:	b580      	push	{r7, lr}
 8001224:	b082      	sub	sp, #8
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f850 	bl	80012d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f858 	bl	80012e8 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f000 f859 	bl	8001304 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>
 8001252:	4603      	mov	r3, r0
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f858 	bl	800131a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f860 	bl	8001332 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f861 	bl	800134e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>
 800128c:	4603      	mov	r3, r0
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f860 	bl	8001364 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f868 	bl	800137c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f869 	bl	8001398 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>
 80012c6:	4603      	mov	r3, r0
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteIA_hEEEC1Ev>:
      constexpr _Tuple_impl()
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f868 	bl	80013ae <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <_ZNSt10_Head_baseILj0EPhLb0EEC1Ev>:
      constexpr _Head_base()
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERS1_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI14QAT_FIFOBufferEEEC1Ev>:
      constexpr _Tuple_impl()
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f84e 	bl	80013c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EEC1Ev>:
      constexpr _Head_base()
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8QAD_UARTEEEC1Ev>:
      constexpr _Tuple_impl()
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f834 	bl	80013da <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EEC1Ev>:
      constexpr _Head_base()
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4618      	mov	r0, r3
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <_ZNSt10_Head_baseILj1ESt14default_deleteIA_hELb1EEC1Ev>:
      constexpr _Head_base()
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4618      	mov	r0, r3
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_ZNSt10_Head_baseILj1ESt14default_deleteI14QAT_FIFOBufferELb1EEC1Ev>:
      constexpr _Head_base()
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4618      	mov	r0, r3
 80013d0:	370c      	adds	r7, #12
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr

080013da <_ZNSt10_Head_baseILj1ESt14default_deleteI8QAD_UARTELb1EEC1Ev>:
      constexpr _Head_base()
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
      : _Head() { }
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
	return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_kill>:

int _kill(int pid, int sig)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800140a:	f004 fb89 	bl	8005b20 <__errno>
 800140e:	4603      	mov	r3, r0
 8001410:	2216      	movs	r2, #22
 8001412:	601a      	str	r2, [r3, #0]
	return -1;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <_exit>:

void _exit (int status)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ffe7 	bl	8001400 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001432:	e7fe      	b.n	8001432 <_exit+0x12>

08001434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800143c:	4a14      	ldr	r2, [pc, #80]	; (8001490 <_sbrk+0x5c>)
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <_sbrk+0x60>)
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_sbrk+0x64>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <_sbrk+0x64>)
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <_sbrk+0x68>)
 8001454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001456:	4b10      	ldr	r3, [pc, #64]	; (8001498 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	429a      	cmp	r2, r3
 8001462:	d207      	bcs.n	8001474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001464:	f004 fb5c 	bl	8005b20 <__errno>
 8001468:	4603      	mov	r3, r0
 800146a:	220c      	movs	r2, #12
 800146c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800146e:	f04f 33ff 	mov.w	r3, #4294967295
 8001472:	e009      	b.n	8001488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <_sbrk+0x64>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800147a:	4b07      	ldr	r3, [pc, #28]	; (8001498 <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	4a05      	ldr	r2, [pc, #20]	; (8001498 <_sbrk+0x64>)
 8001484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001486:	68fb      	ldr	r3, [r7, #12]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20020000 	.word	0x20020000
 8001494:	00000400 	.word	0x00000400
 8001498:	200000a8 	.word	0x200000a8
 800149c:	20000198 	.word	0x20000198

080014a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <SystemInit+0x20>)
 80014a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <SystemInit+0x20>)
 80014ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f975 	bl	80017d2 <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 f92f 	bl	8001762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	; (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	20000008 	.word	0x20000008
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	20000184 	.word	0x20000184

0800154c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000184 	.word	0x20000184

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	; (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db12      	blt.n	800163c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	490a      	ldr	r1, [pc, #40]	; (8001648 <__NVIC_DisableIRQ+0x44>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	3320      	adds	r3, #32
 800162c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001630:	f3bf 8f4f 	dsb	sy
}
 8001634:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001636:	f3bf 8f6f 	isb	sy
}
 800163a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff05 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff1a 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff8e 	bl	80016a0 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5d 	bl	800164c <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff0d 	bl	80015c8 <__NVIC_EnableIRQ>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80017c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff1d 	bl	8001604 <__NVIC_DisableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ff94 	bl	8001708 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80017ee:	f000 f802 	bl	80017f6 <HAL_SYSTICK_Callback>
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800180e:	2300      	movs	r3, #0
 8001810:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	e159      	b.n	8001ad4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001820:	2201      	movs	r2, #1
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	f040 8148 	bne.w	8001ace <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d005      	beq.n	8001856 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001852:	2b02      	cmp	r3, #2
 8001854:	d130      	bne.n	80018b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800188c:	2201      	movs	r2, #1
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	091b      	lsrs	r3, r3, #4
 80018a2:	f003 0201 	and.w	r2, r3, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d017      	beq.n	80018f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	2203      	movs	r2, #3
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d123      	bne.n	8001948 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	08da      	lsrs	r2, r3, #3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3208      	adds	r2, #8
 8001908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800190c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4013      	ands	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691a      	ldr	r2, [r3, #16]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4313      	orrs	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	69b9      	ldr	r1, [r7, #24]
 8001944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	2203      	movs	r2, #3
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0203 	and.w	r2, r3, #3
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a2 	beq.w	8001ace <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_GPIO_Init+0x2e8>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	4a56      	ldr	r2, [pc, #344]	; (8001aec <HAL_GPIO_Init+0x2e8>)
 8001994:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001998:	6453      	str	r3, [r2, #68]	; 0x44
 800199a:	4b54      	ldr	r3, [pc, #336]	; (8001aec <HAL_GPIO_Init+0x2e8>)
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019a6:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_GPIO_Init+0x2ec>)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0303 	and.w	r3, r3, #3
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	220f      	movs	r2, #15
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a49      	ldr	r2, [pc, #292]	; (8001af4 <HAL_GPIO_Init+0x2f0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d019      	beq.n	8001a06 <HAL_GPIO_Init+0x202>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a48      	ldr	r2, [pc, #288]	; (8001af8 <HAL_GPIO_Init+0x2f4>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d013      	beq.n	8001a02 <HAL_GPIO_Init+0x1fe>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a47      	ldr	r2, [pc, #284]	; (8001afc <HAL_GPIO_Init+0x2f8>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d00d      	beq.n	80019fe <HAL_GPIO_Init+0x1fa>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a46      	ldr	r2, [pc, #280]	; (8001b00 <HAL_GPIO_Init+0x2fc>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d007      	beq.n	80019fa <HAL_GPIO_Init+0x1f6>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_GPIO_Init+0x300>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <HAL_GPIO_Init+0x1f2>
 80019f2:	2304      	movs	r3, #4
 80019f4:	e008      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 80019f6:	2307      	movs	r3, #7
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 80019fa:	2303      	movs	r3, #3
 80019fc:	e004      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e002      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 8001a02:	2301      	movs	r3, #1
 8001a04:	e000      	b.n	8001a08 <HAL_GPIO_Init+0x204>
 8001a06:	2300      	movs	r3, #0
 8001a08:	69fa      	ldr	r2, [r7, #28]
 8001a0a:	f002 0203 	and.w	r2, r2, #3
 8001a0e:	0092      	lsls	r2, r2, #2
 8001a10:	4093      	lsls	r3, r2
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a18:	4935      	ldr	r1, [pc, #212]	; (8001af0 <HAL_GPIO_Init+0x2ec>)
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4013      	ands	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4a:	4a2f      	ldr	r2, [pc, #188]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a74:	4a24      	ldr	r2, [pc, #144]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a7a:	4b23      	ldr	r3, [pc, #140]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9e:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac8:	4a0f      	ldr	r2, [pc, #60]	; (8001b08 <HAL_GPIO_Init+0x304>)
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	2b0f      	cmp	r3, #15
 8001ad8:	f67f aea2 	bls.w	8001820 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3724      	adds	r7, #36	; 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40013800 	.word	0x40013800
 8001af4:	40020000 	.word	0x40020000
 8001af8:	40020400 	.word	0x40020400
 8001afc:	40020800 	.word	0x40020800
 8001b00:	40020c00 	.word	0x40020c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40013c00 	.word	0x40013c00

08001b0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b087      	sub	sp, #28
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e0bb      	b.n	8001ca0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b28:	2201      	movs	r2, #1
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	f040 80ab 	bne.w	8001c9a <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001b44:	4a5c      	ldr	r2, [pc, #368]	; (8001cb8 <HAL_GPIO_DeInit+0x1ac>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b50:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	4013      	ands	r3, r2
 8001b64:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a54      	ldr	r2, [pc, #336]	; (8001cbc <HAL_GPIO_DeInit+0x1b0>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_GPIO_DeInit+0x96>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a53      	ldr	r2, [pc, #332]	; (8001cc0 <HAL_GPIO_DeInit+0x1b4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_DeInit+0x92>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a52      	ldr	r2, [pc, #328]	; (8001cc4 <HAL_GPIO_DeInit+0x1b8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00d      	beq.n	8001b9a <HAL_GPIO_DeInit+0x8e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_GPIO_DeInit+0x1bc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_DeInit+0x8a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_GPIO_DeInit+0x1c0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_DeInit+0x86>
 8001b8e:	2304      	movs	r3, #4
 8001b90:	e008      	b.n	8001ba4 <HAL_GPIO_DeInit+0x98>
 8001b92:	2307      	movs	r3, #7
 8001b94:	e006      	b.n	8001ba4 <HAL_GPIO_DeInit+0x98>
 8001b96:	2303      	movs	r3, #3
 8001b98:	e004      	b.n	8001ba4 <HAL_GPIO_DeInit+0x98>
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_DeInit+0x98>
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_GPIO_DeInit+0x98>
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	f002 0203 	and.w	r2, r2, #3
 8001baa:	0092      	lsls	r2, r2, #2
 8001bac:	4093      	lsls	r3, r2
 8001bae:	68ba      	ldr	r2, [r7, #8]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d132      	bne.n	8001c1a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001bb4:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	4944      	ldr	r1, [pc, #272]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001bc4:	685a      	ldr	r2, [r3, #4]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4941      	ldr	r1, [pc, #260]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001bd0:	4b3f      	ldr	r3, [pc, #252]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001bd2:	689a      	ldr	r2, [r3, #8]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	493d      	ldr	r1, [pc, #244]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001bde:	4b3c      	ldr	r3, [pc, #240]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	493a      	ldr	r1, [pc, #232]	; (8001cd0 <HAL_GPIO_DeInit+0x1c4>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001bfc:	4a2e      	ldr	r2, [pc, #184]	; (8001cb8 <HAL_GPIO_DeInit+0x1ac>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	43da      	mvns	r2, r3
 8001c0c:	482a      	ldr	r0, [pc, #168]	; (8001cb8 <HAL_GPIO_DeInit+0x1ac>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	400a      	ands	r2, r1
 8001c14:	3302      	adds	r3, #2
 8001c16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	2103      	movs	r1, #3
 8001c24:	fa01 f303 	lsl.w	r3, r1, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	08d2      	lsrs	r2, r2, #3
 8001c50:	4019      	ands	r1, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2103      	movs	r1, #3
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	2101      	movs	r1, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b0f      	cmp	r3, #15
 8001ca4:	f67f af40 	bls.w	8001b28 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	371c      	adds	r7, #28
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40013800 	.word	0x40013800
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	40013c00 	.word	0x40013c00

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	619a      	str	r2, [r3, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e264      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d075      	beq.n	8001e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d26:	4ba3      	ldr	r3, [pc, #652]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d00c      	beq.n	8001d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4ba0      	ldr	r3, [pc, #640]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d112      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3e:	4b9d      	ldr	r3, [pc, #628]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d4a:	d10b      	bne.n	8001d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4c:	4b99      	ldr	r3, [pc, #612]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d05b      	beq.n	8001e10 <HAL_RCC_OscConfig+0x108>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d157      	bne.n	8001e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e23f      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d106      	bne.n	8001d7c <HAL_RCC_OscConfig+0x74>
 8001d6e:	4b91      	ldr	r3, [pc, #580]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a90      	ldr	r2, [pc, #576]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	e01d      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x98>
 8001d86:	4b8b      	ldr	r3, [pc, #556]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a8a      	ldr	r2, [pc, #552]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b88      	ldr	r3, [pc, #544]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a87      	ldr	r2, [pc, #540]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e00b      	b.n	8001db8 <HAL_RCC_OscConfig+0xb0>
 8001da0:	4b84      	ldr	r3, [pc, #528]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a83      	ldr	r2, [pc, #524]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a80      	ldr	r2, [pc, #512]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d013      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fbc4 	bl	800154c <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff fbc0 	bl	800154c <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e204      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dda:	4b76      	ldr	r3, [pc, #472]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0xc0>
 8001de6:	e014      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff fbb0 	bl	800154c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fbac 	bl	800154c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e1f0      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e02:	4b6c      	ldr	r3, [pc, #432]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f0      	bne.n	8001df0 <HAL_RCC_OscConfig+0xe8>
 8001e0e:	e000      	b.n	8001e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d063      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1e:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d11c      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d116      	bne.n	8001e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d005      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e1c4      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e5a:	4b56      	ldr	r3, [pc, #344]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4952      	ldr	r1, [pc, #328]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	e03a      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d020      	beq.n	8001eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <HAL_RCC_OscConfig+0x2b0>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fb65 	bl	800154c <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e86:	f7ff fb61 	bl	800154c <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1a5      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e98:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4940      	ldr	r1, [pc, #256]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e015      	b.n	8001ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eba:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <HAL_RCC_OscConfig+0x2b0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fb44 	bl	800154c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fb40 	bl	800154c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e184      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eda:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d030      	beq.n	8001f54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d016      	beq.n	8001f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x2b4>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7ff fb24 	bl	800154c <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f08:	f7ff fb20 	bl	800154c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e164      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x200>
 8001f26:	e015      	b.n	8001f54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <HAL_RCC_OscConfig+0x2b4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2e:	f7ff fb0d 	bl	800154c <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f36:	f7ff fb09 	bl	800154c <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e14d      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80a0 	beq.w	80020a2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b13      	ldr	r3, [pc, #76]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10f      	bne.n	8001f92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a0e      	ldr	r2, [pc, #56]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <HAL_RCC_OscConfig+0x2b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d121      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_OscConfig+0x2b8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_RCC_OscConfig+0x2b8>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001faa:	f7ff facf 	bl	800154c <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	e011      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2ce>
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	42470000 	.word	0x42470000
 8001fbc:	42470e80 	.word	0x42470e80
 8001fc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc4:	f7ff fac2 	bl	800154c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e106      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd6:	4b85      	ldr	r3, [pc, #532]	; (80021ec <HAL_RCC_OscConfig+0x4e4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d106      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x2f0>
 8001fea:	4b81      	ldr	r3, [pc, #516]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a80      	ldr	r2, [pc, #512]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	e01c      	b.n	8002032 <HAL_RCC_OscConfig+0x32a>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	2b05      	cmp	r3, #5
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x312>
 8002000:	4b7b      	ldr	r3, [pc, #492]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a7a      	ldr	r2, [pc, #488]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	4b78      	ldr	r3, [pc, #480]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	4a77      	ldr	r2, [pc, #476]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6713      	str	r3, [r2, #112]	; 0x70
 8002018:	e00b      	b.n	8002032 <HAL_RCC_OscConfig+0x32a>
 800201a:	4b75      	ldr	r3, [pc, #468]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a74      	ldr	r2, [pc, #464]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002020:	f023 0301 	bic.w	r3, r3, #1
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
 8002026:	4b72      	ldr	r3, [pc, #456]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202a:	4a71      	ldr	r2, [pc, #452]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 800202c:	f023 0304 	bic.w	r3, r3, #4
 8002030:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d015      	beq.n	8002066 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff fa87 	bl	800154c <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7ff fa83 	bl	800154c <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e0c5      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	4b65      	ldr	r3, [pc, #404]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0ee      	beq.n	8002042 <HAL_RCC_OscConfig+0x33a>
 8002064:	e014      	b.n	8002090 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff fa71 	bl	800154c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206c:	e00a      	b.n	8002084 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800206e:	f7ff fa6d 	bl	800154c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	f241 3288 	movw	r2, #5000	; 0x1388
 800207c:	4293      	cmp	r3, r2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e0af      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002084:	4b5a      	ldr	r3, [pc, #360]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002088:	f003 0302 	and.w	r3, r3, #2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ee      	bne.n	800206e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d105      	bne.n	80020a2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002096:	4b56      	ldr	r3, [pc, #344]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 800209c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 809b 	beq.w	80021e2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ac:	4b50      	ldr	r3, [pc, #320]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d05c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699b      	ldr	r3, [r3, #24]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d141      	bne.n	8002144 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c0:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_RCC_OscConfig+0x4ec>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7ff fa41 	bl	800154c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ce:	f7ff fa3d 	bl	800154c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e081      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e0:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d1f0      	bne.n	80020ce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	69da      	ldr	r2, [r3, #28]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	019b      	lsls	r3, r3, #6
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	085b      	lsrs	r3, r3, #1
 8002104:	3b01      	subs	r3, #1
 8002106:	041b      	lsls	r3, r3, #16
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002116:	4b37      	ldr	r3, [pc, #220]	; (80021f4 <HAL_RCC_OscConfig+0x4ec>)
 8002118:	2201      	movs	r2, #1
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7ff fa16 	bl	800154c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fa12 	bl	800154c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e056      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002136:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x41c>
 8002142:	e04e      	b.n	80021e2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	4b2b      	ldr	r3, [pc, #172]	; (80021f4 <HAL_RCC_OscConfig+0x4ec>)
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214a:	f7ff f9ff 	bl	800154c <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002152:	f7ff f9fb 	bl	800154c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e03f      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1f0      	bne.n	8002152 <HAL_RCC_OscConfig+0x44a>
 8002170:	e037      	b.n	80021e2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d101      	bne.n	800217e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e032      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <HAL_RCC_OscConfig+0x4e8>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d028      	beq.n	80021de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d121      	bne.n	80021de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d11a      	bne.n	80021de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021ae:	4013      	ands	r3, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021b4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d111      	bne.n	80021de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	085b      	lsrs	r3, r3, #1
 80021c6:	3b01      	subs	r3, #1
 80021c8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d107      	bne.n	80021de <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40007000 	.word	0x40007000
 80021f0:	40023800 	.word	0x40023800
 80021f4:	42470060 	.word	0x42470060

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0cc      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b68      	ldr	r3, [pc, #416]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d90c      	bls.n	8002234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b65      	ldr	r3, [pc, #404]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002222:	4b63      	ldr	r3, [pc, #396]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0b8      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	4a58      	ldr	r2, [pc, #352]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4a52      	ldr	r2, [pc, #328]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800226e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	494d      	ldr	r1, [pc, #308]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d044      	beq.n	8002318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d119      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e07f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d003      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022b2:	2b03      	cmp	r3, #3
 80022b4:	d107      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d109      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022c6:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e067      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022d6:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f023 0203 	bic.w	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	4934      	ldr	r1, [pc, #208]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 80022e4:	4313      	orrs	r3, r2
 80022e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e8:	f7ff f930 	bl	800154c <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f0:	f7ff f92c 	bl	800154c <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e04f      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 020c 	and.w	r2, r3, #12
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	429a      	cmp	r2, r3
 8002316:	d1eb      	bne.n	80022f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002318:	4b25      	ldr	r3, [pc, #148]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d20c      	bcs.n	8002340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e032      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4916      	ldr	r1, [pc, #88]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b00      	cmp	r3, #0
 8002368:	d009      	beq.n	800237e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	490e      	ldr	r1, [pc, #56]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	4313      	orrs	r3, r2
 800237c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800237e:	f000 f821 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002382:	4602      	mov	r2, r0
 8002384:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	091b      	lsrs	r3, r3, #4
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	490a      	ldr	r1, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	5ccb      	ldrb	r3, [r1, r3]
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800239a:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f890 	bl	80014c4 <HAL_InitTick>

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	40023800 	.word	0x40023800
 80023b8:	08005e54 	.word	0x08005e54
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023c8:	b084      	sub	sp, #16
 80023ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	2300      	movs	r3, #0
 80023d6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023dc:	4b67      	ldr	r3, [pc, #412]	; (800257c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b08      	cmp	r3, #8
 80023e6:	d00d      	beq.n	8002404 <HAL_RCC_GetSysClockFreq+0x40>
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	f200 80bd 	bhi.w	8002568 <HAL_RCC_GetSysClockFreq+0x1a4>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x34>
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d003      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x3a>
 80023f6:	e0b7      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023f8:	4b61      	ldr	r3, [pc, #388]	; (8002580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023fa:	60bb      	str	r3, [r7, #8]
       break;
 80023fc:	e0b7      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023fe:	4b61      	ldr	r3, [pc, #388]	; (8002584 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002400:	60bb      	str	r3, [r7, #8]
      break;
 8002402:	e0b4      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002404:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800240c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800240e:	4b5b      	ldr	r3, [pc, #364]	; (800257c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d04d      	beq.n	80024b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800241a:	4b58      	ldr	r3, [pc, #352]	; (800257c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	099b      	lsrs	r3, r3, #6
 8002420:	461a      	mov	r2, r3
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	f240 10ff 	movw	r0, #511	; 0x1ff
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	ea02 0800 	and.w	r8, r2, r0
 8002432:	ea03 0901 	and.w	r9, r3, r1
 8002436:	4640      	mov	r0, r8
 8002438:	4649      	mov	r1, r9
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	014b      	lsls	r3, r1, #5
 8002444:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002448:	0142      	lsls	r2, r0, #5
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	ebb0 0008 	subs.w	r0, r0, r8
 8002452:	eb61 0109 	sbc.w	r1, r1, r9
 8002456:	f04f 0200 	mov.w	r2, #0
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002464:	0182      	lsls	r2, r0, #6
 8002466:	1a12      	subs	r2, r2, r0
 8002468:	eb63 0301 	sbc.w	r3, r3, r1
 800246c:	f04f 0000 	mov.w	r0, #0
 8002470:	f04f 0100 	mov.w	r1, #0
 8002474:	00d9      	lsls	r1, r3, #3
 8002476:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800247a:	00d0      	lsls	r0, r2, #3
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	eb12 0208 	adds.w	r2, r2, r8
 8002484:	eb43 0309 	adc.w	r3, r3, r9
 8002488:	f04f 0000 	mov.w	r0, #0
 800248c:	f04f 0100 	mov.w	r1, #0
 8002490:	0259      	lsls	r1, r3, #9
 8002492:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002496:	0250      	lsls	r0, r2, #9
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4610      	mov	r0, r2
 800249e:	4619      	mov	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	461a      	mov	r2, r3
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	f7fd fe9e 	bl	80001e8 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	e04a      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b6:	4b31      	ldr	r3, [pc, #196]	; (800257c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	099b      	lsrs	r3, r3, #6
 80024bc:	461a      	mov	r2, r3
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024c6:	f04f 0100 	mov.w	r1, #0
 80024ca:	ea02 0400 	and.w	r4, r2, r0
 80024ce:	ea03 0501 	and.w	r5, r3, r1
 80024d2:	4620      	mov	r0, r4
 80024d4:	4629      	mov	r1, r5
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	014b      	lsls	r3, r1, #5
 80024e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024e4:	0142      	lsls	r2, r0, #5
 80024e6:	4610      	mov	r0, r2
 80024e8:	4619      	mov	r1, r3
 80024ea:	1b00      	subs	r0, r0, r4
 80024ec:	eb61 0105 	sbc.w	r1, r1, r5
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	018b      	lsls	r3, r1, #6
 80024fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024fe:	0182      	lsls	r2, r0, #6
 8002500:	1a12      	subs	r2, r2, r0
 8002502:	eb63 0301 	sbc.w	r3, r3, r1
 8002506:	f04f 0000 	mov.w	r0, #0
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	00d9      	lsls	r1, r3, #3
 8002510:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002514:	00d0      	lsls	r0, r2, #3
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	1912      	adds	r2, r2, r4
 800251c:	eb45 0303 	adc.w	r3, r5, r3
 8002520:	f04f 0000 	mov.w	r0, #0
 8002524:	f04f 0100 	mov.w	r1, #0
 8002528:	0299      	lsls	r1, r3, #10
 800252a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800252e:	0290      	lsls	r0, r2, #10
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4610      	mov	r0, r2
 8002536:	4619      	mov	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	461a      	mov	r2, r3
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	f7fd fe52 	bl	80001e8 <__aeabi_uldivmod>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4613      	mov	r3, r2
 800254a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	0c1b      	lsrs	r3, r3, #16
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	60bb      	str	r3, [r7, #8]
      break;
 8002566:	e002      	b.n	800256e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800256a:	60bb      	str	r3, [r7, #8]
      break;
 800256c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800256e:	68bb      	ldr	r3, [r7, #8]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	00f42400 	.word	0x00f42400
 8002584:	007a1200 	.word	0x007a1200

08002588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a9b      	lsrs	r3, r3, #10
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4903      	ldr	r1, [pc, #12]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40023800 	.word	0x40023800
 80025c4:	08005e64 	.word	0x08005e64

080025c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025cc:	f7ff ffdc 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0b5b      	lsrs	r3, r3, #13
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4903      	ldr	r1, [pc, #12]	; (80025ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08005e64 	.word	0x08005e64

080025f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e041      	b.n	8002686 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d106      	bne.n	800261c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f88d 	bl	8002736 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	3304      	adds	r3, #4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f000 fc4a 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2202      	movs	r2, #2
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6a1a      	ldr	r2, [r3, #32]
 80026a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10f      	bne.n	80026ce <HAL_TIM_Base_DeInit+0x40>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	f240 4344 	movw	r3, #1092	; 0x444
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d107      	bne.n	80026ce <HAL_TIM_Base_DeInit+0x40>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f83b 	bl	800274a <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 800274a:	b480      	push	{r7}
 800274c:	b083      	sub	sp, #12
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e041      	b.n	80027f4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d106      	bne.n	800278a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f88d 	bl	80028a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2202      	movs	r2, #2
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	4619      	mov	r1, r3
 800279c:	4610      	mov	r0, r2
 800279e:	f000 fb93 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2202      	movs	r2, #2
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	f241 1311 	movw	r3, #4369	; 0x1111
 8002816:	4013      	ands	r3, r2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10f      	bne.n	800283c <HAL_TIM_PWM_DeInit+0x40>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a1a      	ldr	r2, [r3, #32]
 8002822:	f240 4344 	movw	r3, #1092	; 0x444
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d107      	bne.n	800283c <HAL_TIM_PWM_DeInit+0x40>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f83b 	bl	80028b8 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3708      	adds	r7, #8
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <HAL_TIM_PWM_Start+0x24>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	bf14      	ite	ne
 80028e8:	2301      	movne	r3, #1
 80028ea:	2300      	moveq	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	e022      	b.n	8002936 <HAL_TIM_PWM_Start+0x6a>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d109      	bne.n	800290a <HAL_TIM_PWM_Start+0x3e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	e015      	b.n	8002936 <HAL_TIM_PWM_Start+0x6a>
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	2b08      	cmp	r3, #8
 800290e:	d109      	bne.n	8002924 <HAL_TIM_PWM_Start+0x58>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	bf14      	ite	ne
 800291c:	2301      	movne	r3, #1
 800291e:	2300      	moveq	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e008      	b.n	8002936 <HAL_TIM_PWM_Start+0x6a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf14      	ite	ne
 8002930:	2301      	movne	r3, #1
 8002932:	2300      	moveq	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e068      	b.n	8002a10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <HAL_TIM_PWM_Start+0x82>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800294c:	e013      	b.n	8002976 <HAL_TIM_PWM_Start+0xaa>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b04      	cmp	r3, #4
 8002952:	d104      	bne.n	800295e <HAL_TIM_PWM_Start+0x92>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800295c:	e00b      	b.n	8002976 <HAL_TIM_PWM_Start+0xaa>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	2b08      	cmp	r3, #8
 8002962:	d104      	bne.n	800296e <HAL_TIM_PWM_Start+0xa2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800296c:	e003      	b.n	8002976 <HAL_TIM_PWM_Start+0xaa>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2202      	movs	r2, #2
 8002972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2201      	movs	r2, #1
 800297c:	6839      	ldr	r1, [r7, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fcae 	bl	80032e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a23      	ldr	r2, [pc, #140]	; (8002a18 <HAL_TIM_PWM_Start+0x14c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d107      	bne.n	800299e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <HAL_TIM_PWM_Start+0x14c>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d018      	beq.n	80029da <HAL_TIM_PWM_Start+0x10e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b0:	d013      	beq.n	80029da <HAL_TIM_PWM_Start+0x10e>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_TIM_PWM_Start+0x150>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00e      	beq.n	80029da <HAL_TIM_PWM_Start+0x10e>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <HAL_TIM_PWM_Start+0x154>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d009      	beq.n	80029da <HAL_TIM_PWM_Start+0x10e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_TIM_PWM_Start+0x158>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d004      	beq.n	80029da <HAL_TIM_PWM_Start+0x10e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <HAL_TIM_PWM_Start+0x15c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d111      	bne.n	80029fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2b06      	cmp	r3, #6
 80029ea:	d010      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fc:	e007      	b.n	8002a0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f042 0201 	orr.w	r2, r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800
 8002a24:	40000c00 	.word	0x40000c00
 8002a28:	40014000 	.word	0x40014000

08002a2c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e097      	b.n	8002b70 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f000 f8d3 	bl	8002c00 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6812      	ldr	r2, [r2, #0]
 8002a6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a70:	f023 0307 	bic.w	r3, r3, #7
 8002a74:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	3304      	adds	r3, #4
 8002a7e:	4619      	mov	r1, r3
 8002a80:	4610      	mov	r0, r2
 8002a82:	f000 fa21 	bl	8002ec8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aae:	f023 0303 	bic.w	r3, r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002acc:	f023 030c 	bic.w	r3, r3, #12
 8002ad0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ad8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	011a      	lsls	r2, r3, #4
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	6a1b      	ldr	r3, [r3, #32]
 8002afa:	031b      	lsls	r3, r3, #12
 8002afc:	4313      	orrs	r3, r2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002b0a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002b12:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_Encoder_DeInit>:
  * @brief  DeInitializes the TIM Encoder interface
  * @param  htim TIM Encoder Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_DeInit(TIM_HandleTypeDef *htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6a1a      	ldr	r2, [r3, #32]
 8002b8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_TIM_Encoder_DeInit+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6a1a      	ldr	r2, [r3, #32]
 8002b9e:	f240 4344 	movw	r3, #1092	; 0x444
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_Encoder_DeInit+0x40>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Encoder_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Encoder_MspDeInit(htim);
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f000 f82b 	bl	8002c14 <HAL_TIM_Encoder_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_RESET);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_RESET);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_Encoder_MspDeInit>:
  * @brief  DeInitializes TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspDeInit(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspDeInit could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d110      	bne.n	8002c7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c58:	7bfb      	ldrb	r3, [r7, #15]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c5e:	7b7b      	ldrb	r3, [r7, #13]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d001      	beq.n	8002c68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e069      	b.n	8002d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c78:	e031      	b.n	8002cde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d110      	bne.n	8002ca2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c80:	7bbb      	ldrb	r3, [r7, #14]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d102      	bne.n	8002c8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c86:	7b3b      	ldrb	r3, [r7, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d001      	beq.n	8002c90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e055      	b.n	8002d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca0:	e01d      	b.n	8002cde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d105      	bne.n	8002cba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cae:	7b7b      	ldrb	r3, [r7, #13]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d102      	bne.n	8002cba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cb4:	7b3b      	ldrb	r3, [r7, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e03e      	b.n	8002d3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2202      	movs	r2, #2
 8002cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_TIM_Encoder_Start+0xc4>
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d008      	beq.n	8002cfc <HAL_TIM_Encoder_Start+0xd4>
 8002cea:	e00f      	b.n	8002d0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2100      	movs	r1, #0
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 faf3 	bl	80032e0 <TIM_CCxChannelCmd>
      break;
 8002cfa:	e016      	b.n	8002d2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2201      	movs	r2, #1
 8002d02:	2104      	movs	r1, #4
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 faeb 	bl	80032e0 <TIM_CCxChannelCmd>
      break;
 8002d0a:	e00e      	b.n	8002d2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2201      	movs	r2, #1
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 fae3 	bl	80032e0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	2104      	movs	r1, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f000 fadc 	bl	80032e0 <TIM_CCxChannelCmd>
      break;
 8002d28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d50:	2300      	movs	r3, #0
 8002d52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e0ae      	b.n	8002ec0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0c      	cmp	r3, #12
 8002d6e:	f200 809f 	bhi.w	8002eb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002dad 	.word	0x08002dad
 8002d7c:	08002eb1 	.word	0x08002eb1
 8002d80:	08002eb1 	.word	0x08002eb1
 8002d84:	08002eb1 	.word	0x08002eb1
 8002d88:	08002ded 	.word	0x08002ded
 8002d8c:	08002eb1 	.word	0x08002eb1
 8002d90:	08002eb1 	.word	0x08002eb1
 8002d94:	08002eb1 	.word	0x08002eb1
 8002d98:	08002e2f 	.word	0x08002e2f
 8002d9c:	08002eb1 	.word	0x08002eb1
 8002da0:	08002eb1 	.word	0x08002eb1
 8002da4:	08002eb1 	.word	0x08002eb1
 8002da8:	08002e6f 	.word	0x08002e6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68b9      	ldr	r1, [r7, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f000 f908 	bl	8002fc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699a      	ldr	r2, [r3, #24]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0208 	orr.w	r2, r2, #8
 8002dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699a      	ldr	r2, [r3, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0204 	bic.w	r2, r2, #4
 8002dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6999      	ldr	r1, [r3, #24]
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	619a      	str	r2, [r3, #24]
      break;
 8002dea:	e064      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 f94e 	bl	8003094 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699a      	ldr	r2, [r3, #24]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	699a      	ldr	r2, [r3, #24]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6999      	ldr	r1, [r3, #24]
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	021a      	lsls	r2, r3, #8
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	619a      	str	r2, [r3, #24]
      break;
 8002e2c:	e043      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68b9      	ldr	r1, [r7, #8]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 f999 	bl	800316c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	69da      	ldr	r2, [r3, #28]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f042 0208 	orr.w	r2, r2, #8
 8002e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0204 	bic.w	r2, r2, #4
 8002e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	69d9      	ldr	r1, [r3, #28]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	61da      	str	r2, [r3, #28]
      break;
 8002e6c:	e023      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f000 f9e3 	bl	8003240 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69da      	ldr	r2, [r3, #28]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	69da      	ldr	r2, [r3, #28]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69d9      	ldr	r1, [r3, #28]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	021a      	lsls	r2, r3, #8
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	61da      	str	r2, [r3, #28]
      break;
 8002eae:	e002      	b.n	8002eb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8002eb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a34      	ldr	r2, [pc, #208]	; (8002fac <TIM_Base_SetConfig+0xe4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d00f      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d00b      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a31      	ldr	r2, [pc, #196]	; (8002fb0 <TIM_Base_SetConfig+0xe8>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d007      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a30      	ldr	r2, [pc, #192]	; (8002fb4 <TIM_Base_SetConfig+0xec>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d003      	beq.n	8002f00 <TIM_Base_SetConfig+0x38>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a2f      	ldr	r2, [pc, #188]	; (8002fb8 <TIM_Base_SetConfig+0xf0>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d108      	bne.n	8002f12 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	68fa      	ldr	r2, [r7, #12]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a25      	ldr	r2, [pc, #148]	; (8002fac <TIM_Base_SetConfig+0xe4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d01b      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f20:	d017      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a22      	ldr	r2, [pc, #136]	; (8002fb0 <TIM_Base_SetConfig+0xe8>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d013      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <TIM_Base_SetConfig+0xec>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00f      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <TIM_Base_SetConfig+0xf0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00b      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1f      	ldr	r2, [pc, #124]	; (8002fbc <TIM_Base_SetConfig+0xf4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d007      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <TIM_Base_SetConfig+0xf8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d003      	beq.n	8002f52 <TIM_Base_SetConfig+0x8a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <TIM_Base_SetConfig+0xfc>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d108      	bne.n	8002f64 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <TIM_Base_SetConfig+0xe4>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d103      	bne.n	8002f98 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	615a      	str	r2, [r3, #20]
}
 8002f9e:	bf00      	nop
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40014000 	.word	0x40014000
 8002fc0:	40014400 	.word	0x40014400
 8002fc4:	40014800 	.word	0x40014800

08002fc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	f023 0201 	bic.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f023 0303 	bic.w	r3, r3, #3
 8002ffe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f023 0302 	bic.w	r3, r3, #2
 8003010:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a1c      	ldr	r2, [pc, #112]	; (8003090 <TIM_OC1_SetConfig+0xc8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10c      	bne.n	800303e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0308 	bic.w	r3, r3, #8
 800302a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	4313      	orrs	r3, r2
 8003034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f023 0304 	bic.w	r3, r3, #4
 800303c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a13      	ldr	r2, [pc, #76]	; (8003090 <TIM_OC1_SetConfig+0xc8>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d111      	bne.n	800306a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800304c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003054:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	621a      	str	r2, [r3, #32]
}
 8003084:	bf00      	nop
 8003086:	371c      	adds	r7, #28
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	40010000 	.word	0x40010000

08003094 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 0210 	bic.w	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f023 0320 	bic.w	r3, r3, #32
 80030de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a1e      	ldr	r2, [pc, #120]	; (8003168 <TIM_OC2_SetConfig+0xd4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d10d      	bne.n	8003110 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4313      	orrs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a15      	ldr	r2, [pc, #84]	; (8003168 <TIM_OC2_SetConfig+0xd4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d113      	bne.n	8003140 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800311e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003126:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685a      	ldr	r2, [r3, #4]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	621a      	str	r2, [r3, #32]
}
 800315a:	bf00      	nop
 800315c:	371c      	adds	r7, #28
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	40010000 	.word	0x40010000

0800316c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0303 	bic.w	r3, r3, #3
 80031a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80031b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a1d      	ldr	r2, [pc, #116]	; (800323c <TIM_OC3_SetConfig+0xd0>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d10d      	bne.n	80031e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	4313      	orrs	r3, r2
 80031dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a14      	ldr	r2, [pc, #80]	; (800323c <TIM_OC3_SetConfig+0xd0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d113      	bne.n	8003216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80031f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	693a      	ldr	r2, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	4313      	orrs	r3, r2
 8003214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	621a      	str	r2, [r3, #32]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	40010000 	.word	0x40010000

08003240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003240:	b480      	push	{r7}
 8003242:	b087      	sub	sp, #28
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	021b      	lsls	r3, r3, #8
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800328a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a10      	ldr	r2, [pc, #64]	; (80032dc <TIM_OC4_SetConfig+0x9c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d109      	bne.n	80032b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	019b      	lsls	r3, r3, #6
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000

080032e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2201      	movs	r2, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a1a      	ldr	r2, [r3, #32]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	43db      	mvns	r3, r3
 8003302:	401a      	ands	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1a      	ldr	r2, [r3, #32]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	fa01 f303 	lsl.w	r3, r1, r3
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	621a      	str	r2, [r3, #32]
}
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b082      	sub	sp, #8
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e03f      	b.n	80033bc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f000 f866 	bl	8003422 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2224      	movs	r2, #36	; 0x24
 800335a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800336c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 f86c 	bl	800344c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	691a      	ldr	r2, [r3, #16]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003382:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695a      	ldr	r2, [r3, #20]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003392:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e021      	b.n	800341a <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2224      	movs	r2, #36	; 0x24
 80033da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ec:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f821 	bl	8003436 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_UART_MspDeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspDeInit could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
	...

0800344c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800344c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003450:	b09f      	sub	sp, #124	; 0x7c
 8003452:	af00      	add	r7, sp, #0
 8003454:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003460:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003462:	68d9      	ldr	r1, [r3, #12]
 8003464:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	ea40 0301 	orr.w	r3, r0, r1
 800346c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800346e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	431a      	orrs	r2, r3
 8003478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	431a      	orrs	r2, r3
 800347e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4313      	orrs	r3, r2
 8003484:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003490:	f021 010c 	bic.w	r1, r1, #12
 8003494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800349a:	430b      	orrs	r3, r1
 800349c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800349e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034aa:	6999      	ldr	r1, [r3, #24]
 80034ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	ea40 0301 	orr.w	r3, r0, r1
 80034b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4bc5      	ldr	r3, [pc, #788]	; (80037d0 <UART_SetConfig+0x384>)
 80034bc:	429a      	cmp	r2, r3
 80034be:	d004      	beq.n	80034ca <UART_SetConfig+0x7e>
 80034c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4bc3      	ldr	r3, [pc, #780]	; (80037d4 <UART_SetConfig+0x388>)
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d103      	bne.n	80034d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034ca:	f7ff f87d 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 80034ce:	6778      	str	r0, [r7, #116]	; 0x74
 80034d0:	e002      	b.n	80034d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034d2:	f7ff f865 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 80034d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e0:	f040 80b6 	bne.w	8003650 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034e6:	461c      	mov	r4, r3
 80034e8:	f04f 0500 	mov.w	r5, #0
 80034ec:	4622      	mov	r2, r4
 80034ee:	462b      	mov	r3, r5
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	6439      	str	r1, [r7, #64]	; 0x40
 80034f4:	415b      	adcs	r3, r3
 80034f6:	647b      	str	r3, [r7, #68]	; 0x44
 80034f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034fc:	1912      	adds	r2, r2, r4
 80034fe:	eb45 0303 	adc.w	r3, r5, r3
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	00d9      	lsls	r1, r3, #3
 800350c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003510:	00d0      	lsls	r0, r2, #3
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	1911      	adds	r1, r2, r4
 8003518:	6639      	str	r1, [r7, #96]	; 0x60
 800351a:	416b      	adcs	r3, r5
 800351c:	667b      	str	r3, [r7, #100]	; 0x64
 800351e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	461a      	mov	r2, r3
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	1891      	adds	r1, r2, r2
 800352a:	63b9      	str	r1, [r7, #56]	; 0x38
 800352c:	415b      	adcs	r3, r3
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003530:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003534:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003538:	f7fc fe56 	bl	80001e8 <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4ba5      	ldr	r3, [pc, #660]	; (80037d8 <UART_SetConfig+0x38c>)
 8003542:	fba3 2302 	umull	r2, r3, r3, r2
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	011e      	lsls	r6, r3, #4
 800354a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800354c:	461c      	mov	r4, r3
 800354e:	f04f 0500 	mov.w	r5, #0
 8003552:	4622      	mov	r2, r4
 8003554:	462b      	mov	r3, r5
 8003556:	1891      	adds	r1, r2, r2
 8003558:	6339      	str	r1, [r7, #48]	; 0x30
 800355a:	415b      	adcs	r3, r3
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
 800355e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003562:	1912      	adds	r2, r2, r4
 8003564:	eb45 0303 	adc.w	r3, r5, r3
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	00d9      	lsls	r1, r3, #3
 8003572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003576:	00d0      	lsls	r0, r2, #3
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	1911      	adds	r1, r2, r4
 800357e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003580:	416b      	adcs	r3, r5
 8003582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	461a      	mov	r2, r3
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	1891      	adds	r1, r2, r2
 8003590:	62b9      	str	r1, [r7, #40]	; 0x28
 8003592:	415b      	adcs	r3, r3
 8003594:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003596:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800359a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800359e:	f7fc fe23 	bl	80001e8 <__aeabi_uldivmod>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4b8c      	ldr	r3, [pc, #560]	; (80037d8 <UART_SetConfig+0x38c>)
 80035a8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	2164      	movs	r1, #100	; 0x64
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	3332      	adds	r3, #50	; 0x32
 80035ba:	4a87      	ldr	r2, [pc, #540]	; (80037d8 <UART_SetConfig+0x38c>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035c8:	441e      	add	r6, r3
 80035ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035cc:	4618      	mov	r0, r3
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	1894      	adds	r4, r2, r2
 80035d8:	623c      	str	r4, [r7, #32]
 80035da:	415b      	adcs	r3, r3
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
 80035de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e2:	1812      	adds	r2, r2, r0
 80035e4:	eb41 0303 	adc.w	r3, r1, r3
 80035e8:	f04f 0400 	mov.w	r4, #0
 80035ec:	f04f 0500 	mov.w	r5, #0
 80035f0:	00dd      	lsls	r5, r3, #3
 80035f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80035f6:	00d4      	lsls	r4, r2, #3
 80035f8:	4622      	mov	r2, r4
 80035fa:	462b      	mov	r3, r5
 80035fc:	1814      	adds	r4, r2, r0
 80035fe:	653c      	str	r4, [r7, #80]	; 0x50
 8003600:	414b      	adcs	r3, r1
 8003602:	657b      	str	r3, [r7, #84]	; 0x54
 8003604:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	461a      	mov	r2, r3
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	1891      	adds	r1, r2, r2
 8003610:	61b9      	str	r1, [r7, #24]
 8003612:	415b      	adcs	r3, r3
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800361a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800361e:	f7fc fde3 	bl	80001e8 <__aeabi_uldivmod>
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <UART_SetConfig+0x38c>)
 8003628:	fba3 1302 	umull	r1, r3, r3, r2
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	2164      	movs	r1, #100	; 0x64
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	3332      	adds	r3, #50	; 0x32
 800363a:	4a67      	ldr	r2, [pc, #412]	; (80037d8 <UART_SetConfig+0x38c>)
 800363c:	fba2 2303 	umull	r2, r3, r2, r3
 8003640:	095b      	lsrs	r3, r3, #5
 8003642:	f003 0207 	and.w	r2, r3, #7
 8003646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4432      	add	r2, r6
 800364c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800364e:	e0b9      	b.n	80037c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003650:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003652:	461c      	mov	r4, r3
 8003654:	f04f 0500 	mov.w	r5, #0
 8003658:	4622      	mov	r2, r4
 800365a:	462b      	mov	r3, r5
 800365c:	1891      	adds	r1, r2, r2
 800365e:	6139      	str	r1, [r7, #16]
 8003660:	415b      	adcs	r3, r3
 8003662:	617b      	str	r3, [r7, #20]
 8003664:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003668:	1912      	adds	r2, r2, r4
 800366a:	eb45 0303 	adc.w	r3, r5, r3
 800366e:	f04f 0000 	mov.w	r0, #0
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	00d9      	lsls	r1, r3, #3
 8003678:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800367c:	00d0      	lsls	r0, r2, #3
 800367e:	4602      	mov	r2, r0
 8003680:	460b      	mov	r3, r1
 8003682:	eb12 0804 	adds.w	r8, r2, r4
 8003686:	eb43 0905 	adc.w	r9, r3, r5
 800368a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4618      	mov	r0, r3
 8003690:	f04f 0100 	mov.w	r1, #0
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	008b      	lsls	r3, r1, #2
 800369e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036a2:	0082      	lsls	r2, r0, #2
 80036a4:	4640      	mov	r0, r8
 80036a6:	4649      	mov	r1, r9
 80036a8:	f7fc fd9e 	bl	80001e8 <__aeabi_uldivmod>
 80036ac:	4602      	mov	r2, r0
 80036ae:	460b      	mov	r3, r1
 80036b0:	4b49      	ldr	r3, [pc, #292]	; (80037d8 <UART_SetConfig+0x38c>)
 80036b2:	fba3 2302 	umull	r2, r3, r3, r2
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	011e      	lsls	r6, r3, #4
 80036ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036bc:	4618      	mov	r0, r3
 80036be:	f04f 0100 	mov.w	r1, #0
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	1894      	adds	r4, r2, r2
 80036c8:	60bc      	str	r4, [r7, #8]
 80036ca:	415b      	adcs	r3, r3
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036d2:	1812      	adds	r2, r2, r0
 80036d4:	eb41 0303 	adc.w	r3, r1, r3
 80036d8:	f04f 0400 	mov.w	r4, #0
 80036dc:	f04f 0500 	mov.w	r5, #0
 80036e0:	00dd      	lsls	r5, r3, #3
 80036e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036e6:	00d4      	lsls	r4, r2, #3
 80036e8:	4622      	mov	r2, r4
 80036ea:	462b      	mov	r3, r5
 80036ec:	1814      	adds	r4, r2, r0
 80036ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80036f0:	414b      	adcs	r3, r1
 80036f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	008b      	lsls	r3, r1, #2
 8003708:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800370c:	0082      	lsls	r2, r0, #2
 800370e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003712:	f7fc fd69 	bl	80001e8 <__aeabi_uldivmod>
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4b2f      	ldr	r3, [pc, #188]	; (80037d8 <UART_SetConfig+0x38c>)
 800371c:	fba3 1302 	umull	r1, r3, r3, r2
 8003720:	095b      	lsrs	r3, r3, #5
 8003722:	2164      	movs	r1, #100	; 0x64
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	3332      	adds	r3, #50	; 0x32
 800372e:	4a2a      	ldr	r2, [pc, #168]	; (80037d8 <UART_SetConfig+0x38c>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800373a:	441e      	add	r6, r3
 800373c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800373e:	4618      	mov	r0, r3
 8003740:	f04f 0100 	mov.w	r1, #0
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	1894      	adds	r4, r2, r2
 800374a:	603c      	str	r4, [r7, #0]
 800374c:	415b      	adcs	r3, r3
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003754:	1812      	adds	r2, r2, r0
 8003756:	eb41 0303 	adc.w	r3, r1, r3
 800375a:	f04f 0400 	mov.w	r4, #0
 800375e:	f04f 0500 	mov.w	r5, #0
 8003762:	00dd      	lsls	r5, r3, #3
 8003764:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003768:	00d4      	lsls	r4, r2, #3
 800376a:	4622      	mov	r2, r4
 800376c:	462b      	mov	r3, r5
 800376e:	eb12 0a00 	adds.w	sl, r2, r0
 8003772:	eb43 0b01 	adc.w	fp, r3, r1
 8003776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4618      	mov	r0, r3
 800377c:	f04f 0100 	mov.w	r1, #0
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	008b      	lsls	r3, r1, #2
 800378a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800378e:	0082      	lsls	r2, r0, #2
 8003790:	4650      	mov	r0, sl
 8003792:	4659      	mov	r1, fp
 8003794:	f7fc fd28 	bl	80001e8 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <UART_SetConfig+0x38c>)
 800379e:	fba3 1302 	umull	r1, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	2164      	movs	r1, #100	; 0x64
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	3332      	adds	r3, #50	; 0x32
 80037b0:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <UART_SetConfig+0x38c>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	f003 020f 	and.w	r2, r3, #15
 80037bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4432      	add	r2, r6
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	bf00      	nop
 80037c6:	377c      	adds	r7, #124	; 0x7c
 80037c8:	46bd      	mov	sp, r7
 80037ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037ce:	bf00      	nop
 80037d0:	40011000 	.word	0x40011000
 80037d4:	40011400 	.word	0x40011400
 80037d8:	51eb851f 	.word	0x51eb851f

080037dc <_ZN8QAD_EXTIC1EP12GPIO_TypeDeft>:
//QAD_EXTI Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and EXTI mode disabled
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_EXTI::QAD_EXTI(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  QAD_GPIO_Input(pGPIO, uPin),            //Initialize the inherited QAD_GPIO_Input driver class
	m_eEXTIState(QA_Inactive),              //Initialize the EXTI mode in disabled state
	m_eEdgeType(QAD_EXTI_EdgeType_Rising),  //Initialize the edge type in rising mode
	m_pHandlerFunction(NULL),               //Initialize handler function pointer as NULL
	m_pHandlerClass(NULL) {                 //Initialize handler class pointer as NULL
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	88fa      	ldrh	r2, [r7, #6]
 80037ee:	68b9      	ldr	r1, [r7, #8]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fc5b 	bl	80040ac <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <_ZN8QAD_EXTIC1EP12GPIO_TypeDeft+0x44>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	741a      	strb	r2, [r3, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	745a      	strb	r2, [r3, #17]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	615a      	str	r2, [r3, #20]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	619a      	str	r2, [r3, #24]

}
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	08005e74 	.word	0x08005e74

08003824 <_ZN8QAD_EXTI7handlerEv>:

//QAD_EXTI::handler
//QAD_EXTI Handler Method
//
//This method is to be called by the interrupt handler function from handlers.cpp
void QAD_EXTI::handler(void) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]

	//Check if required pin interrupt has been triggered
  if (__HAL_GPIO_EXTI_GET_IT(m_uPin) != RESET) {
 800382c:	4b14      	ldr	r3, [pc, #80]	; (8003880 <_ZN8QAD_EXTI7handlerEv+0x5c>)
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	8912      	ldrh	r2, [r2, #8]
 8003834:	4013      	ands	r3, r2
 8003836:	2b00      	cmp	r3, #0
 8003838:	bf14      	ite	ne
 800383a:	2301      	movne	r3, #1
 800383c:	2300      	moveq	r3, #0
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	d018      	beq.n	8003876 <_ZN8QAD_EXTI7handlerEv+0x52>

  	//Call interrupt handler callback function if one has been assigned
  	if (m_pHandlerFunction)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <_ZN8QAD_EXTI7handlerEv+0x30>
  		m_pHandlerFunction(NULL);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	2000      	movs	r0, #0
 8003852:	4798      	blx	r3

  	//Call handler method of interrupt handler callback class if one has been assigned
  	if (m_pHandlerClass)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <_ZN8QAD_EXTI7handlerEv+0x4a>
  		m_pHandlerClass->handler(NULL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699a      	ldr	r2, [r3, #24]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2100      	movs	r1, #0
 800386a:	4610      	mov	r0, r2
 800386c:	4798      	blx	r3

  	//Clear pin interrupt
  	__HAL_GPIO_EXTI_CLEAR_IT(m_uPin);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	891a      	ldrh	r2, [r3, #8]
 8003872:	4b03      	ldr	r3, [pc, #12]	; (8003880 <_ZN8QAD_EXTI7handlerEv+0x5c>)
 8003874:	615a      	str	r2, [r3, #20]
  }
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40013c00 	.word	0x40013c00

08003884 <_ZN8QAD_EXTI18setHandlerFunctionEPFvPvE>:
//QAD_EXTI::setHandlerFunction
//QAD_EXTI Control Method
//
//Used to set the pointer to the interrupt handler callback function.
//pHandler - A pointer to the handler callback function. The type is defined in setup.hpp
void QAD_EXTI::setHandlerFunction(QAD_IRQHandler_CallbackFunction pHandler) {
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  m_pHandlerFunction = pHandler;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	615a      	str	r2, [r3, #20]
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_ZN8QAD_EXTI6enableEv>:

//QAD_EXTI::enable
//QAD_EXTI Control Method
//
//Used to enable external interrupt for the required GPIO pin
void QAD_EXTI::enable(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]

  //Setup GPIO
  GPIO_InitTypeDef GPIO_Init = {0};
 80038a8:	f107 030c 	add.w	r3, r7, #12
 80038ac:	2200      	movs	r2, #0
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	609a      	str	r2, [r3, #8]
 80038b4:	60da      	str	r2, [r3, #12]
 80038b6:	611a      	str	r2, [r3, #16]
  GPIO_Init.Pin     = m_uPin;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	891b      	ldrh	r3, [r3, #8]
 80038bc:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Pull    = m_ePullMode;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	68db      	ldr	r3, [r3, #12]
 80038c2:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed   = GPIO_SPEED_FREQ_LOW;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
  switch (m_eEdgeType) {
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7c5b      	ldrb	r3, [r3, #17]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d00e      	beq.n	80038ee <_ZN8QAD_EXTI6enableEv+0x4e>
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	dc10      	bgt.n	80038f6 <_ZN8QAD_EXTI6enableEv+0x56>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <_ZN8QAD_EXTI6enableEv+0x3e>
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d004      	beq.n	80038e6 <_ZN8QAD_EXTI6enableEv+0x46>
 80038dc:	e00b      	b.n	80038f6 <_ZN8QAD_EXTI6enableEv+0x56>
    case (QAD_EXTI_EdgeType_Rising):
    	GPIO_Init.Mode = GPIO_MODE_IT_RISING;
 80038de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80038e2:	613b      	str	r3, [r7, #16]
      break;
 80038e4:	e007      	b.n	80038f6 <_ZN8QAD_EXTI6enableEv+0x56>
    case (QAD_EXTI_EdgeType_Falling):
    	GPIO_Init.Mode = GPIO_MODE_IT_FALLING;
 80038e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80038ea:	613b      	str	r3, [r7, #16]
      break;
 80038ec:	e003      	b.n	80038f6 <_ZN8QAD_EXTI6enableEv+0x56>
    case (QAD_EXTI_EdgeType_Both):
    	GPIO_Init.Mode = GPIO_MODE_IT_RISING_FALLING;
 80038ee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80038f2:	613b      	str	r3, [r7, #16]
      break;
 80038f4:	bf00      	nop
  }
  HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f107 020c 	add.w	r2, r7, #12
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd ff7f 	bl	8001804 <HAL_GPIO_Init>

  //Setup Interrupt
  switch (m_uPin) {
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	891b      	ldrh	r3, [r3, #8]
 800390a:	3b01      	subs	r3, #1
 800390c:	2b0f      	cmp	r3, #15
 800390e:	d837      	bhi.n	8003980 <_ZN8QAD_EXTI6enableEv+0xe0>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <_ZN8QAD_EXTI6enableEv+0x78>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	08003959 	.word	0x08003959
 800391c:	08003961 	.word	0x08003961
 8003920:	08003981 	.word	0x08003981
 8003924:	08003969 	.word	0x08003969
 8003928:	08003981 	.word	0x08003981
 800392c:	08003981 	.word	0x08003981
 8003930:	08003981 	.word	0x08003981
 8003934:	08003971 	.word	0x08003971
 8003938:	08003981 	.word	0x08003981
 800393c:	08003981 	.word	0x08003981
 8003940:	08003981 	.word	0x08003981
 8003944:	08003981 	.word	0x08003981
 8003948:	08003981 	.word	0x08003981
 800394c:	08003981 	.word	0x08003981
 8003950:	08003981 	.word	0x08003981
 8003954:	08003979 	.word	0x08003979
    case (GPIO_PIN_0):
    	m_eIRQ = EXTI0_IRQn;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2206      	movs	r2, #6
 800395c:	749a      	strb	r2, [r3, #18]
      break;
 800395e:	e029      	b.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
    case (GPIO_PIN_1):
    	m_eIRQ = EXTI1_IRQn;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2207      	movs	r2, #7
 8003964:	749a      	strb	r2, [r3, #18]
      break;
 8003966:	e025      	b.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
    case (GPIO_PIN_2):
    	m_eIRQ = EXTI2_IRQn;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2208      	movs	r2, #8
 800396c:	749a      	strb	r2, [r3, #18]
      break;
 800396e:	e021      	b.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
    case (GPIO_PIN_3):
    	m_eIRQ = EXTI3_IRQn;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2209      	movs	r2, #9
 8003974:	749a      	strb	r2, [r3, #18]
      break;
 8003976:	e01d      	b.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
    case (GPIO_PIN_4):
    	m_eIRQ = EXTI4_IRQn;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	220a      	movs	r2, #10
 800397c:	749a      	strb	r2, [r3, #18]
      break;
 800397e:	e019      	b.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
    default:
    	if ((m_uPin >= GPIO_PIN_5) && (m_uPin <= GPIO_PIN_9)) {
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	891b      	ldrh	r3, [r3, #8]
 8003984:	2b1f      	cmp	r3, #31
 8003986:	d908      	bls.n	800399a <_ZN8QAD_EXTI6enableEv+0xfa>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	891b      	ldrh	r3, [r3, #8]
 800398c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003990:	d803      	bhi.n	800399a <_ZN8QAD_EXTI6enableEv+0xfa>
    		m_eIRQ = EXTI9_5_IRQn;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2217      	movs	r2, #23
 8003996:	749a      	strb	r2, [r3, #18]
 8003998:	e00c      	b.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
    	} else if ((m_uPin >= GPIO_PIN_10) && (m_uPin <= GPIO_PIN_15)) {
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	891b      	ldrh	r3, [r3, #8]
 800399e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039a2:	d307      	bcc.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	891b      	ldrh	r3, [r3, #8]
 80039a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ac:	d802      	bhi.n	80039b4 <_ZN8QAD_EXTI6enableEv+0x114>
    		m_eIRQ = EXTI15_10_IRQn;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2228      	movs	r2, #40	; 0x28
 80039b2:	749a      	strb	r2, [r3, #18]
    	}
  }

  //Set external interrupt priority. QAD_IRQPRIORITY_EXTI is defined in setup.hpp
  HAL_NVIC_SetPriority(m_eIRQ, QAD_IRQPRIORITY_EXTI, 0);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80039ba:	2200      	movs	r2, #0
 80039bc:	210a      	movs	r1, #10
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fd fecf 	bl	8001762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(m_eIRQ);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7fd fee5 	bl	800179a <HAL_NVIC_EnableIRQ>

  //Set State
  m_eEXTIState = QA_Active;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	741a      	strb	r2, [r3, #16]
}
 80039d6:	bf00      	nop
 80039d8:	3720      	adds	r7, #32
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop

080039e0 <_ZN8QAD_EXTI7disableEv>:

//QAD_EXTI::disable
//QAD_EXTI Control Method
//
//Disable external interrupt mode for the required pin, which places the pin back into standard GPIO input mode
void QAD_EXTI::disable(void) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  if (!m_eEXTIState)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	7c1b      	ldrb	r3, [r3, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d023      	beq.n	8003a38 <_ZN8QAD_EXTI7disableEv+0x58>
  	return;

  //Disable IRQ
  HAL_NVIC_DisableIRQ(m_eIRQ);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f993 3012 	ldrsb.w	r3, [r3, #18]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd fedd 	bl	80017b6 <HAL_NVIC_DisableIRQ>

  //Set GPIO back to normal input
  GPIO_InitTypeDef GPIO_Init = {0};
 80039fc:	f107 030c 	add.w	r3, r7, #12
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	605a      	str	r2, [r3, #4]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	60da      	str	r2, [r3, #12]
 8003a0a:	611a      	str	r2, [r3, #16]
  GPIO_Init.Pin     = m_uPin;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	891b      	ldrh	r3, [r3, #8]
 8003a10:	60fb      	str	r3, [r7, #12]
  GPIO_Init.Mode    = GPIO_MODE_INPUT;
 8003a12:	2300      	movs	r3, #0
 8003a14:	613b      	str	r3, [r7, #16]
  GPIO_Init.Pull    = m_ePullMode;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	617b      	str	r3, [r7, #20]
  GPIO_Init.Speed   = GPIO_SPEED_FREQ_LOW;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f107 020c 	add.w	r2, r7, #12
 8003a28:	4611      	mov	r1, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fd feea 	bl	8001804 <HAL_GPIO_Init>

  //Set State
  m_eEXTIState = QA_Inactive;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	741a      	strb	r2, [r3, #16]
 8003a36:	e000      	b.n	8003a3a <_ZN8QAD_EXTI7disableEv+0x5a>
  	return;
 8003a38:	bf00      	nop
}
 8003a3a:	3720      	adds	r7, #32
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <_ZN8QAD_EXTI11setPullModeE17QAD_GPIO_PullMode>:
//QAD_EXTI::setPullMode
//QAD_EXTI Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//eMode - New pull mode. Member of QAD_GPIO_PullMode enum as defined in QAD_GPIO.hpp
void QAD_EXTI::setPullMode(QAD_GPIO_PullMode eMode) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]

	//Disable EXTI if currently enabled
	bool bCurMode = false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
	if (m_eEXTIState) {
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7c1b      	ldrb	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d004      	beq.n	8003a60 <_ZN8QAD_EXTI11setPullModeE17QAD_GPIO_PullMode+0x20>
		bCurMode = true;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
		disable();
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff ffc0 	bl	80039e0 <_ZN8QAD_EXTI7disableEv>
	}

	//Store new pull mode
	m_ePullMode = eMode;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	60da      	str	r2, [r3, #12]

	//Reinitialize GPIO peripheral
	periphInit();
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f000 fb4c 	bl	8004106 <_ZN14QAD_GPIO_Input10periphInitEv>

	//Renable EXTI if previously enabled
	if (bCurMode)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <_ZN8QAD_EXTI11setPullModeE17QAD_GPIO_PullMode+0x3a>
		enable();
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff13 	bl	80038a0 <_ZN8QAD_EXTI6enableEv>
}
 8003a7a:	bf00      	nop
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <_ZN12QAD_TimerMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_TimerMgr& get(void) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
		static QAD_TimerMgr instance;
 8003a88:	4b10      	ldr	r3, [pc, #64]	; (8003acc <_ZN12QAD_TimerMgr3getEv+0x48>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f3bf 8f5b 	dmb	ish
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf0c      	ite	eq
 8003a9a:	2301      	moveq	r3, #1
 8003a9c:	2300      	movne	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d010      	beq.n	8003ac6 <_ZN12QAD_TimerMgr3getEv+0x42>
 8003aa4:	4809      	ldr	r0, [pc, #36]	; (8003acc <_ZN12QAD_TimerMgr3getEv+0x48>)
 8003aa6:	f001 fff3 	bl	8005a90 <__cxa_guard_acquire>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d005      	beq.n	8003ac6 <_ZN12QAD_TimerMgr3getEv+0x42>
 8003aba:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <_ZN12QAD_TimerMgr3getEv+0x4c>)
 8003abc:	f001 f90c 	bl	8004cd8 <_ZN12QAD_TimerMgrC1Ev>
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <_ZN12QAD_TimerMgr3getEv+0x48>)
 8003ac2:	f001 fff1 	bl	8005aa8 <__cxa_guard_release>
		return instance;
 8003ac6:	4b02      	ldr	r3, [pc, #8]	; (8003ad0 <_ZN12QAD_TimerMgr3getEv+0x4c>)
	}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	2000014c 	.word	0x2000014c
 8003ad0:	200000ac 	.word	0x200000ac

08003ad4 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>:
  //Data Methods

	//Used to retrieve the current state of a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the state for. Member of QAD_Timer_Periph
	//Returns member of QAD_TimerState enum
	static QAD_Timer_State getState(QAD_Timer_Periph eTimer) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].eState;
 8003ade:	f7ff ffd1 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8003ae2:	4601      	mov	r1, r0
 8003ae4:	79fa      	ldrb	r2, [r7, #7]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	440b      	add	r3, r1
 8003af0:	3301      	adds	r3, #1
 8003af2:	781b      	ldrb	r3, [r3, #0]
	}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <_ZN12QAD_TimerMgr10getEncoderE16QAD_Timer_Periph>:
	}

	//Used to retrieve whether a particular Timer peripheral has rotary encoder mode support
	//eTimer - The Timer peripheral to retrieve the rotary encoder mode support for. Member of QAD_Timer_Periph
	//Returns true if the timer has rotary encoder mode support, or false if not supported
	static bool getEncoder(QAD_Timer_Periph eTimer) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].bEncoder;
 8003b06:	f7ff ffbd 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8003b0a:	4601      	mov	r1, r0
 8003b0c:	79fa      	ldrb	r2, [r7, #7]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	330a      	adds	r3, #10
 8003b1a:	781b      	ldrb	r3, [r3, #0]
	}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>:
	}

	//Used to retrieve an instance for a Timer peripheral
	//eTimer - The Timer peripheral to retrieve the instance for. Member of QAD_Timer_Periph
	//Returns TIM_TypeDef, as defined in stm32f411xe.h
	static TIM_TypeDef* getInstance(QAD_Timer_Periph eTimer) {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].pInstance;
 8003b2e:	f7ff ffa9 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8003b32:	4601      	mov	r1, r0
 8003b34:	79fa      	ldrb	r2, [r7, #7]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	330c      	adds	r3, #12
 8003b42:	681b      	ldr	r3, [r3, #0]
	}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
	//Management Methods

	//Used to register a Timer peripheral as being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected Timer is already in use
	static QA_Result registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	460a      	mov	r2, r1
 8003b56:	71fb      	strb	r3, [r7, #7]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	71bb      	strb	r3, [r7, #6]
		return get().imp_registerTimer(eTimer, eState);
 8003b5c:	f7ff ff92 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8003b60:	79ba      	ldrb	r2, [r7, #6]
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	4619      	mov	r1, r3
 8003b66:	f001 f9c5 	bl	8004ef4 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>
 8003b6a:	4603      	mov	r3, r0
	}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3708      	adds	r7, #8
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>:

	//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
	//eTimer - The Timer peripheral to be registered. Member of QAD_Timer_Periph
	static void deregisterTimer(QAD_Timer_Periph eTimer) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterTimer(eTimer);
 8003b7e:	f7ff ff81 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8003b82:	4602      	mov	r2, r0
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f001 f9de 	bl	8004f4a <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>
	}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>:
	//-------------
	//Clock Methods

	//Used to enable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to enable the clock for
	static void enableClock(QAD_Timer_Periph eTimer) {
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b082      	sub	sp, #8
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eTimer);
 8003ba0:	f7ff ff70 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f001 f9e4 	bl	8004f78 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>
	}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>:

	//Used to disable the clock for a specific Timer peripheral
	//eTimer - The Timer peripheral to disable the clock for
	static void disableClock(QAD_Timer_Periph eTimer) {
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eTimer);
 8003bc2:	f7ff ff5f 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	4610      	mov	r0, r2
 8003bce:	f001 fad5 	bl	800517c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>
	}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZN11QAD_Encoder4initEv>:
//QAD_Encoder::init
//QAD_Encoder Initialization Method
//
//Used to initialize the encoder driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_Encoder::init(void) {
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b084      	sub	sp, #16
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]

	//Check if selected Timer peripheral supports rotary encoder mode
  if (!QAD_TimerMgr::getEncoder(m_eTimer)) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7cdb      	ldrb	r3, [r3, #19]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff ff88 	bl	8003afc <_ZN12QAD_TimerMgr10getEncoderE16QAD_Timer_Periph>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f083 0301 	eor.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d001      	beq.n	8003bfc <_ZN11QAD_Encoder4initEv+0x22>
  	return QA_Error_PeriphNotSupported;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e022      	b.n	8003c42 <_ZN11QAD_Encoder4initEv+0x68>
  }

  //Check if selected Timer peripheral is currently available
  if (QAD_TimerMgr::getState(m_eTimer))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	7cdb      	ldrb	r3, [r3, #19]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff ff67 	bl	8003ad4 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <_ZN11QAD_Encoder4initEv+0x40>
  	return QA_Error_PeriphBusy;
 8003c16:	2302      	movs	r3, #2
 8003c18:	e013      	b.n	8003c42 <_ZN11QAD_Encoder4initEv+0x68>

  //Register Timer peripheral as now being in use
  QAD_TimerMgr::registerTimer(m_eTimer, QAD_Timer_InUse_Encoder);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	7cdb      	ldrb	r3, [r3, #19]
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff ff93 	bl	8003b4c <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>

  //Initialize the Timer peripheral
  QA_Result eRes = periphInit();
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f8e2 	bl	8003df0 <_ZN11QAD_Encoder10periphInitEv>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister the timer peripheral
  if (eRes)
 8003c30:	7bfb      	ldrb	r3, [r7, #15]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d004      	beq.n	8003c40 <_ZN11QAD_Encoder4initEv+0x66>
  	QAD_TimerMgr::deregisterTimer(m_eTimer);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7cdb      	ldrb	r3, [r3, #19]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff ff9a 	bl	8003b74 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>

  //Return initialization result
  return eRes;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_ZN11QAD_Encoder5startEv>:

//QAD_Encoder::start
//QAD_Encoder Control Method
//
//This method is used to start the timer peripheral in encoder mode
void QAD_Encoder::start(void) {
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b082      	sub	sp, #8
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]

	//Check encoder driver is initialized and is not currently active
  if ((m_eInitState) && (!m_eState)) {
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d011      	beq.n	8003c80 <_ZN11QAD_Encoder5startEv+0x36>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d10c      	bne.n	8003c80 <_ZN11QAD_Encoder5startEv+0x36>

  	//Clear encoder/counter data
  	clearData();
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f97c 	bl	8003f64 <_ZN11QAD_Encoder9clearDataEv>

  	//Start Timer peripheral in encoder mode
  	HAL_TIM_Encoder_Start(&m_sHandle, TIM_CHANNEL_ALL);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3314      	adds	r3, #20
 8003c70:	213c      	movs	r1, #60	; 0x3c
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fe ffd8 	bl	8002c28 <HAL_TIM_Encoder_Start>

  	//Set driver state to active
  	m_eState = QA_Active;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
}
 8003c80:	bf00      	nop
 8003c82:	3708      	adds	r7, #8
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_ZN11QAD_Encoder6updateEm>:
//This method needs to be called prior to calling the getValue() method in order for getValue() to return
//the most recent encoder value.
//
//uTicks - The time (in milliseconds) that has passed since this method was last called
//         This is used to be able to calculate the encoder acceleration value
void QAD_Encoder::update(uint32_t uTicks) {
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]

	//Check that encoder driver is active
	if (m_eState) {
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d06a      	beq.n	8003d72 <_ZN11QAD_Encoder6updateEm+0xea>

		m_uValueOld = m_uValueNew;                        //Store previous current value into old value
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		m_uValueNew = __HAL_TIM_GET_COUNTER(&m_sHandle);  //Update current value from Timer's counter register
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

		//The following code is used to determine if the encoder has been moved in a clockwise or counter-clockwise rotation,
		//while also taking into account whether the counter register value has wrapped around
		uint16_t uDiffA;
		uint16_t uDiffB;
		bool bValComp = (m_uValueNew < m_uValueOld);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	bf34      	ite	cc
 8003cc6:	2301      	movcc	r3, #1
 8003cc8:	2300      	movcs	r3, #0
 8003cca:	72fb      	strb	r3, [r7, #11]
		if (bValComp) {
 8003ccc:	7afb      	ldrb	r3, [r7, #11]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d014      	beq.n	8003cfc <_ZN11QAD_Encoder6updateEm+0x74>
			uDiffA = m_uValueOld - m_uValueNew;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	81fb      	strh	r3, [r7, #14]
			uDiffB = m_uValueNew + (m_uMaxVal - m_uValueOld);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8819      	ldrh	r1, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003cf2:	1acb      	subs	r3, r1, r3
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	4413      	add	r3, r2
 8003cf8:	81bb      	strh	r3, [r7, #12]
 8003cfa:	e013      	b.n	8003d24 <_ZN11QAD_Encoder6updateEm+0x9c>
		} else {
			uDiffA = m_uValueNew - m_uValueOld;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	81fb      	strh	r3, [r7, #14]
			uDiffB = m_uValueOld + (m_uMaxVal - m_uValueNew);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8819      	ldrh	r1, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003d1c:	1acb      	subs	r3, r1, r3
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	4413      	add	r3, r2
 8003d22:	81bb      	strh	r3, [r7, #12]
		}
		uint16_t uDiff = (uDiffA < uDiffB) ? uDiffA : uDiffB;
 8003d24:	89fa      	ldrh	r2, [r7, #14]
 8003d26:	89bb      	ldrh	r3, [r7, #12]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d201      	bcs.n	8003d30 <_ZN11QAD_Encoder6updateEm+0xa8>
 8003d2c:	89fb      	ldrh	r3, [r7, #14]
 8003d2e:	e000      	b.n	8003d32 <_ZN11QAD_Encoder6updateEm+0xaa>
 8003d30:	89bb      	ldrh	r3, [r7, #12]
 8003d32:	813b      	strh	r3, [r7, #8]
		m_iValue += (bValComp ? 0-uDiff : uDiff);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	7afb      	ldrb	r3, [r7, #11]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d003      	beq.n	8003d4a <_ZN11QAD_Encoder6updateEm+0xc2>
 8003d42:	893b      	ldrh	r3, [r7, #8]
 8003d44:	425b      	negs	r3, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	e000      	b.n	8003d4c <_ZN11QAD_Encoder6updateEm+0xc4>
 8003d4a:	893b      	ldrh	r3, [r7, #8]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	b21a      	sxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

		//Calculate encoder acceleration value
		m_uAccel = uDiff * 1000 / uTicks;
 8003d58:	893b      	ldrh	r3, [r7, #8]
 8003d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	461a      	mov	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	}
}
 8003d72:	bf00      	nop
 8003d74:	3714      	adds	r7, #20
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr

08003d7e <_ZN11QAD_Encoder8getValueEv>:
//Takes into account if the encoder mode is set to linear (QAD_EncoderMode_Linear) or exponential (QAD_EncoderMode_Exp)
//NOTE: the update() method needs to be called prior to getValue() in order to obtain the most recent value
//
//Returns a positive number if encoder is turned clockwise, or a negative number if encoder is turned anti-clockwise
//If you get opposite results than this then try swapping the two quadrature signal wires
int16_t QAD_Encoder::getValue(void) {
 8003d7e:	b480      	push	{r7}
 8003d80:	b085      	sub	sp, #20
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]

	//Check that driver is currently active
  if (m_eInitState) {
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d028      	beq.n	8003de2 <_ZN11QAD_Encoder8getValueEv+0x64>

  	//As each click of the encoder generates four quadrature signal 'edges', a single click of the encoder will change the timer
  	//counter register value by a value of +/- 4. The following code is used to take this into account.
  	int16_t iOutVal = m_iValue / 4;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da00      	bge.n	8003d9c <_ZN11QAD_Encoder8getValueEv+0x1e>
 8003d9a:	3303      	adds	r3, #3
 8003d9c:	109b      	asrs	r3, r3, #2
 8003d9e:	81fb      	strh	r3, [r7, #14]
  	m_iValue = m_iValue % 4;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f9b3 3062 	ldrsh.w	r3, [r3, #98]	; 0x62
 8003da6:	425a      	negs	r2, r3
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	f002 0203 	and.w	r2, r2, #3
 8003db0:	bf58      	it	pl
 8003db2:	4253      	negpl	r3, r2
 8003db4:	b21a      	sxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  	//Return the current value based on the currently selected encoder mode
  	return (m_eMode) ? (iOutVal * iOutVal * iOutVal) : iOutVal;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <_ZN11QAD_Encoder8getValueEv+0x5e>
 8003dc6:	89fa      	ldrh	r2, [r7, #14]
 8003dc8:	89fb      	ldrh	r3, [r7, #14]
 8003dca:	fb12 f303 	smulbb	r3, r2, r3
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	89fb      	ldrh	r3, [r7, #14]
 8003dd2:	fb12 f303 	smulbb	r3, r2, r3
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	e003      	b.n	8003de4 <_ZN11QAD_Encoder8getValueEv+0x66>
 8003ddc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003de0:	e000      	b.n	8003de4 <_ZN11QAD_Encoder8getValueEv+0x66>
  }

  //Return a value of 0 if the driver is currently inactive
  return 0;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <_ZN11QAD_Encoder10periphInitEv>:
//
//Used to initialize the GPIOs, timer peripheral clock, the timer peripheral itself in encoder mode
//In the case of a failed initialization, a partial deinitialization will be performed to make sure that the periphal, clock and GPIOs
//are all in the uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_Encoder::periphInit(void) {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b090      	sub	sp, #64	; 0x40
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_Init = {0};
 8003df8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]

  //Encoder Quadrature Channel 1 GPIO Initialization
  GPIO_Init.Pin       = m_uCh1_Pin;            //Set pin number
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	891b      	ldrh	r3, [r3, #8]
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;       //Set pin as Alternate Function in push/pull mode
 8003e0e:	2302      	movs	r3, #2
 8003e10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_Init.Pull      = GPIO_NOPULL;           //Disable pull-up and pull-down resistors
 8003e12:	2300      	movs	r3, #0
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_HIGH;  //Unused due to pin being used as peripheral input
 8003e16:	2302      	movs	r3, #2
 8003e18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_Init.Alternate = m_uCh1_AF;             //Set alternate function to suit required timer peripheral
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	7a9b      	ldrb	r3, [r3, #10]
 8003e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(m_pCh1_GPIO, &GPIO_Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003e28:	4611      	mov	r1, r2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd fcea 	bl	8001804 <HAL_GPIO_Init>

  //Encoder Quadrature Channel 2 GPIO Initialization
  GPIO_Init.Pin       = m_uCh2_Pin;            //Set pin number
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	8a1b      	ldrh	r3, [r3, #16]
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_Init.Alternate = m_uCh2_AF;             //Set alternate function to suit required timer peripheral
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7c9b      	ldrb	r3, [r3, #18]
 8003e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(m_pCh2_GPIO, &GPIO_Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd fcdc 	bl	8001804 <HAL_GPIO_Init>

  //Enable Timer Clock
  QAD_TimerMgr::enableClock(m_eTimer);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	7cdb      	ldrb	r3, [r3, #19]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7ff fea0 	bl	8003b96 <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>

  //Initialize Timer
  m_sHandle.Instance               = QAD_TimerMgr::getInstance(m_eTimer);  //Set instance for required timer peripheral
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	7cdb      	ldrb	r3, [r3, #19]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fe62 	bl	8003b24 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	615a      	str	r2, [r3, #20]
  m_sHandle.Init.Prescaler         = 0;                                    //Prescaler is unused as timer counter is clocked by the encoder's quadrature signal
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	619a      	str	r2, [r3, #24]
  m_sHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;                   //Counter mode is unused as timer counter is updated based on quadrature signal
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
  m_sHandle.Init.Period            = m_uMaxVal;                            //Set timer period
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	461a      	mov	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	621a      	str	r2, [r3, #32]
  m_sHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;               //Unused
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
  m_sHandle.Init.RepetitionCounter = 0x0;                                  //
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
  m_sHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;        //Enable preload of the timer's auto-reload register
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c

  TIM_Encoder_InitTypeDef ENC_Init = {0};                                  //Fill out encoder mode initialization structure
 8003e8e:	f107 0308 	add.w	r3, r7, #8
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fe82 	bl	8005ba0 <memset>
  ENC_Init.EncoderMode   = TIM_ENCODERMODE_TI12;                           //Set mode to counting on both TI1 and TI2
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	60bb      	str	r3, [r7, #8]
  ENC_Init.IC1Polarity   = TIM_ICPOLARITY_RISING;                          //Set IC1 polarity to rising edge
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	60fb      	str	r3, [r7, #12]
  ENC_Init.IC1Selection  = TIM_ICSELECTION_DIRECTTI;                       //Set IC1 to direct connection mode
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	613b      	str	r3, [r7, #16]
  ENC_Init.IC1Prescaler  = TIM_ICPSC_DIV1;                                 //IC1 capture performed on each edge
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  ENC_Init.IC1Filter     = 0x0;                                            //Disable IC1 input capture filter
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
  ENC_Init.IC2Polarity   = TIM_ICPOLARITY_RISING;                          //Set IC2 polarity to rising edge
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61fb      	str	r3, [r7, #28]
  ENC_Init.IC2Selection  = TIM_ICSELECTION_DIRECTTI;                       //Set IC2 to direct connection mode
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	623b      	str	r3, [r7, #32]
  ENC_Init.IC2Prescaler  = TIM_ICPSC_DIV1;                                 //IC2 capture performed on each edge
 8003eb8:	2300      	movs	r3, #0
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
  ENC_Init.IC2Filter     = 0x0;                                            //Disable IC2 input capture filter
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62bb      	str	r3, [r7, #40]	; 0x28

  //Initialize Timer in encoder mode, performing a partial deinitialization if the initialization fails
  if (HAL_TIM_Encoder_Init(&m_sHandle, &ENC_Init) != HAL_OK) {
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3314      	adds	r3, #20
 8003ec4:	f107 0208 	add.w	r2, r7, #8
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fdae 	bl	8002a2c <HAL_TIM_Encoder_Init>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <_ZN11QAD_Encoder10periphInitEv+0xfc>
  	periphDeinit(DeinitPartial);
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f80f 	bl	8003f06 <_ZN11QAD_Encoder12periphDeinitENS_10DeinitModeE>
  	return QA_Fail;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e008      	b.n	8003efe <_ZN11QAD_Encoder10periphInitEv+0x10e>
  }

  //Set Driver States
  m_eInitState = QA_Initialized; //Set driver state as initialized
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  m_eState     = QA_Inactive;    //Set driver as currently inactive
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  //Return
  return QA_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3740      	adds	r7, #64	; 0x40
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <_ZN11QAD_Encoder12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, timer peripheral clock and the peripheral itself
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_Encoder::periphDeinit(QAD_Encoder::DeinitMode eDeinitMode) {
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d004      	beq.n	8003f22 <_ZN11QAD_Encoder12periphDeinitENS_10DeinitModeE+0x1c>

		//Deinitialize Timer Peripheral
		HAL_TIM_Encoder_DeInit(&m_sHandle);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3314      	adds	r3, #20
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fe fe2b 	bl	8002b78 <HAL_TIM_Encoder_DeInit>
	}

	//Disable Timer Clock
	QAD_TimerMgr::disableClock(m_eTimer);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7cdb      	ldrb	r3, [r3, #19]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fe46 	bl	8003bb8 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>

	//Deinit GPIOs
	HAL_GPIO_DeInit(m_pCh1_GPIO, m_uCh1_Pin);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	891b      	ldrh	r3, [r3, #8]
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f7fd fde8 	bl	8001b0c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pCh2_GPIO, m_uCh2_Pin);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	8a1b      	ldrh	r3, [r3, #16]
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7fd fde0 	bl	8001b0c <HAL_GPIO_DeInit>

	//Set States
	m_eState     = QA_Inactive;        //Set driver as currently inactive
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	m_eInitState = QA_NotInitialized;  //Set driver state as not initialized
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8003f5c:	bf00      	nop
 8003f5e:	3708      	adds	r7, #8
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <_ZN11QAD_Encoder9clearDataEv>:

//QAD_Encoder::clearData
//QAD_Encoder Private Tool Method
//
//Used to clear the encoder/counter data, as well as clearing the Timer's counter register to 0
void QAD_Encoder::clearData(void) {
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  m_uValueOld = 0;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  m_uValueNew = 0;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  m_iValue    = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  m_uAccel    = 0;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  __HAL_TIM_SET_COUNTER(&m_sHandle, 0);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <_ZN15QAD_GPIO_OutputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Output Constructor
//
//This method will initialize the required GPIO pin in Push Pull mode, with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Output::QAD_GPIO_Output(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
	m_pGPIO(pGPIO),
	m_uPin(uPin),
	m_eOutputMode(QAD_GPIO_OutputMode_PushPull),
	m_ePullMode(QAD_GPIO_PullMode_NoPull),
	m_eSpeed(QAD_GPIO_Speed_Low),
	m_eState(QAD_GPIO_PinState_Off) {
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	601a      	str	r2, [r3, #0]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	809a      	strh	r2, [r3, #4]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	719a      	strb	r2, [r3, #6]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	60da      	str	r2, [r3, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	741a      	strb	r2, [r3, #16]

	//Initialize the GPIO Pin
  periphInit();
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f841 	bl	800405a <_ZN15QAD_GPIO_Output10periphInitEv>
}
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <_ZN15QAD_GPIO_Output2onEv>:

//QAD_GPIO_Output::on
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin on
void QAD_GPIO_Output::on(void) {
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_SET);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	889b      	ldrh	r3, [r3, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f7fd fe6d 	bl	8001cd4 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_On;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	741a      	strb	r2, [r3, #16]
}
 8004000:	bf00      	nop
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_ZN15QAD_GPIO_Output3offEv>:

//QAD_GPIO_Output::off
//QAD_GPIO_Output Control Method
//
//Used to turn the GPIO pin off
void QAD_GPIO_Output::off(void) {
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_pGPIO, m_uPin, GPIO_PIN_RESET);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6818      	ldr	r0, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	889b      	ldrh	r3, [r3, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	4619      	mov	r1, r3
 800401c:	f7fd fe5a 	bl	8001cd4 <HAL_GPIO_WritePin>
	m_eState = QAD_GPIO_PinState_Off;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	741a      	strb	r2, [r3, #16]
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <_ZN15QAD_GPIO_Output6toggleEv>:

//QAD_GPIO_Output::toggle
//QAD_GPIO_Output Control Method
//
//Used to toggle the state of the GPIO pin (will turn off if currently on, or turn on if currently off)
void QAD_GPIO_Output::toggle(void) {
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]

	switch (m_eState) {
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	7c1b      	ldrb	r3, [r3, #16]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d005      	beq.n	800404a <_ZN15QAD_GPIO_Output6toggleEv+0x1c>
 800403e:	2b01      	cmp	r3, #1
 8004040:	d107      	bne.n	8004052 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_On):
	  	off();
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ffe0 	bl	8004008 <_ZN15QAD_GPIO_Output3offEv>
	    break;
 8004048:	e003      	b.n	8004052 <_ZN15QAD_GPIO_Output6toggleEv+0x24>
	  case (QAD_GPIO_PinState_Off):
	  	on();
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ffc9 	bl	8003fe2 <_ZN15QAD_GPIO_Output2onEv>
	    break;
 8004050:	bf00      	nop
	}
}
 8004052:	bf00      	nop
 8004054:	3708      	adds	r7, #8
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <_ZN15QAD_GPIO_Output10periphInitEv>:
//QAD_GPIO_Output::periphInit
//QAD_GPIO_Output Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Output::periphInit(void) {
 800405a:	b580      	push	{r7, lr}
 800405c:	b088      	sub	sp, #32
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8004062:	f107 030c 	add.w	r3, r7, #12
 8004066:	2200      	movs	r2, #0
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	605a      	str	r2, [r3, #4]
 800406c:	609a      	str	r2, [r3, #8]
 800406e:	60da      	str	r2, [r3, #12]
 8004070:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	889b      	ldrh	r3, [r3, #4]
 8004076:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = m_eOutputMode ? GPIO_MODE_OUTPUT_OD : GPIO_MODE_OUTPUT_PP;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	799b      	ldrb	r3, [r3, #6]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <_ZN15QAD_GPIO_Output10periphInitEv+0x2a>
 8004080:	2311      	movs	r3, #17
 8004082:	e000      	b.n	8004086 <_ZN15QAD_GPIO_Output10periphInitEv+0x2c>
 8004084:	2301      	movs	r3, #1
 8004086:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = m_eSpeed;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f107 020c 	add.w	r2, r7, #12
 800409c:	4611      	mov	r1, r2
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fd fbb0 	bl	8001804 <HAL_GPIO_Init>
}
 80040a4:	bf00      	nop
 80040a6:	3720      	adds	r7, #32
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft>:
//QAD_GPIO_Input Constructor
//
//This method will initialize the required GPIO pin with Pull Up and Pull Down resistors disabled, and in low speed mode
//pGPIO - The GPIO port for the required pin. A member of GPIO_TypeDef as defined in stm32f411xe.h
//uPin  - The pin number for the required pin. A member of GPIO_pins_define as defined in stm32f4xx_hal_gpio.h
QAD_GPIO_Input::QAD_GPIO_Input(GPIO_TypeDef* pGPIO, uint16_t uPin) :
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	4613      	mov	r3, r2
 80040b8:	80fb      	strh	r3, [r7, #6]
		m_pGPIO(pGPIO),
		m_uPin(uPin),
		m_ePullMode(QAD_GPIO_PullMode_NoPull) {
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <_ZN14QAD_GPIO_InputC1EP12GPIO_TypeDeft+0x38>)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	88fa      	ldrh	r2, [r7, #6]
 80040ca:	811a      	strh	r2, [r3, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]

	//Initialize the GPIO pin
	periphInit();
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f817 	bl	8004106 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	08005e80 	.word	0x08005e80

080040e8 <_ZN14QAD_GPIO_Input11setPullModeE17QAD_GPIO_PullMode>:
//QAD_GPIO_Input::setPullMode
//QAD_GPIO_Input Control Method
//
//Sets new pull mode (Pull-up, Pull-down or No-pull)
//ePull - New pull mode. Member of QAD_GPIO_PullMode as defined in QAD_GPIO.hpp
void QAD_GPIO_Input::setPullMode(QAD_GPIO_PullMode ePull) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]

	//Store new Pull mode setting
	m_ePullMode = ePull;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	60da      	str	r2, [r3, #12]

	//Reinitialize peripheral with new Pull mode
	periphInit();
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f804 	bl	8004106 <_ZN14QAD_GPIO_Input10periphInitEv>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <_ZN14QAD_GPIO_Input10periphInitEv>:
//QAD_GPIO_Input::periphInit
//QAD_GPIO_Input Private Initialization Method
//
//Used to initialize the GPIO Pin based on the currently selected settings
//Specifically to be called by device class constructors and methods used for changing settings
void QAD_GPIO_Input::periphInit(void) {
 8004106:	b580      	push	{r7, lr}
 8004108:	b088      	sub	sp, #32
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_Init = {0};
 800410e:	f107 030c 	add.w	r3, r7, #12
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	605a      	str	r2, [r3, #4]
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	60da      	str	r2, [r3, #12]
 800411c:	611a      	str	r2, [r3, #16]
	GPIO_Init.Pin    = m_uPin;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	891b      	ldrh	r3, [r3, #8]
 8004122:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode   = GPIO_MODE_INPUT;
 8004124:	2300      	movs	r3, #0
 8004126:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull   = m_ePullMode;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed  = GPIO_SPEED_FREQ_LOW;
 800412e:	2300      	movs	r3, #0
 8004130:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(m_pGPIO, &GPIO_Init);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f107 020c 	add.w	r2, r7, #12
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f7fd fb61 	bl	8001804 <HAL_GPIO_Init>
}
 8004142:	bf00      	nop
 8004144:	3720      	adds	r7, #32
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>:
	static uint8_t getChannels(QAD_Timer_Periph eTimer) {
 800414a:	b580      	push	{r7, lr}
 800414c:	b082      	sub	sp, #8
 800414e:	af00      	add	r7, sp, #0
 8004150:	4603      	mov	r3, r0
 8004152:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].uChannels;
 8004154:	f7ff fc96 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8004158:	4601      	mov	r1, r0
 800415a:	79fa      	ldrb	r2, [r7, #7]
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	3309      	adds	r3, #9
 8004168:	781b      	ldrb	r3, [r3, #0]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <_ZN7QAD_PWM4initEv>:
//QAD_PWM::init
//QAD_PWM Initialization Method
//
//Used to initialize the PWM driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_PWM::init(void) {
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]

	//Check if selected Timer peripheral is currently available
  if (QAD_TimerMgr::getState(m_eTimer))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	789b      	ldrb	r3, [r3, #2]
 800417e:	4618      	mov	r0, r3
 8004180:	f7ff fca8 	bl	8003ad4 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	bf14      	ite	ne
 800418a:	2301      	movne	r3, #1
 800418c:	2300      	moveq	r3, #0
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b00      	cmp	r3, #0
 8004192:	d001      	beq.n	8004198 <_ZN7QAD_PWM4initEv+0x26>
  	return QA_Error_PeriphBusy;
 8004194:	2302      	movs	r3, #2
 8004196:	e013      	b.n	80041c0 <_ZN7QAD_PWM4initEv+0x4e>

  //Register Timer peripheral as now being in use
  QAD_TimerMgr::registerTimer(m_eTimer, QAD_Timer_InUse_PWM);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	789b      	ldrb	r3, [r3, #2]
 800419c:	2103      	movs	r1, #3
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fcd4 	bl	8003b4c <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>

  //Initialize the Timer peripheral
  QA_Result eRes = periphInit();
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f88c 	bl	80042c2 <_ZN7QAD_PWM10periphInitEv>
 80041aa:	4603      	mov	r3, r0
 80041ac:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister the Timer peripheral
  if (eRes)
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d004      	beq.n	80041be <_ZN7QAD_PWM4initEv+0x4c>
  	QAD_TimerMgr::deregisterTimer(m_eTimer);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	789b      	ldrb	r3, [r3, #2]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff fcdb 	bl	8003b74 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>

  //Return initialization result
  return eRes;
 80041be:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_ZN7QAD_PWM5startEv>:

//QAD_PWM::start
//QAD_PWM Control Method
//
//Starts the PWM driver
void QAD_PWM::start(void) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

	//Iterate through the number of channels supported by the specific timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	789b      	ldrb	r3, [r3, #2]
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff ffb6 	bl	800414a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	7bfb      	ldrb	r3, [r7, #15]
 80041e4:	4293      	cmp	r3, r2
 80041e6:	bf34      	ite	cc
 80041e8:	2301      	movcc	r3, #1
 80041ea:	2300      	movcs	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d019      	beq.n	8004226 <_ZN7QAD_PWM5startEv+0x5e>

		//If channel is set to active then start PWM on that channel
		if (m_sChannels[i].eActive)
 80041f2:	7bfa      	ldrb	r2, [r7, #15]
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	4613      	mov	r3, r2
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	440b      	add	r3, r1
 8004200:	3354      	adds	r3, #84	; 0x54
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <_ZN7QAD_PWM5startEv+0x56>
			HAL_TIM_PWM_Start(&m_sHandle, m_uChannelSelect[i]);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	1d18      	adds	r0, r3, #4
 800420c:	7bfb      	ldrb	r3, [r7, #15]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	3320      	adds	r3, #32
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	4619      	mov	r1, r3
 800421a:	f7fe fb57 	bl	80028cc <HAL_TIM_PWM_Start>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	3301      	adds	r3, #1
 8004222:	73fb      	strb	r3, [r7, #15]
 8004224:	e7d6      	b.n	80041d4 <_ZN7QAD_PWM5startEv+0xc>
	}

	//Set PWM driver state to active
	m_eState = QA_Active;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	705a      	strb	r2, [r3, #1]
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt>:
//QAD_PWM Control Method
//
//Sets the current PWM value for a specific channel
//eChannel - The PWM channel to set the value for. A member of QAD_PWM_Channel as defined in QAD_PWM.hpp
//uVal     - The PWM value to set. This value should not be larger than the timer period set within the driver initialization structure
void QAD_PWM::setPWMVal(QAD_PWM_Channel eChannel, uint16_t uVal) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
 8004240:	4613      	mov	r3, r2
 8004242:	803b      	strh	r3, [r7, #0]

	//Return if the selected channel is higher than the number of channels supported by the selected timer peripheral
  if (eChannel >= QAD_TimerMgr::getChannels(m_eTimer))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	789b      	ldrb	r3, [r3, #2]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ff7e 	bl	800414a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 800424e:	4603      	mov	r3, r0
 8004250:	461a      	mov	r2, r3
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	4293      	cmp	r3, r2
 8004256:	bf2c      	ite	cs
 8004258:	2301      	movcs	r3, #1
 800425a:	2300      	movcc	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d12b      	bne.n	80042ba <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x86>
  	return;

  //Set new PWM value to compare register for selected channel of timer peripheral
  __HAL_TIM_SET_COMPARE(&m_sHandle, m_uChannelSelect[eChannel], uVal);
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	3320      	adds	r3, #32
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x48>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	883a      	ldrh	r2, [r7, #0]
 8004278:	635a      	str	r2, [r3, #52]	; 0x34
 800427a:	e01f      	b.n	80042bc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	3320      	adds	r3, #32
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d104      	bne.n	8004296 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x62>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	883a      	ldrh	r2, [r7, #0]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38
 8004294:	e012      	b.n	80042bc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	3320      	adds	r3, #32
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d104      	bne.n	80042b0 <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x7c>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	883a      	ldrh	r2, [r7, #0]
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80042ae:	e005      	b.n	80042bc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	883a      	ldrh	r2, [r7, #0]
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
 80042b8:	e000      	b.n	80042bc <_ZN7QAD_PWM9setPWMValE15QAD_PWM_Channelt+0x88>
  	return;
 80042ba:	bf00      	nop
}
 80042bc:	3708      	adds	r7, #8
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}

080042c2 <_ZN7QAD_PWM10periphInitEv>:
//
//Used to initialize the GPIOs, timer peripheral clock, the timer peripheral itself and the respective PWM channels
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral and clock
//are all in the uninitialized state.
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_PWM::periphInit(void) {
 80042c2:	b580      	push	{r7, lr}
 80042c4:	b090      	sub	sp, #64	; 0x40
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]

	//Init GPIOs
	GPIO_InitTypeDef GPIO_Init = {0};
 80042ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042ce:	2200      	movs	r2, #0
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	605a      	str	r2, [r3, #4]
 80042d4:	609a      	str	r2, [r3, #8]
 80042d6:	60da      	str	r2, [r3, #12]
 80042d8:	611a      	str	r2, [r3, #16]
	GPIO_Init.Mode     = GPIO_MODE_AF_PP;      //Set pin to Alternate Function - Push/Pull mode
 80042da:	2302      	movs	r3, #2
 80042dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_Init.Pull     = GPIO_NOPULL;          //Disable pull-up and pull-down resistors
 80042de:	2300      	movs	r3, #0
 80042e0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_Init.Speed    = GPIO_SPEED_FREQ_HIGH; //Set pin output speed to high
 80042e2:	2302      	movs	r3, #2
 80042e4:	637b      	str	r3, [r7, #52]	; 0x34

	//Iterate through specific GPIOs per channel and initialize each in turn
	//Will only iterate through the number of channels supported by the specific timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80042e6:	2300      	movs	r3, #0
 80042e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	789b      	ldrb	r3, [r3, #2]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7ff ff2a 	bl	800414a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80042fe:	4293      	cmp	r3, r2
 8004300:	bf34      	ite	cc
 8004302:	2301      	movcc	r3, #1
 8004304:	2300      	movcs	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d037      	beq.n	800437c <_ZN7QAD_PWM10periphInitEv+0xba>

		//If channel is set to be active then initialize GPIO pin
		if (m_sChannels[i].eActive) {
 800430c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	005b      	lsls	r3, r3, #1
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3354      	adds	r3, #84	; 0x54
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d025      	beq.n	8004370 <_ZN7QAD_PWM10periphInitEv+0xae>
			GPIO_Init.Pin         = m_sChannels[i].uPin; //Set pin number
 8004324:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	4613      	mov	r3, r2
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	4413      	add	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	440b      	add	r3, r1
 8004334:	335c      	adds	r3, #92	; 0x5c
 8004336:	881b      	ldrh	r3, [r3, #0]
 8004338:	62bb      	str	r3, [r7, #40]	; 0x28
			GPIO_Init.Alternate   = m_sChannels[i].uAF;  //Set alternate function to suit required timer peripheral
 800433a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	4613      	mov	r3, r2
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	335e      	adds	r3, #94	; 0x5e
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
			HAL_GPIO_Init(m_sChannels[i].pGPIO, &GPIO_Init);
 8004350:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	3358      	adds	r3, #88	; 0x58
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f7fd fa4a 	bl	8001804 <HAL_GPIO_Init>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004370:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004374:	3301      	adds	r3, #1
 8004376:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800437a:	e7b7      	b.n	80042ec <_ZN7QAD_PWM10periphInitEv+0x2a>
		}
	}

	//Enable Timer Clock
	QAD_TimerMgr::enableClock(m_eTimer);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	789b      	ldrb	r3, [r3, #2]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff fc08 	bl	8003b96 <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>

	//Init Timer PWM Mode
	m_sHandle.Instance                     = QAD_TimerMgr::getInstance(m_eTimer);  //Set instance for required timer peripheral
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	789b      	ldrb	r3, [r3, #2]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fbca 	bl	8003b24 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>
 8004390:	4602      	mov	r2, r0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.Prescaler               = m_uPrescaler;                         //Set timer prescaler
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.Period                  = m_uPeriod;                            //Set timer counter period
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.CounterMode             = TIM_COUNTERMODE_UP;                   //Set counter mode to up
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.ClockDivision           = TIM_CLOCKDIVISION_DIV1;               //Unused
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.RepetitionCounter       = 0x0;                                  //
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.AutoReloadPreload       = TIM_AUTORELOAD_PRELOAD_ENABLE;        //Enable preload of the timer's auto-reload register
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	61da      	str	r2, [r3, #28]

  //Initialize Timer in PWM mode, performing a partial deinitialization if the initialization fails
  if (HAL_TIM_PWM_Init(&m_sHandle) != HAL_OK) {
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4618      	mov	r0, r3
 80043c4:	f7fe f9cb 	bl	800275e <HAL_TIM_PWM_Init>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <_ZN7QAD_PWM10periphInitEv+0x122>
		periphDeinit(DeinitPartial);
 80043d8:	2100      	movs	r1, #0
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f863 	bl	80044a6 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e05c      	b.n	800449e <_ZN7QAD_PWM10periphInitEv+0x1dc>
	}

	//Init PWM Channels
	TIM_OC_InitTypeDef TIM_OC_Init;
	//Iterate through number of channels supported by selected timer peripheral
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	789b      	ldrb	r3, [r3, #2]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff feab 	bl	800414a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80043fc:	4293      	cmp	r3, r2
 80043fe:	bf34      	ite	cc
 8004400:	2301      	movcc	r3, #1
 8004402:	2300      	movcs	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d042      	beq.n	8004490 <_ZN7QAD_PWM10periphInitEv+0x1ce>
		//If channel is set to active then initialize PWM channel
		if (m_sChannels[i].eActive) {
 800440a:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3354      	adds	r3, #84	; 0x54
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d030      	beq.n	8004484 <_ZN7QAD_PWM10periphInitEv+0x1c2>
			TIM_OC_Init = {0};
 8004422:	f107 030c 	add.w	r3, r7, #12
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	611a      	str	r2, [r3, #16]
 8004432:	615a      	str	r2, [r3, #20]
 8004434:	619a      	str	r2, [r3, #24]
			TIM_OC_Init.OCMode        = TIM_OCMODE_PWM1;        //Set Output Compare mode to PWM1
 8004436:	2360      	movs	r3, #96	; 0x60
 8004438:	60fb      	str	r3, [r7, #12]
			TIM_OC_Init.OCIdleState   = TIM_OCIDLESTATE_SET;    //Set Output Compare Idle State to Set
 800443a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800443e:	623b      	str	r3, [r7, #32]
			TIM_OC_Init.Pulse         = 0;                      //
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
			TIM_OC_Init.OCPolarity    = TIM_OCPOLARITY_HIGH;    //Set Output Compare Polarity to High
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
			TIM_OC_Init.OCFastMode    = TIM_OCFAST_ENABLE;      //Enable Output Compare Fast Mode
 8004448:	2304      	movs	r3, #4
 800444a:	61fb      	str	r3, [r7, #28]

			//Configure PWM Channel, performing a full deinitialization if the configuration fails
			if (HAL_TIM_PWM_ConfigChannel(&m_sHandle, &TIM_OC_Init, m_uChannelSelect[i]) != HAL_OK) {
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	1d18      	adds	r0, r3, #4
 8004450:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	3320      	adds	r3, #32
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685a      	ldr	r2, [r3, #4]
 800445e:	f107 030c 	add.w	r3, r7, #12
 8004462:	4619      	mov	r1, r3
 8004464:	f7fe fc6e 	bl	8002d44 <HAL_TIM_PWM_ConfigChannel>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <_ZN7QAD_PWM10periphInitEv+0x1c2>
				periphDeinit(DeinitFull);
 8004478:	2101      	movs	r1, #1
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f813 	bl	80044a6 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>
				return QA_Fail;
 8004480:	2301      	movs	r3, #1
 8004482:	e00c      	b.n	800449e <_ZN7QAD_PWM10periphInitEv+0x1dc>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 8004484:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004488:	3301      	adds	r3, #1
 800448a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800448e:	e7ac      	b.n	80043ea <_ZN7QAD_PWM10periphInitEv+0x128>
			}
		}
	}

	//Set Driver States
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
	m_eState     = QA_Inactive;    //Set driver as currently inactive
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	705a      	strb	r2, [r3, #1]

	//Return
	return QA_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3740      	adds	r7, #64	; 0x40
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, timer peripheral clock and the timer peripheral itself
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_PWM::periphDeinit(QAD_PWM::DeinitMode eDeinitMode) {
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b084      	sub	sp, #16
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	460b      	mov	r3, r1
 80044b0:	70fb      	strb	r3, [r7, #3]

	//Check if a full deinitialization is required
	if (eDeinitMode) {
 80044b2:	78fb      	ldrb	r3, [r7, #3]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d009      	beq.n	80044cc <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x26>

		//Deinitialize Timer Peripheral
		HAL_TIM_PWM_DeInit(&m_sHandle);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	3304      	adds	r3, #4
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe f99d 	bl	80027fc <HAL_TIM_PWM_DeInit>

		//Disable Timer Clock
		QAD_TimerMgr::disableClock(m_eTimer);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	789b      	ldrb	r3, [r3, #2]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fb76 	bl	8003bb8 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>

	}

	//Deinitialize GPIOs
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 80044cc:	2300      	movs	r3, #0
 80044ce:	73fb      	strb	r3, [r7, #15]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	789b      	ldrb	r3, [r3, #2]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fe38 	bl	800414a <_ZN12QAD_TimerMgr11getChannelsE16QAD_Timer_Periph>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	bf34      	ite	cc
 80044e4:	2301      	movcc	r3, #1
 80044e6:	2300      	movcs	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d023      	beq.n	8004536 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x90>
		if (m_sChannels[i].eActive)
 80044ee:	7bfa      	ldrb	r2, [r7, #15]
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	4613      	mov	r3, r2
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	3354      	adds	r3, #84	; 0x54
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d014      	beq.n	800452e <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x88>
			HAL_GPIO_DeInit(m_sChannels[i].pGPIO, m_sChannels[i].uPin);
 8004504:	7bfa      	ldrb	r2, [r7, #15]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	005b      	lsls	r3, r3, #1
 800450c:	4413      	add	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	440b      	add	r3, r1
 8004512:	3358      	adds	r3, #88	; 0x58
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	7bfa      	ldrb	r2, [r7, #15]
 8004518:	6879      	ldr	r1, [r7, #4]
 800451a:	4613      	mov	r3, r2
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	440b      	add	r3, r1
 8004524:	335c      	adds	r3, #92	; 0x5c
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	4619      	mov	r1, r3
 800452a:	f7fd faef 	bl	8001b0c <HAL_GPIO_DeInit>
	for (uint8_t i=0; i<QAD_TimerMgr::getChannels(m_eTimer); i++) {
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	3301      	adds	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
 8004534:	e7cc      	b.n	80044d0 <_ZN7QAD_PWM12periphDeinitENS_10DeinitModeE+0x2a>
	}

	//Set Driver States
	m_eState     = QA_Inactive;        //Set driver as currently inactive
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	705a      	strb	r2, [r3, #1]
	m_eInitState = QA_NotInitialized;  //Set driver state as not initialized
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	3710      	adds	r7, #16
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <_ZN12QAD_TimerMgr12getUpdateIRQE16QAD_Timer_Periph>:
	static IRQn_Type getUpdateIRQ(QAD_Timer_Periph eTimer) {
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	4603      	mov	r3, r0
 8004552:	71fb      	strb	r3, [r7, #7]
		return get().m_sTimers[eTimer].eIRQ_Update;
 8004554:	f7ff fa96 	bl	8003a84 <_ZN12QAD_TimerMgr3getEv>
 8004558:	4601      	mov	r1, r0
 800455a:	79fa      	ldrb	r2, [r7, #7]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	3310      	adds	r3, #16
 8004568:	f993 3000 	ldrsb.w	r3, [r3]
	}
 800456c:	4618      	mov	r0, r3
 800456e:	3708      	adds	r7, #8
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <_ZN9QAD_Timer4initEv>:
//QAD_Timer::init
//QAD_Timer Initialization Method
//
//Used to initialize the timer driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_Timer::init(void) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]

	//Check if selected Timer peripheral is currently available
  if (QAD_TimerMgr::getState(m_eTimer))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff faa7 	bl	8003ad4 <_ZN12QAD_TimerMgr8getStateE16QAD_Timer_Periph>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <_ZN9QAD_Timer4initEv+0x26>
  	return QA_Error_PeriphBusy;
 8004596:	2302      	movs	r3, #2
 8004598:	e013      	b.n	80045c2 <_ZN9QAD_Timer4initEv+0x4e>

  //Register Timer peripheral as now being in use
  QAD_TimerMgr::registerTimer(m_eTimer, QAD_Timer_InUse_IRQ);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2101      	movs	r1, #1
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff fad3 	bl	8003b4c <_ZN12QAD_TimerMgr13registerTimerE16QAD_Timer_Periph15QAD_Timer_State>

  //Initialize Timer peripheral
  QA_Result eRes = periphInit();
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8b3 	bl	8004712 <_ZN9QAD_Timer10periphInitEv>
 80045ac:	4603      	mov	r3, r0
 80045ae:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister Timer peripheral
  if (eRes)
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d004      	beq.n	80045c0 <_ZN9QAD_Timer4initEv+0x4c>
  	QAD_TimerMgr::deregisterTimer(m_eTimer);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fada 	bl	8003b74 <_ZN12QAD_TimerMgr15deregisterTimerE16QAD_Timer_Periph>

  //Return initialization result
  return eRes;
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZN9QAD_Timer7handlerEv>:

//QAD_Timer::handler
//QAD_Timer IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
void QAD_Timer::handler(void) {
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]

	//Check if Update Interrupt has been triggered
  if (__HAL_TIM_GET_FLAG(&m_sHandle, TIM_FLAG_UPDATE)) {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03f      	beq.n	800466a <_ZN9QAD_Timer7handlerEv+0xa0>

  	//Process based on currently selected Timer Mode
  	switch (m_eMode) {
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d019      	beq.n	8004628 <_ZN9QAD_Timer7handlerEv+0x5e>
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	dc1e      	bgt.n	8004636 <_ZN9QAD_Timer7handlerEv+0x6c>
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d019      	beq.n	8004630 <_ZN9QAD_Timer7handlerEv+0x66>
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d11a      	bne.n	8004636 <_ZN9QAD_Timer7handlerEv+0x6c>
  	  case (QAD_TimerContinuous):  //If is in continuous mode then do nothing
  	  	break;
  	  case (QAD_TimerMultiple):    //If is in multiple mode then increment counter value, and if counter target has been reached then disable driver
  	  	m_uIRQCounterValue++;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8004606:	3301      	adds	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  	    if (m_uIRQCounterValue >= m_uIRQCounterTarget) {
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800461c:	429a      	cmp	r2, r3
 800461e:	d309      	bcc.n	8004634 <_ZN9QAD_Timer7handlerEv+0x6a>
  	    	stop();
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f834 	bl	800468e <_ZN9QAD_Timer4stopEv>
  	    }
  	    break;
 8004626:	e005      	b.n	8004634 <_ZN9QAD_Timer7handlerEv+0x6a>
  	  case (QAD_TimerSingle):      //If is in single mode then disable driver
  	  	stop();
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f830 	bl	800468e <_ZN9QAD_Timer4stopEv>
  	    break;
 800462e:	e002      	b.n	8004636 <_ZN9QAD_Timer7handlerEv+0x6c>
  	  	break;
 8004630:	bf00      	nop
 8004632:	e000      	b.n	8004636 <_ZN9QAD_Timer7handlerEv+0x6c>
  	    break;
 8004634:	bf00      	nop
  	}

  	//If a handler callback function has been assigned then call it
  	if (m_pHandlerFunction)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <_ZN9QAD_Timer7handlerEv+0x7c>
  		m_pHandlerFunction(NULL);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004642:	2000      	movs	r0, #0
 8004644:	4798      	blx	r3

  	//If a handler callback class has been assigned then call it's handler() method
  	if (m_pHandlerClass)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800464a:	2b00      	cmp	r3, #0
 800464c:	d008      	beq.n	8004660 <_ZN9QAD_Timer7handlerEv+0x96>
  		m_pHandlerClass->handler(NULL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2100      	movs	r1, #0
 800465c:	4610      	mov	r0, r2
 800465e:	4798      	blx	r3

  	//Clear Update Interrupt flag
  	__HAL_TIM_CLEAR_FLAG(&m_sHandle, TIM_FLAG_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f06f 0201 	mvn.w	r2, #1
 8004668:	611a      	str	r2, [r3, #16]
  }
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_ZN9QAD_Timer18setHandlerFunctionEPFvPvE>:
//QAD_Timer::setHandlerFunction
//QAD_Timer Control Method
//
//Used to set the interrupt handler callback function to be called when the timer update interrupt is triggered
//pHandler - Pointer to callback function based on QAD_IRQHandler_CallbackFunction prototype defined in setup.hpp
void QAD_Timer::setHandlerFunction(QAD_IRQHandler_CallbackFunction pHandler) {
 8004672:	b480      	push	{r7}
 8004674:	b083      	sub	sp, #12
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
 800467a:	6039      	str	r1, [r7, #0]
  m_pHandlerFunction = pHandler;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr

0800468e <_ZN9QAD_Timer4stopEv>:

//QAD_Timer::stop
//QAD_Timer Control Method
//
//Stops the timer driver
void QAD_Timer::stop(void) {
 800468e:	b480      	push	{r7}
 8004690:	b083      	sub	sp, #12
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]

	//Check if driver is initialized and is currently active
  if ((m_eInitState) && (m_eState)) {
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800469c:	2b00      	cmp	r3, #0
 800469e:	d032      	beq.n	8004706 <_ZN9QAD_Timer4stopEv+0x78>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d02d      	beq.n	8004706 <_ZN9QAD_Timer4stopEv+0x78>

  	//Disable the timer peripheral
  	__HAL_TIM_DISABLE(&m_sHandle);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	6a1a      	ldr	r2, [r3, #32]
 80046b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	bf0c      	ite	eq
 80046ba:	2301      	moveq	r3, #1
 80046bc:	2300      	movne	r3, #0
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d014      	beq.n	80046ee <_ZN9QAD_Timer4stopEv+0x60>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	6a1a      	ldr	r2, [r3, #32]
 80046ca:	f240 4344 	movw	r3, #1092	; 0x444
 80046ce:	4013      	ands	r3, r2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d007      	beq.n	80046ee <_ZN9QAD_Timer4stopEv+0x60>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f022 0201 	bic.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

  	//Disabled the timer update interrupt
  	__HAL_TIM_DISABLE_IT(&m_sHandle, TIM_IT_UPDATE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f022 0201 	bic.w	r2, r2, #1
 80046fc:	60da      	str	r2, [r3, #12]

  	//Set current driver state in inactive
  	m_eState = QA_Inactive;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
  }
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_ZN9QAD_Timer10periphInitEv>:
//
//Used to initialize the timer peripheral clock, and the timer peripheral itself as well as enabling timer interrupt and setting interrupt priority
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral and clock are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_Timer::periphInit(void) {
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]

	//Enable Timer Clock
	QAD_TimerMgr::enableClock(m_eTimer);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7ff fa39 	bl	8003b96 <_ZN12QAD_TimerMgr11enableClockE16QAD_Timer_Periph>

	//Initialize Timer Peripheral
	m_sHandle.Instance               = QAD_TimerMgr::getInstance(m_eTimer); //Set instance for required Timer peripheral
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff f9fb 	bl	8003b24 <_ZN12QAD_TimerMgr11getInstanceE16QAD_Timer_Periph>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	605a      	str	r2, [r3, #4]
	m_sHandle.Init.Prescaler         = m_uPrescaler;                        //Set timer prescaler
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
	m_sHandle.Init.CounterMode       = TIM_COUNTERMODE_UP;                  //Set timer counter mode to count up
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	60da      	str	r2, [r3, #12]
	m_sHandle.Init.Period            = m_uPeriod;                           //Set timer counter period
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	611a      	str	r2, [r3, #16]
	m_sHandle.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;              //Unused
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	615a      	str	r2, [r3, #20]
	m_sHandle.Init.RepetitionCounter = 0x0;                                 //
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	619a      	str	r2, [r3, #24]
	m_sHandle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;       //Enable preload of the timer's auto-reload register
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2280      	movs	r2, #128	; 0x80
 800475a:	61da      	str	r2, [r3, #28]

	//Initialize Timer, performing a partial deinitialization if the initialization fails
	if (HAL_TIM_Base_Init(&m_sHandle) != HAL_OK) {
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3304      	adds	r3, #4
 8004760:	4618      	mov	r0, r3
 8004762:	f7fd ff45 	bl	80025f0 <HAL_TIM_Base_Init>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	bf14      	ite	ne
 800476c:	2301      	movne	r3, #1
 800476e:	2300      	moveq	r3, #0
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <_ZN9QAD_Timer10periphInitEv+0x70>
		periphDeinit(DeinitPartial);
 8004776:	2100      	movs	r1, #0
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f829 	bl	80047d0 <_ZN9QAD_Timer12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 800477e:	2301      	movs	r3, #1
 8004780:	e022      	b.n	80047c8 <_ZN9QAD_Timer10periphInitEv+0xb6>
	}

	//Set Timer IRQ priority and enable IRQ
	m_eIRQ = QAD_TimerMgr::getUpdateIRQ(m_eTimer);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	4618      	mov	r0, r3
 8004788:	f7ff fedf 	bl	800454a <_ZN12QAD_TimerMgr12getUpdateIRQE16QAD_Timer_Periph>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	HAL_NVIC_SetPriority(m_eIRQ, m_uIRQPriority, 0);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f993 005b 	ldrsb.w	r0, [r3, #91]	; 0x5b
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047a2:	2200      	movs	r2, #0
 80047a4:	4619      	mov	r1, r3
 80047a6:	f7fc ffdc 	bl	8001762 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(m_eIRQ);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f993 305b 	ldrsb.w	r3, [r3, #91]	; 0x5b
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fc fff2 	bl	800179a <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eState     = QA_Inactive;    //Set driver state as initialized
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	m_eInitState = QA_Initialized; //Set driver as currently inactive
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59

	//Return
	return QA_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <_ZN9QAD_Timer12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize timer peripheral clock and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_Timer::periphDeinit(QAD_Timer::DeinitMode eDeinitMode) {
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	460b      	mov	r3, r1
 80047da:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 80047dc:	78fb      	ldrb	r3, [r7, #3]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <_ZN9QAD_Timer12periphDeinitENS_10DeinitModeE+0x28>

		//Disable timer IRQ
		HAL_NVIC_DisableIRQ(m_eIRQ);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f993 305b 	ldrsb.w	r3, [r3, #91]	; 0x5b
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fc ffe4 	bl	80017b6 <HAL_NVIC_DisableIRQ>

		//Deinitialize Timer peripheral
		HAL_TIM_Base_DeInit(&m_sHandle);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd ff4b 	bl	800268e <HAL_TIM_Base_DeInit>
	}

	//Disable Timer Clock
	QAD_TimerMgr::disableClock(m_eTimer);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff f9db 	bl	8003bb8 <_ZN12QAD_TimerMgr12disableClockE16QAD_Timer_Periph>

	//Set States
	m_eState     = QA_Inactive;       //Set driver as currently inactive
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
}
 8004812:	bf00      	nop
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <_ZN11QAD_UARTMgr3getEv>:

	//-----------------
	//Singleton Methods
	//
	//Used to retrieve a reference to the singleton class
	static QAD_UARTMgr& get(void) {
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
		static QAD_UARTMgr instance;
 8004820:	4b10      	ldr	r3, [pc, #64]	; (8004864 <_ZN11QAD_UARTMgr3getEv+0x48>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f3bf 8f5b 	dmb	ish
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d010      	beq.n	800485e <_ZN11QAD_UARTMgr3getEv+0x42>
 800483c:	4809      	ldr	r0, [pc, #36]	; (8004864 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800483e:	f001 f927 	bl	8005a90 <__cxa_guard_acquire>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	bf14      	ite	ne
 8004848:	2301      	movne	r3, #1
 800484a:	2300      	moveq	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <_ZN11QAD_UARTMgr3getEv+0x42>
 8004852:	4805      	ldr	r0, [pc, #20]	; (8004868 <_ZN11QAD_UARTMgr3getEv+0x4c>)
 8004854:	f000 fcf2 	bl	800523c <_ZN11QAD_UARTMgrC1Ev>
 8004858:	4802      	ldr	r0, [pc, #8]	; (8004864 <_ZN11QAD_UARTMgr3getEv+0x48>)
 800485a:	f001 f925 	bl	8005aa8 <__cxa_guard_release>
		return instance;
 800485e:	4b02      	ldr	r3, [pc, #8]	; (8004868 <_ZN11QAD_UARTMgr3getEv+0x4c>)
	}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000174 	.word	0x20000174
 8004868:	20000150 	.word	0x20000150

0800486c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>:
	//Data Methods

	//Used to retrieve the current state (QAD_UART_InUse, QAD_UART_Unused) of a UART peripheral
	//eUART - The UART peripheral to retrieve the state for. Member of QAD_UART_Periph
	//Returns member of QAD_UART_State enum (QAD_UART_InUse, QAD_UART_Unused)
	static QAD_UART_State getState(QAD_UART_Periph eUART) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	4603      	mov	r3, r0
 8004874:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 8004876:	79fb      	ldrb	r3, [r7, #7]
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x14>
			return QAD_UART_InvalidDevice;
 800487c:	2302      	movs	r3, #2
 800487e:	e00a      	b.n	8004896 <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].eState;
 8004880:	f7ff ffcc 	bl	800481c <_ZN11QAD_UARTMgr3getEv>
 8004884:	4601      	mov	r1, r0
 8004886:	79fa      	ldrb	r2, [r7, #7]
 8004888:	4613      	mov	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	3301      	adds	r3, #1
 8004894:	781b      	ldrb	r3, [r3, #0]
	}
 8004896:	4618      	mov	r0, r3
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>:

	//Used to retrieve an instance for a UART peripheral
	//eUART - The UART peripheral to retrieve the instance for. Member of QAD_UART_Periph
	//Returns USART_TypeDef, as defined in stm32f411xe.h
	static USART_TypeDef* getInstance(QAD_UART_Periph eUART) {
 800489e:	b580      	push	{r7, lr}
 80048a0:	b082      	sub	sp, #8
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	4603      	mov	r3, r0
 80048a6:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x14>
			return NULL;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e00a      	b.n	80048c8 <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph+0x2a>

		return get().m_sUARTs[eUART].pInstance;
 80048b2:	f7ff ffb3 	bl	800481c <_ZN11QAD_UARTMgr3getEv>
 80048b6:	4601      	mov	r1, r0
 80048b8:	79fa      	ldrb	r2, [r7, #7]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	3304      	adds	r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
	}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>:

	//Used to retrieve an IRQ enum for a UART peripheral
	//eUART - The UART peripheral to retrieve the IRQ enum for. Member of QAD_UART_Periph
	//Returns member of IRQn_Type enum, as defined in stm32f411xe.h
	static IRQn_Type getIRQ(QAD_UART_Periph eUART) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	4603      	mov	r3, r0
 80048d8:	71fb      	strb	r3, [r7, #7]
		if (eUART >= QAD_UARTNone)
 80048da:	79fb      	ldrb	r3, [r7, #7]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d902      	bls.n	80048e6 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x16>
			return UsageFault_IRQn;
 80048e0:	f06f 0309 	mvn.w	r3, #9
 80048e4:	e00b      	b.n	80048fe <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph+0x2e>

		return get().m_sUARTs[eUART].eIRQ;
 80048e6:	f7ff ff99 	bl	800481c <_ZN11QAD_UARTMgr3getEv>
 80048ea:	4601      	mov	r1, r0
 80048ec:	79fa      	ldrb	r2, [r7, #7]
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3308      	adds	r3, #8
 80048fa:	f993 3000 	ldrsb.w	r3, [r3]
	}
 80048fe:	4618      	mov	r0, r3
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}

08004906 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>:
	//Managemenet Methods

	//Used to register a UART peripheral as being used by a driver
	//eUART - the UART peripheral to be registered
	//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
	static QA_Result registerUART(QAD_UART_Periph eUART) {
 8004906:	b580      	push	{r7, lr}
 8004908:	b082      	sub	sp, #8
 800490a:	af00      	add	r7, sp, #0
 800490c:	4603      	mov	r3, r0
 800490e:	71fb      	strb	r3, [r7, #7]
		return get().imp_registerUART(eUART);
 8004910:	f7ff ff84 	bl	800481c <_ZN11QAD_UARTMgr3getEv>
 8004914:	4602      	mov	r2, r0
 8004916:	79fb      	ldrb	r3, [r7, #7]
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f000 fcce 	bl	80052bc <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>
 8004920:	4603      	mov	r3, r0
	}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>:

	//Used to deregister a UART peripheral to mark it as no longer being used by a driver
	//eUART - the UART peripheral to be deregistered
	static void deregisterUART(QAD_UART_Periph eUART) {
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	71fb      	strb	r3, [r7, #7]
		get().imp_deregisterUART(eUART);
 8004934:	f7ff ff72 	bl	800481c <_ZN11QAD_UARTMgr3getEv>
 8004938:	4602      	mov	r2, r0
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f000 fce5 	bl	800530e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>
	}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>:
	//-------------
  //Clock Methods

	//Used to enable the clock for a specific UART peripheral
	//eUART - the UART peripheral to enable the clock for
	static void enableClock(QAD_UART_Periph eUART) {
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]
		get().imp_enableClock(eUART);
 8004956:	f7ff ff61 	bl	800481c <_ZN11QAD_UARTMgr3getEv>
 800495a:	4602      	mov	r2, r0
 800495c:	79fb      	ldrb	r3, [r7, #7]
 800495e:	4619      	mov	r1, r3
 8004960:	4610      	mov	r0, r2
 8004962:	f000 fcef 	bl	8005344 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>
	}
 8004966:	bf00      	nop
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>:

	//Used to disable the clock for a specific UART peripheral
	//eUART - the UART peripheral to disable the clock for
	static void disableClock(QAD_UART_Periph eUART) {
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	71fb      	strb	r3, [r7, #7]
		get().imp_disableClock(eUART);
 8004978:	f7ff ff50 	bl	800481c <_ZN11QAD_UARTMgr3getEv>
 800497c:	4602      	mov	r2, r0
 800497e:	79fb      	ldrb	r3, [r7, #7]
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f000 fd4c 	bl	8005420 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>
	}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <_ZN8QAD_UART4initEv>:
//QAD_UART::init
//QAD_UART Initialization Method
//
//Used to initialize the UART driver
//Returns QA_OK if initialization successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAD_UART::init(void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]

	//Check if selected UART peripheral is currently available
	if (QAD_UARTMgr::getState(m_eUART))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ff65 	bl	800486c <_ZN11QAD_UARTMgr8getStateE15QAD_UART_Periph>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <_ZN8QAD_UART4initEv+0x26>
		return QA_Error_PeriphBusy;
 80049b2:	2302      	movs	r3, #2
 80049b4:	e012      	b.n	80049dc <_ZN8QAD_UART4initEv+0x4c>

	//Register UART peripheral as now being in use
  QAD_UARTMgr::registerUART(m_eUART);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	785b      	ldrb	r3, [r3, #1]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ffa3 	bl	8004906 <_ZN11QAD_UARTMgr12registerUARTE15QAD_UART_Periph>

  //Initialize UART peripheral
  QA_Result eRes = periphInit();
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f8a7 	bl	8004b14 <_ZN8QAD_UART10periphInitEv>
 80049c6:	4603      	mov	r3, r0
 80049c8:	73fb      	strb	r3, [r7, #15]

  //If initialization failed then deregister UART peripheral
  if (eRes)
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d004      	beq.n	80049da <_ZN8QAD_UART4initEv+0x4a>
  	QAD_UARTMgr::deregisterUART(m_eUART);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	785b      	ldrb	r3, [r3, #1]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7ff ffa8 	bl	800492a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>

  //Return initialization result
  return eRes;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <_ZN8QAD_UART6deinitEv>:

//QAD_UART::deinit
//QAD_UART Initialization Method
//
//Used to deinitialize the UART driver
void QAD_UART::deinit(void) {
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]

	//Return if UART driver is not currently initialized
	if (!m_eInitState)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d009      	beq.n	8004a08 <_ZN8QAD_UART6deinitEv+0x24>
  	return;

	//Deinitialize UART driver
  periphDeinit(DeinitFull);
 80049f4:	2101      	movs	r1, #1
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f924 	bl	8004c44 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>

  //Deregister UART peripheral
  QAD_UARTMgr::deregisterUART(m_eUART);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff ff92 	bl	800492a <_ZN11QAD_UARTMgr14deregisterUARTE15QAD_UART_Periph>
 8004a06:	e000      	b.n	8004a0a <_ZN8QAD_UART6deinitEv+0x26>
  	return;
 8004a08:	bf00      	nop
}
 8004a0a:	3708      	adds	r7, #8
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <_ZN8QAD_UART9getHandleEv>:

//QAD_UART::getHandle
//QAD_UART Initialization Method
//
//Retrieves the HAL UART peripheral handle
UART_HandleTypeDef& QAD_UART::getHandle(void) {
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  return m_sHandle;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	331c      	adds	r3, #28
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <_ZN8QAD_UART7startTXEv>:

//QAD_UART::startTX
//QAD_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAD_UART::startTX(void) {
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]

	//Enable Transmit Register Empty (TXE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_TXE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004a3e:	60da      	str	r2, [r3, #12]

  //Set TX State to active
  m_eTXState = QA_Active;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <_ZN8QAD_UART6stopTXEv>:

//QAD_UART::stopTX
//QAD_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAD_UART::stopTX(void) {
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]

	//Disable Transmit Register Empty (TXE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_TXE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a6a:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eTXState = QA_Inactive;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <_ZN8QAD_UART7startRXEv>:

//QAD_UART::startRX
//QAD_UART Control Method
//
//Used to start receive of the UART peripheral
void QAD_UART::startRX(void) {
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]

	//Enable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_ENABLE_IT(&m_sHandle, UART_IT_RXNE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	68da      	ldr	r2, [r3, #12]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f042 0220 	orr.w	r2, r2, #32
 8004a96:	60da      	str	r2, [r3, #12]

  //Set RX State to active
  m_eRXState = QA_Active;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <_ZN8QAD_UART6stopRXEv>:

//QAD_UART::stopRX
//QAD_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAD_UART::stopRX(void) {
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

	//Disable RX Register Not-Empty (RXNE) interrupt
  __HAL_UART_DISABLE_IT(&m_sHandle, UART_IT_RXNE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	69db      	ldr	r3, [r3, #28]
 8004ab8:	68da      	ldr	r2, [r3, #12]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
 8004abe:	f022 0220 	bic.w	r2, r2, #32
 8004ac2:	60da      	str	r2, [r3, #12]

  //Set TX State to inactive
  m_eRXState = QA_Inactive;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <_ZN8QAD_UART6dataTXEh>:
//QAD_UART::dataTX
//QAD_UART Transceive Method
//
//Used to transmit a single byte of data
//uData - the byte to be transmitted, which is placed into the UART data register (DR)
void QAD_UART::dataTX(uint8_t uData) {
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]

	//Place uData into UART Data Register
  m_sHandle.Instance->DR = uData;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	78fa      	ldrb	r2, [r7, #3]
 8004aea:	605a      	str	r2, [r3, #4]
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <_ZN8QAD_UART6dataRXEv>:
//QAD_UART::dataRX
//QAD_UART Transceive Method
//
//Used to receive a single byte of data
//Returns the data retrieved from the UART data register (DR)
uint8_t QAD_UART::dataRX(void) {
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]

	//Read data from UART Data Register and return value
  return m_sHandle.Instance->DR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b2db      	uxtb	r3, r3
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <_ZN8QAD_UART10periphInitEv>:
//
//Used to initialize the GPIOs, peripheral clock, and the peripheral itself, as well as setting the interrupt priority and enabling the interrupt
//In the case of a failed initialization, a partial deinitialization will be performed to make sure the peripheral, clock and GPIOs are all in the
//uninitialized state
//Returns QA_OK if successful, or QA_Fail if initialization fails
QA_Result QAD_UART::periphInit(void) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_Init = {0};
 8004b1c:	f107 030c 	add.w	r3, r7, #12
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	609a      	str	r2, [r3, #8]
 8004b28:	60da      	str	r2, [r3, #12]
 8004b2a:	611a      	str	r2, [r3, #16]

	//Init TX GPIO pin
	GPIO_Init.Pin       = m_uTXPin;                   //Set pin number
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8a1b      	ldrh	r3, [r3, #16]
 8004b30:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set TX Pin as alternate function in push/pull mode
 8004b32:	2302      	movs	r3, #2
 8004b34:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_NOPULL;                //Disable pull-up and pull-down resistors
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uTXAF;                    //Set alternate function to suit required UART peripheral
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7c9b      	ldrb	r3, [r3, #18]
 8004b42:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pTXGPIO, &GPIO_Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f107 020c 	add.w	r2, r7, #12
 8004b4c:	4611      	mov	r1, r2
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fc fe58 	bl	8001804 <HAL_GPIO_Init>

	//Init RX GPIO pin
	GPIO_Init.Pin       = m_uRXPin;                   //Set pin number
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8b1b      	ldrh	r3, [r3, #24]
 8004b58:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Mode      = GPIO_MODE_AF_PP;            //Set RX Pin as alternate function in push/pull mode
 8004b5a:	2302      	movs	r3, #2
 8004b5c:	613b      	str	r3, [r7, #16]
	GPIO_Init.Pull      = GPIO_PULLUP;                //Enable pull-up resistor to prevent spurious receive triggering in cases where RX pin is not connected.
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
	GPIO_Init.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;  //Set GPIO pin speed
 8004b62:	2303      	movs	r3, #3
 8004b64:	61bb      	str	r3, [r7, #24]
	GPIO_Init.Alternate = m_uRXAF;                    //Set alternate function to suit required UART peripheral
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	7e9b      	ldrb	r3, [r3, #26]
 8004b6a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(m_pRXGPIO, &GPIO_Init);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f107 020c 	add.w	r2, r7, #12
 8004b74:	4611      	mov	r1, r2
 8004b76:	4618      	mov	r0, r3
 8004b78:	f7fc fe44 	bl	8001804 <HAL_GPIO_Init>


	//Enable UART Clock
	QAD_UARTMgr::enableClock(m_eUART);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff fee3 	bl	800494c <_ZN11QAD_UARTMgr11enableClockE15QAD_UART_Periph>

	//Initialize UART Peripheral
	m_sHandle.Instance             = QAD_UARTMgr::getInstance(m_eUART); //Set instance for required UART peripheral
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	785b      	ldrb	r3, [r3, #1]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fe87 	bl	800489e <_ZN11QAD_UARTMgr11getInstanceE15QAD_UART_Periph>
 8004b90:	4602      	mov	r2, r0
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	61da      	str	r2, [r3, #28]
	m_sHandle.Init.BaudRate        = m_uBaudrate;                       //Set selected baudrate
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	621a      	str	r2, [r3, #32]
	m_sHandle.Init.WordLength      = UART_WORDLENGTH_8B;                //Set world length to 8bits (1byte)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	625a      	str	r2, [r3, #36]	; 0x24
	m_sHandle.Init.StopBits        = UART_STOPBITS_1;                   //Set 1 stop bit
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	629a      	str	r2, [r3, #40]	; 0x28
	m_sHandle.Init.Parity          = UART_PARITY_NONE;                  //Disable parity
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sHandle.Init.Mode            = UART_MODE_TX_RX;                   //Enable both transmit (TX) and receive (RX)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	220c      	movs	r2, #12
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
	m_sHandle.Init.HwFlowCtl       = UART_HWCONTROL_NONE;               //Disable hardware flow control (CTS/RTS)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	635a      	str	r2, [r3, #52]	; 0x34
	m_sHandle.Init.OverSampling    = UART_OVERSAMPLING_16;              //Enable 16x oversampling to provide high communication reliability
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	639a      	str	r2, [r3, #56]	; 0x38
	if (HAL_UART_Init(&m_sHandle) != HAL_OK) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	331c      	adds	r3, #28
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fbaf 	bl	800332a <HAL_UART_Init>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bf14      	ite	ne
 8004bd2:	2301      	movne	r3, #1
 8004bd4:	2300      	moveq	r3, #0
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <_ZN8QAD_UART10periphInitEv+0xd4>
		periphDeinit(DeinitPartial);
 8004bdc:	2100      	movs	r1, #0
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f830 	bl	8004c44 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>
		return QA_Fail;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e029      	b.n	8004c3c <_ZN8QAD_UART10periphInitEv+0x128>
	}

	//Enable UART Peripheral
	__HAL_UART_ENABLE(&m_sHandle);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bf6:	60da      	str	r2, [r3, #12]

	//Set UART IRQ priority and enable IRQ
	HAL_NVIC_SetPriority(QAD_UARTMgr::getIRQ(m_eUART), m_uIRQPriority, 0x00);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fe67 	bl	80048d0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004c02:	4603      	mov	r3, r0
 8004c04:	4618      	mov	r0, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	7a1b      	ldrb	r3, [r3, #8]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f7fc fda8 	bl	8001762 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(QAD_UARTMgr::getIRQ(m_eUART));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	785b      	ldrb	r3, [r3, #1]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff fe5a 	bl	80048d0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fc fdbb 	bl	800179a <HAL_NVIC_EnableIRQ>

	//Set driver states
	m_eInitState = QA_Initialized; //Set driver state as initialized
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
	m_eTXState   = QA_Inactive;    //Set TX state as inactive
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;    //Set RX state as inactive
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  //Return
  return QA_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3720      	adds	r7, #32
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE>:
//
//Used to deinitialize the GPIOs, peripheral clock, and the peripheral itself, as well as disabling the interrupt
//eDeinitMode - Set to DeinitPartial to perform a partial deinitialization (only to be used by periphInit() method
//              in a case where peripheral initialization has failed)
//            - Set to DeinitFull to perform a full deinitialization in a case where the driver is fully initialized
void QAD_UART::periphDeinit(QAD_UART::DeinitMode eDeinitMode) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	70fb      	strb	r3, [r7, #3]

	//Check if full deinitialization is required
	if (eDeinitMode) {
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d01b      	beq.n	8004c8e <_ZN8QAD_UART12periphDeinitENS_10DeinitModeE+0x4a>

		//Disable IRQs
		stopTX();                                          //Disable TX IRQ
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7ff fefc 	bl	8004a54 <_ZN8QAD_UART6stopTXEv>
		stopRX();                                          //Disable RX IRQ
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff ff25 	bl	8004aac <_ZN8QAD_UART6stopRXEv>
		HAL_NVIC_DisableIRQ(QAD_UARTMgr::getIRQ(m_eUART)); //Disable overall UART IRQ
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	785b      	ldrb	r3, [r3, #1]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fe32 	bl	80048d0 <_ZN11QAD_UARTMgr6getIRQE15QAD_UART_Periph>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fc fda1 	bl	80017b6 <HAL_NVIC_DisableIRQ>

		//Disable UART Peripheral
		__HAL_UART_DISABLE(&m_sHandle);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c82:	60da      	str	r2, [r3, #12]

		//Deinitialize UART Peripheral
		HAL_UART_DeInit(&m_sHandle);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	331c      	adds	r3, #28
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fe fb9b 	bl	80033c4 <HAL_UART_DeInit>

	}

	//Disable UART Clock
	QAD_UARTMgr::disableClock(m_eUART);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fe6b 	bl	800496e <_ZN11QAD_UARTMgr12disableClockE15QAD_UART_Periph>

	//Deinit TX & RX GPIO Pins
	HAL_GPIO_DeInit(m_pRXGPIO, m_uRXPin);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	695a      	ldr	r2, [r3, #20]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8b1b      	ldrh	r3, [r3, #24]
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fc ff32 	bl	8001b0c <HAL_GPIO_DeInit>
	HAL_GPIO_DeInit(m_pTXGPIO, m_uTXPin);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	8a1b      	ldrh	r3, [r3, #16]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	f7fc ff2a 	bl	8001b0c <HAL_GPIO_DeInit>

	//Set States
	m_eTXState   = QA_Inactive;       //Set transmit state as inactive
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_eRXState   = QA_Inactive;       //Set receive state as inactive
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	m_eInitState = QA_NotInitialized; //Set driver state as not initialized
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	701a      	strb	r2, [r3, #0]
}
 8004cce:	bf00      	nop
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
	...

08004cd8 <_ZN12QAD_TimerMgrC1Ev>:
//QAD_TimerMgr::QAD_TimerMgr
//QAD_TimerMgr Constructor
//
//Fills out details for the system's Tiemr peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called
QAD_TimerMgr::QAD_TimerMgr() {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]

  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	73fb      	strb	r3, [r7, #15]
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b07      	cmp	r3, #7
 8004ce8:	d830      	bhi.n	8004d4c <_ZN12QAD_TimerMgrC1Ev+0x74>
  	m_sTimers[i].eState   = QAD_Timer_Unused;
 8004cea:	7bfa      	ldrb	r2, [r7, #15]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bEncoder = (i < QAD_Timer9);
 8004cfe:	7bfa      	ldrb	r2, [r7, #15]
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	bf94      	ite	ls
 8004d06:	2301      	movls	r3, #1
 8004d08:	2300      	movhi	r3, #0
 8004d0a:	b2d8      	uxtb	r0, r3
 8004d0c:	6879      	ldr	r1, [r7, #4]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	330a      	adds	r3, #10
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	701a      	strb	r2, [r3, #0]
  	m_sTimers[i].bADC     = ((i == QAD_Timer2) || (i == QAD_Timer3));
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d002      	beq.n	8004d2a <_ZN12QAD_TimerMgrC1Ev+0x52>
 8004d24:	7bfb      	ldrb	r3, [r7, #15]
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d101      	bne.n	8004d2e <_ZN12QAD_TimerMgrC1Ev+0x56>
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	e000      	b.n	8004d30 <_ZN12QAD_TimerMgrC1Ev+0x58>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	7bfa      	ldrb	r2, [r7, #15]
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	440b      	add	r3, r1
 8004d3e:	330b      	adds	r3, #11
 8004d40:	4602      	mov	r2, r0
 8004d42:	701a      	strb	r2, [r3, #0]
  for (uint8_t i=0; i < QAD_Timer_PeriphCount; i++) {
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	3301      	adds	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
 8004d4a:	e7cb      	b.n	8004ce4 <_ZN12QAD_TimerMgrC1Ev+0xc>
  }

  //Set Timer Periph ID
  m_sTimers[QAD_Timer1].eTimer  = QAD_Timer1;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	701a      	strb	r2, [r3, #0]
  m_sTimers[QAD_Timer2].eTimer  = QAD_Timer2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	751a      	strb	r2, [r3, #20]
  m_sTimers[QAD_Timer3].eTimer  = QAD_Timer3;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  m_sTimers[QAD_Timer4].eTimer  = QAD_Timer4;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  m_sTimers[QAD_Timer5].eTimer  = QAD_Timer5;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  m_sTimers[QAD_Timer9].eTimer  = QAD_Timer9;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2205      	movs	r2, #5
 8004d74:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  m_sTimers[QAD_Timer10].eTimer = QAD_Timer10;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2206      	movs	r2, #6
 8004d7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  m_sTimers[QAD_Timer11].eTimer = QAD_Timer11;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2207      	movs	r2, #7
 8004d84:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

	//Set clock speeds
	m_sTimers[QAD_Timer1].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 8004d88:	f7fd fc1e 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	605a      	str	r2, [r3, #4]
	m_sTimers[QAD_Timer2].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004d92:	f7fd fc05 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004d96:	4603      	mov	r3, r0
 8004d98:	005a      	lsls	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	619a      	str	r2, [r3, #24]
	m_sTimers[QAD_Timer3].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004d9e:	f7fd fbff 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004da2:	4603      	mov	r3, r0
 8004da4:	005a      	lsls	r2, r3, #1
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	62da      	str	r2, [r3, #44]	; 0x2c
	m_sTimers[QAD_Timer4].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004daa:	f7fd fbf9 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004dae:	4603      	mov	r3, r0
 8004db0:	005a      	lsls	r2, r3, #1
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
	m_sTimers[QAD_Timer5].uClockSpeed  = HAL_RCC_GetPCLK1Freq() * 2;
 8004db6:	f7fd fbf3 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	005a      	lsls	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
	m_sTimers[QAD_Timer9].uClockSpeed  = HAL_RCC_GetPCLK2Freq();
 8004dc2:	f7fd fc01 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	669a      	str	r2, [r3, #104]	; 0x68
	m_sTimers[QAD_Timer10].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 8004dcc:	f7fd fbfc 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	67da      	str	r2, [r3, #124]	; 0x7c
	m_sTimers[QAD_Timer11].uClockSpeed = HAL_RCC_GetPCLK2Freq();
 8004dd6:	f7fd fbf7 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	//Set types
	m_sTimers[QAD_Timer1].eType  = QAD_Timer_16bit;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	721a      	strb	r2, [r3, #8]
	m_sTimers[QAD_Timer2].eType  = QAD_Timer_32bit;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	771a      	strb	r2, [r3, #28]
	m_sTimers[QAD_Timer3].eType  = QAD_Timer_16bit;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	m_sTimers[QAD_Timer4].eType  = QAD_Timer_16bit;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	m_sTimers[QAD_Timer5].eType  = QAD_Timer_32bit;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2201      	movs	r2, #1
 8004e02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	m_sTimers[QAD_Timer9].eType  = QAD_Timer_16bit;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	m_sTimers[QAD_Timer10].eType = QAD_Timer_16bit;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	m_sTimers[QAD_Timer11].eType = QAD_Timer_16bit;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94

	//Set channel counts
	m_sTimers[QAD_Timer1].uChannels  = 4;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	725a      	strb	r2, [r3, #9]
	m_sTimers[QAD_Timer2].uChannels  = 4;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2204      	movs	r2, #4
 8004e28:	775a      	strb	r2, [r3, #29]
	m_sTimers[QAD_Timer3].uChannels  = 4;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2204      	movs	r2, #4
 8004e2e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	m_sTimers[QAD_Timer4].uChannels  = 4;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2204      	movs	r2, #4
 8004e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	m_sTimers[QAD_Timer5].uChannels  = 4;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	m_sTimers[QAD_Timer9].uChannels  = 2;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	m_sTimers[QAD_Timer10].uChannels = 1;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	m_sTimers[QAD_Timer11].uChannels = 1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

	//Set Instances
	m_sTimers[QAD_Timer1].pInstance  = TIM1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1e      	ldr	r2, [pc, #120]	; (8004ed8 <_ZN12QAD_TimerMgrC1Ev+0x200>)
 8004e5e:	60da      	str	r2, [r3, #12]
	m_sTimers[QAD_Timer2].pInstance  = TIM2;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e66:	621a      	str	r2, [r3, #32]
	m_sTimers[QAD_Timer3].pInstance  = TIM3;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <_ZN12QAD_TimerMgrC1Ev+0x204>)
 8004e6c:	635a      	str	r2, [r3, #52]	; 0x34
	m_sTimers[QAD_Timer4].pInstance  = TIM4;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1b      	ldr	r2, [pc, #108]	; (8004ee0 <_ZN12QAD_TimerMgrC1Ev+0x208>)
 8004e72:	649a      	str	r2, [r3, #72]	; 0x48
	m_sTimers[QAD_Timer5].pInstance  = TIM5;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <_ZN12QAD_TimerMgrC1Ev+0x20c>)
 8004e78:	65da      	str	r2, [r3, #92]	; 0x5c
	m_sTimers[QAD_Timer9].pInstance  = TIM9;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a1a      	ldr	r2, [pc, #104]	; (8004ee8 <_ZN12QAD_TimerMgrC1Ev+0x210>)
 8004e7e:	671a      	str	r2, [r3, #112]	; 0x70
	m_sTimers[QAD_Timer10].pInstance = TIM10;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a1a      	ldr	r2, [pc, #104]	; (8004eec <_ZN12QAD_TimerMgrC1Ev+0x214>)
 8004e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	m_sTimers[QAD_Timer11].pInstance = TIM11;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <_ZN12QAD_TimerMgrC1Ev+0x218>)
 8004e8c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	//Set Update IRQs
	m_sTimers[QAD_Timer1].eIRQ_Update  = TIM1_UP_TIM10_IRQn;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2219      	movs	r2, #25
 8004e94:	741a      	strb	r2, [r3, #16]
	m_sTimers[QAD_Timer2].eIRQ_Update  = TIM2_IRQn;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	221c      	movs	r2, #28
 8004e9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	m_sTimers[QAD_Timer3].eIRQ_Update  = TIM3_IRQn;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	221d      	movs	r2, #29
 8004ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	m_sTimers[QAD_Timer4].eIRQ_Update  = TIM4_IRQn;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	221e      	movs	r2, #30
 8004eaa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	m_sTimers[QAD_Timer5].eIRQ_Update  = TIM5_IRQn;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2232      	movs	r2, #50	; 0x32
 8004eb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	m_sTimers[QAD_Timer9].eIRQ_Update  = TIM1_BRK_TIM9_IRQn;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2218      	movs	r2, #24
 8004eba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	m_sTimers[QAD_Timer10].eIRQ_Update = TIM1_UP_TIM10_IRQn;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2219      	movs	r2, #25
 8004ec2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	m_sTimers[QAD_Timer11].eIRQ_Update = TIM1_TRG_COM_TIM11_IRQn;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	221a      	movs	r2, #26
 8004eca:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

}
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800
 8004ee4:	40000c00 	.word	0x40000c00
 8004ee8:	40014000 	.word	0x40014000
 8004eec:	40014400 	.word	0x40014400
 8004ef0:	40014800 	.word	0x40014800

08004ef4 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State>:
//         QAD_Timer_InUse_PWM     - Specifies timer as being used to generate PWM signals
//         QAD_Timer_InUse_ADC     - Specifies timer as being used to trigger ADC conversions
//Returns QA_OK if registration is successful.
//        QA_Fail if eState is set to QAD_Timer_Unused.
//        QA_Error_PeriphBusy if selected Timer is already in use
QA_Result QAD_TimerMgr::imp_registerTimer(QAD_Timer_Periph eTimer, QAD_Timer_State eState) {
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
 8004f00:	4613      	mov	r3, r2
 8004f02:	70bb      	strb	r3, [r7, #2]
  if (m_sTimers[eTimer].eState)
 8004f04:	78fa      	ldrb	r2, [r7, #3]
 8004f06:	6879      	ldr	r1, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	440b      	add	r3, r1
 8004f12:	3301      	adds	r3, #1
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x2a>
  	return QA_Error_PeriphBusy;
 8004f1a:	2302      	movs	r3, #2
 8004f1c:	e00f      	b.n	8004f3e <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  if (!eState)
 8004f1e:	78bb      	ldrb	r3, [r7, #2]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x34>
  	return QA_Fail;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e00a      	b.n	8004f3e <_ZN12QAD_TimerMgr17imp_registerTimerE16QAD_Timer_Periph15QAD_Timer_State+0x4a>

  m_sTimers[eTimer].eState = eState;
 8004f28:	78fa      	ldrb	r2, [r7, #3]
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	3301      	adds	r3, #1
 8004f38:	78ba      	ldrb	r2, [r7, #2]
 8004f3a:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <_ZN12QAD_TimerMgr19imp_deregisterTimerE16QAD_Timer_Periph>:
//QAD_TimerMgr Management Method
//
//To be called from static method registerTimer()
//Used to deregister a Timer peripheral to mark it as no longer being used by a driver
//eTimer - The Timer peripheral to be deregistered. A member of QAD_Timer_Periph
void QAD_TimerMgr::imp_deregisterTimer(QAD_Timer_Periph eTimer) {
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	460b      	mov	r3, r1
 8004f54:	70fb      	strb	r3, [r7, #3]
  m_sTimers[eTimer].eState = QAD_Timer_Unused;
 8004f56:	78fa      	ldrb	r2, [r7, #3]
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3301      	adds	r3, #1
 8004f66:	2200      	movs	r2, #0
 8004f68:	701a      	strb	r2, [r3, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
	...

08004f78 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by enableClock()
//Used to enable the clock for a specific Timer peripheral
//eTimer - the Timer peripheral to enable the clock for
void QAD_TimerMgr::imp_enableClock(QAD_Timer_Periph eTimer) {
 8004f78:	b480      	push	{r7}
 8004f7a:	b08b      	sub	sp, #44	; 0x2c
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	f200 80ef 	bhi.w	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1c>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08004fb9 	.word	0x08004fb9
 8004f98:	08004fef 	.word	0x08004fef
 8004f9c:	08005025 	.word	0x08005025
 8004fa0:	0800505b 	.word	0x0800505b
 8004fa4:	08005091 	.word	0x08005091
 8004fa8:	080050c7 	.word	0x080050c7
 8004fac:	080050fd 	.word	0x080050fd
 8004fb0:	08005133 	.word	0x08005133
 8004fb4:	08005169 	.word	0x08005169
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_ENABLE();
 8004fb8:	2300      	movs	r3, #0
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
 8004fbc:	4b6e      	ldr	r3, [pc, #440]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc0:	4a6d      	ldr	r2, [pc, #436]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc8:	4b6b      	ldr	r3, [pc, #428]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      __HAL_RCC_TIM1_FORCE_RESET();
 8004fd4:	4b68      	ldr	r3, [pc, #416]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	4a67      	ldr	r2, [pc, #412]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004fda:	f043 0301 	orr.w	r3, r3, #1
 8004fde:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_TIM1_RELEASE_RESET();
 8004fe0:	4b65      	ldr	r3, [pc, #404]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	4a64      	ldr	r2, [pc, #400]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8004fec:	e0bd      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_ENABLE();
 8004fee:	2300      	movs	r3, #0
 8004ff0:	623b      	str	r3, [r7, #32]
 8004ff2:	4b61      	ldr	r3, [pc, #388]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	4a60      	ldr	r2, [pc, #384]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffe:	4b5e      	ldr	r3, [pc, #376]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	623b      	str	r3, [r7, #32]
 8005008:	6a3b      	ldr	r3, [r7, #32]
			__HAL_RCC_TIM2_FORCE_RESET();
 800500a:	4b5b      	ldr	r3, [pc, #364]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	4a5a      	ldr	r2, [pc, #360]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM2_RELEASE_RESET();
 8005016:	4b58      	ldr	r3, [pc, #352]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	4a57      	ldr	r2, [pc, #348]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800501c:	f023 0301 	bic.w	r3, r3, #1
 8005020:	6213      	str	r3, [r2, #32]
      break;
 8005022:	e0a2      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_ENABLE();
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	4b53      	ldr	r3, [pc, #332]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	4a52      	ldr	r2, [pc, #328]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800502e:	f043 0302 	orr.w	r3, r3, #2
 8005032:	6413      	str	r3, [r2, #64]	; 0x40
 8005034:	4b50      	ldr	r3, [pc, #320]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	69fb      	ldr	r3, [r7, #28]
			__HAL_RCC_TIM3_FORCE_RESET();
 8005040:	4b4d      	ldr	r3, [pc, #308]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	4a4c      	ldr	r2, [pc, #304]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005046:	f043 0302 	orr.w	r3, r3, #2
 800504a:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM3_RELEASE_RESET();
 800504c:	4b4a      	ldr	r3, [pc, #296]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	4a49      	ldr	r2, [pc, #292]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005052:	f023 0302 	bic.w	r3, r3, #2
 8005056:	6213      	str	r3, [r2, #32]
      break;
 8005058:	e087      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	4b46      	ldr	r3, [pc, #280]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005062:	4a45      	ldr	r2, [pc, #276]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005064:	f043 0304 	orr.w	r3, r3, #4
 8005068:	6413      	str	r3, [r2, #64]	; 0x40
 800506a:	4b43      	ldr	r3, [pc, #268]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	61bb      	str	r3, [r7, #24]
 8005074:	69bb      	ldr	r3, [r7, #24]
			__HAL_RCC_TIM4_FORCE_RESET();
 8005076:	4b40      	ldr	r3, [pc, #256]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	4a3f      	ldr	r2, [pc, #252]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM4_RELEASE_RESET();
 8005082:	4b3d      	ldr	r3, [pc, #244]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	4a3c      	ldr	r2, [pc, #240]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005088:	f023 0304 	bic.w	r3, r3, #4
 800508c:	6213      	str	r3, [r2, #32]
      break;
 800508e:	e06c      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_ENABLE();
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
 8005094:	4b38      	ldr	r3, [pc, #224]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	4a37      	ldr	r2, [pc, #220]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800509a:	f043 0308 	orr.w	r3, r3, #8
 800509e:	6413      	str	r3, [r2, #64]	; 0x40
 80050a0:	4b35      	ldr	r3, [pc, #212]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	697b      	ldr	r3, [r7, #20]
			__HAL_RCC_TIM5_FORCE_RESET();
 80050ac:	4b32      	ldr	r3, [pc, #200]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	4a31      	ldr	r2, [pc, #196]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050b2:	f043 0308 	orr.w	r3, r3, #8
 80050b6:	6213      	str	r3, [r2, #32]
			__HAL_RCC_TIM5_RELEASE_RESET();
 80050b8:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	4a2e      	ldr	r2, [pc, #184]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050be:	f023 0308 	bic.w	r3, r3, #8
 80050c2:	6213      	str	r3, [r2, #32]
      break;
 80050c4:	e051      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	4b2b      	ldr	r3, [pc, #172]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	4a2a      	ldr	r2, [pc, #168]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d4:	6453      	str	r3, [r2, #68]	; 0x44
 80050d6:	4b28      	ldr	r3, [pc, #160]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050de:	613b      	str	r3, [r7, #16]
 80050e0:	693b      	ldr	r3, [r7, #16]
			__HAL_RCC_TIM9_FORCE_RESET();
 80050e2:	4b25      	ldr	r3, [pc, #148]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e6:	4a24      	ldr	r2, [pc, #144]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ec:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM9_RELEASE_RESET();
 80050ee:	4b22      	ldr	r3, [pc, #136]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	4a21      	ldr	r2, [pc, #132]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 80050f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f8:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 80050fa:	e036      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_ENABLE();
 80050fc:	2300      	movs	r3, #0
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	4b1d      	ldr	r3, [pc, #116]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005104:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510a:	6453      	str	r3, [r2, #68]	; 0x44
 800510c:	4b1a      	ldr	r3, [pc, #104]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800510e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	68fb      	ldr	r3, [r7, #12]
			__HAL_RCC_TIM10_FORCE_RESET();
 8005118:	4b17      	ldr	r3, [pc, #92]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	4a16      	ldr	r2, [pc, #88]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800511e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005122:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM10_RELEASE_RESET();
 8005124:	4b14      	ldr	r3, [pc, #80]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	4a13      	ldr	r2, [pc, #76]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800512a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800512e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8005130:	e01b      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_ENABLE();
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]
 8005136:	4b10      	ldr	r3, [pc, #64]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	4a0f      	ldr	r2, [pc, #60]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800513c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005140:	6453      	str	r3, [r2, #68]	; 0x44
 8005142:	4b0d      	ldr	r3, [pc, #52]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800514a:	60bb      	str	r3, [r7, #8]
 800514c:	68bb      	ldr	r3, [r7, #8]
			__HAL_RCC_TIM11_FORCE_RESET();
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005158:	6253      	str	r3, [r2, #36]	; 0x24
			__HAL_RCC_TIM11_RELEASE_RESET();
 800515a:	4b07      	ldr	r3, [pc, #28]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	4a06      	ldr	r2, [pc, #24]	; (8005178 <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x200>)
 8005160:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005164:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 8005166:	e000      	b.n	800516a <_ZN12QAD_TimerMgr15imp_enableClockE16QAD_Timer_Periph+0x1f2>
    case (QAD_TimerNone):
    	break;
 8005168:	bf00      	nop
  }
}
 800516a:	bf00      	nop
 800516c:	372c      	adds	r7, #44	; 0x2c
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	40023800 	.word	0x40023800

0800517c <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph>:
//QAD_TimerMgr Clock Method
//
//To be called by disableClock()
//Used to disable the clock for a specific Timer peripheral
//eTimer - The timer peripheral to disable the clock for
void QAD_TimerMgr::imp_disableClock(QAD_Timer_Periph eTimer) {
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	460b      	mov	r3, r1
 8005186:	70fb      	strb	r3, [r7, #3]
  switch (eTimer) {
 8005188:	78fb      	ldrb	r3, [r7, #3]
 800518a:	2b08      	cmp	r3, #8
 800518c:	d84d      	bhi.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0x18>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c7 	.word	0x080051c7
 800519c:	080051d5 	.word	0x080051d5
 80051a0:	080051e3 	.word	0x080051e3
 80051a4:	080051f1 	.word	0x080051f1
 80051a8:	080051ff 	.word	0x080051ff
 80051ac:	0800520d 	.word	0x0800520d
 80051b0:	0800521b 	.word	0x0800521b
 80051b4:	08005229 	.word	0x08005229
    case (QAD_Timer1):
    	__HAL_RCC_TIM1_CLK_DISABLE();
 80051b8:	4b1f      	ldr	r3, [pc, #124]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	4a1e      	ldr	r2, [pc, #120]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 80051c4:	e031      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer2):
    	__HAL_RCC_TIM2_CLK_DISABLE();
 80051c6:	4b1c      	ldr	r3, [pc, #112]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ca:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80051d2:	e02a      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer3):
    	__HAL_RCC_TIM3_CLK_DISABLE();
 80051d4:	4b18      	ldr	r3, [pc, #96]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d8:	4a17      	ldr	r2, [pc, #92]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051da:	f023 0302 	bic.w	r3, r3, #2
 80051de:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80051e0:	e023      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer4):
    	__HAL_RCC_TIM4_CLK_DISABLE();
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	4a14      	ldr	r2, [pc, #80]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051e8:	f023 0304 	bic.w	r3, r3, #4
 80051ec:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80051ee:	e01c      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer5):
    	__HAL_RCC_TIM5_CLK_DISABLE();
 80051f0:	4b11      	ldr	r3, [pc, #68]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	4a10      	ldr	r2, [pc, #64]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 80051f6:	f023 0308 	bic.w	r3, r3, #8
 80051fa:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 80051fc:	e015      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer9):
    	__HAL_RCC_TIM9_CLK_DISABLE();
 80051fe:	4b0e      	ldr	r3, [pc, #56]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	4a0d      	ldr	r2, [pc, #52]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8005204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005208:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 800520a:	e00e      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer10):
    	__HAL_RCC_TIM10_CLK_DISABLE();
 800520c:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 800520e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005210:	4a09      	ldr	r2, [pc, #36]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8005212:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005216:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8005218:	e007      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_Timer11):
    	__HAL_RCC_TIM11_CLK_DISABLE();
 800521a:	4b07      	ldr	r3, [pc, #28]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521e:	4a06      	ldr	r2, [pc, #24]	; (8005238 <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xbc>)
 8005220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005224:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8005226:	e000      	b.n	800522a <_ZN12QAD_TimerMgr16imp_disableClockE16QAD_Timer_Periph+0xae>
    case (QAD_TimerNone):
    	break;
 8005228:	bf00      	nop
  }
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40023800 	.word	0x40023800

0800523c <_ZN11QAD_UARTMgrC1Ev>:
//QAD_UARTMgr::QAD_UARTMgr
//QAD_UARTMgr Constructor
//
//Fills out details for the system's UART peripherals
//As this is a private method in a singleton class, this method will be called the first time the class's get() method is called.
QAD_UARTMgr::QAD_UARTMgr() {
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]

	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	7bfb      	ldrb	r3, [r7, #15]
 800524a:	2b02      	cmp	r3, #2
 800524c:	d80d      	bhi.n	800526a <_ZN11QAD_UARTMgrC1Ev+0x2e>
		m_sUARTs[i].eState = QAD_UART_Unused;
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	3301      	adds	r3, #1
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
	for (uint8_t i=0; i<QAD_UART_PeriphCount; i++) {
 8005262:	7bfb      	ldrb	r3, [r7, #15]
 8005264:	3301      	adds	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
 8005268:	e7ee      	b.n	8005248 <_ZN11QAD_UARTMgrC1Ev+0xc>
	}

	//Set UART Periph ID
	m_sUARTs[QAD_UART1].eUART = QAD_UART1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
	m_sUARTs[QAD_UART2].eUART = QAD_UART2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	731a      	strb	r2, [r3, #12]
	m_sUARTs[QAD_UART6].eUART = QAD_UART6;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	761a      	strb	r2, [r3, #24]

	//Set Instances
	m_sUARTs[QAD_UART1].pInstance = USART1;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a0c      	ldr	r2, [pc, #48]	; (80052b0 <_ZN11QAD_UARTMgrC1Ev+0x74>)
 8005280:	605a      	str	r2, [r3, #4]
	m_sUARTs[QAD_UART2].pInstance = USART2;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <_ZN11QAD_UARTMgrC1Ev+0x78>)
 8005286:	611a      	str	r2, [r3, #16]
	m_sUARTs[QAD_UART6].pInstance = USART6;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a0b      	ldr	r2, [pc, #44]	; (80052b8 <_ZN11QAD_UARTMgrC1Ev+0x7c>)
 800528c:	61da      	str	r2, [r3, #28]

	//Set IRQs
	m_sUARTs[QAD_UART1].eIRQ = USART1_IRQn;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2225      	movs	r2, #37	; 0x25
 8005292:	721a      	strb	r2, [r3, #8]
	m_sUARTs[QAD_UART2].eIRQ = USART2_IRQn;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2226      	movs	r2, #38	; 0x26
 8005298:	751a      	strb	r2, [r3, #20]
	m_sUARTs[QAD_UART6].eIRQ = USART6_IRQn;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2247      	movs	r2, #71	; 0x47
 800529e:	f883 2020 	strb.w	r2, [r3, #32]

}
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	40011000 	.word	0x40011000
 80052b4:	40004400 	.word	0x40004400
 80052b8:	40011400 	.word	0x40011400

080052bc <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph>:
//
//To be called from static method registerUART()
//Used to register a UART peripheral as being used by a driver
//eUART - the UART peripheral to be registered. A member of QAD_UART_Periph
//Returns QA_OK if registration is successful, or returns QA_Error_PeriphBusy if the selected UART is already in use
QA_Result QAD_UARTMgr::imp_registerUART(QAD_UART_Periph eUART) {
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x16>
		return QA_Fail;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e017      	b.n	8005302 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  if (m_sUARTs[eUART].eState)
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	005b      	lsls	r3, r3, #1
 80052da:	4413      	add	r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	3301      	adds	r3, #1
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x30>
  	return QA_Error_PeriphBusy;
 80052e8:	2302      	movs	r3, #2
 80052ea:	e00a      	b.n	8005302 <_ZN11QAD_UARTMgr16imp_registerUARTE15QAD_UART_Periph+0x46>

  m_sUARTs[eUART].eState = QAD_UART_InUse;
 80052ec:	78fa      	ldrb	r2, [r7, #3]
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	4613      	mov	r3, r2
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	4413      	add	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	440b      	add	r3, r1
 80052fa:	3301      	adds	r3, #1
 80052fc:	2201      	movs	r2, #1
 80052fe:	701a      	strb	r2, [r3, #0]
  return QA_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	370c      	adds	r7, #12
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph>:
//QAD_UARTMgr Private Management Method
//
//To be called from static method deregisterUART()
//Used to deregister a UART peripheral to mark it as no longer being used by a driver
//eUART - the UART peripheral to be deregistered. A member of QAD_UART_Periph
void QAD_UARTMgr::imp_deregisterUART(QAD_UART_Periph eUART) {
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	460b      	mov	r3, r1
 8005318:	70fb      	strb	r3, [r7, #3]
	if (eUART >= QAD_UARTNone)
 800531a:	78fb      	ldrb	r3, [r7, #3]
 800531c:	2b02      	cmp	r3, #2
 800531e:	d80a      	bhi.n	8005336 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x28>
		return;

  m_sUARTs[eUART].eState = QAD_UART_Unused;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	3301      	adds	r3, #1
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	e000      	b.n	8005338 <_ZN11QAD_UARTMgr18imp_deregisterUARTE15QAD_UART_Periph+0x2a>
		return;
 8005336:	bf00      	nop
}
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method enableClock()
//Used to enable the clock for a specific UART peripheral
//eUART - the UART peripheral to enable the clock for
void QAD_UARTMgr::imp_enableClock(QAD_UART_Periph eUART) {
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	460b      	mov	r3, r1
 800534e:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 8005350:	78fb      	ldrb	r3, [r7, #3]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d85c      	bhi.n	8005410 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
 8005356:	a201      	add	r2, pc, #4	; (adr r2, 800535c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0x18>)
 8005358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800535c:	0800536d 	.word	0x0800536d
 8005360:	080053a3 	.word	0x080053a3
 8005364:	080053d9 	.word	0x080053d9
 8005368:	0800540f 	.word	0x0800540f
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_ENABLE();
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	4b2a      	ldr	r3, [pc, #168]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	4a29      	ldr	r2, [pc, #164]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005376:	f043 0310 	orr.w	r3, r3, #16
 800537a:	6453      	str	r3, [r2, #68]	; 0x44
 800537c:	4b27      	ldr	r3, [pc, #156]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800537e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	617b      	str	r3, [r7, #20]
 8005386:	697b      	ldr	r3, [r7, #20]
      __HAL_RCC_USART1_FORCE_RESET();
 8005388:	4b24      	ldr	r3, [pc, #144]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538c:	4a23      	ldr	r2, [pc, #140]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800538e:	f043 0310 	orr.w	r3, r3, #16
 8005392:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART1_RELEASE_RESET();
 8005394:	4b21      	ldr	r3, [pc, #132]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	4a20      	ldr	r2, [pc, #128]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 800539a:	f023 0310 	bic.w	r3, r3, #16
 800539e:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 80053a0:	e036      	b.n	8005410 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_ENABLE();
 80053a2:	2300      	movs	r3, #0
 80053a4:	613b      	str	r3, [r7, #16]
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	4a1c      	ldr	r2, [pc, #112]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053b0:	6413      	str	r3, [r2, #64]	; 0x40
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ba:	613b      	str	r3, [r7, #16]
 80053bc:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_USART2_FORCE_RESET();
 80053be:	4b17      	ldr	r3, [pc, #92]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	4a16      	ldr	r2, [pc, #88]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053c8:	6213      	str	r3, [r2, #32]
      __HAL_RCC_USART2_RELEASE_RESET();
 80053ca:	4b14      	ldr	r3, [pc, #80]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	4a13      	ldr	r2, [pc, #76]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80053d4:	6213      	str	r3, [r2, #32]
      break;
 80053d6:	e01b      	b.n	8005410 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_ENABLE();
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	4b0f      	ldr	r3, [pc, #60]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e0:	4a0e      	ldr	r2, [pc, #56]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053e2:	f043 0320 	orr.w	r3, r3, #32
 80053e6:	6453      	str	r3, [r2, #68]	; 0x44
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	f003 0320 	and.w	r3, r3, #32
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
      __HAL_RCC_USART6_FORCE_RESET();
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	4a08      	ldr	r2, [pc, #32]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 80053fa:	f043 0320 	orr.w	r3, r3, #32
 80053fe:	6253      	str	r3, [r2, #36]	; 0x24
      __HAL_RCC_USART6_RELEASE_RESET();
 8005400:	4b06      	ldr	r3, [pc, #24]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	4a05      	ldr	r2, [pc, #20]	; (800541c <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xd8>)
 8005406:	f023 0320 	bic.w	r3, r3, #32
 800540a:	6253      	str	r3, [r2, #36]	; 0x24
      break;
 800540c:	e000      	b.n	8005410 <_ZN11QAD_UARTMgr15imp_enableClockE15QAD_UART_Periph+0xcc>
    case (QAD_UARTNone):
    	break;
 800540e:	bf00      	nop
  }
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	40023800 	.word	0x40023800

08005420 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph>:
//QAD_UARTMgr Private Clock Method
//
//To be called from static method disableClock()
//Used to disable the clock for a specific UART peripheral
//eUART - the UART peripheral to disable the clock for
void QAD_UARTMgr::imp_disableClock(QAD_UART_Periph eUART) {
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
  switch (eUART) {
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b03      	cmp	r3, #3
 8005430:	d820      	bhi.n	8005474 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x18>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005449 	.word	0x08005449
 800543c:	08005457 	.word	0x08005457
 8005440:	08005465 	.word	0x08005465
 8005444:	08005473 	.word	0x08005473
    case (QAD_UART1):
    	__HAL_RCC_USART1_CLK_DISABLE();
 8005448:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800544e:	f023 0310 	bic.w	r3, r3, #16
 8005452:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8005454:	e00e      	b.n	8005474 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART2):
    	__HAL_RCC_USART2_CLK_DISABLE();
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	4a09      	ldr	r2, [pc, #36]	; (8005480 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800545c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005460:	6413      	str	r3, [r2, #64]	; 0x40
      break;
 8005462:	e007      	b.n	8005474 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UART6):
    	__HAL_RCC_USART6_CLK_DISABLE();
 8005464:	4b06      	ldr	r3, [pc, #24]	; (8005480 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 8005466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005468:	4a05      	ldr	r2, [pc, #20]	; (8005480 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x60>)
 800546a:	f023 0320 	bic.w	r3, r3, #32
 800546e:	6453      	str	r3, [r2, #68]	; 0x44
      break;
 8005470:	e000      	b.n	8005474 <_ZN11QAD_UARTMgr16imp_disableClockE15QAD_UART_Periph+0x54>
    case (QAD_UARTNone):
    	break;
 8005472:	bf00      	nop
  }
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40023800 	.word	0x40023800

08005484 <_ZN19QAS_Serial_Dev_Base4initEPv>:
//
//System Class initialization method
//Calls imp_init() pure virtual function, which is to be implemented by inheriting class
//p - void pointer containing a pointer to any data that may be needed by the imp_init method of the inheriting class
//Returns QA_OK if initialization successful, or QA_Fail or other QA_Result error if initialization fails
QA_Result QAS_Serial_Dev_Base::init(void* p) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  if (m_eInitState)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	7b1b      	ldrb	r3, [r3, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <_ZN19QAS_Serial_Dev_Base4initEPv+0x16>
  	return QA_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	e010      	b.n	80054bc <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  QA_Result eRes = imp_init(p);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6839      	ldr	r1, [r7, #0]
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	4798      	blx	r3
 80054a6:	4603      	mov	r3, r0
 80054a8:	73fb      	strb	r3, [r7, #15]
  if (eRes)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <_ZN19QAS_Serial_Dev_Base4initEPv+0x30>
  	return eRes;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	e003      	b.n	80054bc <_ZN19QAS_Serial_Dev_Base4initEPv+0x38>

  //
  m_eInitState = QA_Initialized;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	731a      	strb	r2, [r3, #12]
  return QA_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <_ZN19QAS_Serial_Dev_Base7handlerEPv>:
//QAS_Serial_Dev_Base::handler
//QAS_Serial_Dev_Base Handler Method
//
//Interrupt Handler method to be called by system IRQ handler
//Calls imp_handler() pure virtual function, which is to be implemented by inheriting class
void QAS_Serial_Dev_Base::handler(void* p) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  imp_handler(p);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	3308      	adds	r3, #8
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6839      	ldr	r1, [r7, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	4798      	blx	r3
}
 80054dc:	bf00      	nop
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZN19QAS_Serial_Dev_Base8txStringEPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txString(const char* str) {
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 80054ee:	6838      	ldr	r0, [r7, #0]
 80054f0:	f7fa fe72 	bl	80001d8 <strlen>
 80054f4:	4603      	mov	r3, r0
 80054f6:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 80054f8:	2300      	movs	r3, #0
 80054fa:	81fb      	strh	r3, [r7, #14]
 80054fc:	89fa      	ldrh	r2, [r7, #14]
 80054fe:	89bb      	ldrh	r3, [r7, #12]
 8005500:	429a      	cmp	r2, r3
 8005502:	d20f      	bcs.n	8005524 <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3304      	adds	r3, #4
 8005508:	4618      	mov	r0, r3
 800550a:	f000 f861 	bl	80055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800550e:	89fb      	ldrh	r3, [r7, #14]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	4413      	add	r3, r2
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	4619      	mov	r1, r3
 8005518:	f000 fa0b 	bl	8005932 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 800551c:	89fb      	ldrh	r3, [r7, #14]
 800551e:	3301      	adds	r3, #1
 8005520:	81fb      	strh	r3, [r7, #14]
 8005522:	e7eb      	b.n	80054fc <_ZN19QAS_Serial_Dev_Base8txStringEPKc+0x18>
  }
  imp_txStart();
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	330c      	adds	r3, #12
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	4798      	blx	r3
}
 8005530:	bf00      	nop
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc>:
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a c-style string, followed by a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
//str - the null terminated c-style string to be transmitted
void QAS_Serial_Dev_Base::txStringCR(const char* str) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint16_t uLen = strlen(str);
 8005542:	6838      	ldr	r0, [r7, #0]
 8005544:	f7fa fe48 	bl	80001d8 <strlen>
 8005548:	4603      	mov	r3, r0
 800554a:	81bb      	strh	r3, [r7, #12]
  for (uint16_t i=0; i<uLen; i++) {
 800554c:	2300      	movs	r3, #0
 800554e:	81fb      	strh	r3, [r7, #14]
 8005550:	89fa      	ldrh	r2, [r7, #14]
 8005552:	89bb      	ldrh	r3, [r7, #12]
 8005554:	429a      	cmp	r2, r3
 8005556:	d20f      	bcs.n	8005578 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x40>
  	m_pTXFIFO->push(str[i]);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3304      	adds	r3, #4
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f837 	bl	80055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005562:	89fb      	ldrh	r3, [r7, #14]
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	4413      	add	r3, r2
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	4619      	mov	r1, r3
 800556c:	f000 f9e1 	bl	8005932 <_ZN14QAT_FIFOBuffer4pushEh>
  for (uint16_t i=0; i<uLen; i++) {
 8005570:	89fb      	ldrh	r3, [r7, #14]
 8005572:	3301      	adds	r3, #1
 8005574:	81fb      	strh	r3, [r7, #14]
 8005576:	e7eb      	b.n	8005550 <_ZN19QAS_Serial_Dev_Base10txStringCREPKc+0x18>
  }
  m_pTXFIFO->push(13);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3304      	adds	r3, #4
 800557c:	4618      	mov	r0, r3
 800557e:	f000 f827 	bl	80055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005582:	4603      	mov	r3, r0
 8005584:	210d      	movs	r1, #13
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f9d3 	bl	8005932 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	330c      	adds	r3, #12
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	4798      	blx	r3
}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <_ZN19QAS_Serial_Dev_Base4txCREv>:
//QAS_Serial_Dev_Base::txCR
//QAS_Serial_Dev_Base Transmit Method
//
//Used to transmit a carriage return character (ASCII #13)
//Calls imp_txStart() pure virtual function to begin transmission, which is to be implemented by the inheriting class
void QAS_Serial_Dev_Base::txCR(void) {
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  m_pTXFIFO->push(13);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f80f 	bl	80055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 80055b2:	4603      	mov	r3, r0
 80055b4:	210d      	movs	r1, #13
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f9bb 	bl	8005932 <_ZN14QAT_FIFOBuffer4pushEh>
  imp_txStart();
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
}
 80055c8:	bf00      	nop
 80055ca:	3708      	adds	r7, #8
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	return get();
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f805 	bl	80055e8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>
 80055de:	4603      	mov	r3, r0
      }
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 f805 	bl	8005602 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>
 80055f8:	4603      	mov	r3, r0
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZNKSt15__uniq_ptr_implI14QAT_FIFOBufferSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f806 	bl	800561e <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8005612:	4603      	mov	r3, r0
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4618      	mov	r0, r3
 8005618:	3708      	adds	r7, #8
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}

0800561e <_ZSt3getILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f805 	bl	8005638 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800562e:	4603      	mov	r3, r0
 8005630:	4618      	mov	r0, r3
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <_ZSt12__get_helperILj0EP14QAT_FIFOBufferJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 f805 	bl	8005650 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>
 8005646:	4603      	mov	r3, r0
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_ZNSt11_Tuple_implILj0EJP14QAT_FIFOBufferSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f805 	bl	800566a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>
 8005660:	4603      	mov	r3, r0
 8005662:	4618      	mov	r0, r3
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <_ZNSt10_Head_baseILj0EP14QAT_FIFOBufferLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <_ZN19QAS_Serial_Dev_UART8imp_initEPv>:
//QAS_Serial_Dev_UART Initialization Method
//
//Used too initialize the UART peripheral driver
//p - Unused in this implementation
//Returns QA_OK if driver initialization is successful, or an error if not successful (a member of QA_Result as defined in setup.hpp)
QA_Result QAS_Serial_Dev_UART::imp_init(void* p) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
	return m_pUART->init();
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3314      	adds	r3, #20
 800568e:	4618      	mov	r0, r3
 8005690:	f000 f8e4 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005694:	4603      	mov	r3, r0
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff f97a 	bl	8004990 <_ZN8QAD_UART4initEv>
 800569c:	4603      	mov	r3, r0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3708      	adds	r7, #8
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <_ZN19QAS_Serial_Dev_UART10imp_deinitEv>:

//QAS_Serial_Dev_UART::imp_deinit
//QAS_Serial_Dev_UART Initialization Method
//
//Used to deinitialize the UART peripheral driver
void QAS_Serial_Dev_UART::imp_deinit(void) {
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  m_pUART->deinit();
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3314      	adds	r3, #20
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f8d2 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80056b8:	4603      	mov	r3, r0
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff f992 	bl	80049e4 <_ZN8QAD_UART6deinitEv>
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv>:
//QAS_Serial_Dev_UART::imp_handler
//QAS_Serial_Dev_UART IRQ Handler Method
//
//This method is only to be called by the interrupt request handler function from handlers.cpp
//p - Unused in this implementation
void QAS_Serial_Dev_UART::imp_handler(void* p) {
 80056c8:	b590      	push	{r4, r7, lr}
 80056ca:	b095      	sub	sp, #84	; 0x54
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  UART_HandleTypeDef pHandle = m_pUART->getHandle();
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	3314      	adds	r3, #20
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f8c0 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80056dc:	4603      	mov	r3, r0
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff f996 	bl	8004a10 <_ZN8QAD_UART9getHandleEv>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f107 0308 	add.w	r3, r7, #8
 80056ea:	4611      	mov	r1, r2
 80056ec:	2244      	movs	r2, #68	; 0x44
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fa48 	bl	8005b84 <memcpy>

  //RX Register Not Empty (RXNE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_RXNE)) {
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b20      	cmp	r3, #32
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01f      	beq.n	800574a <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x82>
  	uint8_t uData = m_pUART->dataRX();
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	3314      	adds	r3, #20
 800570e:	4618      	mov	r0, r3
 8005710:	f000 f8a4 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005714:	4603      	mov	r3, r0
 8005716:	4618      	mov	r0, r3
 8005718:	f7ff f9ee 	bl	8004af8 <_ZN8QAD_UART6dataRXEv>
 800571c:	4603      	mov	r3, r0
 800571e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  	if (m_eRXState)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	7b9b      	ldrb	r3, [r3, #14]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00b      	beq.n	8005742 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x7a>
  		m_pRXFIFO->push(uData);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3308      	adds	r3, #8
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff ff4e 	bl	80055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005734:	4602      	mov	r2, r0
 8005736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f000 f8f8 	bl	8005932 <_ZN14QAT_FIFOBuffer4pushEh>
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_RXNE);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f06f 0220 	mvn.w	r2, #32
 8005748:	601a      	str	r2, [r3, #0]
  }

  //TX Register Empty (TXE)
  if (__HAL_UART_GET_FLAG(&pHandle, UART_FLAG_TXE)) {
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d035      	beq.n	80057cc <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0x104>
  	if (!m_pTXFIFO->empty()) {
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	3304      	adds	r3, #4
 8005764:	4618      	mov	r0, r3
 8005766:	f7ff ff33 	bl	80055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 800576a:	4603      	mov	r3, r0
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f8cd 	bl	800590c <_ZN14QAT_FIFOBuffer5emptyEv>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	bf0c      	ite	eq
 8005778:	2301      	moveq	r3, #1
 800577a:	2300      	movne	r3, #0
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d014      	beq.n	80057ac <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xe4>
  		m_pUART->dataTX(m_pTXFIFO->pop());
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	3314      	adds	r3, #20
 8005786:	4618      	mov	r0, r3
 8005788:	f000 f868 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800578c:	4604      	mov	r4, r0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	3304      	adds	r3, #4
 8005792:	4618      	mov	r0, r3
 8005794:	f7ff ff1c 	bl	80055d0 <_ZNKSt10unique_ptrI14QAT_FIFOBufferSt14default_deleteIS0_EEptEv>
 8005798:	4603      	mov	r3, r0
 800579a:	4618      	mov	r0, r3
 800579c:	f000 f8ed 	bl	800597a <_ZN14QAT_FIFOBuffer3popEv>
 80057a0:	4603      	mov	r3, r0
 80057a2:	4619      	mov	r1, r3
 80057a4:	4620      	mov	r0, r4
 80057a6:	f7ff f997 	bl	8004ad8 <_ZN8QAD_UART6dataTXEh>
 80057aa:	e00b      	b.n	80057c4 <_ZN19QAS_Serial_Dev_UART11imp_handlerEPv+0xfc>
  	} else {
      m_pUART->stopTX();
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3314      	adds	r3, #20
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 f853 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80057b6:	4603      	mov	r3, r0
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff f94b 	bl	8004a54 <_ZN8QAD_UART6stopTXEv>
      m_eTXState = QA_Inactive;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	735a      	strb	r2, [r3, #13]
  	}
  	__HAL_UART_CLEAR_FLAG(&pHandle, UART_FLAG_TXE);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057ca:	601a      	str	r2, [r3, #0]
  }
}
 80057cc:	bf00      	nop
 80057ce:	3754      	adds	r7, #84	; 0x54
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd90      	pop	{r4, r7, pc}

080057d4 <_ZN19QAS_Serial_Dev_UART11imp_txStartEv>:

//QAS_Serial_Dev_UART::imp_txStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStart(void) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  m_pUART->startTX();
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3314      	adds	r3, #20
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 f83b 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 80057e6:	4603      	mov	r3, r0
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff f91d 	bl	8004a28 <_ZN8QAD_UART7startTXEv>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <_ZN19QAS_Serial_Dev_UART10imp_txStopEv>:

//QAS_Serial_Dev_UART::imp_txStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop transmission of the UART peripheral
void QAS_Serial_Dev_UART::imp_txStop(void) {
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b082      	sub	sp, #8
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  m_pUART->stopTX();
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3314      	adds	r3, #20
 8005802:	4618      	mov	r0, r3
 8005804:	f000 f82a 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 8005808:	4603      	mov	r3, r0
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff f922 	bl	8004a54 <_ZN8QAD_UART6stopTXEv>
}
 8005810:	bf00      	nop
 8005812:	3708      	adds	r7, #8
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <_ZN19QAS_Serial_Dev_UART11imp_rxStartEv>:

//QAS_Serial_Dev_UART::imp_rxStart
//QAS_Serial_Dev_UART Control Method
//
//Used to start receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStart(void) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  m_pUART->startRX();
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3314      	adds	r3, #20
 8005824:	4618      	mov	r0, r3
 8005826:	f000 f819 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800582a:	4603      	mov	r3, r0
 800582c:	4618      	mov	r0, r3
 800582e:	f7ff f927 	bl	8004a80 <_ZN8QAD_UART7startRXEv>
}
 8005832:	bf00      	nop
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <_ZN19QAS_Serial_Dev_UART10imp_rxStopEv>:

//QAS_Serial_Dev_UART::imp_rxStop
//QAS_Serial_Dev_UART Control Method
//
//Used to stop receive of the UART peripheral
void QAS_Serial_Dev_UART::imp_rxStop(void) {
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  m_pUART->stopRX();
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	3314      	adds	r3, #20
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f808 	bl	800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>
 800584c:	4603      	mov	r3, r0
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff f92c 	bl	8004aac <_ZN8QAD_UART6stopRXEv>
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
	return get();
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f805 	bl	8005874 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>
 800586a:	4603      	mov	r3, r0
      }
 800586c:	4618      	mov	r0, r3
 800586e:	3708      	adds	r7, #8
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <_ZNKSt10unique_ptrI8QAD_UARTSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4618      	mov	r0, r3
 8005880:	f000 f805 	bl	800588e <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>
 8005884:	4603      	mov	r3, r0
 8005886:	4618      	mov	r0, r3
 8005888:	3708      	adds	r7, #8
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <_ZNKSt15__uniq_ptr_implI8QAD_UARTSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 800588e:	b580      	push	{r7, lr}
 8005890:	b082      	sub	sp, #8
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4618      	mov	r0, r3
 800589a:	f000 f806 	bl	80058aa <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 800589e:	4603      	mov	r3, r0
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <_ZSt3getILj0EJP8QAD_UARTSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b082      	sub	sp, #8
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 f805 	bl	80058c4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80058ba:	4603      	mov	r3, r0
 80058bc:	4618      	mov	r0, r3
 80058be:	3708      	adds	r7, #8
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <_ZSt12__get_helperILj0EP8QAD_UARTJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f805 	bl	80058dc <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <_ZNSt11_Tuple_implILj0EJP8QAD_UARTSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f000 f805 	bl	80058f6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>
 80058ec:	4603      	mov	r3, r0
 80058ee:	4618      	mov	r0, r3
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <_ZNSt10_Head_baseILj0EP8QAD_UARTLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80058f6:	b480      	push	{r7}
 80058f8:	b083      	sub	sp, #12
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4618      	mov	r0, r3
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <_ZN14QAT_FIFOBuffer5emptyEv>:
//QAT_FIFOBuffer::empty
//QAT_FIFOBuffer Data Method
//
//Used to check if FIFO buffer is empty, or if it has data pending
//Returns a member of QAT_FIFOState enum as defined in QAT_FIFO.hpp
QAT_FIFOState QAT_FIFOBuffer::empty(void) {
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	return (m_uReadIdx == m_uWriteIdx) ? QAT_FIFOState_Empty : QAT_FIFOState_NotEmpty;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	88da      	ldrh	r2, [r3, #6]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	891b      	ldrh	r3, [r3, #8]
 800591c:	429a      	cmp	r2, r3
 800591e:	d101      	bne.n	8005924 <_ZN14QAT_FIFOBuffer5emptyEv+0x18>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <_ZN14QAT_FIFOBuffer5emptyEv+0x1a>
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr

08005932 <_ZN14QAT_FIFOBuffer4pushEh>:
//QAT_FIFOBuffer::push
//QAT_FIFOBuffer Data Method
//
//Used to push a byte of data into the FIFO buffer
//uData - The byte to be pushed into the buffer
void QAT_FIFOBuffer::push(uint8_t uData) {
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	460b      	mov	r3, r1
 800593c:	70fb      	strb	r3, [r7, #3]
	m_pBuffer[m_uWriteIdx] = uData;
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	891b      	ldrh	r3, [r3, #8]
 8005944:	4619      	mov	r1, r3
 8005946:	4610      	mov	r0, r2
 8005948:	f000 f847 	bl	80059da <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 800594c:	4602      	mov	r2, r0
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	7013      	strb	r3, [r2, #0]
	if (m_uWriteIdx <= (m_uSize-1))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	889a      	ldrh	r2, [r3, #4]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	891b      	ldrh	r3, [r3, #8]
 800595a:	429a      	cmp	r2, r3
 800595c:	d906      	bls.n	800596c <_ZN14QAT_FIFOBuffer4pushEh+0x3a>
		m_uWriteIdx++; else
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	891b      	ldrh	r3, [r3, #8]
 8005962:	3301      	adds	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	811a      	strh	r2, [r3, #8]
		m_uWriteIdx = 0;
}
 800596a:	e002      	b.n	8005972 <_ZN14QAT_FIFOBuffer4pushEh+0x40>
		m_uWriteIdx = 0;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	811a      	strh	r2, [r3, #8]
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <_ZN14QAT_FIFOBuffer3popEv>:
//QAT_FIFOBuffer::pop
//QAT_FIFOBuffer Data Method
//
//Used to pull a byte of data from the FIFO buffer
//Returns the byte of data pulled from the buffer
uint8_t QAT_FIFOBuffer::pop(void) {
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
	if (!empty()) {
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7ff ffc2 	bl	800590c <_ZN14QAT_FIFOBuffer5emptyEv>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	bf0c      	ite	eq
 800598e:	2301      	moveq	r3, #1
 8005990:	2300      	movne	r3, #0
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <_ZN14QAT_FIFOBuffer3popEv+0x56>
		uint8_t uData = m_pBuffer[m_uReadIdx];
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	88db      	ldrh	r3, [r3, #6]
 800599e:	4619      	mov	r1, r3
 80059a0:	4610      	mov	r0, r2
 80059a2:	f000 f81a 	bl	80059da <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>
 80059a6:	4603      	mov	r3, r0
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	73fb      	strb	r3, [r7, #15]
		if (m_uReadIdx <= (m_uSize-1))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	889a      	ldrh	r2, [r3, #4]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	88db      	ldrh	r3, [r3, #6]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d906      	bls.n	80059c6 <_ZN14QAT_FIFOBuffer3popEv+0x4c>
			m_uReadIdx++; else
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	88db      	ldrh	r3, [r3, #6]
 80059bc:	3301      	adds	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	80da      	strh	r2, [r3, #6]
 80059c4:	e002      	b.n	80059cc <_ZN14QAT_FIFOBuffer3popEv+0x52>
			m_uReadIdx = 0;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	80da      	strh	r2, [r3, #6]
		return uData;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
 80059ce:	e000      	b.n	80059d2 <_ZN14QAT_FIFOBuffer3popEv+0x58>
	}
	return 0;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EEixEj>:
      operator[](size_t __i) const
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	6039      	str	r1, [r7, #0]
	return get()[__i];
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f807 	bl	80059f8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>
 80059ea:	4602      	mov	r2, r0
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	4413      	add	r3, r2
      }
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <_ZNKSt10unique_ptrIA_hSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f805 	bl	8005a12 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZNKSt15__uniq_ptr_implIhSt14default_deleteIA_hEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f806 	bl	8005a2e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8005a22:	4603      	mov	r3, r0
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}

08005a2e <_ZSt3getILj0EJPhSt14default_deleteIA_hEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b082      	sub	sp, #8
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f000 f805 	bl	8005a48 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <_ZSt12__get_helperILj0EPhJSt14default_deleteIA_hEEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f805 	bl	8005a60 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>
 8005a56:	4603      	mov	r3, r0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <_ZNSt11_Tuple_implILj0EJPhSt14default_deleteIA_hEEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f805 	bl	8005a7a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>
 8005a70:	4603      	mov	r3, r0
 8005a72:	4618      	mov	r0, r3
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}

08005a7a <_ZNSt10_Head_baseILj0EPhLb0EE7_M_headERKS1_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <__cxa_guard_acquire>:
 8005a90:	6803      	ldr	r3, [r0, #0]
 8005a92:	07db      	lsls	r3, r3, #31
 8005a94:	d406      	bmi.n	8005aa4 <__cxa_guard_acquire+0x14>
 8005a96:	7843      	ldrb	r3, [r0, #1]
 8005a98:	b103      	cbz	r3, 8005a9c <__cxa_guard_acquire+0xc>
 8005a9a:	deff      	udf	#255	; 0xff
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	7043      	strb	r3, [r0, #1]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	4770      	bx	lr
 8005aa4:	2000      	movs	r0, #0
 8005aa6:	4770      	bx	lr

08005aa8 <__cxa_guard_release>:
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	6003      	str	r3, [r0, #0]
 8005aac:	4770      	bx	lr

08005aae <_Znwj>:
 8005aae:	2801      	cmp	r0, #1
 8005ab0:	bf38      	it	cc
 8005ab2:	2001      	movcc	r0, #1
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 f85b 	bl	8005b74 <malloc>
 8005abe:	b930      	cbnz	r0, 8005ace <_Znwj+0x20>
 8005ac0:	f000 f81e 	bl	8005b00 <_ZSt15get_new_handlerv>
 8005ac4:	b908      	cbnz	r0, 8005aca <_Znwj+0x1c>
 8005ac6:	f000 f823 	bl	8005b10 <abort>
 8005aca:	4780      	blx	r0
 8005acc:	e7f4      	b.n	8005ab8 <_Znwj+0xa>
 8005ace:	bd10      	pop	{r4, pc}

08005ad0 <_Znaj>:
 8005ad0:	f7ff bfed 	b.w	8005aae <_Znwj>

08005ad4 <__cxa_pure_virtual>:
 8005ad4:	b508      	push	{r3, lr}
 8005ad6:	f000 f80d 	bl	8005af4 <_ZSt9terminatev>

08005ada <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005ada:	b508      	push	{r3, lr}
 8005adc:	4780      	blx	r0
 8005ade:	f000 f817 	bl	8005b10 <abort>
	...

08005ae4 <_ZSt13get_terminatev>:
 8005ae4:	4b02      	ldr	r3, [pc, #8]	; (8005af0 <_ZSt13get_terminatev+0xc>)
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	f3bf 8f5b 	dmb	ish
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	2000000c 	.word	0x2000000c

08005af4 <_ZSt9terminatev>:
 8005af4:	b508      	push	{r3, lr}
 8005af6:	f7ff fff5 	bl	8005ae4 <_ZSt13get_terminatev>
 8005afa:	f7ff ffee 	bl	8005ada <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08005b00 <_ZSt15get_new_handlerv>:
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <_ZSt15get_new_handlerv+0xc>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	f3bf 8f5b 	dmb	ish
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000178 	.word	0x20000178

08005b10 <abort>:
 8005b10:	b508      	push	{r3, lr}
 8005b12:	2006      	movs	r0, #6
 8005b14:	f000 f8de 	bl	8005cd4 <raise>
 8005b18:	2001      	movs	r0, #1
 8005b1a:	f7fb fc81 	bl	8001420 <_exit>
	...

08005b20 <__errno>:
 8005b20:	4b01      	ldr	r3, [pc, #4]	; (8005b28 <__errno+0x8>)
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	20000010 	.word	0x20000010

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4d0d      	ldr	r5, [pc, #52]	; (8005b64 <__libc_init_array+0x38>)
 8005b30:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b32:	1b64      	subs	r4, r4, r5
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	2600      	movs	r6, #0
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	4d0b      	ldr	r5, [pc, #44]	; (8005b6c <__libc_init_array+0x40>)
 8005b3e:	4c0c      	ldr	r4, [pc, #48]	; (8005b70 <__libc_init_array+0x44>)
 8005b40:	f000 f8f2 	bl	8005d28 <_init>
 8005b44:	1b64      	subs	r4, r4, r5
 8005b46:	10a4      	asrs	r4, r4, #2
 8005b48:	2600      	movs	r6, #0
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08005eb0 	.word	0x08005eb0
 8005b68:	08005eb0 	.word	0x08005eb0
 8005b6c:	08005eb0 	.word	0x08005eb0
 8005b70:	08005eb4 	.word	0x08005eb4

08005b74 <malloc>:
 8005b74:	4b02      	ldr	r3, [pc, #8]	; (8005b80 <malloc+0xc>)
 8005b76:	4601      	mov	r1, r0
 8005b78:	6818      	ldr	r0, [r3, #0]
 8005b7a:	f000 b819 	b.w	8005bb0 <_malloc_r>
 8005b7e:	bf00      	nop
 8005b80:	20000010 	.word	0x20000010

08005b84 <memcpy>:
 8005b84:	440a      	add	r2, r1
 8005b86:	4291      	cmp	r1, r2
 8005b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b8c:	d100      	bne.n	8005b90 <memcpy+0xc>
 8005b8e:	4770      	bx	lr
 8005b90:	b510      	push	{r4, lr}
 8005b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b9a:	4291      	cmp	r1, r2
 8005b9c:	d1f9      	bne.n	8005b92 <memcpy+0xe>
 8005b9e:	bd10      	pop	{r4, pc}

08005ba0 <memset>:
 8005ba0:	4402      	add	r2, r0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d100      	bne.n	8005baa <memset+0xa>
 8005ba8:	4770      	bx	lr
 8005baa:	f803 1b01 	strb.w	r1, [r3], #1
 8005bae:	e7f9      	b.n	8005ba4 <memset+0x4>

08005bb0 <_malloc_r>:
 8005bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb2:	1ccd      	adds	r5, r1, #3
 8005bb4:	f025 0503 	bic.w	r5, r5, #3
 8005bb8:	3508      	adds	r5, #8
 8005bba:	2d0c      	cmp	r5, #12
 8005bbc:	bf38      	it	cc
 8005bbe:	250c      	movcc	r5, #12
 8005bc0:	2d00      	cmp	r5, #0
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	db01      	blt.n	8005bca <_malloc_r+0x1a>
 8005bc6:	42a9      	cmp	r1, r5
 8005bc8:	d903      	bls.n	8005bd2 <_malloc_r+0x22>
 8005bca:	230c      	movs	r3, #12
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	2000      	movs	r0, #0
 8005bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd2:	f000 f89b 	bl	8005d0c <__malloc_lock>
 8005bd6:	4921      	ldr	r1, [pc, #132]	; (8005c5c <_malloc_r+0xac>)
 8005bd8:	680a      	ldr	r2, [r1, #0]
 8005bda:	4614      	mov	r4, r2
 8005bdc:	b99c      	cbnz	r4, 8005c06 <_malloc_r+0x56>
 8005bde:	4f20      	ldr	r7, [pc, #128]	; (8005c60 <_malloc_r+0xb0>)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	b923      	cbnz	r3, 8005bee <_malloc_r+0x3e>
 8005be4:	4621      	mov	r1, r4
 8005be6:	4630      	mov	r0, r6
 8005be8:	f000 f83c 	bl	8005c64 <_sbrk_r>
 8005bec:	6038      	str	r0, [r7, #0]
 8005bee:	4629      	mov	r1, r5
 8005bf0:	4630      	mov	r0, r6
 8005bf2:	f000 f837 	bl	8005c64 <_sbrk_r>
 8005bf6:	1c43      	adds	r3, r0, #1
 8005bf8:	d123      	bne.n	8005c42 <_malloc_r+0x92>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	6033      	str	r3, [r6, #0]
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f000 f88a 	bl	8005d18 <__malloc_unlock>
 8005c04:	e7e3      	b.n	8005bce <_malloc_r+0x1e>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	1b5b      	subs	r3, r3, r5
 8005c0a:	d417      	bmi.n	8005c3c <_malloc_r+0x8c>
 8005c0c:	2b0b      	cmp	r3, #11
 8005c0e:	d903      	bls.n	8005c18 <_malloc_r+0x68>
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	441c      	add	r4, r3
 8005c14:	6025      	str	r5, [r4, #0]
 8005c16:	e004      	b.n	8005c22 <_malloc_r+0x72>
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	42a2      	cmp	r2, r4
 8005c1c:	bf0c      	ite	eq
 8005c1e:	600b      	streq	r3, [r1, #0]
 8005c20:	6053      	strne	r3, [r2, #4]
 8005c22:	4630      	mov	r0, r6
 8005c24:	f000 f878 	bl	8005d18 <__malloc_unlock>
 8005c28:	f104 000b 	add.w	r0, r4, #11
 8005c2c:	1d23      	adds	r3, r4, #4
 8005c2e:	f020 0007 	bic.w	r0, r0, #7
 8005c32:	1ac2      	subs	r2, r0, r3
 8005c34:	d0cc      	beq.n	8005bd0 <_malloc_r+0x20>
 8005c36:	1a1b      	subs	r3, r3, r0
 8005c38:	50a3      	str	r3, [r4, r2]
 8005c3a:	e7c9      	b.n	8005bd0 <_malloc_r+0x20>
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	6864      	ldr	r4, [r4, #4]
 8005c40:	e7cc      	b.n	8005bdc <_malloc_r+0x2c>
 8005c42:	1cc4      	adds	r4, r0, #3
 8005c44:	f024 0403 	bic.w	r4, r4, #3
 8005c48:	42a0      	cmp	r0, r4
 8005c4a:	d0e3      	beq.n	8005c14 <_malloc_r+0x64>
 8005c4c:	1a21      	subs	r1, r4, r0
 8005c4e:	4630      	mov	r0, r6
 8005c50:	f000 f808 	bl	8005c64 <_sbrk_r>
 8005c54:	3001      	adds	r0, #1
 8005c56:	d1dd      	bne.n	8005c14 <_malloc_r+0x64>
 8005c58:	e7cf      	b.n	8005bfa <_malloc_r+0x4a>
 8005c5a:	bf00      	nop
 8005c5c:	2000017c 	.word	0x2000017c
 8005c60:	20000180 	.word	0x20000180

08005c64 <_sbrk_r>:
 8005c64:	b538      	push	{r3, r4, r5, lr}
 8005c66:	4d06      	ldr	r5, [pc, #24]	; (8005c80 <_sbrk_r+0x1c>)
 8005c68:	2300      	movs	r3, #0
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	602b      	str	r3, [r5, #0]
 8005c70:	f7fb fbe0 	bl	8001434 <_sbrk>
 8005c74:	1c43      	adds	r3, r0, #1
 8005c76:	d102      	bne.n	8005c7e <_sbrk_r+0x1a>
 8005c78:	682b      	ldr	r3, [r5, #0]
 8005c7a:	b103      	cbz	r3, 8005c7e <_sbrk_r+0x1a>
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	20000188 	.word	0x20000188

08005c84 <_raise_r>:
 8005c84:	291f      	cmp	r1, #31
 8005c86:	b538      	push	{r3, r4, r5, lr}
 8005c88:	4604      	mov	r4, r0
 8005c8a:	460d      	mov	r5, r1
 8005c8c:	d904      	bls.n	8005c98 <_raise_r+0x14>
 8005c8e:	2316      	movs	r3, #22
 8005c90:	6003      	str	r3, [r0, #0]
 8005c92:	f04f 30ff 	mov.w	r0, #4294967295
 8005c96:	bd38      	pop	{r3, r4, r5, pc}
 8005c98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005c9a:	b112      	cbz	r2, 8005ca2 <_raise_r+0x1e>
 8005c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ca0:	b94b      	cbnz	r3, 8005cb6 <_raise_r+0x32>
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 f830 	bl	8005d08 <_getpid_r>
 8005ca8:	462a      	mov	r2, r5
 8005caa:	4601      	mov	r1, r0
 8005cac:	4620      	mov	r0, r4
 8005cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cb2:	f000 b817 	b.w	8005ce4 <_kill_r>
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d00a      	beq.n	8005cd0 <_raise_r+0x4c>
 8005cba:	1c59      	adds	r1, r3, #1
 8005cbc:	d103      	bne.n	8005cc6 <_raise_r+0x42>
 8005cbe:	2316      	movs	r3, #22
 8005cc0:	6003      	str	r3, [r0, #0]
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	e7e7      	b.n	8005c96 <_raise_r+0x12>
 8005cc6:	2400      	movs	r4, #0
 8005cc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ccc:	4628      	mov	r0, r5
 8005cce:	4798      	blx	r3
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	e7e0      	b.n	8005c96 <_raise_r+0x12>

08005cd4 <raise>:
 8005cd4:	4b02      	ldr	r3, [pc, #8]	; (8005ce0 <raise+0xc>)
 8005cd6:	4601      	mov	r1, r0
 8005cd8:	6818      	ldr	r0, [r3, #0]
 8005cda:	f7ff bfd3 	b.w	8005c84 <_raise_r>
 8005cde:	bf00      	nop
 8005ce0:	20000010 	.word	0x20000010

08005ce4 <_kill_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4d07      	ldr	r5, [pc, #28]	; (8005d04 <_kill_r+0x20>)
 8005ce8:	2300      	movs	r3, #0
 8005cea:	4604      	mov	r4, r0
 8005cec:	4608      	mov	r0, r1
 8005cee:	4611      	mov	r1, r2
 8005cf0:	602b      	str	r3, [r5, #0]
 8005cf2:	f7fb fb85 	bl	8001400 <_kill>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	d102      	bne.n	8005d00 <_kill_r+0x1c>
 8005cfa:	682b      	ldr	r3, [r5, #0]
 8005cfc:	b103      	cbz	r3, 8005d00 <_kill_r+0x1c>
 8005cfe:	6023      	str	r3, [r4, #0]
 8005d00:	bd38      	pop	{r3, r4, r5, pc}
 8005d02:	bf00      	nop
 8005d04:	20000188 	.word	0x20000188

08005d08 <_getpid_r>:
 8005d08:	f7fb bb72 	b.w	80013f0 <_getpid>

08005d0c <__malloc_lock>:
 8005d0c:	4801      	ldr	r0, [pc, #4]	; (8005d14 <__malloc_lock+0x8>)
 8005d0e:	f000 b809 	b.w	8005d24 <__retarget_lock_acquire_recursive>
 8005d12:	bf00      	nop
 8005d14:	20000190 	.word	0x20000190

08005d18 <__malloc_unlock>:
 8005d18:	4801      	ldr	r0, [pc, #4]	; (8005d20 <__malloc_unlock+0x8>)
 8005d1a:	f000 b804 	b.w	8005d26 <__retarget_lock_release_recursive>
 8005d1e:	bf00      	nop
 8005d20:	20000190 	.word	0x20000190

08005d24 <__retarget_lock_acquire_recursive>:
 8005d24:	4770      	bx	lr

08005d26 <__retarget_lock_release_recursive>:
 8005d26:	4770      	bx	lr

08005d28 <_init>:
 8005d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2a:	bf00      	nop
 8005d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d2e:	bc08      	pop	{r3}
 8005d30:	469e      	mov	lr, r3
 8005d32:	4770      	bx	lr

08005d34 <_fini>:
 8005d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d36:	bf00      	nop
 8005d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d3a:	bc08      	pop	{r3}
 8005d3c:	469e      	mov	lr, r3
 8005d3e:	4770      	bx	lr
